package com.demo.optik.utils;

import static io.appium.java_client.touch.LongPressOptions.longPressOptions;
import static io.appium.java_client.touch.TapOptions.tapOptions;
import static io.appium.java_client.touch.WaitOptions.waitOptions;
import static io.appium.java_client.touch.offset.ElementOption.element;
import static io.appium.java_client.touch.offset.PointOption.point;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalDate;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.Point;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.html5.Location;
import org.openqa.selenium.remote.Augmenter;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.w3c.dom.Document;

import com.google.common.base.Function;
import com.demo.CHIL.CHILUtil;
import com.demo.account.information.DeviceInformation;
import com.demo.account.information.LocationInformation;
import com.demo.commons.coreframework.FrameworkGlobalVariables;
import com.demo.commons.coreframework.FrameworkUtils;
import com.demo.commons.coreframework.Keyword;
import com.demo.commons.coreframework.SuiteConstants;
import com.demo.commons.coreframework.SuiteConstants.SuiteConstantTypes;
import com.demo.commons.coreframework.TestCaseInputs;
import com.demo.commons.coreframework.TestCases;
import com.demo.commons.deviceCloudProviders.PCloudyExecutionDesiredCapability.PCloudyDeviceInformation;
import com.demo.commons.mobile.CustomAndroidDriver;
import com.demo.commons.mobile.CustomDriver;
import com.demo.commons.mobile.CustomIOSDriver;
import com.demo.commons.mobile.Mobile;
import com.demo.commons.mobile.MobileObject;
import com.demo.commons.mobile.MobileScreens;
import com.demo.commons.mobile.MobileUtils;
import com.demo.commons.perfecto.PerfectoLabUtils;
import com.demo.commons.report.FailType;
import com.demo.commons.report.Reporting;
import com.demo.jasper.utils.JasperSchedulingUtils;
import com.demo.keywords.CHIL.ChangePasswordThroughCHIL;
import com.demo.keywords.optik.common.MobileUtilsLocal;
import com.demo.optik.das.utils.DASZwaveUtils;
import com.demo.optik.das.utils.DashboardUtils;
import com.demo.optik.dhw.utils.DHWUtils;
import com.demo.screens.ActivityHistoryScreen;
import com.demo.screens.ActivityLogsScreen;
import com.demo.screens.AddNewDeviceScreen;
import com.demo.screens.AddUserScreen;
import com.demo.screens.AdhocScreen;
import com.demo.screens.AppSettingScreen;
import com.demo.screens.Camera;
import com.demo.screens.CameraConfiguration;
import com.demo.screens.CameraMode;
import com.demo.screens.CameraMotionDetection;
import com.demo.screens.CameraSettings;
import com.demo.screens.CameraSolutionCard;
import com.demo.screens.CameraSoundDetection;
import com.demo.screens.CameraVideoQuality;
import com.demo.screens.ChangeCountryScreen;
import com.demo.screens.ChangePasswordScreen;
import com.demo.screens.CoachMarks;
import com.demo.screens.CreateAccountScreen;
import com.demo.screens.CyberSecurityPopUpAndScreen;
import com.demo.screens.D6T6;
import com.demo.screens.DHW;
import com.demo.screens.Dashboard;
import com.demo.screens.EULAScreen;
import com.demo.screens.EditAddressLocation;
import com.demo.screens.FanSpeedInfo;
import com.demo.screens.FeedBackScreen;
import com.demo.screens.FilterReminderScreen;
import com.demo.screens.ForgotPasswordScreen;
import com.demo.screens.GeoFenceSettingsScreen;
import com.demo.screens.GeofenceCenterScreen;
import com.demo.screens.HoldUntilTimePickerScreen;
import com.demo.screens.LocationDetailsScreen;
import com.demo.screens.LoginScreen;
import com.demo.screens.ManageAlertsCamera;
import com.demo.screens.ManageAlertsScreen;
import com.demo.screens.MyAccountScreen;
import com.demo.screens.NightVision;
import com.demo.screens.OSPopUps;
import com.demo.screens.PrimaryCard;
import com.demo.screens.PriorityScreen;
import com.demo.screens.Schedule;
import com.demo.screens.SecondaryCardSettings;
import com.demo.screens.SecretMenu;
import com.demo.screens.SecuritySolutionCardScreen;
import com.demo.screens.SensorStatusScreen;
import com.demo.screens.SleepBrightnessModeScreen;
import com.demo.screens.SoundScreen;
import com.demo.screens.SystemMode;
import com.demo.screens.TccLoginScreen;
import com.demo.screens.ThermostatConfigurationScreen;
import com.demo.screens.ThermostatSensorSettingScreen;
import com.demo.screens.ThermostatSettingsScreen;
import com.demo.screens.VacationSettingScreen;
import com.demo.screens.VacationThermoStatScreen;
import com.demo.screens.WLDLeakDetectorSettings;
import com.demo.screens.WLDPrimaryCard;
import com.demo.screens.WLDScreen;
import com.demo.screens.WeatherScreen;
import com.demo.screens.ZwaveScreen;

import io.appium.java_client.MobileBy;
import io.appium.java_client.MobileElement;
import io.appium.java_client.TouchAction;
import io.appium.java_client.android.Activity;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.android.AndroidKeyCode;
import net.htmlparser.jericho.Source;

public class optikUtils {


	public static String oldPassword="";

	/**
	 * <h1>Take Screenshot</h1>
	 * <p>
	 * The takeScreenShot method takes a screen shot on the device and stores it in
	 * the path given through the the parameter
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param path
	 *            Path to where the screen shot has to be saved
	 * @param driver
	 *            The driver instantiated to run the test case
	 * @return String File name of the screen shot
	 *
	 *         Modified On: 21/02/2018 by Surendar
	 */
	public static String takeScreenShot(String path, WebDriver driver) {
		String scrName = "#";
		if (driver == null) {
			return scrName;
		} else {
			try {
				File scrSht = ((TakesScreenshot) new Augmenter().augment(driver))
						.getScreenshotAs(OutputType.FILE);
				String temp = scrSht.getName();

				File scrFolder = new File(path);

				FileUtils.copyFileToDirectory(scrSht, scrFolder);
				scrName = temp;
			} catch (Exception e) {
				scrName = scrName + "Error : " + e.getCause();
			}
		}
		return scrName;
	}


	public static void clickOnHomeButton(TestCases testCase) {
		CustomDriver driver = testCase.getMobileDriver();
		((AndroidDriver) driver).pressKeyCode(AndroidKeyCode.HOME);
	}

	public static void changeBluetoothSettings(TestCases testCase, TestCaseInputs inputs, String status) {
		boolean flag;
		if (MobileUtils.isRunningOnAndroid(testCase)) {
			Activity activity = new Activity("com.android.settings",
					"com.android.settings.Settings");
			((AndroidDriver<MobileElement>) testCase.getMobileDriver()).startActivity(activity);
			WebElement elem = testCase.getMobileDriver().scrollTo("Bluetooth");
			elem = ((AndroidDriver<MobileElement>) testCase.getMobileDriver())
					.findElement(By.xpath("//android.widget.TextView[@text='Bluetooth']"));
			if (elem != null) {
				elem.click();
			}
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error - " + e.getMessage());
				e.printStackTrace();
			}
			elem = ((AndroidDriver<MobileElement>) testCase.getMobileDriver())
					.findElement(By.id("com.android.settings:id/switch_widget"));
			if (elem != null) {
				if (status.equalsIgnoreCase("On")) {
					if (elem.getText().equalsIgnoreCase("Off")) {
						elem.click();
						Keyword.ReportStep_Pass(testCase, "Bluetooth toggle is on");
						elem = ((AndroidDriver<MobileElement>) testCase.getMobileDriver())
								.findElement(By.xpath("//android.widget.Button[@text='AGREE']"));
						if (elem != null) {
							elem.click();
							Keyword.ReportStep_Pass(testCase, "Bluetooth services is turned on");
						}
					} else {
						Keyword.ReportStep_Pass(testCase, "Bluetooth services is already on");
					}
				} else if (status.equalsIgnoreCase("Off")) {
					if (elem.getText().equalsIgnoreCase("On")) {
						elem.click();
						inputs.setInputValue(GlobalVariables.MOBILE_LOCATION_OFF, "true");
						Keyword.ReportStep_Pass(testCase, "Bluetooth services is turned off");
					} else {
						inputs.setInputValue(GlobalVariables.MOBILE_LOCATION_OFF, "true");
						Keyword.ReportStep_Pass(testCase, "Bluetooth services is already off");
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Bluetooth services switch");
			}
			try {
				Thread.sleep(7000);
			} catch (InterruptedException e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error - " + e.getMessage());
				e.printStackTrace();
			}
		} else {
			boolean success = false;
			if (!MobileUtils.launchSettingsAppOnIOS(testCase)) {
				flag = false;
			} else {
				Dimension dimension = testCase.getMobileDriver().manage().window().getSize();
				TouchAction action = new TouchAction(testCase.getMobileDriver());
				for (int i = 0; i < 5; ++i) {
					if (success) {
						break;
					}
					try {
						action.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5)))
						.moveTo(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * -.2))).release().perform();

						scrollToElementUsingAttributeSubStringValueIOS(testCase, "label", "Privacy");

					}catch (Exception e) {
					}

					FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(
							testCase.getMobileDriver());
					fWait.pollingEvery(Duration.ofSeconds(5));
					fWait.withTimeout(Duration.ofSeconds(5));

					try {
						WebElement elem = fWait.until(
								ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@label='Privacy']")));
						if (elem != null) {
							elem.click();
							success = true;
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Scroll to Privacy : Privacy option not found");
						}
					} catch (TimeoutException e) {
						// Retry again
					}
				}

				if (MobileUtils.isMobElementExists("name", "Bluetooth Services", testCase, 5)) {
					if (!MobileUtils.clickOnElement(testCase, "name", "Bluetooth Services")) {
						flag = false;
					} else {
						List<WebElement> locServ = MobileUtils.getMobElements(testCase, "xpath",
								"//*[@name='Bluetooth Services']");
						WebElement toggleSwitch = null;
						toggleSwitch=locServ.get(0);
						if (toggleSwitch != null) {
							if (status.equalsIgnoreCase("off")) {
								if (toggleSwitch.getAttribute("value").equalsIgnoreCase("1") || toggleSwitch.getAttribute("value").equalsIgnoreCase("On")) {
									toggleSwitch.click();
									if (MobileUtils.isMobElementExists("name", "Turn Off", testCase, 5)) {
										if (!MobileUtils.clickOnElement(testCase, "name", "Turn Off")) {
											flag = false;
										} else {
											inputs.setInputValue(GlobalVariables.MOBILE_LOCATION_OFF, "true");
											Keyword.ReportStep_Pass(testCase, "Turned off Location Services");
										}
									}
								} else {
									inputs.setInputValue(GlobalVariables.MOBILE_LOCATION_OFF, "true");
									Keyword.ReportStep_Pass(testCase, "Location Services is already turned off");
								}
							} else {
								if (toggleSwitch.getAttribute("value").equalsIgnoreCase("0") || toggleSwitch.getAttribute("value").equalsIgnoreCase("Off")) {
									toggleSwitch.click();
									Keyword.ReportStep_Pass(testCase, "Turned on Location Services");
								} else {
									Keyword.ReportStep_Pass(testCase, "Location Services is already turned on");
								}
							}

							if (MobileUtils.isMobElementExists("name", "demo", testCase, 5)) {
								if (!MobileUtils.clickOnElement(testCase, "name", "demo")) {
									flag = false;
								}
							}
							if (MobileUtils.isMobElementExists("name", "Always", testCase, 5)) {
								if (!MobileUtils.clickOnElement(testCase, "name", "Always")) {
									flag = false;
								}
							}


						}
						else {
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed to locate the Location Services switch");
						}
					}
				}
				MobileUtils.closeSettingsAppOnIOS(testCase);
				LoginScreen ls = new LoginScreen(testCase);
				ls.isLoginButtonVisible(20);
				OSPopUps os = new OSPopUps(testCase);
				if(os.isAlwaysAllowButtonVisible(5))
				{
					os.clickOnAlwaysAllowButton();
				}
			}
		}
	}

	/**
	 * <h1>Get Location Information</h1>
	 * <p>
	 * The getLocationInformation method gets location details stored in CHIL of the
	 * location name provided to the test case.
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase
	 * @param inputs
	 *            Instance of the TestCaseInputs class used to pass inputs to the
	 *            testCase instance
	 * @return JSONObject Location details of the location name
	 */
	public static JSONObject getLocationInformation(TestCases testCase, TestCaseInputs inputs) {
		JSONObject jsonObject = null;
		try (CHILUtil chUtil = new CHILUtil(inputs)) {

			if (chUtil.getConnection()) {
				long locationID = chUtil.getLocationID(inputs.getInputValue("LOCATION1_NAME"));

				if (locationID == -1) {
					return jsonObject;
				}

				if (chUtil.isConnected()) {
					String chilURL = getCHILURL(testCase, inputs);
					String url = chilURL + "api/v3/locations/" + locationID;
					HttpURLConnection connection = chUtil.doGetRequest(url);

					try {

						if (connection != null) {

							BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));

							String inputLine;
							StringBuffer html = new StringBuffer();

							while (!in.ready()) {
							}

							while ((inputLine = in.readLine()) != null) {
								html.append(inputLine);
							}

							in.close();

							jsonObject = new JSONObject(html.toString().trim());

						} else {
							Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FRAMEWORK_CONFIGURATION,
									"Get Location Information : Location not found by name - "
											+ inputs.getInputValue("LOCATION1_NAME"));
						}

					} catch (IOException e) {
						Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FRAMEWORK_CONFIGURATION,
								"Get StatLocation Information  : Error occurred - " + e.getMessage());
						jsonObject = null;
					}
				}

			} else {
				Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
						"Get Location Information  : Unable to connect to CHIL.");
			}

		} catch (Exception e) {

			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Get Location Information  : Unable to get location. Error occurred - " + e.getMessage());
			jsonObject = null;
		}

		return jsonObject;
	}

	/**
	 * <h1>Get Device Information</h1>
	 * <p>
	 * The getDeviceInformation method gets device details stored in CHIL of the
	 * device name and location name provided to the test case.
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase
	 * @param inputs
	 *            Instance of the TestCaseInputs class used to pass inputs to the
	 *            testCase instance
	 * @return JSONObject Device details of the device name and location name
	 */
	public static JSONObject getDeviceInformation(TestCases testCase, TestCaseInputs inputs) {
		JSONObject jsonObject = null;

		try (CHILUtil chUtil = new CHILUtil(inputs)) {

			if (chUtil.getConnection()) {
				long locationID = chUtil.getLocationID(inputs.getInputValue("LOCATION1_NAME"));

				if (locationID == -1) {
					return jsonObject;
				}

				if (chUtil.isConnected()) {
					String chilURL = getCHILURL(testCase, inputs);
					String url = chilURL + "api/v3/locations/" + locationID;

					HttpURLConnection connection = chUtil.doGetRequest(url);

					try {

						if (connection != null) {

							BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));

							String inputLine;
							StringBuffer html = new StringBuffer();

							while (!in.ready()) {
							}

							while ((inputLine = in.readLine()) != null) {
								html.append(inputLine);
							}

							in.close();

							JSONObject jsonObj = new JSONObject(html.toString().trim());

							JSONArray array = (JSONArray) jsonObj.get("devices");

							JSONObject tempJSONObject = null;

							boolean elementFound = false;

							for (int counter = 0; counter < array.length(); counter++) {
								tempJSONObject = array.getJSONObject(counter);

								if (inputs.getInputValue("LOCATION1_DEVICE1_NAME")
										.equalsIgnoreCase(tempJSONObject.getString("userDefinedDeviceName")) || inputs.getInputValue("LOCATION1_NEWDEVICE1_NAME")
										.equalsIgnoreCase(tempJSONObject.getString("userDefinedDeviceName"))) {

									jsonObject = array.getJSONObject(counter);
									elementFound = true;
									break;
								}
							}

							if (elementFound) {
							} else {
								Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FRAMEWORK_CONFIGURATION,
										"Get Stat Information : Stat not found by name - "
												+ inputs.getInputValue("LOCATION1_DEVICE1_NAME"));
							}
						} else {
							Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FRAMEWORK_CONFIGURATION,
									"Get Stat Information : Location not found by name - "
											+ inputs.getInputValue("LOCATION1_NAME"));
						}

					} catch (IOException e) {
						Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FRAMEWORK_CONFIGURATION,
								"Get Stat Information  : Error occurred - " + e.getMessage());
						jsonObject = null;
					}

				} else {
					Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
							"Get Stat Information  : Unable to connect to CHIL.");
				}
			}
		} catch (Exception e) {

//			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
//					"Get Stat Information  : Unable to get information for Stat - "
//							+ inputs.getInputValue("LOCATION1_DEVICE1_NAME") + " at location - "
//							+ inputs.getInputValue("LOCATION1_NAME") + " : Error occurred - " + e.getMessage());
//			jsonObject = null;
		}
		return jsonObject;
	}



	public static JSONObject getNoDeviceInformation(TestCases testCase, TestCaseInputs inputs) {
		JSONObject jsonObject = null;

		try (CHILUtil chUtil = new CHILUtil(inputs)) {

			if (chUtil.getConnection()) {
				long locationID = chUtil.getLocationID(inputs.getInputValue("LOCATION1_NAME"));

				if (locationID == -1) {
					return jsonObject;
				}

				if (chUtil.isConnected()) {
					String chilURL = getCHILURL(testCase, inputs);
					String url = chilURL + "api/v3/locations/" + locationID;

					HttpURLConnection connection = chUtil.doGetRequest(url);

					try {

						if (connection != null) {

							BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));

							String inputLine;
							StringBuffer html = new StringBuffer();

							while (!in.ready()) {
							}

							while ((inputLine = in.readLine()) != null) {
								html.append(inputLine);
							}

							in.close();

							JSONObject jsonObj = new JSONObject(html.toString().trim());

							JSONArray array = (JSONArray) jsonObj.get("devices");

							JSONObject tempJSONObject = null;

							boolean elementFound = false;

							for (int counter = 0; counter < array.length(); counter++) {
								tempJSONObject = array.getJSONObject(counter);

								if (inputs.getInputValue("LOCATION1_DEVICE1_NAME")
										.equalsIgnoreCase(tempJSONObject.getString("userDefinedDeviceName"))) {

									jsonObject = array.getJSONObject(counter);
									elementFound = true;
									break;
								}
							}

							if (!elementFound) {

								Keyword.ReportStep_Pass(testCase,
										"Get Stat Information : Stat not found by name - "
												+ inputs.getInputValue("LOCATION1_DEVICE1_NAME"));

							} else {
								Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FRAMEWORK_CONFIGURATION,
										"Get Stat Information : Stat found by name - "
												+ inputs.getInputValue("LOCATION1_DEVICE1_NAME"));
							}
						} else {
							Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FRAMEWORK_CONFIGURATION,
									"Get Stat Information : Location not found by name - "
											+ inputs.getInputValue("LOCATION1_NAME"));
						}

					} catch (IOException e) {
						Keyword.ReportStep_Pass(testCase,
								"Get Stat Information  : Error occurred - " + e.getMessage());
						jsonObject = null;
					}

				} else {
					Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
							"Get Stat Information  : Unable to connect to CHIL.");
				}
			}
		} catch (Exception e) {

//			Keyword.ReportStep_Pass(testCase,
//					"Get Stat Information  : Unable to get information for Stat - "
//							+ inputs.getInputValue("LOCATION1_DEVICE1_NAME") + " at location - "
//							+ inputs.getInputValue("LOCATION1_NAME") + " : Error occurred - " + e.getMessage());
//			jsonObject = null;
		}

		return jsonObject;
	}


	/**
	 * <h1>Get CHIL Url</h1>
	 * <p>
	 * The getCHILURL method returns the url of the environment provided to the test
	 * case
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase
	 * @param inputs
	 *            Instance of the TestCaseInputs class used to pass inputs to the
	 *            testCase instance
	 * @return String URL of the environment provided to the test case
	 */
	public static String getCHILURL(TestCases testCase, TestCaseInputs inputs) throws Exception {
		String chilURL = " ";
		try {
			String environment = inputs.getInputValue(TestCaseInputs.APP_ENVIRONMENT);
			environment = environment.replaceAll("\\s", "");
			if (environment.equalsIgnoreCase("Production")) {
				chilURL = SuiteConstants.getConstantValue(SuiteConstantTypes.PROJECT_SPECIFIC, "CHIL_URL_PRODUCTION");
			} else if (environment.equalsIgnoreCase("CHILInt(Azure)")||environment.equalsIgnoreCase("Int")) {
				chilURL = SuiteConstants.getConstantValue(SuiteConstantTypes.PROJECT_SPECIFIC, "CHIL_INT");
			} else if (environment.equalsIgnoreCase("ChilDev(Dev2)")) {
				chilURL = SuiteConstants.getConstantValue(SuiteConstantTypes.PROJECT_SPECIFIC, "CHIL_DEV2");
			} else if (environment.equalsIgnoreCase("Stage")) {
				chilURL = SuiteConstants.getConstantValue(SuiteConstantTypes.PROJECT_SPECIFIC, "CHIL_URL_STAGING");
			} else if (environment.equalsIgnoreCase("LoadTesting")) {
				chilURL = SuiteConstants.getConstantValue(SuiteConstantTypes.PROJECT_SPECIFIC, "CHIL_LOAD_TESTING");
			} else if (environment.equalsIgnoreCase("ChilDas(QA)")||environment.equalsIgnoreCase("QA")) {
				chilURL = SuiteConstants.getConstantValue(SuiteConstantTypes.PROJECT_SPECIFIC, "CHIL_DAS_QA");
			} else if (environment.equalsIgnoreCase("ChilDas(Test)")) {
				chilURL = SuiteConstants.getConstantValue(SuiteConstantTypes.PROJECT_SPECIFIC, "CHIL_DAS_TEST");
			} else {
				throw new Exception("Invalid URL");
			}
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return chilURL;
	}
	
	/**
	+	 * <h1>Get EULA From CHAPI</h1>
	+	 * <p>
	+	 * The getEULA method gets EULA details stored in CHIL response of the
	+	 * country and Language provided to the test case.
	+	 * </p>
	+	 *
	+	 * @author Darshan and Pavan 
	+	 * @version 1.0
	+	 * @since 2020-08-18
	+	 * @param testCase
	+	 *            Instance of the TestCases class used to create the testCase
	+	 * @param inputs
	+	 *            Instance of the TestCaseInputs class used to pass inputs to the
	+	 *            testCase instance
	+	 * @return JSONObject Location details of the location name
	+	 */
	
		public static JSONObject getEULA(TestCases testCase, TestCaseInputs inputs) {
			JSONObject jsonObject = null;
			
			
			try (CHILUtil chUtil = new CHILUtil(inputs)) {
	
				if (chUtil.getConnection()) {
				
	
					
					if (chUtil.isConnected()) {
						String chilURL = getCHILURL(testCase, inputs);
						String url = chilURL + "api/v2/EULA/" + inputs.getInputValue(GlobalVariables.country_Language);
						HttpURLConnection connection = chUtil.doGetRequest(url);
	
						try {
	
							if (connection != null) {
	
								BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
	
								String inputLine;
								StringBuffer html = new StringBuffer();
	
								while (!in.ready()) {
								}
	
								while ((inputLine = in.readLine()) != null) {
								html.append(inputLine);
								}
	
								in.close();
	
								jsonObject = new JSONObject(html.toString().trim());
	
						} else {
								Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FRAMEWORK_CONFIGURATION,
										"Get EULA : EULA not found by name - "
												+ inputs.getInputValue(GlobalVariables.country_Language));
						}
	
						} catch (IOException e) {
							Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FRAMEWORK_CONFIGURATION,
									"Get EULA  : Error occurred - " + e.getMessage());
						jsonObject = null;
						}
					}
	
				} else {
					Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
							"Get EULA  : Unable to connect to CHIL.");
				}
	
			} catch (Exception e) {
	
				Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
						"Get EULA  : Unable to EULA Error occurred - " + e.getMessage());
				jsonObject = null;
			}
	
			return jsonObject;
		}

	/**
	 * <h1>Login in to the optik Application</h1>
	 * <p>
	 * The loginTooptikApp method click on the login button post launch/Application
	 * Environment Setup, inputs the email ID and password, and taps on the login
	 * button
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase
	 * @param inputs
	 *            Instance of the TestCaseInputs class used to pass inputs to the
	 *            testCase instance
	 * @return boolean Returns 'true' if all the button clicks and values were set
	 *         properly. Returns 'false' if there was an error on clicking any
	 *         buttons or setting any values
	 * @throws InterruptedException
	 */
	public static boolean loginTooptikApp(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		LoginScreen ls = new LoginScreen(testCase);
		if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
			if (inputs.getInputValue(TestCaseInputs.DEVICE_NAME).contains("iPad")) {
				flag = flag && ls.clickOnLoginButton(inputs);
			}else {
			flag = flag && ls.clickOnLoginButton();
			}
		}
		try {
			Thread.sleep(5000);
		}catch(Exception e) {}
		MobileUtils.clickOnElement(testCase, "XPATH","//*[@resource-id='com.optiktv:id/enter_guest_mode']");
		Keyword.ReportStep_Pass(testCase,
				"Tapped on Guest Mode");
		MobileUtils.clickOnElement(testCase, "XPATH","//*[@text='On Demand']");
		Keyword.ReportStep_Pass(testCase,
				"Tapped on demand and entered movie section");
		//MobileUtils.clickOnElement(testCase, "XPATH","//hierarchy/android.widget.FrameLayout[1]/android.widget.LinearLayout[1]/android.widget.FrameLayout[1]/android.widget.LinearLayout[1]/android.widget.FrameLayout[1]/android.widget.FrameLayout[1]/android.widget.FrameLayout[1]/android.widget.FrameLayout[1]/android.view.ViewGroup[1]/android.widget.FrameLayout[1]/android.widget.FrameLayout[1]/android.widget.ScrollView[1]/android.widget.LinearLayout[1]/android.widget.LinearLayout[1]/android.widget.LinearLayout[3]/android.widget.TextView[1]");
		//Keyword.ReportStep_Pass(testCase, "Tapped on Movies");
		//MobileUtils.clickOnElement(testCase, "XPATH","//*[@text='18A >");
		//Keyword.ReportStep_Pass(testCase,
			//	"Tapped on 18A Movie icon");
		if (MobileUtils.isMobElementExists("XPATH", "//*[@text='18A']", testCase, 10)) {
			Keyword.ReportStep_Pass(testCase,
					"Displayed 18A");
			
		} else {
			
		}
		

//		if (ls.setEmailAddressValue(inputs.getInputValue("USERID").toString())) {
//			if (MobileUtils.isRunningOnAndroid(testCase)) {
//				MobileUtils.hideKeyboard(testCase.getMobileDriver());
//			}
//			Keyword.ReportStep_Pass(testCase,
//					"Login To optik : Email Address set to - " + inputs.getInputValue("USERID"));
//		} else {
//			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
//					"Login To optik : Not able to set Email Address.");
//			flag = false;
//		}
//		if (ls.setPasswordValue(inputs.getInputValue("PASSWORD").toString())) {
//			if (MobileUtils.isRunningOnAndroid(testCase)) {
//				MobileUtils.hideKeyboard(testCase.getMobileDriver());
//			}
//			else
//			{
//				if (!inputs.getInputValue(TestCaseInputs.DEVICE_NAME).contains("iPad")) {
//				ls.clickonOKKey();
//				}
//				if (!ls.isLoginButtonVisible()) {
//					ls.clickOnoptikLogo();
//					}
//			}
//			Keyword.ReportStep_Pass(testCase, "Login To optik : Password set to - " + inputs.getInputValue("PASSWORD"));
//		} else {
//			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
//					"Login To optik : Not able to set Password.");
//			flag = false;
//		}
		if (ls.isLoginButtonVisible()) {

			if (inputs.getInputValue(TestCaseInputs.DEVICE_NAME).contains("iPad")) {
				flag = flag && ls.clickOnLoginButton(inputs);
			}else {
			flag = flag && ls.clickOnLoginButton();
			}
			if (!inputs.getInputValue(TestCaseInputs.DEVICE_NAME).contains("iPad")) {
			ls.clickonOKKey();
			}

		} else {
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
		}
		return flag;
	}

	/**
	 * <h1>Verify If Login Is Successful</h1>
	 * <p>
	 * The verifyLoginSuccessful method verifies the if the user has successfully
	 * logged in by checking the presence of the weather icon on the dash board.
	 * Timeout of locating the weather icon is 2 minutes
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase
	 * @param inputs
	 *            Instance of the TestCaseInputs class used to pass inputs to the
	 *            testCase instance
	 * @return boolean Returns 'true' if weather icon is found. Returns 'false' if
	 *         weather icon is not located.
	 */
	public static boolean verifyLoginSuccessful(TestCases testCase, TestCaseInputs inputs, boolean... closeCoachMarks) {
		 boolean flag = true;
		OSPopUps os = new OSPopUps(testCase);
		CoachMarks cm = new CoachMarks(testCase);
		FeedBackScreen FB=new FeedBackScreen(testCase);
		LoginScreen ls = new LoginScreen(testCase);
		Dashboard d=null;


		if(inputs.isInputAvailable("LANGUAGE"))
		{
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			if (statInfo.getDeviceType().contains("Blackbeard") && MobileUtils.isRunningOnAndroid(testCase)) {
				PrimaryCard pc = new PrimaryCard(testCase);
				if (pc.isTempIncrementButtonAvailable()) {
					pc.ClickOnTempIncrementButton();
					pc.ClickOnTempDecrementButton();
					pc.ClickOnTempIncrementButton();
				}
				if(os.isNextButtonVisible())
				{
					os.clickOnNextButton();
				}
			}
		}


		if(ls.isAllowallthetimeButtonVisible(10))
		{
			ls.clickOnAllowallthetimeButton(5);
		}
		if(!inputs.isRunningOn("Local"))
		{
		if(inputs.isInputAvailable("LANGUAGE"))
		{
			d = new Dashboard(testCase,inputs.getInputValue("LANGUAGE"));
		}
		else
		{
			d = new Dashboard(testCase);
		}

		if(!inputs.isRealDevice() && MobileUtils.isRunningOnAndroid(testCase))
		{
			String language="";
			if(inputs.isInputAvailable("LANGUAGE"))
			{
				language= inputs.getInputValue("LANGUAGE");
				os= new OSPopUps(testCase,language);
			/*	if(os.isAcceptButtonVisible(5))
				{
					os.clickOnAcceptButton();
				}

				else if(os.isAcceptButtonVisible(inputs))
				{
					os.isAcceptButtonClick(inputs);

				}
				else */
					if(os.isAllowButtonVisible(inputs))
				{
					os.isAllowButtonClick(inputs);

				}

			}
			else
			{
				/*if(os.isAcceptButtonVisible(2))
				{
					os.clickOnAcceptButton();
				}
				flag = flag && os.AcceptpopUp();*/
			}

		/*	if(os.isAcceptButtonVisible(2))
			{
				os.clickOnAcceptButton();
			}*/
		}
		if( MobileUtils.isRunningOnAndroid(testCase))
		{
			/*if(os.isIgnoreButtonVisible(2))
			{
				os.clickOnIgnoreButton();
			}*/
			if(os.isAllowButtonVisible())
			{
				os.clickOnAllowButton();
			}
			else if(inputs.isInputAvailable("LANGUAGE"))
			{
				if(os.isAllowButtonVisible(inputs))
				{
					os.isAllowButtonClick(inputs);
				}
			}
		}else{
			if (inputs.getInputValue(TestCaseInputs.DEVICE_NAME).contains("iPad")) {
			if(os.isAllowButtonVisible())
			{
				os.clickOnAllowButton();
			}
			}
			if (!inputs.getInputValue(TestCaseInputs.DEVICE_NAME).contains("iPad")) {
			if(os.isAcceptButtonVisible(2))
			{
				os.clickOnAcceptButton();
			}
			}
		}}

		FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(testCase.getMobileDriver());
		fWait.pollingEvery(Duration.ofSeconds(3));
		fWait.withTimeout(Duration.ofSeconds(20));


		try {
				Boolean isEventReceived = fWait.until(new Function<CustomDriver, Boolean>() {
				@Override
				public Boolean apply(CustomDriver driver) {
					OSPopUps os=null;
					Dashboard d=null;
					if(testCase.getTestCaseInputs().isInputAvailable("LANGUAGE"))
					{
						os = new OSPopUps(testCase,testCase.getTestCaseInputs().getInputValue("LANGUAGE"));
						d = new Dashboard(testCase,testCase.getTestCaseInputs().getInputValue("LANGUAGE"));
					}
					else
					{
						os = new OSPopUps(testCase);
						d = new Dashboard(testCase);
					}

					if (!MobileUtils.isRunningOnAndroid(testCase)) {
						try {
							((CustomIOSDriver) testCase.getMobileDriver()).switchTo().alert().accept();
							return false;
						} catch (Exception e) {

							if(os.isAlwaysAllowButtonVisible(3))
							{
								os.clickOnAlwaysAllowButton();

							}
							if (os.isNotNowButtonVisible(1)) {
								os.clickOnNotNowButton();
							} 
							if(os.isAllowButtonVisible())
							{
								os.clickOnAllowButton();
							}
							else if (cm.isGotitButtonVisible(1)) {
								if (closeCoachMarks.length > 0 && !closeCoachMarks[0]) {
									return true;
								} else {
									return CoachMarkUtils.closeCoachMarks(testCase);
								}

							}

							if(os.isAllowButtonVisible())
							{
								os.clickOnAllowButton();
							}
							if(os.isNextButtonVisible())
							{
								os.clickOnNextButton();
							}
							if(os.isNextButtonVisible())
							{
								os.clickOnNextButton();
							}
							if(os.isNextButtonVisible())
							{
								os.clickOnNextButton();
							}
							if(os.isNextButtonVisible())
							{
								os.clickOnNextButton();
							}
							if(cm.isDoneButtonVisible())
							{
								cm.clickOnDoneButton();
							}

						}
					} else

					{	if (!inputs.isRunningOn("Local"))
						{
						if(os.isSettingButtonVisible(5))
						{
							os.ClickOnSettingsButton();
							try
							{
								Thread.sleep(8000);
							}
							catch(Exception e)
							{

							}
							MobileUtils.pressBackButton(testCase);
						}
						if(os.isAcceptButtonVisible(3))
						{
							os.clickOnAcceptButton();
						}

						if (os.isCloseButtonVisible(2)) {
							os.clickOnCloseButton();
							return false;
						}
					}}
					if(!inputs.isRunningOn("Local"))
					{
					if(os.isDoneButtonVisible())
					{
						os.clickOnDoneButton();
					}
					}
					if(!MobileUtils.isRunningOnAndroid(testCase)) {
						if(os.isIgnoreButtonVisible(3))
						{
							os.clickOnIgnoreButton();
						}
						return d.isGlobalDrawerAddNewVisible(5);
					} else {
						if(!inputs.isRunningOn("Local"))
						{
						if(os.isIgnoreButtonVisible(3))
						{
							os.clickOnIgnoreButton();
						}
						if (!d.isSplashScreenVisible(2) && !d.isProgressBarVisible(2)) {
							if (closeCoachMarks.length > 0 && !closeCoachMarks[0]) {
								return true;
							} else {
								return CoachMarkUtils.closeCoachMarks(testCase);
							}

						} else {
							return false;
						}
					}
						if( MobileUtils.isRunningOnAndroid(testCase))
						{
							if(os.isIgnoreButtonVisible(3))
							{
								os.clickOnIgnoreButton();
							}
						}
					}return false;
				}
			});
			if(!inputs.isRunningOn("Local"))
			{
			if( MobileUtils.isRunningOnAndroid(testCase))
			{/*
				if(os.isIgnoreButtonVisible(3))
				{
					os.clickOnIgnoreButton();
				}
				CoachMarkUtils.closeCoachMarks(testCase);

				if (FB.isFeedbackPopUpVisible()|| FB.isFeedbackPopUpIDVisible()||FB.isFeedbackPopUptextVisible())
				{
					flag = flag && FB.clickonFeedbackCloseButton();
				}
				if( MobileUtils.isRunningOnAndroid(testCase))
				{
					if(os.isIgnoreButtonVisible(3))
					{
						os.clickOnIgnoreButton();
					}
				}

				if(!(d.isAddNewDeviceHeaderDisplayed(3) || d.isGlobalDrawerButtonVisible(3)))
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Login To optik : Unable to navigate to homepage. Could not find notification icon on homepage");
				}

			*/}}


			if (isEventReceived && flag) {
				Keyword.ReportStep_Pass(testCase, "Successfully navigated to Optiktv app flows");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Login To optik : Unable to navigate to homepage. Could not find notification icon on homepage");
			}


		} catch (TimeoutException e) {
//			flag = false;
//			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
//					"Timed out while loading. Wait time : 2 minutes");

		   System.out.println("Do nothing");
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		return flag;
	}


	public static boolean verifyLoginSuccess(TestCases testCase, TestCaseInputs inputs, boolean... closeCoachMarks) {
		 boolean flag = true;
		OSPopUps os = new OSPopUps(testCase);
		CoachMarks cm = new CoachMarks(testCase);
		FeedBackScreen FB=new FeedBackScreen(testCase);

		Dashboard d=null;
		if(inputs.isInputAvailable("LANGUAGE"))
		{
			d = new Dashboard(testCase,inputs.getInputValue("LANGUAGE"));
		}
		else
		{
			d = new Dashboard(testCase);
		}
		if(!inputs.isRealDevice() && MobileUtils.isRunningOnAndroid(testCase))
		{
			String language="";
			if(inputs.isInputAvailable("LANGUAGE"))
			{
				language= inputs.getInputValue("LANGUAGE");
				os= new OSPopUps(testCase,language);
				if(os.isAcceptButtonVisible(5))
				{
					os.clickOnAcceptButton();
				}

				else if(os.isAcceptButtonVisible(inputs))
				{
					os.isAcceptButtonClick(inputs);

				}
				else if(os.isAllowButtonVisible(inputs))
				{
					os.isAllowButtonClick(inputs);

				}

			}
			else
			{
				if(os.isAcceptButtonVisible(5))
				{
					os.clickOnAcceptButton();
				}
				flag = flag && os.AcceptpopUp();
			}

			if(os.isAcceptButtonVisible(5))
			{
				os.clickOnAcceptButton();
			}
		}
		if( MobileUtils.isRunningOnAndroid(testCase))
		{
			if(os.isIgnoreButtonVisible(3))
			{
				os.clickOnIgnoreButton();
			}
			if(os.isAllowButtonVisible())
			{
				os.clickOnAllowButton();
			}
			else if(inputs.isInputAvailable("LANGUAGE"))
			{
				if(os.isAllowButtonVisible(inputs))
				{
					os.isAllowButtonClick(inputs);
				}
			}
		}else{
			if(os.isAcceptButtonVisible(4))
			{
				os.clickOnAcceptButton();
			}
		}

		return flag;
	}
	/**
	 * <h1>Close Application Launch Pop Ups</h1>
	 * <p>
	 * The closeAppLaunchPopups method closes all the application pop ups displayed
	 * on the device post the application launch.
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase
	 * @return boolean Returns 'true' if all the pop ups have been closed
	 *         successfully. Returns 'false' if any of the pop up fails to close
	 */
	public static boolean closeAppLaunchPopups(TestCases testCase) {
		boolean flag = true;
		OSPopUps os = new OSPopUps(testCase);
		LoginScreen ls = new LoginScreen(testCase);
		if (MobileUtils.isRunningOnAndroid(testCase)) {

			if(os.isPreLaunchSkipButtonVisible())
			{
				flag = flag && os.clickOnPreLaunchSkipButton();
			}

			if (os.isAllowButtonVisible(2)) {
				flag = flag && os.clickOnAllowButton();
			}

		} else {
			try {
				FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(testCase.getMobileDriver());
				fWait.pollingEvery(Duration.ofSeconds(2));
				fWait.withTimeout(Duration.ofMinutes(1));



				Boolean isEventReceived = fWait.until(new Function<CustomDriver, Boolean>() {
					@Override
					public Boolean apply(CustomDriver driver) {
						try {
							if(os.isOkButtonVisible())
							{
								os.clickOnOkButton();
							}
							/*if(os.isAlwaysAllowButtonVisible(5))
							{
								os.clickOnAlwaysAllowButton();
							}
							if(os.isIgnoreButtonVisible(3))
							{
								os.clickOnIgnoreButton();
							}
							if(os.isPreLaunchSkipButtonVisible())
							{
								os.clickOnPreLaunchSkipButton();
							}*/
							if (ls.isoptikLogoVisible()) {
								return true;
							}
							if(os.isIgnoreButtonVisible(3))
							{
								os.clickOnIgnoreButton();
								return false;
							}
							/*if (os.isCancelButtonVisible()) {
								os.clickOnCancelButton();
								return false;
							}*/ else {
								((CustomIOSDriver) testCase.getMobileDriver()).switchTo().alert().accept();
								return false;
							}
						} catch (Exception e) {
							return false;
						}
					}
				});
				if (isEventReceived) {
					Keyword.ReportStep_Pass(testCase, "Successfully navigated to Optiktv flows");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Login To optik : Unable to navigate to homepage. Could not find notification icon on homepage");
				}

			} catch (TimeoutException e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Timed out while loading. Wait time : 2 minutes");
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			}
		}
		return flag;
	}


	public static boolean cancellingDeletingPeriods(TestCases testCase, TestCaseInputs inputs,
			String schedulePeriod, int periodCounterToBeDeleted) {
		boolean flag = true;
		WebElement period = null;
		String[] scheduleDays;
		if (inputs.getInputValue(InputVariables.TYPE_OF_TIME_SCHEDULE).contains(InputVariables.WEEKDAY_AND_WEEKEND_SCHEDULE)) {
			scheduleDays = new String[] { "Monday - Friday", "Saturday - Sunday" };
		} else {
			scheduleDays = new String[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday" };
		}
		List<WebElement> scheduleDayHeaders = null;
		int desiredDayIndex = 0, lesserDayIndex = 0, greaterDayIndex = 0;

		Schedule scheduleObject = new Schedule(testCase);

		CustomDriver driver = testCase.getMobileDriver();
		Dimension dimension = driver.manage().window().getSize();
		int height = dimension.getHeight();
		int width = dimension.getWidth();
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

		if (MobileUtils.isRunningOnAndroid(testCase)) {

			if (!(scheduleObject.isSchedulePeriodForAndroidVisible(schedulePeriod))) {
				testCase.getMobileDriver().scrollToExact(schedulePeriod.split("_")[1]);
				while (!(scheduleObject.isSchedulePeriodForAndroidVisible(schedulePeriod))) {
					touchAction.press(point(width / 2, height / 2)).waitAction(waitOptions(MobileUtils.getDuration(2000)))
					.moveTo(point(width / 2, 82)).release();
					touchAction.perform();
				}
			}
			period = scheduleObject.isSchedulePeriodVisible(schedulePeriod);

		} else {
			desiredDayIndex = Arrays.asList(scheduleDays).indexOf(schedulePeriod.split("_")[0]);
			if (scheduleObject.isScheduleDayHeaderVisible()) {
				scheduleDayHeaders = scheduleObject.getScheduleDayHeaderList();
				lesserDayIndex = Arrays.asList(scheduleDays).indexOf(scheduleDayHeaders.get(0).getAttribute("value"));
				greaterDayIndex = Arrays.asList(scheduleDays)
						.indexOf(scheduleDayHeaders.get(scheduleDayHeaders.size() - 1).getAttribute("value"));
			}
			int i = 0;
			while ((!(scheduleObject.isSchedulePeriodForIOSVisible(schedulePeriod))) && i < 10) {
				if (desiredDayIndex > greaterDayIndex) {
					/*touchAction.press(point(10, (int) (dimension.getHeight() * .5)))
					.moveTo(point(0, (int) (dimension.getHeight() * -.4))).release().perform();
					*/
					Schedule.SwipeUp(testCase);

					i++;
				} else if (desiredDayIndex < lesserDayIndex) {
					/*touchAction.press(point(10, (int) (dimension.getHeight() * .5)))
					.moveTo(point(0, (int) (dimension.getHeight() * .4))).release().perform();*/
					Schedule.SwipeDown(testCase);
					i++;
				} else {
					/*touchAction.press(point(10, (int) (dimension.getHeight() * .5)))
					.moveTo(point(0, (int) (dimension.getHeight() * -.4))).release().perform();*/
					Schedule.SwipeUp(testCase);
					i++;
				}
			}
			period = scheduleObject.isSchedulePeriodVisible(schedulePeriod);
		}
		inputs.setInputValue(GlobalVariables.PERIOD_NAME_NA + periodCounterToBeDeleted, schedulePeriod);

		Keyword.ReportStep_Pass(testCase, " ");
		Keyword.ReportStep_Pass(testCase, "*************** Deleting period- " + schedulePeriod + " ***************");
		try {
			period.click();
			Keyword.ReportStep_Pass(testCase, "Selected period-" + schedulePeriod);
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed to select the period-" + period);
		}
		if (scheduleObject.isPeriodDeleteIconVisible()) {

			flag = flag && scheduleObject.clickOnPeriodDeleteIconButton();

			if(scheduleObject.isPeriodDeleteDialogBoxMessageVisible()){

				String msg=scheduleObject.getPeriodDeleteDialogBoxMessage();

				try
				{
					if(msg.contains(schedulePeriod.split("_")[0]) && msg.contains(schedulePeriod.split("_")[1])){

						Keyword.ReportStep_Pass(testCase, "Period Delete Dialog Box Message-" + msg+" display");
					}else{
						if( msg.contains(schedulePeriod.split("_")[1])||msg.contains(schedulePeriod.split("_")[1]))
						{
							Keyword.ReportStep_Pass(testCase, "Period Delete Dialog Box Message-" + msg+" display");
						}
						else
						{
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed to display ' "+msg+"' of Dialog Box Message .");

						}

					}
				}
				catch(Exception e)
				{

				}



			}else{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed to locate 'Dialog Box Message' .");

			}

		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed to locate the Period delete icon");
		}

		  if (scheduleObject.isCancelDeleteButtonVisible())
		  {
			  if(!(scheduleObject.clickOnCancelDeleteButton()))
			  {
				  Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						  " Delete operation is not cancelled or cancel button clicked"); flag = false;
		 
			  }
			  else
			  {
				  Keyword.ReportStep_Pass(testCase,
						  " Delete period operation is cancelled successfully or successfully clicked on cancel Button" );
				 
			  }
			  if (scheduleObject.isCloseButtonVisible(3))
			  {
				  if(!(scheduleObject.clickOnCloseButton()))
				  {
					  Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							  " Close Button is not Close after clicked"); flag = false;
			 
				  }
				  else
				  {
					  Keyword.ReportStep_Pass(testCase,
							  " Close Button successfully clicked " );
					 
				  }
			  }else {
				  Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						  " Close Button is not visiable"); flag = false;
			  }
			  
			  
		  }
		  else
		  {
			  flag = false; Keyword.ReportStep_Fail(testCase,FailType.FUNCTIONAL_FAILURE, "Cancel button not found");
		  }

		return flag;
	}







	public static boolean launchAndLoginToApplicationWithIDASS(TestCases testCase, TestCaseInputs inputs,
			boolean... closeCoachMarks) {
		boolean flag = true;
		flag = MobileUtils.launchApplication(inputs, testCase, true);

		flag = flag && optikUtils.closeAppLaunchPopups(testCase);


		flag = flag && optikUtils.setAppEnvironmentwithIDASS(testCase, inputs);

		flag = flag && optikUtils.loginTooptikApp(testCase, inputs);
		flag = flag &&  optikUtils.verifyLoginSuccessful(testCase, inputs);
		return flag;
	}
	public static boolean setAppEnvironmentwithIDASS(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		try {
			String environmentToSelect = inputs.getInputValue(TestCaseInputs.APP_ENVIRONMENT);
			String ExecutionLocation = inputs.getInputValue(TestCaseInputs.EXEC_LOCATION);
			LoginScreen ls = new LoginScreen(testCase);
			SecretMenu sm = new SecretMenu(testCase);

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(environmentToSelect.equalsIgnoreCase("Production") && !(ExecutionLocation.equalsIgnoreCase("Local")))
				{
					flag = flag && ls.longPressOnSecretMenuImage();
					Keyword.ReportStep_Pass(testCase, "[Set App Environment ] : Default environment is production");
				}
				else
				{
					flag = flag && ls.longPressOnSecretMenuImage();
				}
			}
			else
			{
				flag = flag && ls.longPressOnSecretMenuImage();
				if(!sm.turnonsetAccessibilityToggleButtonIDAASenabled())
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to turn on setassibility");
					flag=false;
				}


				if(environmentToSelect.equalsIgnoreCase("Production") && !(ExecutionLocation.equalsIgnoreCase("Local")))
				{
					Keyword.ReportStep_Pass(testCase, "[Set App Environment ] : Default environment is production");
					flag = flag && sm.clickOnDoneButton();
					flag = flag && ls.isoptikLogoVisible();
					return flag;
				}

			}

			if (sm.isWebServerURLVisible()) {
				flag = flag && sm.clickOnWebServerURL();
				// Keeping this explicit wait because sometimes the environment selection fails
				// on ANDROID
				TimeUnit.SECONDS.sleep(1);
				// Thread.sleep(1000);
			}
			else if(sm.isWebURLVisible())
			{
				flag = flag && sm.clickOnWebURL();


			}

			environmentToSelect = environmentToSelect.replaceAll("\\s", "");
			if (environmentToSelect.equalsIgnoreCase("CHILStage(Azure)") ||environmentToSelect.equalsIgnoreCase("Stage") ) {
				flag = flag && sm.clickOnCHILStageAzureOption();
			} else if (environmentToSelect.equalsIgnoreCase("ChilDas(QA)")) {
				flag = flag && sm.clickOnCHILDASQAOption();
			} else if (environmentToSelect.equalsIgnoreCase("Production")) {
				flag = flag && sm.clickOnProductionOption();
			} else if (environmentToSelect.equalsIgnoreCase("CHILInt(Azure)")) {
				flag = flag && sm.clickOnCHILIntAzureOption();
			} else if (environmentToSelect.equalsIgnoreCase("ChilDev(Dev2)")) {
				flag = flag && sm.clickOnCHILDevDev2Option();
			} else if (environmentToSelect.equalsIgnoreCase("LoadTesting")) {
				flag = flag && sm.clickOnCHILLoadTestingOption();
			} else if (environmentToSelect.equalsIgnoreCase("ChilDas(Test)")) {
				flag = flag && sm.clickOnCHILDASTestOption();
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invalid Environment");
				return false;
			}

			if (MobileUtils.isRunningOnAndroid(testCase)) {
				if(!inputs.isInputAvailable("LANGUAGE"))
				{
					flag = flag && sm.turnonEnableFlycatcherToggleButton();
				}

				sm.turnOnTitanR1IDAASOption();
				sm.turnOnTitanR2IDAASOption();
				/*
				 * sm.turnoffTitanR1IDAASOption(); sm.turnoffTitanR2IDAASOption();
				 */

				flag = flag && MobileUtils.pressBackButton(testCase);

			} else {

				flag = flag && sm.clickOnDoneButton();
			}
			flag = flag && ls.isoptikLogoVisible();
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Set App Environment :  Error occurred - " + e.getMessage());
			flag = false;
		}

		return flag;
	}




	/**
	 * <h1>Set Application Environment</h1>
	 * <p>
	 * The set application environment method navigates to the secret menu from the
	 * login screen, set the application environment provided to the test case, and
	 * navigates back to the login screen
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase
	 * @param inputs
	 *            Instance of the TestCaseInputs class used to pass inputs to the
	 *            testCase instance
	 * @return boolean Returns 'true' if the environment is successfully set.
	 *         Returns 'false' if the environment is not set successfully
	 */
	public static boolean setAppEnvironment(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		
			String environmentToSelect = inputs.getInputValue(TestCaseInputs.APP_ENVIRONMENT);
			String ExecutionLocation = inputs.getInputValue(TestCaseInputs.EXEC_LOCATION);
			LoginScreen ls = new LoginScreen(testCase);
			SecretMenu sm = new SecretMenu(testCase);

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(environmentToSelect.equalsIgnoreCase("Production") && !(ExecutionLocation.equalsIgnoreCase("Local")))
				{
					//flag = flag && ls.longPressOnSecretMenuImage();
					Keyword.ReportStep_Pass(testCase, "[Set App Environment ] : Default environment is production");
				}
			}
		
//				else
//				{
//				flag = flag && ls.longPressOnSecretMenuImage();
//				}
//			}
//			else
//			{
//				flag = flag && ls.longPressOnSecretMenuImage();
//				if(!sm.turnonsetAccessibilityToggleButton())
//				{
//					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to turn on setassibility");
//					flag=false;
//				}
//
//
//				if(environmentToSelect.equalsIgnoreCase("Production") && !(ExecutionLocation.equalsIgnoreCase("Local")))
//				{
//					Keyword.ReportStep_Pass(testCase, "[Set App Environment ] : Default environment is production");
//					flag = flag && sm.clickOnDoneButton();
//					flag = flag && ls.isoptikLogoVisible();
//					return flag;
//				}
//
//			}
//
//			if (sm.isWebServerURLVisible()) {
//				flag = flag && sm.clickOnWebServerURL();
//				// Keeping this explicit wait because sometimes the environment selection fails
//				// on ANDROID
//				TimeUnit.SECONDS.sleep(1);
//				// Thread.sleep(1000);
//			}
//			else if(sm.isWebURLVisible())
//			{
//				flag = flag && sm.clickOnWebURL();
//
//
//			}
//
//			environmentToSelect = environmentToSelect.replaceAll("\\s", "");
//			if (environmentToSelect.equalsIgnoreCase("CHILStage(Azure)") ||environmentToSelect.equalsIgnoreCase("Stage") ) {
//				flag = flag && sm.clickOnCHILStageAzureOption();
//			} else if (environmentToSelect.equalsIgnoreCase("ChilDas(QA)") || environmentToSelect.equalsIgnoreCase("QA")) {
//				flag = flag && sm.clickOnCHILDASQAOption();
//			} else if (environmentToSelect.equalsIgnoreCase("Production")) {
//				flag = flag && sm.clickOnProductionOption();
//			} else if (environmentToSelect.equalsIgnoreCase("CHILInt(Azure)") || environmentToSelect.equalsIgnoreCase("INT")) {
//				flag = flag && sm.clickOnCHILIntAzureOption();
//			} else if (environmentToSelect.equalsIgnoreCase("ChilDev(Dev2)")) {
//				flag = flag && sm.clickOnCHILDevDev2Option();
//			} else if (environmentToSelect.equalsIgnoreCase("LoadTesting")) {
//				flag = flag && sm.clickOnCHILLoadTestingOption();
//			} else if (environmentToSelect.equalsIgnoreCase("ChilDas(Test)")) {
//				flag = flag && sm.clickOnCHILDASTestOption();
//			} else {
//				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invalid Environment");
//				return false;
//			}
//			if (!environmentToSelect.equalsIgnoreCase("LoadTesting")) {
//			if(!MobileUtils.isRunningOnAndroid(testCase))
//			{
//			if (sm.isWebServerURLVisible()) {
//				flag = flag && sm.clickOnWebServerURL();
//				// Keeping this explicit wait because sometimes the environment selection fails
//				// on ANDROID
//				TimeUnit.SECONDS.sleep(1);
//				// Thread.sleep(1000);
//			}else if(sm.isWebURLVisible())
//			{
//				flag = flag && sm.clickOnWebURL();
//
//
//			}
//
//			}
//
//			if (sm.isWebServerURLVisibleForStrom()) {
//				flag = flag && sm.clickOnWebServerURLForStrom();
//				// Keeping this explicit wait because sometimes the environment selection fails
//				// on ANDROID
//				TimeUnit.SECONDS.sleep(1);
//				// Thread.sleep(1000);
//			}
//			else if(sm.isWebURLVisible())
//			{
//				flag = flag && sm.clickOnWebURL();
//			}
//
//			environmentToSelect = environmentToSelect.replaceAll("\\s", "");
//			if (environmentToSelect.equalsIgnoreCase("CHILStage(Azure)") ||environmentToSelect.equalsIgnoreCase("Stage") ) {
//				//flag = flag && sm.clickOnCHILDASQAOption();
//				flag = flag && sm.clickOnCHILStageAzureOption();
//			} else if (environmentToSelect.equalsIgnoreCase("ChilDas(QA)") || environmentToSelect.equalsIgnoreCase("QA")) {
//				flag = flag && sm.clickOnCHILDASQAOption();
//			} else if (environmentToSelect.equalsIgnoreCase("Production")) {
//				flag = flag && sm.clickOnProductionOption();
//			} else if (environmentToSelect.equalsIgnoreCase("CHILInt(Azure)") || environmentToSelect.equalsIgnoreCase("INT")) {
//				//flag = flag && sm.clickOnCHILIntAzureOption();
//				flag = flag && sm.clickOnCHILDASQAOption();
//
//			} else if (environmentToSelect.equalsIgnoreCase("ChilDev(Dev2)")) {
//				flag = flag && sm.clickOnCHILDevDev2Option();
//			} else if (environmentToSelect.equalsIgnoreCase("LoadTesting")) {
//				flag = flag && sm.clickOnCHILLoadTestingOption();
//			} else if (environmentToSelect.equalsIgnoreCase("ChilDas(Test)")) {
//				flag = flag && sm.clickOnCHILDASTestOption();
//			} else {
//				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invalid Environment");
//				return false;
//			}
//			}
//			if (MobileUtils.isRunningOnAndroid(testCase)) {
//				if(!inputs.isInputAvailable("LANGUAGE"))
//				{
//					flag = flag && sm.turnonEnableFlycatcherToggleButton();
//				}
//
//				//flag = flag && sm.turnOnTitanR1IDAASOption();
//			//	 sm.turnoffTitanR1IDAASOption();
//			//	 sm.turnoffTitanR2IDAASOption();
//
//				flag = flag && MobileUtils.pressBackButton(testCase);
//
//			} else {
//
//				flag = flag && sm.clickOnDoneButton();
//			}
//			flag = flag && ls.isoptikLogoVisible();
//		} catch (Exception e) {
//			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
//					"Set App Environment :  Error occurred - " + e.getMessage());
//			flag = false;
//		}

		return flag;
	}



	public static boolean verifyLoginSuccessfulByHoldCoachMarks(TestCases testCase, TestCaseInputs inputs, boolean... closeCoachMarks) {
		 boolean flag = true;
		OSPopUps os = new OSPopUps(testCase);
		CoachMarks cm = new CoachMarks(testCase);
		FeedBackScreen FB=new FeedBackScreen(testCase);
		LoginScreen ls = new LoginScreen(testCase);
		Dashboard d=null;
		if(!inputs.isRunningOn("Local"))
		{
		if(inputs.isInputAvailable("LANGUAGE"))
		{
			d = new Dashboard(testCase,inputs.getInputValue("LANGUAGE"));
		}
		else
		{
			d = new Dashboard(testCase);
		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(os.isAllowButtonVisible(2))
			{
				os.clickOnAllowButton();
			}
			flag = flag && optikUtils.ClickOnDontUsePasscode(testCase , inputs);
		}
		else
		{
			if(os.isAlwaysAllowButtonVisible(2))
			{
				os.clickOnAlwaysAllowButton();
			}
			if(os.isAcceptButtonVisible(2))
			{
			os.clickOnAcceptButton();
			}
			flag = flag && optikUtils.ClickOnDontUsePasscode(testCase , inputs);

		}


		if(!inputs.isRealDevice() && MobileUtils.isRunningOnAndroid(testCase))
		{
			String language="";
			if(inputs.isInputAvailable("LANGUAGE"))
			{
				language= inputs.getInputValue("LANGUAGE");
				os= new OSPopUps(testCase,language);
				if(os.isAcceptButtonVisible(5))
				{
					os.clickOnAcceptButton();
				}

				else if(os.isAcceptButtonVisible(inputs))
				{
					os.isAcceptButtonClick(inputs);

				}
				else if(os.isAllowButtonVisible(inputs))
				{
					os.isAllowButtonClick(inputs);

				}

			}
			else
			{
				if(os.isAcceptButtonVisible(5))
				{
					os.clickOnAcceptButton();
				}
				flag = flag && os.AcceptpopUp();
			}

			if(os.isAcceptButtonVisible(5))
			{
				os.clickOnAcceptButton();
			}
		}
		if( MobileUtils.isRunningOnAndroid(testCase))
		{
			if(os.isIgnoreButtonVisible(3))
			{
				os.clickOnIgnoreButton();
			}
			if(os.isAllowButtonVisible())
			{
				os.clickOnAllowButton();
			}

		}else{
			if(os.isAcceptButtonVisible(4))
			{
				os.clickOnAcceptButton();
			}
		}}

		FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(testCase.getMobileDriver());
		fWait.pollingEvery(Duration.ofSeconds(3));
		fWait.withTimeout(Duration.ofMinutes(1));


		try {
				Boolean isEventReceived = fWait.until(new Function<CustomDriver, Boolean>() {
				@Override
				public Boolean apply(CustomDriver driver) {
					OSPopUps os=null;
					Dashboard d=null;

						os = new OSPopUps(testCase);
						d = new Dashboard(testCase);


					if (!MobileUtils.isRunningOnAndroid(testCase)) {
						try {
							((CustomIOSDriver) testCase.getMobileDriver()).switchTo().alert().accept();
							return false;
						} catch (Exception e) {

							if(os.isAlwaysAllowButtonVisible(3))
							{
								os.clickOnAlwaysAllowButton();

							}else if (os.isNotNowButtonVisible(1)) {
								os.clickOnNotNowButton();
							} else if(os.isAllowButtonVisible())
							{
								os.clickOnAllowButton();
							}


						}
					} else
					{
						if (!inputs.isRunningOn("Local")){
						if(os.isAcceptButtonVisible(5))
						{
							os.clickOnAcceptButton();
						}

						if (os.isCloseButtonVisible(1)) {
							os.clickOnCloseButton();
							return false;
						}

						}
						}

					if(!MobileUtils.isRunningOnAndroid(testCase)) {
						if(os.isIgnoreButtonVisible(3))
						{
							os.clickOnIgnoreButton();
						}
						return d.isGlobalDrawerAddNewVisible(5);
					} else {
						if(!inputs.isRunningOn("Local"))
						{
						if(os.isIgnoreButtonVisible(3))
						{
							os.clickOnIgnoreButton();
						}

					}
					}return false;
				}
			});
			if(!inputs.isRunningOn("Local"))
			{
			if( MobileUtils.isRunningOnAndroid(testCase))
			{
				if(os.isIgnoreButtonVisible(3))
				{
					os.clickOnIgnoreButton();
				}
				if (FB.isFeedbackPopUpVisible()|| FB.isFeedbackPopUpIDVisible()||FB.isFeedbackPopUptextVisible())
				{
					flag = flag && FB.clickonFeedbackCloseButton();
				}
			}}


			if (isEventReceived && flag) {
				Keyword.ReportStep_Pass(testCase, "Successfully navigated to Optiktv flows");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Login To optik : Unable to navigate to homepage. Could not find notification icon on homepage");
			}


		} catch (TimeoutException e) {


		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		return flag;
	}




	/**
	 * <h1>Launch And Login to optik Application</h1>
	 * <p>
	 * The launchAndLoginToApplication method launches the optik application, closes
	 * all pop ups post application launch, sets the application environment, logs
	 * in the the application, and verifies whether the user has successfully logged
	 * in or not.
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase
	 * @param inputs
	 *            Instance of the TestCaseInputs class used to pass inputs to the
	 *            testCase instance
	 * @return boolean Returns 'true' if all the operations mentioned in the
	 *         description have been performed successfully. Returns 'false' if any
	 *         of the operations mentioned in the description fails.
	 */
	public static boolean launchAndLoginToApplication(TestCases testCase, TestCaseInputs inputs,
			boolean... closeCoachMarks) {
		boolean flag = true;
		OSPopUps os=new OSPopUps(testCase);
		flag = MobileUtils.launchApplication(inputs, testCase, true);
		if(MobileUtils.isRunningOnAndroid(testCase)) {
			
		if(os.isPerfectoIgnoreButtonVisible()){
			os.clickOnPerfectoIgnoreButton();
		}}
		if(!MobileUtils.isRunningOnAndroid(testCase)) {
			//flag = flag && optikUtils.closeAppLaunchPopups(testCase);
		}
			

			//flag = flag && optikUtils.closeAppCenterBowserBySignin(testCase);

		flag = flag && optikUtils.setAppEnvironment(testCase, inputs);

		flag = flag && optikUtils.loginTooptikApp(testCase, inputs);
		
		flag = flag &&  optikUtils.verifyLoginSuccessful(testCase, inputs);
		
		if(!MobileUtils.isRunningOnAndroid(testCase)) {
		flag = flag && optikUtils.createPasscodeAndVerify(testCase , inputs, "create");
		}
		
		return flag;
	}



	public static boolean closeAppCenterBowserBySignin(TestCases testCase) {
		try {

		if(MobileUtils.isRunningOnAndroid(testCase)) {
		if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Visual Studio App Center']" , testCase,3,false))
		{
			optikUtils.swipe(testCase , "Sign in with email");

			MobileUtils.isMobElementExists("XPATH" , "//*[@text='XYZ']" , testCase,3,false);

			if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Sign in with email']" , testCase,3,false))

			{

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Sign in with email']")).click();

				MobileUtils.isMobElementExists("XPATH" , "//*[@text='XYZ']" , testCase,3,false);

				testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.EditText']")).get(0).sendKeys("sachin.kshirsagar@resideo.com");

				MobileUtils.isMobElementExists("XPATH" , "//*[@text='XYZ']" , testCase,3,false);

				testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.EditText']")).get(1).sendKeys("Password321");

				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}

				MobileUtils.isMobElementExists("XPATH" , "//*[@text='XYZ']" , testCase,3,false);

				if(MobileUtils.isMobElementExists("XPATH" , "//android.widget.Button[@text='Sign in']" , testCase,3,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//android.widget.Button[@text='Sign in']")).click();
				}

				MobileUtils.isMobElementExists("XPATH" , "//*[@text='XYZ']" , testCase,3,false);
			}
		}
		}
		} catch (Exception e) {
			// TODO: handle exception
		}
		return true;
	}




	/**
	 * <h1>Launch And Login to optik Application</h1>
	 * <p>
	 * The launchAndLoginToApplication method launches the optik application, not closes
	 * all pop ups post application launch, sets the application environment, logs
	 * in the the application, and verifies whether the user has successfully logged
	 * in or not.
	 * </p>
	 *
	 * @author darshan kamble
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase
	 * @param inputs
	 *            Instance of the TestCaseInputs class used to pass inputs to the
	 *            testCase instance
	 * @return boolean Returns 'true' if all the operations mentioned in the
	 *         description have been performed successfully. Returns 'false' if any
	 *         of the operations mentioned in the description fails.
	 */
	public static boolean launchAndLoginToApplicationForCoachMarks(TestCases testCase, TestCaseInputs inputs,
			boolean... closeCoachMarks) {
		boolean flag = true;
		flag = MobileUtils.launchApplication(inputs, testCase, true);
		/*if(inputs.isInputAvailable("LANGUAGE"))
		{
			flag = flag && optikUtils.closeAppLaunchPopupsLocal(testCase);
		}else
		{*/
			flag = flag && optikUtils.closeAppLaunchPopups(testCase);
		//}


		flag = flag && optikUtils.setAppEnvironment(testCase, inputs);

		flag = flag && optikUtils.loginTooptikApp(testCase, inputs);
		flag = flag &&  optikUtils.verifyLoginSuccessfulForCoachMarks(testCase, inputs);
		
		flag = flag && optikUtils.createPasscodeAndVerify(testCase , inputs, "create");
			
		/*if(!inputs.isRunningOn("Local"))
		{
			if (closeCoachMarks.length > 0) {
				flag = flag && optikUtils.verifyLoginSuccessful(testCase, inputs, closeCoachMarks[0]);
			} else {
				flag = flag && optikUtils.verifyLoginSuccessful(testCase, inputs);
			}
		}*/
		return flag;
	}



	public static boolean verifyLoginSuccessfulForCoachMarks(TestCases testCase, TestCaseInputs inputs, boolean... closeCoachMarks) {
		 boolean flag = true;
		OSPopUps os = new OSPopUps(testCase);
		CoachMarks cm = new CoachMarks(testCase);
		FeedBackScreen FB=new FeedBackScreen(testCase);
		LoginScreen ls = new LoginScreen(testCase);
		Dashboard d=null;
		CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase);
		try {
		if(inputs.isRunningOn("Local"))
		{
			if(ls.isAllowallthetimeButtonVisible(10))
		{
			ls.clickOnAllowallthetimeButton(5);
		}
		}
		if(!inputs.isRunningOn("Local"))
		{
		if(inputs.isInputAvailable("LANGUAGE"))
		{
			d = new Dashboard(testCase,inputs.getInputValue("LANGUAGE"));
		}
		else
		{
			d = new Dashboard(testCase);
		}

		if(!inputs.isRealDevice() && MobileUtils.isRunningOnAndroid(testCase))
		{
			String language="";
			if(inputs.isInputAvailable("LANGUAGE"))
			{
				language= inputs.getInputValue("LANGUAGE");
				os= new OSPopUps(testCase,language);
				if(os.isAcceptButtonVisible(5))
				{
					os.clickOnAcceptButton();
				}

				else if(os.isAcceptButtonVisible(inputs))
				{
					os.isAcceptButtonClick(inputs);

				}
				else if(os.isAllowButtonVisible(inputs))
				{
					os.isAllowButtonClick(inputs);

				}

			}
			else
			{
				if(os.isAcceptButtonVisible(5))
				{
					os.clickOnAcceptButton();
				}
				flag = flag && os.AcceptpopUp();
			}

			if(os.isAcceptButtonVisible(5))
			{
				os.clickOnAcceptButton();
			}
		}
		if( MobileUtils.isRunningOnAndroid(testCase))
		{
			if(os.isIgnoreButtonVisible(3))
			{
				os.clickOnIgnoreButton();
			}
			if(os.isAllowButtonVisible())
			{
				os.clickOnAllowButton();
			}
			else if(inputs.isInputAvailable("LANGUAGE"))
			{
				if(os.isAllowButtonVisible(inputs))
				{
					os.isAllowButtonClick(inputs);
				}
			}
		}else{
			os.clickOnAllowButton();
			if (cyPop.isDontUseTextVisible(1))
			{
				cyPop.clickOnDontUseButton();
			}
			if(os.isAllowButtonVisible())
    		{
    			os.clickOnAllowButton();
    		}

		}}



			if (flag) {
				Keyword.ReportStep_Pass(testCase, "Successfully navigated to all screens in optik tv app");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Login To optik : Unable to navigate to homepage. Could not find notification icon on homepage");
			}

		} catch (TimeoutException e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Timed out while loading. Wait time : 2 minutes");
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		return flag;
	}





	/**
	 * <h1>Get Device Time zone</h1>
	 * <p>
	 * The getDeviceTimeZone method returns the TimeZone the device is configured
	 * to.
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase
	 * @param inputs
	 *            Instance of the TestCaseInputs class used to pass inputs to the
	 *            testCase instance
	 * @return TimeZone Returns the timezone of the device
	 */
	public static TimeZone getDeviceTimeZone(TestCases testCase, TestCaseInputs inputs) throws Exception {
		TimeZone timeZone = null;
		if (MobileUtils.isRunningOnAndroid(testCase)) {
			String zone = new String();
			try {
				if (inputs.isRunningOn("Local")) {
					if (inputs.isInputAvailable("ANDROID_UDID")) {
						zone = ADBUtils.getAndroidMobileDeviceTimeZone(inputs.getInputValue("ANDROID_UDID"));
					} else {
						zone = ADBUtils.getAndroidMobileDeviceTimeZone();
					}
				} else if (inputs.isRunningOn("Perfecto")) {
					zone = PerfectoLabUtils.getTimeZoneAndroidOnly(testCase.getMobileDriver());
				} else if (inputs.isRunningOn("pCloudy")) {
					PCloudyDeviceInformation deviceInfo = testCase.getPcloudyDeviceInformation();
					zone = deviceInfo.getpCloudySession().getConnector().executeAdbCommand(deviceInfo.getAuthToken(),
							deviceInfo.getBookingDtoDevice(), "adb shell getprop persist.sys.timezone");
				} else if (inputs.isRunningOn("TestObject")) {
					zone = "CET";
				} else if (inputs.isRunningOn("Saucelabs")) {
					zone = "UTC";
					//zone = "US/Pacific";
				}
				zone = zone.trim();
				timeZone = TimeZone.getTimeZone(zone);
			} catch (Exception e) {
				throw new Exception(e.getMessage());
			}
		} else {
			try {
				if (inputs.isRunningOn("Local")) {
					timeZone = TimeZone.getDefault();
				} else if (inputs.isRunningOn("Perfecto")) {
					timeZone = TimeZone.getTimeZone("US/Eastern");
				} else if (inputs.isRunningOn("Saucelabs")) {
					if(MobileUtils.isRunningOnAndroid(testCase)){
						timeZone = TimeZone.getTimeZone("US/Pacific");
						}else{
							timeZone = TimeZone.getTimeZone("UTC");
						}
				} else if (inputs.isRunningOn("TestObject")) {
					timeZone = TimeZone.getTimeZone("CET");
				}
			} catch (Exception e) {
				throw new Exception(e.getMessage());
			}
		}
		return timeZone;
	}

	/**
	 * <h1>Get Device Time</h1>
	 * <p>
	 * The getDeviceTime method gets the time on the device
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase
	 * @param inputs
	 *            Instance of the TestCaseInputs class used to pass inputs to the
	 *            testCase instance
	 * @return String Device time in the format 'yyyymmddThh:mm:a'
	 */
	public static String getDeviceTime(TestCases testCase, TestCaseInputs inputs) {
		String time = " ";
		try {
			Calendar date = Calendar.getInstance(optikUtils.getDeviceTimeZone(testCase, inputs));
			String ampm;
			if (date.get(Calendar.AM_PM) == Calendar.AM) {
				ampm = "AM";
			} else {
				ampm = "PM";
			}
			String hour;
			if (date.get(Calendar.HOUR) == 0) {
				hour = "12";
			} else {
				hour = String.valueOf(date.get(Calendar.HOUR));
			}
			String minute;
			if (date.get(Calendar.MINUTE) < 10) {
				minute = "0" + date.get(Calendar.MINUTE);
			} else {
				minute = String.valueOf(date.get(Calendar.MINUTE));
			}
			int month = date.get(Calendar.MONTH) + 1;
			time = String.valueOf(date.get(Calendar.YEAR) + "-" + month + "-" + date.get(Calendar.DAY_OF_MONTH) + "T"
					+ hour + ":" + minute + " " + ampm);
		} catch (Exception e) {
			time = "";
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Get Android Device Time : Error occurred : " + e.getMessage());
		}

		return time;
	}

	/**
	 * <h1>Get Device Time</h1>
	 * <p>
	 * The addMinutesToDate method gets the time on the device with added minutes
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-03-17
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase
	 * @param inputs
	 *            Instance of the TestCaseInputs class used to pass inputs to the
	 *            testCase instance
	 * @return String Device time in the format 'yyyymmddThh:mm:a'
	 */
	public static String addMinutesToDate(TestCases testCase, String date, int noOfMins) {
		String dateAfterAddition = "";
		try {
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			Calendar c = Calendar.getInstance();
			c.setTime(dateFormat.parse(date));
			c.add(Calendar.MINUTE, noOfMins);
			dateAfterAddition = dateFormat.format(c.getTime());
		} catch (Exception e) {
			dateAfterAddition = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Add days to date : Error occurred : " + e.getMessage());
		}
		return dateAfterAddition;
	}

	/**
	 * <h1>Get All Alerts through CHIL</h1>
	 * <p>
	 * The getAllAlertsThroughCHIL method gets all the alerts of the location name
	 * provided to the test case through CHIL.
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase.
	 * @param inputs
	 *            Instance of the TestCaseInputs class used to pass inputs to the
	 *            testCase instance.
	 * @return JSONObject Alert details of the location name provided to the test
	 *         case.
	 */
	public static JSONObject getAllAlertsThroughCHIL(TestCases testCase, TestCaseInputs inputs) {
		JSONObject jsonObject = null;
		try (CHILUtil chUtil = new CHILUtil(inputs)) {
			if (chUtil.getConnection()) {
				if (chUtil.isConnected()) {
					LocationInformation locInfo = new LocationInformation(testCase, inputs);
					String chapiURL = getCHILURL(testCase, inputs);
					String url = chapiURL + "api/v2/users/" + locInfo.getUserID() + "/Alerts";
					HttpURLConnection connection = chUtil.doGetRequest(url);

					try {
						if (connection != null) {
							BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
							String inputLine;
							StringBuffer html = new StringBuffer();
							while (!in.ready()) {
							}
							while ((inputLine = in.readLine()) != null) {
								html.append(inputLine);
							}
							in.close();
							jsonObject = new JSONObject(html.toString().trim());
						} else {
							Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
									"Get All Alerts : Failed to get all Alerts");
						}

					} catch (IOException e) {
						Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
								"Get All Alerts : Failed to get all Alerts. Error occurred - " + e.getMessage());
						jsonObject = null;
					}
				}
			} else {
				Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
						"Get All Alerts  : Unable to connect to CHAPI.");
			}
		} catch (Exception e) {
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Get All Alerts : Unable to get alerts. Error occurred - " + e.getMessage());
			jsonObject = null;
		}
		return jsonObject;
	}

	/**
	 * <h1>Get All Alert IDs</h1>
	 * <p>
	 * The getAllAlertIDS method gets all the alerts through CHIL, extracts the IDS
	 * for each alert from the JSONObject, and stores the ids in a list
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase.
	 * @param inputs
	 *            Instance of the TestCaseInputs class used to pass inputs to the
	 *            testCase instance.
	 * @return List<Long> List of all alert IDS
	 */
	public static List<Long> getAllAlertIDS(TestCases testCase, TestCaseInputs inputs) {
		List<Long> alertIDS = new ArrayList<Long>();
		try {
			JSONObject jsonObj = getAllAlertsThroughCHIL(testCase, inputs);
			JSONArray jsonArray = jsonObj.getJSONArray("userAlerts");
			for (int i = 0; i < jsonArray.length(); i++) {
				alertIDS.add(jsonArray.getJSONObject(i).getLong("id"));
			}
		} catch (JSONException e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "No Alerts Found");
		}
		catch (Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		return alertIDS;
	}

	/**
	 * <h1>Dismiss All Alerts through CHIL</h1>
	 * <p>
	 * The dismissesAllAlertsThroughCHIL method dismisses all the alerts of the
	 * location name provided to the test case through CHIL.
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase.
	 * @param inputs
	 *            Instance of the TestCaseInputs class used to pass inputs to the
	 *            testCase instance.
	 * @return boolean Returns 'true' if all the alerts have been dismissed
	 *         successfully. Returns 'false' if error occurs while dismissing
	 *         alerts.
	 */
	public static boolean dismissAllAlertsThroughCHIL(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		try {
			@SuppressWarnings("resource")
			CHILUtil chUtil = new CHILUtil(inputs);
			if (chUtil.getConnection()) {
				if (chUtil.isConnected()) {
					List<Long> alertIDS = optikUtils.getAllAlertIDS(testCase, inputs);
					int result = chUtil.dismissAllAlerts(alertIDS);
					if (result == 200) {
						Keyword.ReportStep_Pass(testCase, "Successfully dismissed alerts with ids : " + alertIDS);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to dismiss alerts with ids : " + alertIDS);
					}
				}
			} else {
				flag = false;
				throw new Exception("Failed to connect to CHIL");
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		return flag;
	}

	/**
	 * <h1>Scroll To The List</h1>
	 * <p>
	 * The scrollUpAList method scrolls to an element
	 * using swipe gestures.
	 * </p>
	 *
	 * @author Midhun Gollapalli (H179225)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase.
	 *            testCase instance.
	 * @param attribute
	 *            Attribute of the value used to locate the element
	 * @param value
	 *            Value of the attribute used to locate the element
	 * @return boolean Returns 'true' if the element is found. Returns 'false' if
	 *         the element is not found.
	 */
	public static boolean scrollUpAList(TestCases testCase, WebElement devieListWebEle)
			throws Exception {
		Dimension d1;
		Point p1;
		int startx = -1;
		int starty = -1;
		int endy = -1;
		if (MobileUtils.isRunningOnAndroid(testCase)) {
			d1 = devieListWebEle.getSize();
			p1 = devieListWebEle.getLocation();
			startx = p1.getX();
			starty = (int) (d1.height * 0.90) + p1.getY();
			endy = (int) (d1.height * 0.60) + p1.getY();
		} else {
			d1 = devieListWebEle.getSize();
			p1 = devieListWebEle.getLocation();
			starty = (int) (d1.height * 0.80);
			endy = (int) -((d1.height * 0.50) + p1.getY());
			startx = d1.width / 2;
		}
		return MobileUtils.swipe(testCase, startx, starty, startx, endy);
	}

	/**
	 * <h1>Scroll To Element Using Exact Attribute Value</h1>
	 * <p>
	 * The scrollToElementUsingExactAttributeValue method scrolls to an element
	 * using the attribute and exact value passed to the method in the parameters.
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase.
	 *            testCase instance.
	 * @param attribute
	 *            Attribute of the value used to locate the element
	 * @param value
	 *            Value of the attribute used to locate the element
	 * @return boolean Returns 'true' if the element is found. Returns 'false' if
	 *         the element is not found.
	 */
	public static boolean scrollToElementUsingExactAttributeValue(TestCases testCase, String attribute, String value)
			throws Exception {
		try {
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				if (testCase.getMobileDriver()
						.findElement(MobileBy.AndroidUIAutomator("new UiScrollable(new UiSelector()).scrollIntoView("
								+ "new UiSelector()." + attribute + "(\"" + value + "\"));")) != null) {
					return true;
				} else {
					return false;
				}
			} else {
				JavascriptExecutor js = (JavascriptExecutor) testCase.getMobileDriver();
				HashMap<Object, Object> scrollObject = new HashMap<>();
				scrollObject.put("predicateString", attribute + " == '" + value + "'");
				try {
					js.executeScript("mobile:scroll", scrollObject);
				} catch (Exception e) {
					if (e.getMessage().contains("Failed to find scrollable visible")) {
						js.executeScript("mobile:scroll", scrollObject);
					}
				}
				WebElement element = testCase.getMobileDriver()
						.findElement(MobileBy.iOSNsPredicateString(attribute + " == '" + value + "'"));
				if (element.getAttribute(attribute).equals(value)) {
					return true;
				} else {
					return false;
				}
			}
		} catch (NoSuchElementException e) {
			throw new Exception(
					"Element with text : '" + value + "' not found. Exception Type: No Such Element Exception");
		} catch (Exception e) {
			throw new Exception("Element with text : '" + value + "' not found. Exception Message: " + e.getMessage());
		}
	}

	/**
	 * <h1>Scroll To Element Using Attribute Sub String Value</h1>
	 * <p>
	 * The scrollToElementUsingAttributeSubStringValue method scrolls to an element
	 * using the attribute and attribute substring value passed to the method in the
	 * parameters.
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase.
	 *            testCase instance.
	 * @param attribute
	 *            Attribute of the value used to locate the element
	 * @param value
	 *            Substring value of the attribute used to locate the element
	 * @return boolean Returns 'true' if the element is found. Returns 'false' if
	 *         the element is not found.
	 */
	public static boolean scrollToElementUsingAttributeSubStringValue(TestCases testCase, String attribute,
			String value) throws Exception {
		try {
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				if (testCase.getMobileDriver()
						.findElement(MobileBy.AndroidUIAutomator("new UiScrollable(new UiSelector()).scrollIntoView("
								+ "new UiSelector().textContains(\"" + value + "\"));")) != null) {
					return true;
				} else {
					return false;
				}
			} else {
				JavascriptExecutor js = (JavascriptExecutor) testCase.getMobileDriver();
				HashMap<Object, Object> scrollObject = new HashMap<>();
				try {
					scrollObject.put("predicateString", attribute + " CONTAINS '" + value + "'");
					js.executeScript("mobile:scroll", scrollObject);
				} catch (Exception e) {
					scrollObject.clear();
					scrollObject.put("direction", "down");
					js.executeScript("mobile:scroll", scrollObject);
				}
				WebElement element = MobileUtils.getMobElement(testCase, "xpath",
						"//*[contains(@" + attribute + ",'" + value + "')]");
				// WebElement element = testCase.getMobileDriver()
				// .findElement(MobileBy.iOSNsPredicateString(attribute + " CONTAINS '" + value
				// + "'"));
				if (element.getAttribute(attribute).contains(value)) {
					return true;
				} else {
					return false;
				}

			}

		} catch (NoSuchElementException e) {
			throw new Exception("Element with text/value containing : '" + value
					+ "' not found. Exception Type : No Such Element Exception");
		} catch (Exception e) {
			throw new Exception("Element with text/value containing : '" + value + "' not found. Exception Message: "
					+ e.getMessage());
		}
	}

	/**
	 * <h1>Verify Device Displayed On Dashboard</h1>
	 * <p>
	 * The verifyDeviceDisplayedOnDashboard method verifies the device name passed
	 * in the parameters is present on the Dashboard.
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase.
	 *            testCase instance.
	 * @param deviceName
	 *            Device name whose presence has to be verified on the dash board
	 * @return boolean Returns 'true' if the device is present on the dash board.
	 *         Returns 'false' if the device is not present on the dash board.
	 */
	public static boolean verifyDeviceDisplayedOnDashboard(TestCases testCase, String deviceName) {
		boolean flag = true;
		Dashboard d = new Dashboard(testCase);
		MobileUtils.swipe(testCase, 500, 1000, 50, 560);
		if (d.isDevicePresentOnDashboard(deviceName)) {
			Keyword.ReportStep_Pass(testCase, "Device : " + deviceName + " is present on the dashboard.");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Device : " + deviceName + " is not present on the dashboard.");
		}
		return flag;
	}

	/**
	 * <h1>Verify if Device is still displayed in dashboard after deleting it</h1>
	 * <p>
	 * The verifyDeviceNotDisplayedOnDashboard method verifes if device is still
	 * displayed in dashboard after deleting it.
	 * </p>
	 *
	 * @author Pratik P. Lalseta (H119237)
	 * @version 1.0
	 * @since 2018-02-19
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase.
	 * @param inputs
	 *            Instance of the TestCaseInputs class used to pass inputs to the
	 *            testCase instance.
	 * @return boolean Returns 'true' if device is not displayed in dashboard
	 *         screen. Returns 'false' if device is still displayed in dashboard
	 *         screen.
	 */
	public static boolean verifyDeviceNotDisplayedOnDashboard(TestCases testCase, TestCaseInputs inputs,
			String expectedDevice) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils.loadObjectFile(testCase, "DAS_InstallationScreen");
		if (MobileUtils.isMobElementExists(fieldObjects, testCase, "GlobalDrawerButton", 30, false)) {
			if (MobileUtils.isMobElementExists(fieldObjects, testCase, "DashboardIconText", 5)) {
				List<WebElement> dashboardIconText = MobileUtils.getMobElements(fieldObjects, testCase,
						"DashboardIconText");
				if (MobileUtils.isMobElementExists("id", "name", testCase, 3, false)) {
					dashboardIconText.addAll(MobileUtils.getMobElements(testCase, "id", "name"));
				}
				boolean f = false;
				String deviceName = "";
				for (WebElement e : dashboardIconText) {
					String displayedText;
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						displayedText = e.getText();
					} else {
						displayedText = e.getAttribute("value");
					}
					if (expectedDevice.equalsIgnoreCase("Switch")) {
						deviceName = inputs.getInputValue("LOCATION1_SWITCH1_NAME");
					} else if (expectedDevice.equalsIgnoreCase("Dimmer")) {
						deviceName = inputs.getInputValue("LOCATION1_DIMMER1_NAME");
					}
					if (displayedText.equals(deviceName)) {
						f = true;
						break;
					}
				}
				if (f) {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Device : " + deviceName + " is present on the dashboard.");
				} else {
					Keyword.ReportStep_Pass(testCase, "Device : " + deviceName + " is not present on the dashboard.");
				}
			} else {
				Keyword.ReportStep_Pass(testCase, "No devices found on the dashboard");
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "User is not on the dashboard");
		}
		return flag;
	}

	/**
	 * <h1>Get Location Time</h1>
	 * <p>
	 * The getLocationTime method returns the location time
	 * </p>
	 *
	 * @author Midhun Gollapalli (H179225)
	 * @version 1.0
	 * @since 2018-02-15
	 * @param testCase
	 *            Instance of the TestCases class used to create the testCase
	 * @param inputs
	 *            Instance of the TestCaseInputs class used to pass inputs to the
	 *            testCase instance
	 * @return TimeZone Returns the location time
	 */
	public static String getLocationTime(TestCases testCase, TestCaseInputs inputs, String timeFormat) {
		LocationInformation locInfo = new LocationInformation(testCase, inputs);
		String time = " ";
		try {
			TimeZone timeZone = TimeZone.getTimeZone(locInfo.getIANATimeZone());

			Calendar date = Calendar.getInstance(timeZone);
			String ampm;
			if (date.get(Calendar.AM_PM) == Calendar.AM) {
				ampm = "AM";
			} else {
				ampm = "PM";
			}
			String hour;
			if (date.get(Calendar.HOUR) == 0) {
				hour = "12";
			} else {
				hour = String.valueOf(date.get(Calendar.HOUR));
			}
			String minute;
			if (date.get(Calendar.MINUTE) < 10) {
				minute = "0" + date.get(Calendar.MINUTE);
			} else {
				minute = String.valueOf(date.get(Calendar.MINUTE));
			}
			int month = date.get(Calendar.MONTH) + 1;
			switch (timeFormat) {
			case "TIMEINYYMMHHMMFORMAT": {
				time = String.valueOf(date.get(Calendar.YEAR) + "-" + month + "-" + date.get(Calendar.DAY_OF_MONTH)
				+ "T" + hour + ":" + minute + " " + ampm);
				break;
			}
			case "TIMEINHHMMFORMAT": {
				time = String.valueOf(hour + ":" + minute + " " + ampm);
				break;
			}
			}
		} catch (Exception e) {
			time = "";
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Get Android Device Time : Error occurred : " + e.getMessage());
		}
		return time;
	}

	public static boolean VerifyLoginScreen(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		String USER_ID_TEXT = "Email";
		String FORGOT_PASSWORD_TEXT_Android= "Forgot Password?";
		String FORGOT_PASSWORD_TEXT_IOS= "Forgot Password";
		String CREATE_ACCOUNT_TEXT = "Create Account";
		String LOGIN_TEXT = "Log In";
		String UseremailID = " ";

		LoginScreen ls = new LoginScreen(testCase);
		CreateAccountScreen cs=new CreateAccountScreen(testCase);

		if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
			flag = flag && ls.clickOnLoginButton();
		}
		if(ls.isEmailAddressTextFieldVisible() && ls.getEmailAddressTextFieldValue().equalsIgnoreCase(USER_ID_TEXT))
		{
			Keyword.ReportStep_Pass(testCase,
					"[optik login screen]: Email Address field text verified" );
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"[optik login screen]: Email Address field text mismatched. Expected : "+ USER_ID_TEXT + " but found : " +ls.getEmailAddressTextFieldValue());
			flag = false;
		}

		if(ls.clickOnEmailAddressTextField())
		{
			Keyword.ReportStep_Pass(testCase,"[optik login screen]: Able to click on Email Address text field" );

			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				ls.clickOnoptikLogo();
			}
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"[optik login screen]: Unable to click on Email Address text field");
			flag = false;
		}

		if(ls.isPasswordFieldVisible())
		{
			Keyword.ReportStep_Pass(testCase,
					"[optik login screen]: Password field is shown" );
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"[optik login screen]: Password field is not shown");
			flag = false;
		}

		if(ls.clickOnPasswordField())
		{
			Keyword.ReportStep_Pass(testCase,"[optik login screen]: Able to click on Password text field" );
			ls.clickOnoptikLogo();
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"[optik login screen]: Unable to click on Password text field");
			flag = false;
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
			if(ls.getLoginButtonText().equalsIgnoreCase(LOGIN_TEXT))
			{
				Keyword.ReportStep_Pass(testCase,"[optik login screen]: Login Text verified");

			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "[optik login screen], expected text is "+ LOGIN_TEXT + " but found " + ls.getLoginButtonText());
				flag = false;
			}
		}
		else
		{
			if(ls.getLoginButtonText().equalsIgnoreCase("Disabled"))
			{
				Keyword.ReportStep_Pass(testCase,"[optik login screen]: Login button is Disabled");

			}
			else if(ls.getLoginButtonDisableTextIOS().equalsIgnoreCase("Disabled"))
			{
				Keyword.ReportStep_Pass(testCase,"[optik login screen]: Login button is Disabled");

			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "[optik login screen], Login button is not Disabled");
				flag = false;
			}

		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(ls.isForgotPasswordButtonVisible() &&  ls.getForgotPasswordButtonText().equalsIgnoreCase(FORGOT_PASSWORD_TEXT_Android))
			{
				Keyword.ReportStep_Pass(testCase,"[optik login screen]: Forgot Password Text verified");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "[optik login screen], expected text is "+ FORGOT_PASSWORD_TEXT_Android + " but found " + ls.getForgotPasswordButtonText());
				flag = false;
			}
		}
		else
		{
			if(ls.isForgotPasswordButtonVisible() && ls.getForgotPasswordButtonText().equalsIgnoreCase(FORGOT_PASSWORD_TEXT_IOS))
			{
				Keyword.ReportStep_Pass(testCase,"[optik login screen]: Forgot Password verified");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "[optik login screen], expected text is "+ FORGOT_PASSWORD_TEXT_IOS + " but found " + ls.getForgotPasswordButtonText());
				flag = false;
			}
		}

		if(ls.isEmailAddressTextFieldVisible())
		{
			ls.clickOnEmailAddressTextField();
			ls.setEmailAddressValue(UseremailID);
			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				ls.clickOnoptikLogo();
			}else {
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}
			}
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"[optik login screen]: Unable to click on email address and set the value");
		}
		if(ls.clickOnForgotPasswordButton())
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(ls.getForgotPasswordEmailAddressTextFieldValue().equalsIgnoreCase(UseremailID))
				{
					Keyword.ReportStep_Pass(testCase,"optik Forgot Password screen: Email address prepopulated from Login screen and value is "+ ls.getEmailAddressTextFieldValue());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"optik Forgot Password screen: Email address failed to prepopulate from Login screen, expected text is "+ UseremailID + " but found " + ls.getEmailAddressTextFieldValue());
					flag = false;
				}

			}
			else
			{
				if(ls.getForgotPasswordEmailAddressTextFieldValue().contains(""))
				{
					Keyword.ReportStep_Pass(testCase,"optik Forgot Password screen: Email address prepopulated from Login screen and value is "+ ls.getForgotPasswordEmailAddressTextFieldValue());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"optik Forgot Password screen: Email address failed to prepopulate from Login screen, expected text is "+ UseremailID + " but found " + ls.getEmailAddressTextFieldValue());
					flag = false;
				}
			}


			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(ls.isResetButtonVisible()&& ls.getResetButtonText().equalsIgnoreCase("Reset"))
				{
					Keyword.ReportStep_Pass(testCase,"[optik login screen]: Reset Button Text verified");
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"[optik login screen]: Unable to identify reset button");
				}
			}
			else
			{
				if(ls.isForgotPasswordEmailAddressVisible())
				{
					ls.setForgotPasswordEmailAddressValue("testResetEnabled@grr.la");
					Keyword.ReportStep_Pass(testCase,"[optik login screen]:Able to set email id for Reset Button verification");
				}
				if(ls.isResetButtonVisible())
				{
					Keyword.ReportStep_Pass(testCase,"[optik login screen]: Reset Button Text verified");
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"[optik login screen]: Unable to identify reset button");
				}
			}

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				//ls.clickOnCancelButton();
				ls.clickOnLoginButton();
			}
			else
			{
				ls.clickOnLoginButton();
			}


		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"[optik login screen]: Unable to identify Forgot Password button");

		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}
		if(ls.isCancelButtonVisible())
		{
			Keyword.ReportStep_Pass(testCase,"[optik login screen]: Cancel button is shown");
			if(!ls.clickOnCancelButton())
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"[optik login screen]: Unable to click on cancel button");
			}
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"[optik login screen]: Cancel Button is not shown");
		}

		if(ls.isCreateAccountVisible() && ls.getCreateAccountButtonText().equalsIgnoreCase(CREATE_ACCOUNT_TEXT))
		{
			Keyword.ReportStep_Pass(testCase, "[optik login screen]: create Account Text verified");
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"[optik login screen]: Create Account Text mismatched, expected text is "+ CREATE_ACCOUNT_TEXT + " but found " + ls.getCreateAccountButtonText());

		}
		if(!ls.navigateToCreateAccountScreen())
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"[optik login screen]: Unable to click ob Create Account button");
		}
		else
		{
			Keyword.ReportStep_Pass(testCase, "[optik login screen]:User Navigate to Create Account Screen" );
		}

		if(cs.isSelectCountryVisible())
		{
			Keyword.ReportStep_Pass(testCase, "[optik login screen]: Create Account Header is Shown");
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				cs.clickOnSelectCountryButton();
				MobileUtils.pressBackButton(testCase);
			}
			else
			{
				cs.clickOnSelectCountryButton();
				cs.clickOnConformSelectCountryButton();
				if(ls.isCancelButtonVisible())
				{
				ls.clickOnCancelButton();
				}

			}
		}



		if(ls.isbackButtonVisible())
		{
			ls.clickOnbackButton();
		}
		else
		{
			MobileUtils.pressBackButton(testCase);
		}

		if(ls.isoptikLogoVisible())
		{
			Keyword.ReportStep_Pass(testCase,"[optik login screen]: demo logo is shown" );
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"[optik login screen]:demo logo is not shown");
			flag = false;
		}

		return flag;
	}

	public static boolean LaunchoptikApplication(TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag = true;
		flag = MobileUtils.launchApplication(inputs, testCase, true);
		OSPopUps os=new OSPopUps(testCase);
		if(MobileUtils.isRunningOnAndroid(testCase)) {
			if(os.isPerfectoIgnoreButtonVisible()){
				os.clickOnPerfectoIgnoreButton();
			}}
		if (!MobileUtils.isRunningOnAndroid(testCase)) {

			if (inputs.isInputAvailable("LANGUAGE")) {
				flag = flag && optikUtils.closeAppLaunchPopupsLocal(testCase);
				flag = flag && optikUtils.setAppEnvironmentForLocalization(testCase, inputs);

			} else {
				flag = flag && optikUtils.closeAppLaunchPopups(testCase);
				flag = flag && optikUtils.setAppEnvironment(testCase, inputs);

			}
		}

		else {
			if (inputs.isInputAvailable("LANGUAGE")) {
				flag = flag && optikUtils.closeAppLaunchPopupsLocal(testCase);
				flag = flag && optikUtils.setAppEnvironment(testCase, inputs);
			} else {
				flag = flag && optikUtils.closeAppLaunchPopups(testCase);
				flag = flag && optikUtils.setAppEnvironment(testCase, inputs);

			}
		}
		return flag;
	}

	public static boolean VerifyWeatherUnit(TestCases testCase, TestCaseInputs inputs) {
		String getChapiUnit="";
		boolean flag=true;
		Dashboard db = new Dashboard(testCase);
		WeatherScreen wh=new WeatherScreen(testCase);
		DeviceInformation device =new DeviceInformation(testCase , inputs);

		if(db.isWeatherIconVisible(10))
		{
			db.clickOnWeatherIcon();
			try
			{
				getChapiUnit=device.getThermostatUnits();

				if(getChapiUnit.equals(GlobalVariables.FAHRENHEIT))
				{
					Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp through chapi: "+GlobalVariables.FAHRENHEIT);
					if(MobileUtils.isRunningOnAndroid(testCase))
					{

						if(wh.getCurrentWeatherFr().equalsIgnoreCase("\u00B0 F"))
						{
							Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp display properly in "+wh.getCurrentWeatherFr());
							Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp unit: Fahrenheit matches with chapi value: "+GlobalVariables.FAHRENHEIT);
						}
						else if(wh.getCurrentWeatherFr().equalsIgnoreCase("Fahrenheit"))
						{
							Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp display properly in "+wh.getCurrentWeatherFr());
							Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp unit: "+wh.getCurrentWeatherFr()+"matches with chapi value: "+GlobalVariables.FAHRENHEIT);
						}
						else
						{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Weather: Weather Current temp unit: "+wh.getCurrentWeatherFr()+"not matches with chapi value: "+GlobalVariables.FAHRENHEIT);
							flag=false;
						}
					}

					if(wh.isCelsiusButtonVisible())
					{
						wh.ClickonCelsiusButton();
						Keyword.ReportStep_Pass(testCase,"Weather: successfully click on celsius button ");
					}

					if (MobileUtils.isRunningOnAndroid(testCase))
					{
						if(wh.getCurrentWeatherCe().equalsIgnoreCase("\u00B0 C"))
						{
							Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp display properly in " +wh.getCurrentWeatherCe());

							Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp unit: Celsius matches with chapi value: "+GlobalVariables.CELSIUS);
						}

						else 	if(wh.getCurrentWeatherFr().equalsIgnoreCase("Celsius"))
						{
							Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp display properly in "+wh.getCurrentWeatherCe());

							Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp unit: " +wh.getCurrentWeatherCe()+ " matches with chapi value: "+GlobalVariables.CELSIUS);
						}
						else
						{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Weather: Weather Current temp unit:Celsius not matches with chapi value: "+GlobalVariables.CELSIUS);
							flag=false;
						}
					}



				}else
				{
					Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp unit with chapi value: "+GlobalVariables.CELSIUS);

					if(wh.isCelsiusButtonVisible())
					{
						wh.ClickonCelsiusButton();
						Keyword.ReportStep_Pass(testCase,"Weather: successfully click on celsius button ");
					}

					if (MobileUtils.isRunningOnAndroid(testCase))
					{
						if(wh.getCurrentWeatherCe().equalsIgnoreCase("\u00B0 C"))
						{
							Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp display properly in " +wh.getCurrentWeatherCe());

							Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp unit: Celsius matches with chapi value: "+GlobalVariables.CELSIUS);
						}

						else 	if(wh.getCurrentWeatherFr().equalsIgnoreCase("Celsius"))
						{
							Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp display properly in "+wh.getCurrentWeatherCe());

							Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp unit: " +wh.getCurrentWeatherCe()+ " matches with chapi value: "+GlobalVariables.CELSIUS);
						}
						else
						{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Weather: Weather Current temp unit:Celsius not matches with chapi value: "+GlobalVariables.CELSIUS);
							flag=false;
						}
					}

					if(wh.isWeatherFrVisible())
					{
						wh.ClickonWeatherFrButton();
						Keyword.ReportStep_Pass(testCase,"Weather: successfully click on Fahrenheit button ");
					}

					if(MobileUtils.isRunningOnAndroid(testCase))
					{

						if(wh.getCurrentWeatherFr().equalsIgnoreCase("\u00B0 F"))
						{
							Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp display properly in "+wh.getCurrentWeatherFr());
							Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp unit: Fahrenheit matches with chapi value: "+GlobalVariables.FAHRENHEIT);
						}
						else if(wh.getCurrentWeatherFr().equalsIgnoreCase("Fahrenheit"))
						{
							Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp display properly in "+wh.getCurrentWeatherFr());
							Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp unit: "+wh.getCurrentWeatherFr()+"matches with chapi value: "+GlobalVariables.FAHRENHEIT);
						}
						else
						{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Weather: Weather Current temp unit: "+wh.getCurrentWeatherFr()+"not matches with chapi value: "+GlobalVariables.FAHRENHEIT);
							flag=false;
						}
					}



				}
			}catch (Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			}

			if(wh.isBackButtonAvailable(10))
			{
				wh.ClickonBackButton();
			}
		}

		return flag;
	}


	public static boolean VerifyWeatherTime(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		Dashboard db = new Dashboard(testCase);
		WeatherScreen wh=new WeatherScreen(testCase);
		if(db.isWeatherIconVisible(10))
		{
			db.clickOnWeatherIcon();
			if(wh.isWeatherTimeVisible())
			{
				flag=flag && wh.verifyTimeIntervalOnWeather();
				Keyword.ReportStep_Pass(testCase,"Weather: Forecast Time of Weather is displayed properly");
			}
			else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Weather: Forecast Time of Weather is not displayed properly");
				flag=false;
			}

			if(wh.isBackButtonAvailable(10))
			{
				wh.ClickonBackButton();
			}

		}
		return flag;
	}

	public static boolean logoutOfoptikApp(TestCases testCase)
	{
		boolean flag = true;
		LoginScreen ls = new LoginScreen(testCase);
		Dashboard db = new Dashboard(testCase);
		SecondaryCardSettings sc = new SecondaryCardSettings(testCase);
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
		ClickOnDoneButtonForIOSOnDashbord(testCase);
		}

		if(db.isGlobalDrawerButtonVisible(5))
		{
			flag = flag && db.clickOnGlobalDrawerButton();
		}

		try
		{

				Schedule.SwipeDown(testCase);
			
			flag = flag && sc.clickOnLogoutOption(5);

			if (ls.isLoginButtonVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Successfully logout from the application.");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"[Logout of optik] : Login screen verification failed.Not able to logout of the App after click on Logout option.");
				flag = false;
			}
		}
		catch (Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Logout of app :  Error occurred - " + e.getMessage());
			flag = false;
		}
		return flag;
	}

	public static void ClickOnDoneButtonForIOSOnDashbord(TestCases testCase) {
		CoachMarks cm = new CoachMarks(testCase);

		if(!MobileUtils.isRunningOnAndroid(testCase)) {
			while(cm.isDoneButtonVisible())
			{
				cm.clickOnDoneButton();
			}
			if(cm.isGotitButtonForFrCAVisible(3,testCase.getTestCaseInputs()))
			{
				cm.clickOnGotitFrCAButton(testCase.getTestCaseInputs());
			}
		}

	}

	public static boolean changeSystemMode(TestCases testCase, TestCaseInputs inputs, String expectedMode,String deviceToClick) {boolean flag = true;
	PrimaryCard pc= new PrimaryCard(testCase);
	Dashboard db= new Dashboard(testCase);
	if(db.isDevicePresentOnDashboard(deviceToClick))
	{
		if(db.ClickOnDevicePresentOnDashboard(deviceToClick))
		{
			try {
				CoachMarkUtils.closeCoachMarks(testCase);
				DeviceInformation statInfo = new DeviceInformation(testCase, inputs);

				if (expectedMode.equals("Heat")) {
					if(!statInfo.getThermoStatMode().equals("Heat"))
					{
						flag = flag && pc.clickOnSystemMode();
						flag = flag && pc.changeSystemMode("HEAT");
						flag = flag && pc.ClickOnSaveButton();
					}
					else
					{
						Keyword.ReportStep_Pass(testCase,"System is already in "+expectedMode+" mode.");
					}
				}

				else if (expectedMode.equals("Cool"))
				{
					if(!statInfo.getThermoStatMode().equals("Cool"))
					{
						flag = flag && pc.clickOnSystemMode();
						flag = flag && pc.changeSystemMode("COOL");
						flag = flag && pc.ClickOnSaveButton();
					}
					else
					{
						Keyword.ReportStep_Pass(testCase,"System is already in "+expectedMode+" mode.");
					}
				}

				else if (expectedMode.equals("Off"))
				{
					if(!statInfo.getThermoStatMode().equals("Off"))
					{
						flag = flag && pc.clickOnSystemMode();
						flag = flag && pc.changeSystemMode("OFF");
						flag = flag && pc.ClickOnSaveButton();
					}
					else
					{
						Keyword.ReportStep_Pass(testCase,"System is already in "+expectedMode+" mode.");
					}
				} else if (expectedMode.equals("Auto")) {
					if(!statInfo.getThermoStatMode().equals("Auto"))
					{
						flag = flag && pc.clickOnSystemMode();
						flag = flag && pc.changeSystemMode("Auto");
						flag = flag && pc.ClickOnSaveButton();
					}
					else
					{
						Keyword.ReportStep_Pass(testCase,"System is already in "+expectedMode+" mode.");
					}
				}

			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Change System Mode : Error occurred : " + e.getMessage());

			}
				/*
				  if (pc.isBackButtonAvailable()) { pc.ClickOnBackButton(); }else if
				  (pc.isCrossButtonVisible()) { pc.ClickOnCrossButton(); }
				 */
		}
	}
	else if (pc.isSystemModeVisible()) {
		try {
			CoachMarkUtils.closeCoachMarks(testCase);
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);

			if (expectedMode.equals("Heat")) {
				if (!statInfo.getThermoStatMode().equals("Heat")) {
					flag = flag && pc.clickOnSystemMode();
					flag = flag && pc.changeSystemMode("HEAT");
					flag = flag && pc.ClickOnSaveButton();
				} else {
					Keyword.ReportStep_Pass(testCase, "System is already in " + expectedMode + " mode.");
				}
			}

			else if (expectedMode.equals("Cool")) {
				if (!statInfo.getThermoStatMode().equals("Cool")) {
					flag = flag && pc.clickOnSystemMode();
					flag = flag && pc.changeSystemMode("COOL");
					flag = flag && pc.ClickOnSaveButton();
				} else {
					Keyword.ReportStep_Pass(testCase, "System is already in " + expectedMode + " mode.");
				}
			}

			else if (expectedMode.equals("Off")) {
				if (!statInfo.getThermoStatMode().equals("Off")) {
					flag = flag && pc.clickOnSystemMode();
					flag = flag && pc.changeSystemMode("OFF");
					flag = flag && pc.ClickOnSaveButton();
				} else {
					Keyword.ReportStep_Pass(testCase, "System is already in " + expectedMode + " mode.");
				}
			} else if (expectedMode.equals("Auto")) {
				if (!statInfo.getThermoStatMode().equals("Auto")) {
					flag = flag && pc.clickOnSystemMode();
					flag = flag && pc.changeSystemMode("Auto");
					flag = flag && pc.ClickOnSaveButton();
				} else {
					Keyword.ReportStep_Pass(testCase, "System is already in " + expectedMode + " mode.");
				}
			}

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Change System Mode : Error occurred : " + e.getMessage());
		}
			/*
			  if (pc.isBackButtonAvailable()) { pc.ClickOnBackButton(); }
			 */

	}
	return flag;
	}

	public static boolean verifySystemMode(TestCases testCase, TestCaseInputs inputs, String expectedMode,String deviceToClick) {
		boolean flag = true;
		PrimaryCard pc= new PrimaryCard(testCase);
		Dashboard db= new Dashboard(testCase);

		if(!MobileUtils.isRunningOnAndroid(testCase))
		{if(db.isDevicePresentOnDashboard(deviceToClick)){
			if(db.ClickOnDevicePresentOnDashboard(deviceToClick))
			{
				Keyword.ReportStep_Pass(testCase,
						"Verify System Mode : Navigated to Home Screen");
			}
		}
		try{
			FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(testCase.getMobileDriver());
			fWait.pollingEvery(Duration.ofSeconds(1));
			fWait.withTimeout(Duration.ofMinutes(1));


			Boolean isEventReceived = fWait.until(new Function<CustomDriver, Boolean>() {
				@Override
				public Boolean apply(CustomDriver driver) {
					String changedMode = pc.getCurrentMode();
					if (changedMode.equalsIgnoreCase(expectedMode)) {
						return true;
					} else {
						return false;
					}
				}
			});

			if (isEventReceived) {
				Keyword.ReportStep_Pass(testCase,
						"Verify System Mode : Thermostat is in " + expectedMode + " mode in the app");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify System Mode : Thermostat is not in " + expectedMode + " mode in the app");
			}
		}catch(Exception e)
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify System Mode : Thermostat is not in " + expectedMode + " mode in the app");
		}

		if(pc.isBackButtonAvailable())
		{
			pc.ClickOnBackButton();
		}
		CoachMarkUtils.closeCoachMarks(testCase);
		}
		else
		{
			if(db.isDevicePresentOnDashboard(deviceToClick)){
				if(db.ClickOnDevicePresentOnDashboard(deviceToClick))
				{
					Keyword.ReportStep_Pass(testCase,
							"Verify System Mode : Navigated to Home Screen");
				}
			}
			//Use code will be when android System mode is available.
			FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(testCase.getMobileDriver());
			fWait.pollingEvery(Duration.ofSeconds(1));
			fWait.withTimeout(Duration.ofMinutes(2));

			Boolean isEventReceived = fWait.until(new Function<CustomDriver, Boolean>() {
				@Override
				public Boolean apply(CustomDriver driver) {
					String changedMode = "";
					if(expectedMode.equalsIgnoreCase("Auto") && MobileUtils.isRunningOnAndroid(testCase)) {
						if(pc.isAutoSetPointsVisiable()) {
						changedMode = "Auto";
						}
					}else {
						changedMode = pc.getCurrentMode();
					}
					if (changedMode.equalsIgnoreCase(expectedMode)) {
						return true;
					} else {
						return false;
					}
				}
			});

			if (isEventReceived) {
				Keyword.ReportStep_Pass(testCase,
						"Verify System Mode : Thermostat is in " + expectedMode + " mode in the app");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify System Mode : Thermostat is not in " + expectedMode + " mode in the app");
			}

			if(pc.isBackButtonAvailable())
			{
				pc.ClickOnBackButton();
			}

		}
		return flag;
	}



	public static boolean VerifyFanMode(TestCases testCase, TestCaseInputs inputs,String deviceToClick) {

		boolean flag=true;
		try {

			PrimaryCard pc= new PrimaryCard(testCase);
			Dashboard db= new Dashboard(testCase);
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			String statetype=statInfo.getDeviceType();
			ArrayList<String> exampleData = new ArrayList<String>();

			if(statetype.contains("Blackbeard"))
			{
				exampleData.add("Auto");
				exampleData.add("Low");
				exampleData.add("Medium");
				exampleData.add("High");

			}
			else if(statInfo.getJasperDeviceType().contains("EMEA"))
			{
				Keyword.ReportStep_Pass(testCase, "Fan mode Not visible for EMEA");
			}
			else
			{
				exampleData.add("Auto");
				exampleData.add("On");
				exampleData.add("Circulate");
			}
			if(statInfo.getJasperDeviceType().contains("NA")||statetype.contains("Blackbeard")||statetype.contains("HoneyBadger") ||statetype.contains("Flycatcher") ||statetype.contains("Storm"))
			{

				for (String type : exampleData)
				{

					if (!changefanModeOption(testCase , inputs , type))
					{
						flag = false ;
					}
					if(!VerifyFanModeOptionSelected(testCase , inputs , type))
					{
						flag = false ;
					}
					else
					{
						Keyword.ReportStep_Pass(testCase,"Verify Fan mode selected option is selected when user is on the primary card.");
					}
					if(deviceToClick.equalsIgnoreCase("VACATION SETTING SCREEN"))
					{
						if(pc.isBackButtonAvailable())
						{
							pc.ClickOnBackButton();
						}
					}
					else if(deviceToClick.equalsIgnoreCase("primary card"))
					{
						if(pc.isCrossButtonVisible())
						{
							pc.ClickOnCrossButton();
						}
						DASZwaveUtils.clickNavigateUp(testCase);
						CoachMarkUtils.closeCoachMarks(testCase);
						if(!db.ClickOnDevicePresentOnDashboard(inputs.getInputValue("LOCATION1_DEVICE1_NAME")))
						{
							flag = false ;
						}
						if(!VerifyFanModeOptionSelected(testCase , inputs , type))
						{
							flag = false ;
						}
						else
						{
							Keyword.ReportStep_Pass(testCase,"Verify Fan mode selected option is selected when user move to primary card screen from dashboard.");
						}

						if(pc.isCrossButtonVisible())
						{
							pc.ClickOnCrossButton();
						}

					}

				}


			}

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Error occurred : " + e.getMessage());
		}
		return flag;

	}

	public static boolean VerifyFanSpeedInfo(TestCases testCase, TestCaseInputs inputs){
		boolean flag=true;
		PrimaryCard pm=new PrimaryCard(testCase);
		FanSpeedInfo fs=new FanSpeedInfo(testCase);
		Dashboard ds=new Dashboard(testCase);

		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		String statetype=statInfo.getDeviceType();

		if(statInfo.getDeviceType().equalsIgnoreCase("Blackbeard") || statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger") || statInfo.getJasperDeviceType().equalsIgnoreCase("NA")||statInfo.getDeviceType().equals("FlyCatcher") ||statInfo.getDeviceType().equals("Storm")){

			try {
				flag = flag && DashboardUtils.selectDeviceFromDashboard(testCase,inputs.getInputValue("LOCATION1_DEVICE1_NAME"));
			} catch (Exception e) {
				e.printStackTrace();
			}
			flag = flag && CoachMarkUtils.closeCoachMarks(testCase);
			if(pm.isFanModeVisible())
			{
				flag=flag && pm.clickOnFanMode();
				flag=flag && pm.verifyAvailableFanMode(testCase, inputs);
				if(pm.isFanInfoButtonVisible()){
					pm.clickOnFanInfoButton();
					Keyword.ReportStep_Pass(testCase, "Fan : Navigated to Fan Speed Info");
					if(statetype.contains("Blackbeard"))
					{
						if(fs.isAutoOptionVisible(10))
						{
							Keyword.ReportStep_Pass(testCase, "Fan Speed Info: Auto Option is visible");
						}
						else{
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan Speed Info: Auto Option is not visible", false);
						}

						if(fs.isLowOptionVisible(10))
						{
							Keyword.ReportStep_Pass(testCase, "Fan Speed Info: Low Option is visible");
						}
						else{
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan Speed Info: Low Option is not visible", false);
						}

						if(fs.isMediumOptionVisible(10))
						{
							Keyword.ReportStep_Pass(testCase, "Fan Speed Info: Medium Option is visible");
						}
						else{
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan Speed Info: Medium Option is not visible", false);
						}

						if(fs.isHighOptionVisible(10))
						{
							Keyword.ReportStep_Pass(testCase, "Fan Speed Info: High Option is visible");
						}
						else{
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan Speed Info: High Option is not visible", false);
						}
					}
					else if(statInfo.getJasperDeviceType().contains("NA") || statetype.contains("HoneyBadger")||statInfo.getDeviceType().equals("FlyCatcher") ||statInfo.getDeviceType().equals("Storm"))
					{
						if(fs.isAutoOptionVisible(10))
						{
							Keyword.ReportStep_Pass(testCase, "Fan Speed Info: Auto Option is visible");
						}
						else{
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan Speed Info: Auto Option is not visible", false);
						}

						if(fs.isOnOptionVisible(10))
						{
							Keyword.ReportStep_Pass(testCase, "Fan Speed Info: On Option is visible");
						}
						else{
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan Speed Info: On Option is not visible", false);
						}

						if(fs.isCirculateOptionVisible(10))
						{
							Keyword.ReportStep_Pass(testCase, "Fan Speed Info: Circulate Option is visible");
						}
						else{
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan Speed Info: Circulate Option is not visible", false);
						}

					}
					if(fs.isBackButtonVisible(10)){
						fs.clickonBackButton();
					}
					else{
						flag=false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan Speed Info: Unable to find back button", false);
					}
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan: Unable to find Fan Info button", false);
				}
				pm.ClickOnCrossButton();
				pm.ClickOnBackButton();
				if(ds.isDoneButtonVisible()) {
					ds.clickOnDone();
				}

			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Primary card: Unable to find Fan button", false);
			}
		}
		else
		{
			Keyword.ReportStep_Pass(testCase, "Fan mode only gets displayed for NA, HBB and BB devices ");
		}



		return flag;
	}


	public static boolean VerifyFirmwareVersion(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		ThermostatConfigurationScreen tc=new ThermostatConfigurationScreen(testCase,inputs);
		ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);
		if(ts.isThermostatConfigurationVisible())
		{
			Keyword.ReportStep_Pass(testCase,"THERMOSTAT SETTINGS: Thermostat Configuration is shown on Thermostat Settings screen");
		}
		else
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Thermostat Configuration");
			}
			else
			{
				try
				{
					optikUtils.scrollToElementUsingExactAttributeValue(testCase , "value" , "Thermostat Configuration");
				}
				catch (Exception e)
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
				}
			}
			if(ts.isThermostatConfigurationVisible())
			{
				Keyword.ReportStep_Pass(testCase,"THERMOSTAT CONFIGURATION:Thermostat Configuration is shown on Thermostat Settings screen");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT CONFIGURATION:Thermostat Configuration is not shown on Thermostat Settings screen");
			}

		}
		if(ts.isThermostatConfigurationVisible())
		{
			if(ts.navigateToThermostatConfigurationPage())
			{
				Keyword.ReportStep_Pass(testCase,"THERMOSTAT CONFIGURATION: Successfully navigate to Thermostat Configuration screen");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT CONFIGURATION: Unable to navigate Thermostat Configuration screen");
			}
		}

		DeviceInformation di=new DeviceInformation(testCase , inputs);

		if(di.getDeviceType().equalsIgnoreCase("HoneyBadger"))
		{
			if(tc.isFirmwareVersionTextVisible() && tc.getFirmwareVersionText().toUpperCase().contains("Firmware Version".toUpperCase()))
			{
				Keyword.ReportStep_Pass(testCase,"THERMOSTAT CONFIGURATION:Firmware Version text is displayed");
				if(tc.isFirmwareVersionVisible())
				{
					Keyword.ReportStep_Pass(testCase,"THERMOSTAT CONFIGURATION:Firmware Version is displayed i.e. "+ tc.getFirmwareVersion());
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT CONFIGURATION: Firmware version is not displayed");
				}
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT CONFIGURATION: Firmware version text is not displayed");
			}

		}
		else
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(tc.isFirmwareVersionTextVisible() && tc.getFirmwareVersionText().toUpperCase().contains("Firmware Version".toUpperCase()))
				{
					Keyword.ReportStep_Pass(testCase,"THERMOSTAT CONFIGURATION:Firmware Version text is displayed");
				}
				else
				{
					Keyword.ReportStep_Pass(testCase,"THERMOSTAT CONFIGURATION: Firmware Version text is not displayed for NA,BB,EMEA Android platform");
				}
				if(tc.isFirmwareVersionVisible())
				{
					Keyword.ReportStep_Pass(testCase,"THERMOSTAT CONFIGURATION:Firmware Version is displayed i.e. "+ tc.getFirmwareVersion());
				}
				else
				{
					Keyword.ReportStep_Pass(testCase,"THERMOSTAT CONFIGURATION:Firmware Version is not displayed for NA,BB,EMEA Android platform");
				}

			}
			else
			{
				if(tc.isFirmwareVersionTextVisible() && tc.getFirmwareVersionText().toUpperCase().contains("Firmware Version".toUpperCase()))
				{
					Keyword.ReportStep_Pass(testCase,"THERMOSTAT CONFIGURATION:Firmware Version text is displayed");
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT CONFIGURATION: Firmware version is not displayed");
				}

				if(tc.isFirmwareVersionVisible())
				{
					Keyword.ReportStep_Pass(testCase,"THERMOSTAT CONFIGURATION:Firmware Version is displayed i.e. "+ tc.getFirmwareVersion());
				}
				else
				{
					Keyword.ReportStep_Pass(testCase,"THERMOSTAT CONFIGURATION:Firmware Version is not displayed for NA,BB,EMEA IOS platform");
				}
			}
		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.scrollToExactAndroid(testCase , "Delete Thermostat");
		}
		else
		{
			try
			{
				optikUtils.scrollToElementUsingExactAttributeValue(testCase , "name" , "Delete Thermostat");
			}
			catch (Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			}
		}

		if(tc.isDeleteThermostatOptionVisible())
		{
			Keyword.ReportStep_Pass(testCase,"THERMOSTAT CONFIGURATION:'Delete Thermostat' option is displayed.");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT CONFIGURATION:'Delete Thermostat' option is not displayed.");
		}
		return flag;
	}

	public static boolean verifyTempStepperDisabled(TestCases testCase, String text) {
		boolean flag = true;
		Dashboard db = new Dashboard(testCase);
		CoachMarkUtils.closeCoachMarks(testCase);
		PrimaryCard pr = new PrimaryCard(testCase);

		if (pr.isTempStepperCurrentValueDisabled()) {
			Keyword.ReportStep_Pass(testCase,
					"Verify Temperature Stepper is disabled : Current Temperature value is not present on Primary Card / Dashboard.");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Temperature Stepper is disabled :  Current Temperature value is present on Primary Card / Dashboard.");

		}
		if (pr.isTempIncrementDisabled() && pr.isTempDecrementDisabled()) {
			Keyword.ReportStep_Pass(testCase,
					"Verify Temperature Stepper is disabled  :  Temperature Stepper Increment Button and Decrement Button Button is disabled");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Temperature Stepper is disabled  : Temperature Stepper Increment Button and DecrementButton Button is enabled");

		}
		if (text.equalsIgnoreCase("primary card")) {
			if (pr.isThermostatIsOffAvailable()) {
				if (pr.getThermostatIsOff().equalsIgnoreCase("SYSTEM IS OFF")) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Temperature Stepper is disabled : 'SYSTEM IS OFF' text present on " + text);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Verify Temperature Stepper is disabled :'SYSTEM IS OFF' text is not present on " + text);
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Temperature Stepper is disabled : 'SYSTEM IS OFF' text not present on " + text);

			}
		} else {
			if (db.isDashboardDeviceSecondaryTextVisible()) {
				if (db.getDashboardDeviceSecondaryText().toUpperCase().contains("INSIDE, OFF")) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Temperature Stepper is disabled :INSIDE, OFF text present on " + text);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Verify Temperature Stepper is disabled :'INSIDE, OFF' text is not present on " + text);
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Temperature Stepper is disabled : 'INSIDE, OFF' text is not present on " + text);
			}
		}

		return flag;
	}

	public static boolean verifyHumidityValue(TestCases testCase, TestCaseInputs inputs, String deviceToClick) {
		boolean flag = true;
		PrimaryCard pc= new PrimaryCard(testCase);
		Dashboard db= new Dashboard(testCase);
		if(db.ClickOnDevicePresentOnDashboard(deviceToClick))
		{
			/*while(cm.isGotitButtonVisible(3)){
				cm.clickOnGotitButton();
				if(i>6)
				{
					break;
				}
				i++;
			}*/

			CoachMarkUtils.closeCoachMarks(testCase);

			if(pc.isIndoorHumidityVisible())
			{
				Keyword.ReportStep_Pass(testCase,
						"Verify Humidity : Primary card is displaying humidity value as '" +pc.getStatIndoorHumidity()+"'");
			}
			else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Humidity : Primary card is not displaying humidity value");
			}

			if(pc.isBackButtonAvailable())
			{
				pc.ClickOnBackButton();
			}

		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Humidity : Thermostat is not in present");
			flag=false;
		}
		return flag;

	}

	public static String addHoursAndMinutesToTime(TestCases testCase, String time, boolean incrementTime, int diffHour,
			int diffMin) {
		Date returnTime = null;
		String changedTime = "";
		boolean flag = false;

		try {
			SimpleDateFormat df12 = new SimpleDateFormat("hh:mm a");
			SimpleDateFormat df24 = new SimpleDateFormat("hh:mm");
			SimpleDateFormat dfHour = new SimpleDateFormat("h a");
			String dateString = time.replaceAll("\\.", "");
			if (dateString.contains("m") || dateString.contains("M") && dateString.contains(":")) {
				returnTime = df12.parse(dateString);
			} else if (dateString.contains("m") || dateString.contains("M") && !dateString.contains(":")) {
				returnTime = dfHour.parse(dateString);
				flag = true;
			} else {
				returnTime = df24.parse(dateString);
			}
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(returnTime);
			if (incrementTime) {
				calendar.add(Calendar.HOUR, diffHour);
				calendar.add(Calendar.MINUTE, diffMin);
			} else {
				calendar.add(Calendar.HOUR, -diffHour);
				calendar.add(Calendar.MINUTE, -diffMin);
			}
			returnTime = calendar.getTime();
			if (dateString.contains("m") || dateString.contains("M") && dateString.contains(":")) {
				changedTime = df12.format(returnTime);
			} else if (flag) {
				changedTime = dfHour.format(returnTime);
			} else {
				changedTime = df24.format(returnTime);
			}
		} catch (NumberFormatException e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "[NumberFormatException] " + e.getMessage());
		} catch (ParseException e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "[ParseException] " + e.getMessage());
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "[Exception] " + e.getMessage());
		}
		return changedTime;
	}


	public static double getRandomSetPointInDialer(TestCases testCase, TestCaseInputs inputs)
	{

		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		HashMap<String, String> maxMinSetPoints = null;
		try {
			maxMinSetPoints = statInfo.getDeviceMaxMinSetPoints();
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		String systemMode = statInfo.getThermoStatMode();
		PrimaryCard pc=new PrimaryCard(testCase);
		Double TargetTemp=pc.getCurrentSetPointInDialer();
		TargetTemp += 3;
		if (systemMode.equals("Auto")) {
			systemMode = statInfo.getThermostatModeWhenAutoChangeOverActive();
		}
		if (systemMode.equals("Cool")) {
			if (TargetTemp > Double.parseDouble(maxMinSetPoints.get("MaxCool"))) {
				TargetTemp -= 6;
			}
		} else if (systemMode.equals("Heat")) {
			if (TargetTemp > Double.parseDouble(maxMinSetPoints.get("MaxHeat"))) {
				TargetTemp -= 6;
			}
		}
		return TargetTemp;
	}

	public static double getRandomSetPointInDialerStat2(TestCases testCase, TestCaseInputs inputs)
	{

		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		HashMap<String, String> maxMinSetPoints = null;
		try {
			maxMinSetPoints = statInfo.getDeviceMaxMinSetPoints();
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		String systemMode = statInfo.getThermoStatMode();
		PrimaryCard pc=new PrimaryCard(testCase);
		Double TargetTemp=pc.getCurrentSetPointInDialerStat2();
		TargetTemp += 3;
		if (systemMode.equals("Auto")) {
			systemMode = statInfo.getThermostatModeWhenAutoChangeOverActive();
		}
		if (systemMode.equals("Cool")) {
			if (TargetTemp > Double.parseDouble(maxMinSetPoints.get("MaxCool"))) {
				TargetTemp -= 6;
			}
		} else if (systemMode.equals("Heat")) {
			if (TargetTemp > Double.parseDouble(maxMinSetPoints.get("MaxHeat"))) {
				TargetTemp -= 6;
			}
		}
		return TargetTemp;
	}

	public static boolean setTargettempOnPrimaryCardStat2(TestCases testCase, TestCaseInputs inputs, Double targetTemp) {
		boolean flag=true;
		HashMap<String, String> setPoints = new HashMap<String, String>();
		String systemMode = "";
		Double maxHeat = 0.0;
		Double minHeat = 0.0;
		Double maxCool = 0.0;
		Double minCool = 0.0;
		Double maxSetPoint = 0.0;
		Double minSetPoint = 0.0;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			List<String> allowedModes = statInfo.getAllowedModes();
			setPoints = statInfo.getDeviceMaxMinSetPoints();
			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				maxHeat = Double.parseDouble(setPoints.get("MaxHeat"));
				minHeat = Double.parseDouble(setPoints.get("MinHeat"));
				maxCool = Double.parseDouble(setPoints.get("MaxCool"));
				minCool = Double.parseDouble(setPoints.get("MinCool"));
			} else if (allowedModes.contains("Heat") && !allowedModes.contains("Cool")) {
				maxHeat = Double.parseDouble(setPoints.get("MaxHeat"));
				minHeat = Double.parseDouble(setPoints.get("MinHeat"));
			} else if (!allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				maxCool = Double.parseDouble(setPoints.get("MaxCool"));
				minCool = Double.parseDouble(setPoints.get("MinCool"));
			}
			systemMode = statInfo.getThermoStatMode();
			if (systemMode.equals("Auto")) {
				systemMode = statInfo.getThermostatModeWhenAutoChangeOverActive();
			}
			if (systemMode.equals("Cool")) {
				maxSetPoint = maxCool;
				minSetPoint = minCool;
			} else if (systemMode.equals("Heat")) {
				maxSetPoint = maxHeat;
				minSetPoint = minHeat;
			}
			if (targetTemp < minSetPoint || targetTemp > maxSetPoint) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Tap Setting: Target Temp : "+ targetTemp + " is out of range" + maxSetPoint + "-" + minSetPoint);
				return false;
			} else
			{
				double Scroller,Scroller1 = 0;
				PrimaryCard pc=new PrimaryCard(testCase);
				Double currentTemp=pc.getCurrentSetPointInDialerStat2();
				Keyword.ReportStep_Pass(testCase,"Current Temperature on Primary Card :"+ currentTemp);

				if(currentTemp>targetTemp)
				{
					Scroller=currentTemp-targetTemp;
				}
				else
				{
					Scroller=targetTemp-currentTemp;
				}

				if(statInfo.getJasperDeviceType().equalsIgnoreCase("EMEA")) {

					Scroller1=(Scroller*2)-1;
				}
				else
				{
					Scroller1=Scroller-1.0;
				}
				if((currentTemp==targetTemp))
				{
					Keyword.ReportStep_Pass(testCase,"Verify Current Temperature on Primary Card :"+ pc.getCurrentSetPointInDialer()+ " is same as Target Target Temperature:"+ targetTemp);
				}else
				{
					if(!(currentTemp==targetTemp))
					{
						for(int j=0;j<Scroller1;j++)
						{
							if(targetTemp>currentTemp)
							{
								pc.ClickOnTempIncrementButtonStat2();
							}
							else if(targetTemp<currentTemp)
							{
								pc.ClickOnTempDecrementButtonStat2();
							}
						}
						Keyword.ReportStep_Pass(testCase,"Successfully Set Target Temperature :"+ targetTemp);
					}
					else
					{
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to set Target temperature on primary Card:"+ targetTemp);
					}
				}
			}
		}
		catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Temperature Stepper : Error occurred : " + e.getMessage());
			flag = false;
		}
		return flag;
	}




	public static boolean setTargettempOnPrimaryCard(TestCases testCase, TestCaseInputs inputs, Double targetTemp) {
		boolean flag=true;
		HashMap<String, String> setPoints = new HashMap<String, String>();
		String systemMode = "",coolSetpoints="",heatSetpoints="";
		Double maxHeat = 0.0;
		Double minHeat = 0.0;
		Double maxCool = 0.0;
		Double minCool = 0.0;
		Double maxSetPoint = 0.0;
		Double minSetPoint = 0.0;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			List<String> allowedModes = statInfo.getAllowedModes();
			setPoints = statInfo.getDeviceMaxMinSetPoints();
			coolSetpoints=statInfo.getCoolSetPoints();
			heatSetpoints=statInfo.getHeatSetPoints();
			inputs.setInputValue(GlobalVariables.DefaultCoolsetPoint,coolSetpoints);
			inputs.setInputValue(GlobalVariables.DefaultHeatsetPoint,heatSetpoints);

			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				maxHeat = Double.parseDouble(setPoints.get("MaxHeat"));
				minHeat = Double.parseDouble(setPoints.get("MinHeat"));
				maxCool = Double.parseDouble(setPoints.get("MaxCool"));
				minCool = Double.parseDouble(setPoints.get("MinCool"));
			} else if (allowedModes.contains("Heat") && !allowedModes.contains("Cool")) {
				maxHeat = Double.parseDouble(setPoints.get("MaxHeat"));
				minHeat = Double.parseDouble(setPoints.get("MinHeat"));
			} else if (!allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				maxCool = Double.parseDouble(setPoints.get("MaxCool"));
				minCool = Double.parseDouble(setPoints.get("MinCool"));
			}
			systemMode = statInfo.getThermoStatMode();
			if (systemMode.equals("Auto")) {
				systemMode = statInfo.getThermostatModeWhenAutoChangeOverActive();
			}
			if (systemMode.equals("Cool")) {
				maxSetPoint = maxCool;
				minSetPoint = minCool;
			} else if (systemMode.equals("Heat")) {
				maxSetPoint = maxHeat;
				minSetPoint = minHeat;
			}
			if (targetTemp < minSetPoint || targetTemp > maxSetPoint) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Tap Setting: Target Temp : "+ targetTemp + " is out of range" + maxSetPoint + "-" + minSetPoint);
				return false;
			} else
			{
				double Scroller,Scroller1 = 0;
				PrimaryCard pc=new PrimaryCard(testCase);
				Double DashTemp,DTemp;
				Double currentTemp=pc.getCurrentSetPointInDialer();
				Keyword.ReportStep_Pass(testCase,"Current Temperature on Primary Card Before Setting the target temp on primary card :"+ currentTemp);
				do
				{
					if((currentTemp==targetTemp))
					{
						break;
					}else if(inputs.getInputValue("API").contains("API")){
						
						if(!statInfo.getJasperDeviceType().equalsIgnoreCase("EMEA")) {
							
						 flag = flag &&  optikUtils.setHeatTo(testCase, inputs, String.valueOf(targetTemp),"HeatSetpoint");
						 flag = flag && optikUtils.setHeatTo(testCase, inputs, String.valueOf(targetTemp),"CoolSetpoint");
						
						}else {
							
							flag = flag &&  optikUtils.setHeatTo(testCase, inputs, String.valueOf(targetTemp),"HeatSetpoint");
						
						}
						
					}
					else
					{
						if(currentTemp>targetTemp)
						{

							Scroller=currentTemp-targetTemp;
						}
						else
						{
							Scroller=targetTemp-currentTemp;

						}

						if(statInfo.getJasperDeviceType().equalsIgnoreCase("EMEA")) {

							Scroller1=(Scroller*2)-1;
						}
						else
						{
							Scroller1=Scroller-1.0;
						}

						if(!(currentTemp==targetTemp))
						{
							for(int j=0;j<=Scroller1;j++)
							{
								currentTemp=pc.getCurrentSetPointInDialer();
								if(targetTemp>currentTemp)
								{

									flag = flag && pc.ClickOnTempIncrementButton();
									Keyword.ReportStep_Pass(testCase,"click on increment button");
									Double CTemp=pc.getCurrentSetPointInDialer();
									Keyword.ReportStep_Pass(testCase,"Current temperature on primary card after clicking on Increment button:" +CTemp);

								}
								else if(targetTemp<currentTemp)
								{

									flag = flag &&  pc.ClickOnTempDecrementButton();
									Keyword.ReportStep_Pass(testCase,"click on decrement button");
									Double CTemp=pc.getCurrentSetPointInDialer();
									Keyword.ReportStep_Pass(testCase,"Current temperature on primary card after clicking on Decrement button:" +CTemp);
								}
							}
						}
					}
					 DashTemp=pc.getCurrentSetPointInDialer();
				}
				while(!DashTemp.equals(targetTemp));

				DTemp=pc.getCurrentSetPointInDialer();
				if(DTemp.equals(targetTemp))
				{
					Keyword.ReportStep_Pass(testCase,"Expected Temp " + targetTemp + "current temp on primary card after setting the target temp:" + currentTemp );
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Current temp is "+ currentTemp+" not match with expected target temp: "+targetTemp);
				}
			}
		}
		catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Temperature Stepper : Error occurred : " + e.getMessage());
			flag = false;
		}
		return flag;
	}

	public static boolean setTargettempOnDashboard(TestCases testCase, TestCaseInputs inputs, Double targetTemp) {
		boolean flag=true;
		HashMap<String, String> setPoints = new HashMap<String, String>();
		String systemMode = "",coolSetpoints="",heatSetpoints="";
		Double maxHeat = 0.0;
		Double minHeat = 0.0;
		Double maxCool = 0.0;
		Double minCool = 0.0;
		Double maxSetPoint = 0.0;
		Double minSetPoint = 0.0;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			List<String> allowedModes = statInfo.getAllowedModes();
			setPoints = statInfo.getDeviceMaxMinSetPoints();
			coolSetpoints=statInfo.getCoolSetPoints();
			heatSetpoints=statInfo.getHeatSetPoints();
			inputs.setInputValue(GlobalVariables.DefaultCoolsetPoint,coolSetpoints);
			inputs.setInputValue(GlobalVariables.DefaultHeatsetPoint,heatSetpoints);

			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				maxHeat = Double.parseDouble(setPoints.get("MaxHeat"));
				minHeat = Double.parseDouble(setPoints.get("MinHeat"));
				maxCool = Double.parseDouble(setPoints.get("MaxCool"));
				minCool = Double.parseDouble(setPoints.get("MinCool"));
			} else if (allowedModes.contains("Heat") && !allowedModes.contains("Cool")) {
				maxHeat = Double.parseDouble(setPoints.get("MaxHeat"));
				minHeat = Double.parseDouble(setPoints.get("MinHeat"));
			} else if (!allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				maxCool = Double.parseDouble(setPoints.get("MaxCool"));
				minCool = Double.parseDouble(setPoints.get("MinCool"));
			}
			systemMode = statInfo.getThermoStatMode();
			if (systemMode.equals("Auto")) {
				systemMode = statInfo.getThermostatModeWhenAutoChangeOverActive();
			}
			if (systemMode.equals("Cool")) {
				maxSetPoint = maxCool;
				minSetPoint = minCool;
			} else if (systemMode.equals("Heat")) {
				maxSetPoint = maxHeat;
				minSetPoint = minHeat;
			}
			if (targetTemp < minSetPoint || targetTemp > maxSetPoint) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Tap Setting: Target Temp : "+ targetTemp + " is out of range" + maxSetPoint + "-" + minSetPoint);
				return false;
			} else
			{
				double Scroller,Scroller1 = 0;
				PrimaryCard pc=new PrimaryCard(testCase);
				Double DashTemp,DTemp;
				Double currentTemp=pc.getCurrentSetPointInDialer();
				Keyword.ReportStep_Pass(testCase,"Current Temperature on Dashboard Before Setting the target temp on Dashboard :"+ currentTemp);
				do
				{
					if((currentTemp==targetTemp))
					{
						break;
					}else if(inputs.getInputValue("API").contains("API")){
						
						if(!statInfo.getJasperDeviceType().equalsIgnoreCase("EMEA")) {
							
						 flag = flag &&  optikUtils.setHeatTo(testCase, inputs, String.valueOf(targetTemp),"HeatSetpoint");
						 flag = flag && optikUtils.setHeatTo(testCase, inputs, String.valueOf(targetTemp),"CoolSetpoint");
						
						}else {
							
							flag = flag &&  optikUtils.setHeatTo(testCase, inputs, String.valueOf(targetTemp),"HeatSetpoint");
						
						}
						
					}
					else
					{
						if(currentTemp>targetTemp)
						{

							Scroller=currentTemp-targetTemp;
						}
						else
						{
							Scroller=targetTemp-currentTemp;

						}

						if(statInfo.getJasperDeviceType().equalsIgnoreCase("EMEA")) {

							Scroller1=(Scroller*2)-1;
						}
						else
						{
							Scroller1=Scroller-1.0;
						}

						if(!(currentTemp==targetTemp))
						{
							for(int j=0;j<=Scroller1;j++)
							{
								currentTemp=pc.getCurrentSetPointInDialer();
								if(targetTemp>currentTemp)
								{

									flag = flag && pc.ClickOnTempIncrementButton();
									Keyword.ReportStep_Pass(testCase,"click on increment button");
									Double CTemp=pc.getCurrentSetPointInDialer();
									Keyword.ReportStep_Pass(testCase,"Current temperature on Dashboard after clicking on Increment button:" +CTemp);

								}
								else if(targetTemp<currentTemp)
								{

									flag = flag &&  pc.ClickOnTempDecrementButton();
									Keyword.ReportStep_Pass(testCase,"click on decrement button");
									Double CTemp=pc.getCurrentSetPointInDialer();
									Keyword.ReportStep_Pass(testCase,"Current temperature on Dashboard after clicking on Decrement button:" +CTemp);
								}
							}
						}
					}
					 DashTemp=pc.getCurrentSetPointInDialer();
				}
				while(!DashTemp.equals(targetTemp));

				DTemp=pc.getCurrentSetPointInDialer();
				if(DTemp.equals(targetTemp))
				{
					Keyword.ReportStep_Pass(testCase,"Expected Temp " + targetTemp + "current temp on Dashboard after setting the target temp:" + currentTemp );
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Current temp is "+ currentTemp+" not match with expected target temp: "+targetTemp);
				}
			}
		}
		catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Temperature Stepper : Error occurred : " + e.getMessage());
			flag = false;
		}
		return flag;
	}
	
	
	public static boolean setPriorityRoomToInvalidIDAPI(TestCases testCase, TestCaseInputs inputs,int roomID,String holdUntil) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			CHILUtil cUtil = new CHILUtil(inputs);
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			long locationID = locInfo.getLocationID();
			String deviceID = statInfo.getDeviceID();
			
			if(cUtil.getConnection()) {
				int result = cUtil.setPriorityRoomToID(locationID, deviceID, roomID , holdUntil);
				if (result == 400 || result == 404 ) {
					Keyword.ReportStep_Pass(testCase,"Unable to set to "+roomID);
				}else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Failure: Successfully Set to "+ roomID);
				}
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Fail to establish connection via chill : ");
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : "+ roomID + e.getMessage());
		}
		return flag;
	}
	
	
	public static boolean verifySetTemperatureAPI(TestCases testCase,TestCaseInputs inputs,String ExpectedTargetTemp,String mode) {
		Boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			
			switch(mode.toUpperCase()) {
			case "HEAT MODE":{
				if(ExpectedTargetTemp.contains(statInfo.getHeatSetPoints()))
				{
					Keyword.ReportStep_Pass(testCase, "Successfully verified Target temperature set on :"+ExpectedTargetTemp);
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Unable to verify temperature set : "+ExpectedTargetTemp);
				}

				break;
			}case "COOL MODE":{
				if(ExpectedTargetTemp.contains(statInfo.getCoolSetPoints()))
				{
					Keyword.ReportStep_Pass(testCase, "Successfully verified Target temperature set :"+ExpectedTargetTemp);
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Unable to verify temperature set : "+ExpectedTargetTemp);
				}

				break;
			}
			}
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		
		
		return flag;
	}
	
	public static boolean setHeatTo(TestCases testCase, TestCaseInputs inputs, String targetTemp,String setPointMode) {
		Boolean flag = true;
		CHILUtil cUtil = null;
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);

		try {
			String deviceID=statInfo.getDeviceID();
			cUtil = new CHILUtil(inputs);
			if (cUtil.getConnection()) {

				int result = cUtil.putSetPoint(deviceID,targetTemp,setPointMode);
				System.out.println(result);
				if (result == 200) {
					Keyword.ReportStep_Pass(testCase,
							"Setpoint Through CHIL : Successfully set Thermostat Set point using CHIL to "+targetTemp);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Setpoint Through CHIL : Failed to set Thermostat Set point using CHIL to "+targetTemp);
				}
			}
			cUtil.close();
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}


		return flag;
	}
	
	public static boolean setHeatToNegativeScenario(TestCases testCase, TestCaseInputs inputs, String targetTemp,String setPointMode) {
		Boolean flag = true;
		CHILUtil cUtil = null;
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		
		try {
			String deviceID=statInfo.getDeviceID();
			System.out.println("d: "+deviceID);
			cUtil = new CHILUtil(inputs);
			if (cUtil.getConnection()) {

				int result = cUtil.putSetPoint(deviceID,targetTemp,setPointMode);
				System.out.println(result);
				if (result == 404 || result == 400) {
					Keyword.ReportStep_Pass(testCase,
							"Setpoint Through CHIL : Failed to set Thermostat Set point using CHIL to"+targetTemp);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Error: Thermostat Set point set using CHIL to "+targetTemp);
				}
			}
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}

		return flag;
	}
	
	public static boolean changeScheduleModeAPI(TestCases testCase, TestCaseInputs inputs,String mode) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			CHILUtil cUtil = new CHILUtil(inputs);
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			long locationID = locInfo.getLocationID();
			String deviceID = statInfo.getDeviceID();
			
			if(cUtil.getConnection()) {
				int result = cUtil.changeScheduleMode(locationID, deviceID, mode);
				if (result == 200) {
					Keyword.ReportStep_Pass(testCase,"Successfully Set schedule to "+mode);
				}else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Failure: Unable to set schedule to  "+ mode);
				}
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Fail to establish connection via chill : ");
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : "+ mode + e.getMessage());
		}
		return flag;
	}
	
	
	
	public static boolean verifySetTemperatureNegativeAPI(TestCases testCase,TestCaseInputs inputs,String ExpectedTargetTemp,String mode) {
		Boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			
			switch(mode.toUpperCase()) {
			case "HEAT MODE":{
				if(!ExpectedTargetTemp.contains(statInfo.getHeatSetPoints()))
				{
					Keyword.ReportStep_Pass(testCase, "Unable to verify temperature set :"+ExpectedTargetTemp);
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Successfully verified Target temperature set on :"+ExpectedTargetTemp);
				}

				break;
			}case "COOL MODE":{
				if(!statInfo.getCoolSetPoints().isEmpty()) {
					Keyword.ReportStep_Pass(testCase, "Successfully verified Target temperature not set to :"+ExpectedTargetTemp);
					break;
				}
				else if(!ExpectedTargetTemp.contains(statInfo.getCoolSetPoints()))
				{
					Keyword.ReportStep_Pass(testCase, "Successfully verified Target temperature not set to :"+ExpectedTargetTemp);
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Error : Target temperature set to : "+ExpectedTargetTemp);
				}

				break;
			}
			}
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		
		
		return flag;
	}
	
	public static boolean verifySetTemperatureOnPrimaryCard(TestCases testCase,TestCaseInputs inputs,double ExpectedTargetTemp) {
		boolean flag=true;

		PrimaryCard pc= new PrimaryCard(testCase);
		double Currenttemp=pc.getCurrentSetPointInDialer();
		Keyword.ReportStep_Pass(testCase, "Current temperature set on primary card before Verification:"+Currenttemp);
		if((ExpectedTargetTemp-Currenttemp)==0)
		{
			Keyword.ReportStep_Pass(testCase, "Successfully verified Target temperature set on primary card:"+ExpectedTargetTemp);
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Unable to verify temperature set on primary Card: "+ExpectedTargetTemp);
		}

		return flag;
	}

	public static boolean verifySetTemperatureOnPrimaryCardStat2(TestCases testCase,TestCaseInputs inputs,double ExpectedTargetTemp) {
		boolean flag=true;

		PrimaryCard pc= new PrimaryCard(testCase);
		double Currenttemp=pc.getCurrentSetPointInDialerStat2();
		if((ExpectedTargetTemp-Currenttemp)==0)
		{
			Keyword.ReportStep_Pass(testCase, "Successfully verified Target temperature set on primary card:"+ExpectedTargetTemp);
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Unable to verify temperature set on primary Card: "+ExpectedTargetTemp);
		}

		return flag;
	}

	public static boolean verifySetTemperatureliesInBetweenMaxandMinSetpoints(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag=true;
		PrimaryCard pc= new PrimaryCard(testCase);
		Double currentTemp=pc.getCurrentSetPointInDialer();
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		HashMap<String, String> setPoints = new HashMap<String, String>();
		List<String> allowedModes = null;
		try {
			allowedModes = statInfo.getAllowedModes();
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		Double maxHeat = 0.0;
		Double minHeat = 0.0;
		Double maxCool = 0.0;
		Double minCool = 0.0;
		try {
			setPoints = statInfo.getDeviceMaxMinSetPoints();
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
			maxHeat = Double.parseDouble(setPoints.get("MaxHeat"));
			minHeat = Double.parseDouble(setPoints.get("MinHeat"));
			maxCool = Double.parseDouble(setPoints.get("MaxCool"));
			minCool = Double.parseDouble(setPoints.get("MinCool"));
		} else if (allowedModes.contains("Heat") && !allowedModes.contains("Cool")) {
			maxHeat = Double.parseDouble(setPoints.get("MaxHeat"));
			minHeat = Double.parseDouble(setPoints.get("MinHeat"));
		} else if (!allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
			maxCool = Double.parseDouble(setPoints.get("MaxCool"));
			minCool = Double.parseDouble(setPoints.get("MinCool"));
		}

		if(allowedModes.contains("Heat"))
		{
			if(currentTemp>maxHeat && currentTemp<minHeat)
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Unable to verify the Set temperature value"+pc.getCurrentSetPointInDialer()+"is not greater than the maximum value :"+maxHeat+"and not less than the minimum value:"+ minHeat);
			}
			else
			{
				Keyword.ReportStep_Pass(testCase,"Verified Successfully Set temperature value"+pc.getCurrentSetPointInDialer()+" is not greater than the maximum value"+maxHeat+" and not less than the minimum value:"+ minHeat);
			}
		}
		else if(allowedModes.contains("Cool"))
		{
			if(currentTemp>maxCool && currentTemp<minCool)
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Unable to verify the Set temperature value"+pc.getCurrentSetPointInDialer()+"is not greater than the maximum value :"+maxHeat+"and not less than the minimum value:"+ minHeat);
			}

		}else
		{
			Keyword.ReportStep_Pass(testCase,"Verified Successfully Set temperature value"+pc.getCurrentSetPointInDialer()+" is not greater than the maximum value"+maxHeat+" and not less than the minimum value:"+ minHeat);
		}
		return flag;
	}

	public static boolean verifyHoldUntilStatusOnPrimaryCard(TestCases testCase, TestCaseInputs inputs,
			String holdUntilTime) {

		AdhocScreen ad=new AdhocScreen(testCase);
		boolean flag = true;
		try {
			FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(
					testCase.getMobileDriver());
			fWait.pollingEvery(Duration.ofSeconds(5));
			fWait.withTimeout(Duration.ofMinutes(1));

			DeviceInformation DevInfo = new DeviceInformation(testCase, inputs);
			String overrideTemp = "";
			String systemMode = DevInfo.getThermoStatMode();
			if (systemMode.equals("Auto")) {
				systemMode = DevInfo.getThermostatModeWhenAutoChangeOverActive();
			}
			if (systemMode.equals("Heat")) {
				overrideTemp = DevInfo.getHeatSetPoints();
			} else if (systemMode.equals("Cool")) {
				overrideTemp = DevInfo.getCoolSetPoints();
			}
			if (DevInfo.getThermostatUnits().equalsIgnoreCase("Fahrenheit")) {
				Double temp = Double.parseDouble(overrideTemp);
				overrideTemp = String.valueOf(temp);
			}
			SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");

			SimpleDateFormat time12Format = new SimpleDateFormat("hh:mm a");
			SimpleDateFormat time24Format = new SimpleDateFormat("HH:mm");
			//Date date = time12Format.parse(holdUntilTime);
			String nextPeriodTime = DevInfo.getNextPeriodTime();
			Date date = timeFormat.parse(nextPeriodTime);
			String nextPeriodTime12Hours = time12Format.format(date);
			String nextPeriodTime24Hours = time24Format.format(date);
			String status12Hours;
			String status24Hours;
			if (DevInfo.getThermostatUnits().equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
				//previous code when hold show set points 			    status12Hours = "Hold " + temp.intValue() + "\u00B0 until " + nextPeriodTime12Hours;
				//previous code when hold show set points 		status24Hours = "Hold " + temp.intValue() + "\u00B0 until " + nextPeriodTime24Hours;


				status12Hours = "Hold Until " + nextPeriodTime12Hours;
				status24Hours = "Hold Until " + nextPeriodTime24Hours;
			} else {
				//previous code when hold show set points    status12Hours = "Hold " + overrideTemp + "\u00B0 until " + nextPeriodTime12Hours;
				//previous code when hold show set points     status24Hours = "Hold " + overrideTemp + "\u00B0 until " + nextPeriodTime24Hours;
				status12Hours = "Hold Until " + nextPeriodTime12Hours;
				status24Hours = "Hold Until " + nextPeriodTime24Hours;
			}
			try {
				String adHocStatus = "";
				if (ad.isAdhocButtonVisible(10)) {
					adHocStatus = ad.getAdhocButtonText();
				}
				String[] te1=status12Hours.split("\\s+");;
				String ch=te1[3];
				String[] tem=adHocStatus.split("\\s+");
				String ap=tem[3];
				String temp2="";
				try {
					temp2=te1[0]+te1[1]+te1[2].replaceFirst("0","");
				} catch (Exception e) {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
				}


				String temp1=tem[0]+tem[1]+tem[2];
				if(ch.toUpperCase().contains(ap.toUpperCase())&& temp2.toUpperCase().contains(temp1.toUpperCase())||status24Hours.toUpperCase().contains(adHocStatus.toUpperCase()))
				{
					flag=true;
				} else {
					flag=false;
				}

			}
			catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
						"Error occurred : " + e.getMessage());
			}


			if (flag) {
				if (ad.getAdhocButtonText().contains("M")|| ad.getAdhocButtonText().contains("m")) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Hold Until Schedule Status on Primary Card : Expected Ad hoc status:"
									+ status12Hours
									+ " is correctly displayed in the primary card with overridden set points and time:"
									+ ad.getAdhocButtonText());
				} else {
					Keyword.ReportStep_Pass(testCase,
							"Verify Hold Until Schedule Status on Primary Card : Expected Ad hoc status:"
									+ status24Hours
									+ " is correctly displayed in the primary card with overridden set points and time:"
									+ ad.getAdhocButtonText());
				}

			} else {
				flag = false;
				if (ad.getAdhocButtonText()
						.contains("M")
						|| ad.getAdhocButtonText().contains("m")) {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Verify Hold Until Schedule Status on Primary Card : Expected Ad hoc status:"
									+ status12Hours
									+ " is not correctly displayed in the primary card with overridden set points and time:"
									+ ad.getAdhocButtonText());
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Verify Hold Until Schedule Status on Primary Card : Expected Ad hoc status:"
									+ status24Hours
									+ " is not correctly displayed in the primary card with overridden set points and time:"
									+ ad.getAdhocButtonText());
				}

			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		return flag;
	}



	public static String convertFromFahrenhietToCelsius(TestCases testCase, String fahrenhietTemp) {
		try {
			Double temp = Double.parseDouble(fahrenhietTemp);
			temp = ((temp - 32) * 5) / 9;
			temp = Math.round(temp * 10.0) / 10.0;
			return temp.toString();
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred :"+ e.getMessage());
			return " ";
		}
	}


	public static boolean verifySchedulingStatusOnPrimaryCard(TestCases testCase, TestCaseInputs inputs,
			String scheduleType, String overrideSetPoints) {
		boolean flag = true;

		AdhocScreen ad=new AdhocScreen(testCase);
		FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(
				testCase.getMobileDriver());
		fWait.pollingEvery(Duration.ofSeconds(5));
		fWait.withTimeout(Duration.ofMinutes(1));

		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		Double overrideTemp = Double.parseDouble(overrideSetPoints);
		if (scheduleType.equalsIgnoreCase("Geofence")) {


			try
			{
				if (statInfo.getThermostatUnits().equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
					GlobalVariables.status = "Hold " + overrideTemp.intValue() + "\u00B0 while " + statInfo.getCurrentSchedulePeriod();
				} else {
					GlobalVariables.status = "Hold " + overrideTemp + "\u00B0 while " + statInfo.getCurrentSchedulePeriod();
				}
			}
			catch (Exception e1)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e1.getMessage());
			}

			try {
				Boolean isEventReceived = fWait.until(new Function<CustomDriver, Boolean>() {
					@Override
					public Boolean apply(CustomDriver driver) {
						String adHocStatus = "";
						if (ad.isAdhocButtonVisible(5)) {
							adHocStatus=ad.getAdhocButtonText();
						}

						if (GlobalVariables.status.equalsIgnoreCase(adHocStatus)) {
							return true;
						} else {
							return false;
						}
					}
				});
				flag = isEventReceived;
			} catch (TimeoutException e) {
				//flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Geofence Schedule Status on Primary Card : Expected Ad hoc status:" + GlobalVariables.status
						+ " is not correctly displayed in the primary card with overridden set points:"
						+ ad.getAdhocButtonText());
			}
			if (flag) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Geofence Schedule Status on Primary Card : Expected Ad hoc status:" + GlobalVariables.status
						+ " is correctly displayed in the primary card with overridden set points:"
						+ ad.getAdhocButtonText());
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Geofence Schedule Status on Primary Card : Expected Ad hoc status:" + GlobalVariables.status
						+ " is not correctly displayed in the primary card with overridden set points:"
						+ ad.getAdhocButtonText());
			}
		} else if (scheduleType.equalsIgnoreCase("Time")) {
			try {

				String thermostatSetPointStatus = statInfo.getThermostatSetPointsStatus();
				if (thermostatSetPointStatus.equalsIgnoreCase("Permanent Hold")) {
					String status;
					if (statInfo.getThermostatUnits().equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
						status = "Hold " + overrideTemp.intValue() + "\u00B0 Permanently";
					} else {
						status = "Hold " + overrideTemp + "\u00B0 Permanently";
					}
					try {
						Boolean isEventReceived = fWait.until(new Function<CustomDriver, Boolean>() {
							@Override
							public Boolean apply(CustomDriver driver) {
								String adHocStatus = "";
								if (ad.isAdhocButtonVisible(5)) {
									adHocStatus = ad.getAdhocButtonText();
								}
								if (status.equalsIgnoreCase(adHocStatus)) {
									return true;
								} else {
									return false;
								}
							}
						});
						flag = isEventReceived;
					} catch (TimeoutException e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Verify Time Schedule Status on Primary Card : Expected Ad hoc status:" + status
								+ " is not correctly displayed in the primary card with overridden set points and time:"
								+ ad.getAdhocButtonText());
					}
					if (flag) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Time Schedule Status on Primary Card : Expected Ad hoc status:" + status
								+ " is correctly displayed in the primary card with overridden set points and time:"
								+ ad.getAdhocButtonText());
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Verify Time Schedule Status on Primary Card : Expected Ad hoc status:" + status
								+ " is not correctly displayed in the primary card with overridden set points and time:"
								+ ad.getAdhocButtonText());
					}
				} else if (thermostatSetPointStatus.equalsIgnoreCase("HoldUntil")) {
					SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
					SimpleDateFormat time12Format = new SimpleDateFormat("hh:mm a");
					SimpleDateFormat time24Format = new SimpleDateFormat("HH:mm");
					String nextPeriodTime = statInfo.getNextPeriodTime();
					Date date = timeFormat.parse(nextPeriodTime);
					String nextPeriodTime12Hours = time12Format.format(date);
					String nextPeriodTime24Hours = time24Format.format(date);
					String status12Hours;
					String status24Hours;

					if (statInfo.getThermostatUnits().equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
						//previous code when hold show set points 	status12Hours = "Hold " + overrideTemp.intValue() + "\u00B0 until " + nextPeriodTime12Hours;
						//previous code when hold show set points	status24Hours = "Hold " + overrideTemp.intValue() + "\u00B0 until " + nextPeriodTime24Hours;

						status12Hours = "Hold until " + nextPeriodTime12Hours;
						status24Hours = "Hold until " + nextPeriodTime24Hours;

					} else {
						//previous code when hold show set points     status12Hours = "Hold " + overrideTemp + "\u00B0 until " + nextPeriodTime12Hours;
						//previous code when hold show set points 	status24Hours = "Hold " + overrideTemp + "\u00B0 until " + nextPeriodTime24Hours;

						status12Hours = "Hold until " + nextPeriodTime12Hours;
						status24Hours = "Hold until " + nextPeriodTime24Hours;
					}
					try {
						Boolean isEventReceived = fWait.until(new Function<CustomDriver, Boolean>() {
							@Override
							public Boolean apply(CustomDriver driver) {
								String adHocStatus = "";
								if (ad.isAdhocButtonVisible(5)) {
									adHocStatus = ad.getAdhocButtonText();
								}

								String[] te1=status12Hours.split("\\s+");;
								String ch=te1[3];
								String[] tem=adHocStatus.split("\\s+");
								String ap=tem[3];
								String temp=te1[0]+te1[1]+te1[2].replaceFirst("0","");
								String temp1=tem[0]+tem[1]+tem[2];
								if(ch.toUpperCase().contains(ap.toUpperCase())&& temp.toUpperCase().contains(temp1.toUpperCase())||status24Hours.toUpperCase().contains(adHocStatus.toUpperCase()))
								{
									return true;
								} else {
									return false;
								}
							}
						});
						flag = isEventReceived;
					} catch (TimeoutException e) {
						flag = false;
						if (ad.getAdhocButtonText().contains("M") || ad.getAdhocButtonText().contains("m")) {
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Verify Time Schedule Status on Primary Card : Expected Ad hoc status:"
											+ status12Hours
											+ " is not correctly displayed in the primary card with overridden set points and time:"
											+ ad.getAdhocButtonText());
						} else {
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Verify Time Schedule Status on Primary Card : Expected Ad hoc status:"
											+ status24Hours
											+ " is not correctly displayed in the primary card with overridden set points and time:"
											+ ad.getAdhocButtonText());
						}
					}
					if (flag) {
						if (ad.getAdhocButtonText().contains("M")|| ad.getAdhocButtonText().contains("m")) {
							Keyword.ReportStep_Pass(testCase,
									"Verify Time Schedule Status on Primary Card : Expected Ad hoc status:"
											+ status12Hours
											+ " is correctly displayed in the primary card with overridden set points and time:"
											+ ad.getAdhocButtonText());
						} else {
							Keyword.ReportStep_Pass(testCase,
									"Verify Time Schedule Status on Primary Card : Expected Ad hoc status:"
											+ status24Hours
											+ " is correctly displayed in the primary card with overridden set points and time:"
											+ ad.getAdhocButtonText());
						}

					} else {
						flag = false;
						if (ad.getAdhocButtonText().contains("M")|| ad.getAdhocButtonText().contains("m")) {
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Verify Time Schedule Status on Primary Card : Expected Ad hoc status:"
											+ status12Hours
											+ " is not correctly displayed in the primary card with overridden set points and time:"
											+ ad.getAdhocButtonText());
						} else {
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Verify Time Schedule Status on Primary Card : Expected Ad hoc status:"
											+ status24Hours
											+ " is not correctly displayed in the primary card with overridden set points and time:"
											+ ad.getAdhocButtonText());
						}
					}
				}
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			}
		}
		return flag;
	}

	public static boolean setPermanentlyHold(TestCases testCase,TestCaseInputs inputs) {
		boolean flag = true;

		AdhocScreen ad=new AdhocScreen(testCase);
		if (ad.isAdhocButtonVisible(30)) {
			flag = flag && ad.clickOnAdhocButton();
			flag = flag && ad.clickOnPemanentlyHold();
		} else {
			flag = false;
			Keyword.ReportStep_Pass(testCase,
					"Hold Set Points From AdHoc : Ad hoc is not overridden cannot resume schedule");
		}
		return flag;
	}

	public static boolean verifyAdHocHoldPermanentlyStatus(TestCases testCase, TestCaseInputs inputs,
			String overrideSetPoints) {
		boolean flag = true;
		FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(
				testCase.getMobileDriver());
		fWait.pollingEvery(Duration.ofSeconds(2));
		fWait.withTimeout(Duration.ofMinutes(1));
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		Double overrideTemp = Double.parseDouble(overrideSetPoints);
		AdhocScreen ad=new AdhocScreen(testCase);
		try
		{
			if (statInfo.getThermostatUnits().equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
				GlobalVariables.status = "Hold " + overrideTemp.intValue() + "\u00B0 Permanently";
			} else {
				GlobalVariables.status = "Hold " + overrideTemp + "\u00B0 Permanently";
			}
		}
		catch (Exception e1)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e1.getMessage());
		}

		try {
			Boolean isEventReceived = fWait.until(new Function<CustomDriver, Boolean>() {
				@Override
				public Boolean apply(CustomDriver driver) {
					String adHocStatus = "";
					if (ad.isAdhocButtonVisible(5)) {
						adHocStatus = ad.getAdhocButtonText();
					}
					if (GlobalVariables.status.equalsIgnoreCase(adHocStatus)) {
						return true;
					} else {
						return false;
					}
				}
			});
			flag = isEventReceived;
		} catch (TimeoutException e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Ad Hoc Hold Permanently Status : Expected Ad hoc status:" + GlobalVariables.status
					+ " is not correctly displayed in the primary card with overridden set points:"
					+ ad.getAdhocButtonText());
		}


		if (flag) {
			Keyword.ReportStep_Pass(testCase, "Verify Ad Hoc Hold Permanently Status : Expected Ad hoc status:"
					+ GlobalVariables.status + " is correctly displayed in the primary card with overridden set points:"
					+ ad.getAdhocButtonText());
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Ad Hoc Hold Permanently Status : Expected Ad hoc status:" + GlobalVariables.status
					+ " is not correctly displayed in the primary card with overridden set points:"
					+ ad.getAdhocButtonText());
		}
		return flag;
	}
	
	public static boolean verifyAdHocHoldStatus(TestCases testCase, TestCaseInputs inputs,
			String overrideSetPoints) {
		boolean flag = true;
		FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(
				testCase.getMobileDriver());
		fWait.pollingEvery(Duration.ofSeconds(2));
		fWait.withTimeout(Duration.ofMinutes(1));
		AdhocScreen ad=new AdhocScreen(testCase);

		try {
			Boolean isEventReceived = fWait.until(new Function<CustomDriver, Boolean>() {
				@Override
				public Boolean apply(CustomDriver driver) {
					String adHocStatus = "";
					if (ad.isAdhocButtonVisible(5)) {
						adHocStatus = ad.getAdhocButtonText();
					}
					if (adHocStatus.contains("Hold") || adHocStatus.contains("Hold")) {
						return false;
					} else {
						return true;
					}
				}
			});
			flag = isEventReceived;
		} catch (TimeoutException e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Ad Hoc Hold Permanently Status : Expected Ad hoc status:" + GlobalVariables.status
					+ " is not correctly displayed in the primary card with overridden set points:"
					+ ad.getAdhocButtonText());
		}


		if (flag) {
			Keyword.ReportStep_Pass(testCase, "Verify Ad Hoc Hold Status : Not Expected Ad hoc statu :correctly displayed in the primary card with  not overridden set points for:"
					+ ad.getAdhocButtonText());
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Ad Hoc Hold Permanently Status : Expected Ad hoc status:" + GlobalVariables.status
					+ " is not correctly displayed in the primary card with overridden set points:"
					+ ad.getAdhocButtonText());
		}
		return flag;
	}


	public static boolean VerifyGeofenceAdHocHoldStatus(TestCases testCase, TestCaseInputs inputs,
			String overrideSetPoints,String status) {
		boolean flag = true;

		FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(testCase.getMobileDriver());
		fWait.pollingEvery(Duration.ofSeconds(2));
		fWait.withTimeout(Duration.ofMinutes(1));
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		Double overrideTemp = Double.parseDouble(overrideSetPoints);
		AdhocScreen ad=new AdhocScreen(testCase);
		try
		{
			if(status.equalsIgnoreCase("Away"))
			{
				if (statInfo.getThermostatUnits().equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
					GlobalVariables.status = "Hold " + overrideTemp.intValue() + "\u00B0 WHILE AWAY";
				} else {
					GlobalVariables.status = "Hold " + overrideTemp + "\u00B0 WHILE AWAY";
				}
			}
			else if(status.equalsIgnoreCase("Home"))
			{
				if (statInfo.getThermostatUnits().equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
					GlobalVariables.status = "Hold " + overrideTemp.intValue() + "\u00B0 WHILE HOME";
				} else {
					GlobalVariables.status = "Hold " + overrideTemp + "\u00B0 WHILE HOME";
				}
			}
			else
			{
				if(statInfo.getCurrentSchedulePeriod().equalsIgnoreCase("Home"))
				{
					if (statInfo.getThermostatUnits().equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
						GlobalVariables.status = "Hold " + overrideTemp.intValue() + "\u00B0 WHILE HOME";

					} else {
						GlobalVariables.status = "Hold " + overrideTemp.intValue() + "\u00B0 WHILE HOME";
					}
				}
				else
				{
					if (statInfo.getThermostatUnits().equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
						GlobalVariables.status = "Hold " + overrideTemp.intValue() + "\u00B0 WHILE AWAY";

					} else {
						GlobalVariables.status = "Hold " + overrideTemp + "\u00B0 WHILE Away";
					}
				}

			}

		}
		catch (Exception e1)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e1.getMessage());
		}

		try {
			Boolean isEventReceived = fWait.until(new Function<CustomDriver, Boolean>() {
				@Override
				public Boolean apply(CustomDriver driver) {
					String adHocStatus = "";
					if (ad.isAdhocButtonVisible(5)) {
						adHocStatus = ad.getAdhocButtonText();
					}
					if (GlobalVariables.status.equalsIgnoreCase(adHocStatus)) {
						return true;
					} else {
						return false;
					}
				}
			});
			flag = isEventReceived;
		} catch (TimeoutException e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Ad Hoc Hold Permanently Status : Expected Ad hoc status:" + GlobalVariables.status
					+ " is not correctly displayed in the primary card with overridden set points:"
					+ ad.getAdhocButtonText());
		}


		if (flag) {
			Keyword.ReportStep_Pass(testCase, "Verify Ad Hoc Hold Permanently Status : Expected Ad hoc status:"
					+ GlobalVariables.status + " is correctly displayed in the primary card with overridden set points:"
					+ ad.getAdhocButtonText());
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Ad Hoc Hold Permanently Status : Expected Ad hoc status:" + GlobalVariables.status
					+ " is not correctly displayed in the primary card with overridden set points:"
					+ ad.getAdhocButtonText());
		}
		return flag;
	}

	public static boolean VerifyHoldButtonSubOption(TestCases testCase, TestCaseInputs inputs, String scheduleType) {
		boolean flag = true;

		AdhocScreen ad=new AdhocScreen(testCase);

		if(ad.getAdhocButtonText().contains("Hold") || ad.getAdhocButtonText().contains("HOLD"))
		{
			flag = flag && ad.clickOnAdhocButton();

			if (scheduleType.equals(InputVariables.TIME_BASED_SCHEDULE))
			{
				if (ad.isHoldPermanentlyOptionVisible(3))
				{
					Keyword.ReportStep_Pass(testCase ," Verified '" + ad.getHoldPermanentOptionText()+ "'  Option is displayed") ;
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ," Unable to verify hold button is not display") ;
					flag = false ;
				}

				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					if (ad.isNextPeriodOptionVisible(3))
					{
						Keyword.ReportStep_Pass(testCase ," Verified '" + ad.getNextPeriodOptionText()+ "'  Option is displayed") ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ," Unable to Next Period button is not display") ;
						flag = false ;
					}
				}
				if (ad.isHoldUntilOptionVisible(3))
				{
					Keyword.ReportStep_Pass(testCase ," Verified '" + ad.getHoldUntilOptionText()+ "'  Option is displayed") ;
				}
				else
				{
					flag = false ;
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ," Unable to verify hold until, hold button is not display") ;
				}

				if (ad.isResumeScheduleOptionVisible(3))
				{
					Keyword.ReportStep_Pass(testCase ," Verified '" + ad.getResumeScheduleOptionText()+ "'  Option is displayed") ;
				}
				else
				{
					flag = false ;
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ," Unable to verify Resume Schedule Option, hold button is not display") ;
				}
				if (ad.isCancelVisible(3))
				{
					Keyword.ReportStep_Pass(testCase ," Verified Cancel  Option is displayed") ;
					flag = flag && ad.clickOnCancel();
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Unable to verify cancel Option, hold button is not display") ;
					flag=false;
				}

			}
			else if (scheduleType.equals(InputVariables.GEOFENCE_BASED_SCHEDULE))
			{
				if (ad.isResumeScheduleOptionVisible(3))
				{
					Keyword.ReportStep_Pass(testCase ," Verified '" + ad.getResumeScheduleOptionText()+ "'  Option is displayed") ;
				}
				else
				{
					flag = false ;
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ," Unable to verify Resume Schedule Option, hold button is not display") ;
				}

				if (ad.isCancelVisible(3))
				{
					Keyword.ReportStep_Pass(testCase ," Verified Cancel  Option is displayed") ;
					flag = flag && ad.clickOnCancel();
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Unable to verify cancel Option, hold button is not display") ;
					flag=false;
				}
			}
		}else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," Unable to verify hold button and sub Option,hold button is not display");
			flag=false;
		}

		return flag;
	}



	public static String getIOSSimulatorTime(TestCases testCase, TestCaseInputs inputs) {
		String time = " ";
		try {

			Calendar cal = Calendar.getInstance(optikUtils.getDeviceTimeZone(testCase, inputs));
			TimeZone.setDefault(optikUtils.getDeviceTimeZone(testCase, inputs));
			cal.setTimeZone(optikUtils.getDeviceTimeZone(testCase, inputs));

			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			time = vacationDateFormat.format(cal.getTime());
		} catch (Exception e) {
			time = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Get IOS Simulator Time : Error Occurred : " + e.getMessage());
		}
		return time;
	}

	public static String getAndroidEmulatorTime(TestCases testCase, TestCaseInputs inputs) {
		String time = " ";
		try {

			Calendar cal = Calendar.getInstance(optikUtils.getDeviceTimeZone(testCase, inputs));
			TimeZone.setDefault(optikUtils.getDeviceTimeZone(testCase, inputs));
			cal.setTimeZone(optikUtils.getDeviceTimeZone(testCase, inputs));

			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			time = vacationDateFormat.format(cal.getTime());
		} catch (Exception e) {
			time = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Get Android Emulator Time : Error Occurred : " + e.getMessage());
		}
		return time;
	}

	public static boolean holdSetPointsUntilFromAdHoc(TestCases testCase) {
		boolean flag = true;
		AdhocScreen ad= new AdhocScreen(testCase);

		if (ad.isAdhocButtonVisible(3)) {
			flag = flag && ad.clickOnAdhocButton();
			flag = flag && ad.clickOnHoldUntil();
		} else {
			flag = false;
			Keyword.ReportStep_Pass(testCase,
					"Hold Set Points From AdHoc : Ad hoc is not overridden cannot resume schedule");
		}
		return flag;
	}

	@SuppressWarnings({ "rawtypes", "unused" })
	public static boolean setHoldUntilTime(TestCases testCase, TestCaseInputs inputs, String day,
			String timeIn12Hours) {
		boolean flag = true;
		HoldUntilTimePickerScreen holdpick=new HoldUntilTimePickerScreen(testCase);

		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		try {
			SimpleDateFormat time12Format = new SimpleDateFormat("hh:mm a");
			Date date = new Date();
			Calendar c1 = Calendar.getInstance(optikUtils.getDeviceTimeZone(testCase, inputs));
			date = time12Format.parse(timeIn12Hours);
			c1.setTime(date);
			int hourToSet;
			int minutesToSet = c1.get(Calendar.MINUTE);
			String ampm = "";
			if (statInfo.getJasperDeviceType().equalsIgnoreCase("EMEA")) {
				if (minutesToSet % 10 != 0) {
					flag = false;
					Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
							"Set Hold Until Time : Invalid time. Please provide minutes time to the nearest 10 minutes for EMEA");
					return flag;
				}
			} else if (statInfo.getJasperDeviceType().equalsIgnoreCase("NA")||statInfo.getJasperDeviceType().equalsIgnoreCase("Blackbeard")) {
				if (minutesToSet % 15 != 0) {
					flag = false;
					Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
							"Set Hold Until Time : Invalid time. Please provide minutes time to the nearest 15 minutes for NA");
					return flag;
				}
			}
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				Keyword.ReportStep_Pass(testCase, "Set Hold Until Time : Setting hold unitl day to : " + day);
				Keyword.ReportStep_Pass(testCase,
						"Set Hold Until Time : Setting hold unitl time to : " + timeIn12Hours);
				//String days=holdpick.getDayPickervalue();
				WebElement ele = null;
				/*
				if (days.equalsIgnoreCase(day) || day.equalsIgnoreCase("Today")) {
					Keyword.ReportStep_Pass(testCase, "Set Hold Until Time : Selected day is set to " + day);
				} else {
					if(holdpick.isDayPickerVisible())
					{
						ele = holdpick.getDayPickerSelector();
					}
					if(ele!=null)
					{
						try {
							TouchAction t1 = new TouchAction(testCase.getMobileDriver());
							//t1.longPress(ele).perform();
							t1.longPress(longPressOptions().withElement(element(ele)).withDuration(Duration.ofMillis(8000))).release().perform();
							Keyword.ReportStep_Pass(testCase, "Set Hold Until Time : Selected day is set to " + day);
						} catch (Exception e) {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Set Hold Until Time : Failed to set day to " + day + ". Error : " + e.getMessage());
						}
					}
					else
					{
						Keyword.ReportStep_Pass(testCase, "Set Hold Until Time : Selected Day is out of range");
					}

				} */
				if (!holdpick.isAMPMSelectorVisible()) {
					hourToSet = c1.get(Calendar.HOUR_OF_DAY);
				} else {
					hourToSet = c1.get(Calendar.HOUR);
					if (hourToSet == 0) {
						hourToSet = 12;
					}
				}

				WebElement hourPicker = holdpick.getHoursPicker();
				WebElement minutePicker=null;
				int displayedHour=99;
				if(hourPicker!=null)
				{
					if(holdpick.getHoursPickervalue().isEmpty())
					{
						return true;
					}
					else
					{
						displayedHour= Integer
								.parseInt(holdpick.getHoursPickervalue());
						minutePicker = holdpick.getMinutesPicker();
					}
				}
				WebElement buttonToTap;
				TouchAction t1 = new TouchAction(testCase.getMobileDriver());
				if (displayedHour == hourToSet) {
					Keyword.ReportStep_Pass(testCase, "Set Hold Until Time : Successfully set hours to : " + hourToSet);
				} else if (displayedHour > hourToSet) {
					buttonToTap =holdpick.getDecreaseHoursButton();
					while (displayedHour != hourToSet) {
						MobileUtils.longPress(testCase, buttonToTap, 1);
						//t1.longPress(buttonToTap, 1).perform();
						displayedHour = Integer
								.parseInt(holdpick.getHoursPickervalue());
					}
				} else if (displayedHour < hourToSet) {
					if (holdpick.isIncreaseHoursButtonVisible()) {
						buttonToTap =holdpick.getIncreaseHoursButton();
						MobileUtils.longPress(testCase, buttonToTap, 1);
						//t1.longPress(buttonToTap, 1).perform();
						displayedHour = Integer
								.parseInt(holdpick.getHoursPickervalue());
					}
					buttonToTap = holdpick.getHoursPickerInput();
					while (displayedHour != hourToSet) {
						MobileUtils.longPress(testCase, buttonToTap, 1);
						//t1.longPress(buttonToTap, 1).perform();
						displayedHour = Integer
								.parseInt(holdpick.getHoursPickervalue());
					}
				}

				int displayedMinutes = Integer
						.parseInt(holdpick.getMinutesPickervalue());
				if (displayedMinutes == minutesToSet) {
					Keyword.ReportStep_Pass(testCase,
							"Set Hold Until Time : Successfully set minutes to : " + minutesToSet);
				} else if (displayedMinutes > minutesToSet) {
					int count = 7;
					buttonToTap = holdpick.getDecreaseMinutesButton();
					while (displayedMinutes != minutesToSet) {
						MobileUtils.longPress(testCase, buttonToTap, 1);
						//t1.longPress(buttonToTap, 1).perform();
						displayedMinutes = Integer
								.parseInt(holdpick.getMinutesPickervalue());
						count--;
						if (count == 0) {
							break;
						}
					}
				} else if (displayedMinutes < minutesToSet) {
					int count = 7;
					buttonToTap = holdpick.getIncreaseMinutesButton();
					while (displayedMinutes != minutesToSet) {
						MobileUtils.longPress(testCase, buttonToTap, 1);
						//t1.longPress(buttonToTap, 1).perform();
						displayedMinutes = Integer
								.parseInt(holdpick.getMinutesPickervalue());
						count--;
						if (count == 0) {
							break;
						}
					}
				}

				if (holdpick.isAMPMSelectorVisible()) {
					try {
						int temp = c1.get(Calendar.AM_PM);
						if (temp == Calendar.AM) {
							ampm = "AM";
						} else {
							ampm = "PM";
						}

						String ampmvalue=holdpick.getAMPMPickervalue();

						if (ampmvalue.equalsIgnoreCase(ampm)) {
							Keyword.ReportStep_Pass(testCase, "Set Hold Until Time : AMPM is set to " + ampm);
						} else {
							ele = holdpick.getAMPMChangeButton();
							try {
								//t1.longPress(ele).perform();
								t1.longPress(longPressOptions().withElement(element(ele)).withDuration(Duration.ofMillis(8000))).release().perform();
								Keyword.ReportStep_Pass(testCase, "Set Hold Until Time : AMPM is set to " + ampm);
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"Set Hold Until Time : Failed to set AMPM to " + ampm + ". Error : "
												+ e.getMessage());
							}
						}
					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Error occurred : " + e.getMessage());
					}
				}
			} else {
				Keyword.ReportStep_Pass(testCase, "Set Hold Until Time : Setting hold unitl day to : " + day);
				Keyword.ReportStep_Pass(testCase,
						"Set Hold Until Time : Setting hold unitl time to : " + timeIn12Hours);
				if (holdpick.isAMPMSelectorVisible()) {
					hourToSet = c1.get(Calendar.HOUR);
					if (hourToSet == 0) {
						hourToSet = 12;
					}
					int temp = c1.get(Calendar.AM_PM);
					if (temp == Calendar.AM) {
						ampm = "AM";
					} else {
						ampm = "PM";
					}
				} else {
					hourToSet = c1.get(Calendar.HOUR_OF_DAY);
				}

				// flag = flag && MobileUtils.setValueToElement(testCase,
				// "xpath", "//UIAPickerWheel[1]", day);

				String currentDisplayedDay =holdpick.getDayvalue();

				SimpleDateFormat IOSDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
				SimpleDateFormat timePickerDateFormat = new SimpleDateFormat("EEE, MMM d");
				String displayedDate;
				if (!currentDisplayedDay.equals("Today")) {
					String currentTime = optikUtils.getIOSSimulatorTime(testCase,inputs);
					displayedDate = timePickerDateFormat.format(IOSDateFormat.parse(currentTime));
				} else {
					displayedDate = currentDisplayedDay;
				}
				if (!displayedDate.equalsIgnoreCase(day)) {
					WebElement dayPicker = holdpick.getDayPicker();
					Point p1 = dayPicker.getLocation();
					Dimension d1 = dayPicker.getSize();
					int x = p1.getX();
					int y;
					TouchAction t1 = new TouchAction(testCase.getMobileDriver());
					if (currentDisplayedDay.equalsIgnoreCase("Today")) {
						y = p1.getY() + d1.getHeight() / 2 + 20;

					} else {
						y = p1.getY() + d1.getHeight() / 2 - 20;
					}
					t1.tap(tapOptions().withPosition(point(x, y))).perform();
					//t1.tap(x, y).perform();
				}
				if (holdpick.isAMPMSelectorVisible()) {

					flag = flag && holdpick.setAMPMValue(ampm);
				}

				holdpick.setHoursValue(String.valueOf(hourToSet));
				String min;
				if (minutesToSet == 0) {
					min = "00";
				} else {
					min = String.valueOf(minutesToSet);
				}
				holdpick.setMinutesValue(String.valueOf(min));
			}

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		return flag;
	}

	public static boolean resumeScheduleFromAdHoc(TestCases testCase) {
		boolean flag = true;
		AdhocScreen ad=new AdhocScreen(testCase);
		PrimaryCard pc=new PrimaryCard(testCase);

		if (ad.isAdhocButtonVisible(3))
		{
			flag = flag && ad.clickOnAdhocButton();
			flag = flag && ad.clickOnResumeSchedule();
			Double currentTemp=pc.getCurrentSetPointInDialer();
			Keyword.ReportStep_Pass(testCase,"Current Temperature on Primary Card :"+ currentTemp);
		}
		else
		{

			Keyword.ReportStep_Pass(testCase, "Resume Schedule : Ad hoc is not overridden cannot resume schedule");
		}
		return flag;
	}

	public static boolean verifyHoldStatusOnPrimaryCard(TestCases testCase, TestCaseInputs inputs) {
		AdhocScreen ad=new AdhocScreen(testCase);
	Dashboard db=new Dashboard(testCase);
	PrimaryCard pc=new PrimaryCard(testCase);
	boolean flag = true;
	try {
		if(db.isBackButtonVisible())
		{
			db.clickOnBackButton(5);

		}
		CoachMarkUtils.closeCoachMarks(testCase);
		db.ClickOnDevicePresentOnDashboard(inputs.getInputValue("LOCATION1_DEVICE1_NAME"));

		FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(
				testCase.getMobileDriver());

		fWait.pollingEvery(Duration.ofSeconds(5));
		fWait.withTimeout(Duration.ofMinutes(1));
		CoachMarkUtils.closeCoachMarks(testCase);
		if(db.isBackButtonVisible())
		{
			db.clickOnBackButton(5);

		}


		DeviceInformation DevInfo = new DeviceInformation(testCase, inputs);
		String overrideTemp = "";
		String systemMode = DevInfo.getThermoStatMode();
		if (systemMode.equals("Auto")) {
			systemMode = DevInfo.getThermostatModeWhenAutoChangeOverActive();
		}
		if (systemMode.equals("Heat")) {
			overrideTemp = DevInfo.getHeatSetPoints();
		} else if (systemMode.equals("Cool")) {
			overrideTemp = DevInfo.getCoolSetPoints();
		}
		if (DevInfo.getThermostatUnits().equalsIgnoreCase("Fahrenheit")) {
			Double temp = Double.parseDouble(overrideTemp);
			overrideTemp = String.valueOf(temp);
		}

		String status12Hours;
		String status24Hours;
		Double temp = Double.parseDouble(overrideTemp);
		if (DevInfo.getThermostatUnits().equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
			status12Hours = "Hold " + temp.intValue() + "\u00B0";
			status24Hours = "Hold " + temp.intValue() + "\u00B0";
		} else {
			status12Hours = "Hold " + overrideTemp + "\u00B0";
			status24Hours = "Hold " + overrideTemp + "\u00B0";
		}
		db.clickOnDevice();

		try {
			String adHocStatus = "";
			if (ad.isAdhocButtonVisible(10)) {
				adHocStatus = ad.getAdhocButtonText();
			}

			if(adHocStatus.toUpperCase().contains(status12Hours.toUpperCase())||adHocStatus.toUpperCase().contains(status24Hours.toUpperCase()))
			{
				flag=true;
			} else if(pc.getCurrentSetPointInDialer()==temp ) {
				flag=true;
			}else{
				flag=false;
			}

		}
		catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Error occurred : " + e.getMessage());
		}

		if (flag) {
			if (ad.getAdhocButtonText().contains("M")|| ad.getAdhocButtonText().contains("m")) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Hold Until Schedule Status on Primary Card : Expected Ad hoc status: is correctly displayed in the primary card."
								+ ad.getAdhocButtonText());
			} else {
				Keyword.ReportStep_Pass(testCase,
						"Verify Hold Until Schedule Status on Primary Card : Expected Ad hoc status:"+ ad.getAdhocButtonText());
			}

		} else {
			flag = false;
			if (ad.getAdhocButtonText()
					.contains("M")
					|| ad.getAdhocButtonText().contains("m")) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Hold Until Schedule Status on Primary Card : Expected Ad hoc status is not correctly displayed in the primary card with overridden set points and time:"
								+ ad.getAdhocButtonText());
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Hold Until Schedule Status on Primary Card : Expected Ad hoc status is not correctly displayed in the primary card with overridden set points and time:"
								+ ad.getAdhocButtonText());
			}

		}
		DASZwaveUtils.navigateToDashboardFromPrimaryCard(testCase, inputs);
	} catch (Exception e) {
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
	}

	return flag;
	}

	public static boolean verifyHoldUntilTimeIsSet(TestCases testCase, TestCaseInputs inputs, String time, boolean isValidTime) {
		boolean flag = true;
		try {
			HoldUntilTimePickerScreen hs= new HoldUntilTimePickerScreen(testCase);
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				flag = flag && hs.clickOnOkButton();
				if (isValidTime) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Hold Until Time : Verifying hold until time is set to : " + time);
					if (hs.isOkButtonAvailable()) {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Verify Hold Until Time : Failed to set hold until time to a valid time");
					} else {
						Keyword.ReportStep_Pass(testCase,
								"Verify Hold Until Time : Successfully set hold until time to a valid time");
					}
				} else {
					Keyword.ReportStep_Pass(testCase,
							"Verify Hold Until Time : Verifying hold until time is not set to : " + time);
					if (hs.isOkButtonAvailable()) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Hold Until Time : Failed to set hold until time to an invalid time");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Verify Hold Until Time : Successfully set hold until time to an invalid time");
					}
				}
			} else {
				String[] dateAndTime = time.split("_");
				String currentTime = optikUtils.getIOSSimulatorTime(testCase,inputs);
				SimpleDateFormat IOSDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
				SimpleDateFormat timePickerDateFormat = new SimpleDateFormat("EEE, MMM d");
				String currentDate = timePickerDateFormat.format(IOSDateFormat.parse(currentTime));

				SimpleDateFormat time12Format = new SimpleDateFormat("hh:mm a");
				Calendar c1 = Calendar.getInstance(optikUtils.getDeviceTimeZone(testCase, inputs));
				try {
					c1.setTime(time12Format.parse(dateAndTime[0]));

				} catch (Exception e) {
					c1.setTime(time12Format.parse(time));

				}

			/*	if (currentDate.equalsIgnoreCase(dateAndTime[0])) {
					dateAndTime[0] = currentDate;
				}
				else
				{
					dateAndTime[0] = "Today";
				} */
				String hours = "";
				String ampm = "";
				String minutes = "";
				if (hs.isAMPMSelectorVisible()) {
					int temp = c1.get(Calendar.HOUR);
					if (temp == 0) {
						temp = 12;
					}
					hours = String.valueOf(temp);
					temp = c1.get(Calendar.AM_PM);
					if (temp == Calendar.AM) {
						ampm = "AM";
					} else {
						ampm = "PM";
					}
				} else {
					hours = String.valueOf(c1.get(Calendar.HOUR_OF_DAY));
				}
				hours = hours + " o'clock";
				if (c1.get(Calendar.MINUTE) == 0) {
					minutes = "00";
				} else {
					minutes = String.valueOf(c1.get(Calendar.MINUTE));
				}
				minutes = minutes + " minutes";
				if (isValidTime) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Hold Until Time : Verifying hold until time is set to : " + time);
				/*	if (hs.getDayPicker()
							.getAttribute("value").equalsIgnoreCase(dateAndTime[0])) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Hold Until Time : Displayed date is correct on the time picker");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Verify Hold Until Time : Displayed date is not correct on the time picker");
					} */
					if (hs.getHoursPicker()
							.getAttribute("value").replaceAll("[^\\d.]","").equalsIgnoreCase(hours.replaceAll("[^\\d.]",""))) {
						Keyword.ReportStep_Pass(testCase,//5 o'clock 5 oÃƒÆ’Ã‚Â¯Ãƒâ€šÃ‚Â¿Ãƒâ€šÃ‚Â½clock
								"Verify Hold Until Time : Displayed hour is correct on the time picker");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Verify Hold Until Time : Displayed hour is not correct on the time picker");
					}

					if (hs.getMinutesPicker()
							.getAttribute("value").equalsIgnoreCase(minutes)) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Hold Until Time : Displayed minutes is correct on the time picker");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Verify Hold Until Time : Displayed minutes is not correct on the time picker");
					}
					if (hs.isAMPMSelectorVisible()) {
						if (ampm.trim()
								.equalsIgnoreCase(hs.getAMPMPickervalue().trim())) {
							Keyword.ReportStep_Pass(testCase,
									"Verify Hold Until Time : Displayed AM/PM is correct on the time picker");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Verify Hold Until Time : Displayed AM/PM is not correct on the time picker");
						}
					}


					if(hs.isOkButtonAvailable()) {
					flag = flag && hs.clickOnOkButton();
					}else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to Verify Hold Until Time : OK Button Not Displayed on the time picker");
					}

				} else {
					boolean validTime;
					Keyword.ReportStep_Pass(testCase,
							"Verify Hold Until Time : Verifying hold until time is not set to : " + time);
					if (hs.isAMPMSelectorVisible()) {
						if ((hs.getDayPicker().getAttribute("value").equalsIgnoreCase(dateAndTime[0]))
								&& (hs.getHoursPicker().getAttribute("value").equalsIgnoreCase(hours))
								&& (hs.getMinutesPicker()
										.getAttribute("value").equalsIgnoreCase(minutes))
								&& (hs.getAMPMPickervalue())
								.equalsIgnoreCase(ampm)) {
							validTime = true;
						} else {
							validTime = false;
						}
					} else {
						if ((hs.getDayPicker()
								.getAttribute("value").equalsIgnoreCase(dateAndTime[0]))
								&& (hs.getHoursPicker()
										.getAttribute("value").equalsIgnoreCase(hours))
								&& (hs.getMinutesPicker()
										.getAttribute("value").equalsIgnoreCase(minutes))) {
							validTime = true;
						} else {
							validTime = false;
						}
					}
					if (!validTime) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Hold Until Time : Failed to set hold until time to an invalid time");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Verify Hold Until Time : Successfully set hold until time to an invalid time");
					}
				}
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		return flag;
	}

	public static boolean verifySetPointsAfterScheduleResume(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		String setPoints = "";
		String systemMode = statInfo.getThermoStatMode();
		if (systemMode.equalsIgnoreCase("Auto")) {
			systemMode = statInfo.getThermostatModeWhenAutoChangeOverActive();
		}
		if (systemMode.equalsIgnoreCase("Cool")) {
			setPoints = statInfo.getCoolEndSetPoints();
		} else if (statInfo.getThermoStatMode().equalsIgnoreCase("Heat")) {
			setPoints = statInfo.getHeatEndSetPoints();

			if(statInfo.getJasperDeviceType().equalsIgnoreCase("EMEA"))
			{
				setPoints = roundOffCelsiusData(testCase,
						optikUtils.convertFromFahrenhietToCelsius(testCase,setPoints));
			}

		}
		flag = flag && optikUtils.verifyDialerTemperature(testCase, inputs, Double.parseDouble(setPoints));
		return flag;
	}

	public static String roundOffCelsiusData(TestCases testCase, String celsiusTemp) {
		Double temp = Double.parseDouble(celsiusTemp);
		return String.valueOf((Math.round(temp * 2) / 2.0));
	}

	public static boolean verifyDialerTemperature(TestCases testCase, TestCaseInputs inputs, Double expectedTemp) {
		boolean flag = true;

		PrimaryCard pc= new PrimaryCard(testCase);

		FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(
				testCase.getMobileDriver());
		fWait.pollingEvery(Duration.ofSeconds(5));
		fWait.withTimeout(Duration.ofMinutes(1));
		try {
			Boolean isEventReceived = fWait.until(new Function<CustomDriver, Boolean>() {
				@Override
				public Boolean apply(CustomDriver driver) {
					Double currentSetPoint = pc.getCurrentSetPointInDialer();
					if (currentSetPoint - expectedTemp == 0.0) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Dialer Set Points : Dialer set points is set to : " + expectedTemp);
						return true;
					} else {
						return false;
					}
				}
			});
			flag = isEventReceived;
		} catch (TimeoutException e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Dialer Set Points : Dialer set points did not change to : " + expectedTemp
					+ " after waiting for 30 seconds");
		}
		return flag;
	}

	public static boolean checkElement(String element,TestCases testCase) {
		boolean flag=true;
		ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);
		if (ts.isElementVisible(element)) {
			Keyword.ReportStep_Pass(testCase, element + " is exists on secondary card screen");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					element + " does not exists on secondary card screen");
		}
		return flag;
	}


	public static boolean swipeElement(String element,TestCases testCase) {
		boolean flag=true;
		ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);

		CustomDriver driver = testCase.getMobileDriver();
		Dimension dimension = driver.manage().window().getSize();
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
		int i= 0;

		while ((!ts.isElementVisible(element)) && i<10){
			/*touchAction.press(10, (int) (dimension.getHeight() * .5))
			.moveTo(point(0, (int) (dimension.getHeight() * -.4)).release().perform();*/

			testCase.getMobileDriver().swipe((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5), (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .1), 3000);

			i++;


		}

		return flag;
	}

	public static void checkToggle(String element,TestCases testCase,TestCaseInputs inputs ) {
		String toggleOn = "ON";
		ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);

		if (ts.isElementVisible(element)) {
			Keyword.ReportStep_Pass(testCase, element + " is exists on secondary card screen");
			ts.getToggleOnOff(element);
			if (!MobileUtils.isRunningOnAndroid(testCase)) {
				if(ts.getToggleOnOffValue(element).equalsIgnoreCase("1")){
					Keyword.ReportStep_Pass(testCase, element + " is on and truning it off");
					ts.ClickOnElement(element);
					toggleOn = "OFF";
				}
				else {
					Keyword.ReportStep_Pass(testCase, element + " is off and truning it on");
					ts.ClickOnElement(element);
					toggleOn = "ON";
				}
			} else {
				if (ts.getToggleOnOffValue(element).equalsIgnoreCase("ON")) {
					Keyword.ReportStep_Pass(testCase, element + " is on and truning it off");
					ts.ClickOnElement(element);
					toggleOn = "OFF";
				} else {
					Keyword.ReportStep_Pass(testCase, element + " is off and truning it on");
					ts.ClickOnElement(element);
					toggleOn = "ON";
				}


				if(element.equals("AdaptiveRecoveryButton")){
					swipeElement("AdaptiveRecovery",testCase);
				}
				ts.getToggleOnOff(element);
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					if (toggleOn.equalsIgnoreCase(ts.getToggleOnOffValue(element))) {
						Keyword.ReportStep_Pass(testCase,"Toggle button status persist after navigating to different screen and coming back");
					} else {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Toggle button status does not persist after navigating to different screen and coming back");
					}
				}
				else{
					if (toggleOn.equalsIgnoreCase(ts.getToggleOnOffValue(element))) {
						Keyword.ReportStep_Pass(testCase,
								"Toggle button status persist after navigating to different screen and coming back");
					} else {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Toggle button status does not persist after navigating to different screen and coming back");
					}
				}
				//testCase.getMobileDriver().manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
				// Chapi validation
				if (element.equals("AutoChangeOverButton")) {
					CHILUtil cUtil = null;
					try {
						cUtil = new CHILUtil(inputs);
					} catch (Exception e) {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
					}
					boolean b = cUtil.getautoChangeoverActiveInfo(testCase);
					String tempstatus = "";
					if(b){
						tempstatus = "ON";
					}else{
						tempstatus = "OFF";
					}
					if (tempstatus.equalsIgnoreCase(toggleOn)) {
						Keyword.ReportStep_Pass(testCase, "Changed value is updated in CHIL");
					} else {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Changed value is not updated in CHIL");
					}
				}
			}
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,element + " does not exists on secondary card screen");
		}
	}

	public static boolean navigateToHomeScreen(TestCases testCase) {
		boolean flag = true;
		try {
			if (!MobileUtils.isRunningOnAndroid(testCase)) {
				if (MobileUtils.isMobElementExists("name", "icon notifications default", testCase, 2)) {
					Keyword.ReportStep_Pass(testCase,"Navigate To Primary Card : User is already on the Primary Card or Dashboard");
					return flag;
				} else {
					int i = 0;
					while ((!MobileUtils.isMobElementExists("name", "icon weather normal", testCase, 2)) && i < 10) {
						if (MobileUtils.isMobElementExists("name", "btn close normal", testCase, 2)) {
							flag = flag && MobileUtils.clickOnElement(testCase, "name", "btn close normal");
						} else if (MobileUtils.isMobElementExists("name", "nav bar back", testCase, 2)) {
							flag = flag && MobileUtils.clickOnElement(testCase, "name", "nav bar back");
						} else if (MobileUtils.isMobElementExists("name", "Back", testCase, 2)) {
							flag = flag && MobileUtils.clickOnElement(testCase, "name", "Back");
						}
						i++;
					}
					if (MobileUtils.isMobElementExists("name", "icon notifications default", testCase, 2)) {
						Keyword.ReportStep_Pass(testCase,
								"Navigate To Primary Card : Successfully navigated to Primary card or Dashboard");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Navigate To Primary Card : Failed to navigate to Primary card or Dashboard");
					}
				}
			} else {
				if (MobileUtils.isMobElementExists("id", "actionbar_activity_log_image", testCase, 2)) {
					Keyword.ReportStep_Pass(testCase, "Navigate To Primary Card : User is already on the Primary Card");
					return flag;
				} else {
					int i = 0;
					while ((!MobileUtils.isMobElementExists("id", "actionbar_activity_log_image", testCase, 2))
							&& i < 10) {
						if (MobileUtils.isMobElementExists("xpath",
								"//android.widget.ImageButton[@content-desc='Navigate Up']",

								testCase, 2)) {
							flag = flag && MobileUtils.clickOnElement(testCase, "xpath","//android.widget.ImageButton[@content-desc='Navigate Up']");
						} else if (MobileUtils.isMobElementExists("xpath", "//android.widget.ImageButton", testCase,
								2)) {
							flag = flag && MobileUtils.clickOnElement(testCase, "xpath", "//android.widget.ImageButton");
						}
						i++;
					}
					if (MobileUtils.isMobElementExists("id", "actionbar_activity_log_image", testCase, 2)) {
						Keyword.ReportStep_Pass(testCase,"Navigate To Primary Card : Successfully navigated to Primary card");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Navigate To Primary Card : Failed to navigate to Primary Card");
					}
				}
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Navigate To Primary Card : Error occurred : " + e.getMessage());
		}
		return flag;
	}

	public static boolean navigateToThermostatConfiguration(TestCases testCase) {
		boolean flag=true;


		ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);
		if(ts.isThermostatConfigurationVisible())
		{
			Keyword.ReportStep_Pass(testCase,"THERMOSTAT SETTINGS: Thermostat Configuration is shown on Thermostat Settings screen");
		}
		else
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Thermostat Configuration");
			}
			else
			{
				try
				{
					optikUtils.scrollToElementUsingExactAttributeValue(testCase , "value" , "Thermostat Configuration");
				}
				catch (Exception e)
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error message :"+e.getMessage());
				}
			}
			if(ts.isThermostatConfigurationVisible())
			{
				Keyword.ReportStep_Pass(testCase,"THERMOSTAT CONFIGURATION:Thermostat Configuration is shown on Thermostat Settings screen");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT CONFIGURATION:Thermostat Configuration is not shown on Thermostat Settings screen");
			}

		}
		if(ts.isThermostatConfigurationVisible())
		{
			if(ts.navigateToThermostatConfigurationPage())
			{
				Keyword.ReportStep_Pass(testCase,"THERMOSTAT CONFIGURATION: Successfully navigate to Thermostat Configuration screen");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT CONFIGURATION: Unable to navigate Thermostat Configuration screen");
			}
		}

		return flag;
	}

	public static boolean VerifyThermostatConfiguration(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		ThermostatConfigurationScreen tc = new ThermostatConfigurationScreen(testCase,inputs);

		if(tc.isDeleteThermostatOptionVisible())
		{
			String updateStat = "UpadtedStatName";

			inputs.setInputValue(GlobalVariables.Current_StatName,inputs.getInputValue("LOCATION1_DEVICE1_NAME"));

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				tc.ClickOnThermoStatNameEdit();

				tc.setThermoStatNameEdit(updateStat);
				//testCase.getMobileDriver().findElement(By.id("view_thermostat_name_text")).sendKeys(updateStat);
			}
			else
			{
				tc.isThermostatVisible(inputs,"");
				tc.ClickOnThermoStatButton(inputs,"");
				/*if(MobileUtils.isMobElementExists("XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']", testCase, 5))
					{
						MobileUtils.clickOnElement(testCase, "XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']");
					}*/


				WebElement tap =tc.getThermoStatButton(inputs,"");
				//MobileUtils.getMobElement(testCase, "XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']");
				tap.clear();
				tap.sendKeys(updateStat);

			}
			Keyword.ReportStep_Pass(testCase, "Verified Successfully String is Updated as "+updateStat);
			if(MobileUtils.isRunningOnAndroid(testCase))	{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}


			if(MobileUtils.isRunningOnAndroid(testCase))
			{	tc.ClickOnThermoStatNameEdit();

			tc.setThermoStatNameEdit(inputs.getInputValue(GlobalVariables.Current_StatName));
			//testCase.getMobileDriver().findElement(By.id("view_thermostat_name_text")).sendKeys(inputs.getInputValue(GlobalVariables.Current_StatName));
			}
			else
			{
				WebElement tap =tc.getUpdatedThermoStatButton(inputs, updateStat);
				//MobileUtils.getMobElement(testCase, "XPATH", "//UIAStaticText[@value='"+updateStat+"']");
				tap.clear();
				tap.sendKeys(inputs.getInputValue(GlobalVariables.Current_StatName));
			}

			Keyword.ReportStep_Pass(testCase, "Verified Successfully String is Updated as "+inputs.getInputValue(GlobalVariables.Current_StatName));

		}

		if(MobileUtils.isRunningOnAndroid(testCase)){
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}
		else{
			if(MobileUtils.isMobElementExists("name", "Return", testCase)){
				MobileUtils.clickOnElement(testCase, "name", "Return");
			}
		}

		if(tc.isDeleteThermostatOptionVisible())
		{
			/*tc.ClickOnDeleteThermostatOption();

			if(tc.isThermoStatDeletePopUpVisible())
			{
				if(tc.isDeleteDeviceVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Delete popUp is verified "+tc.getDeleteDevice());
				}
				Keyword.ReportStep_Pass(testCase, "Delete popUp is verified "+tc.getThermoStatDeletePopUp());
			}
			tc.ClickOnCancelButton();*/
		}
		return flag;
	}


	public static boolean VerifyThermostatSetting(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		ThermostatSettingsScreen tss=new ThermostatSettingsScreen(testCase);
		DeviceInformation dv=new DeviceInformation(testCase , inputs);

		if(dv.getDeviceType().equalsIgnoreCase("HoneyBadger") || dv.getDeviceType().equalsIgnoreCase("Blackbeard") || dv.getJasperDeviceType().equalsIgnoreCase("NA"))
		{
			if(tss.isAdptiveRecoveryVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Thermostat Setting: Adaptive Recovery option visible");
				flag=flag && tss.enableAdptiveRecoveryToggle();
				flag=flag && tss.disableAdptiveRecoveryToggle();
			}
			else{
				flag= flag && false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Thermostat Setting: Adaptive Recovery option not visible", false);
			}
		}


		if(tss.isThermostatConfigurationVisible())
		{
			flag=true;
			Keyword.ReportStep_Pass(testCase, "Themostat Setting:Themostat Configuration is displayed");
		}
		else{
			if(tss.scrollToThermostatConfiguration())
			{
				flag=flag && true;
				Keyword.ReportStep_Pass(testCase, "Themostat Setting:Themostat Configuration is displayed");
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Themostat Setting:Themostat Configuration is not displayed", false);
			}
		}
		return flag;
	}

	public static boolean VerifyThermostatNameCannotBeEmpty(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		ThermostatSettingsScreen tss=new ThermostatSettingsScreen(testCase);
		ThermostatConfigurationScreen tc = new ThermostatConfigurationScreen(testCase,inputs);

		String originalStatValue="";
		if(tc.isDeleteThermostatOptionVisible() || tc.isThermoStatNameEditVisible(inputs)||tc.isStatNametextVisible())
		{
			originalStatValue=tc.getThermoStatNameFieldValue(inputs);
			String updateStatValue = "";

			inputs.setInputValue(GlobalVariables.Current_StatName,inputs.getInputValue("LOCATION1_DEVICE1_NAME"));

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				tc.ClickOnThermoStatNameEdit();

				tc.setThermoStatNameEdit(updateStatValue);
				if(MobileUtils.isRunningOnAndroid(testCase))	{
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}

				Keyword.ReportStep_Pass(testCase, "Thermostat Configuration: Thermostat Name is set as empty");

				//testCase.getMobileDriver().findElement(By.id("view_thermostat_name_text")).sendKeys(updateStat);
			}
			else
			{
				tc.isThermostatVisible(inputs,"");
				tc.ClickOnThermoStatButton(inputs,"");
				/*if(MobileUtils.isMobElementExists("XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']", testCase, 5))
					{
						MobileUtils.clickOnElement(testCase, "XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']");
					}*/


				WebElement tap =tc.getThermoStatButton(inputs,"");
				//MobileUtils.getMobElement(testCase, "XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']");
				tap.clear();
				tap.sendKeys(updateStatValue);

				if(MobileUtils.isMobElementExists("name", "Done", testCase,5)){
					MobileUtils.clickOnElement(testCase, "name", "Done");
				}

				if(MobileUtils.isMobElementExists("name", "Return", testCase)){
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
				Keyword.ReportStep_Pass(testCase, "Thermostat Configuration: Thermostat Name is set as empty");

			}

			flag= flag && tc.navigateToBackFromThermostatConfig();
			if(tss.isThermostatConfigurationVisible())
			{
				flag= flag && tss.navigateToThermostatConfigurationPage();
			}
			else
			{
				flag= flag && tss.scrollToThermostatConfiguration();
				flag= flag && tss.navigateToThermostatConfigurationPage();
			}

			/*if(tc.isThermoStatNameEditVisible(inputs))
			{*/
			if(tc.getThermoStatNameFieldValue(inputs).equalsIgnoreCase(originalStatValue))
			{
				Keyword.ReportStep_Pass(testCase, "Thermostat Configuration: Thermostat name has not been changed");
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Thermostat Configuration: Thermostat name is changed", false);

				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					tc.ClickOnThermoStatNameEdit();

					tc.setThermoStatNameEdit(originalStatValue);
					if(MobileUtils.isRunningOnAndroid(testCase))	{
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}

					Keyword.ReportStep_Pass(testCase, "Thermostat Configuration: Thermostat Name is set as "+originalStatValue);

					//testCase.getMobileDriver().findElement(By.id("view_thermostat_name_text")).sendKeys(updateStat);
				}
				else
				{
					tc.isThermostatVisible(inputs,"");
					tc.ClickOnThermoStatButton(inputs,"");
					/*if(MobileUtils.isMobElementExists("XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']", testCase, 5))
							{
								MobileUtils.clickOnElement(testCase, "XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']");
							}*/


					WebElement tap =tc.getThermoStatButton(inputs,"");
					//MobileUtils.getMobElement(testCase, "XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']");
					tap.clear();
					tap.sendKeys(originalStatValue);

					if(MobileUtils.isMobElementExists("name", "Done", testCase,5)){
						MobileUtils.clickOnElement(testCase, "name", "Done");
					}

					if(MobileUtils.isMobElementExists("name", "Return", testCase)){
						MobileUtils.clickOnElement(testCase, "name", "Return");
					}
					Keyword.ReportStep_Pass(testCase, "Thermostat Configuration: Thermostat Name is set as empty");

				}
			}
			//}
			/*else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Thermostat Configuration: Thermostat Name field is not visible", false);
			}*/

		}
		else{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Thermostat Configuration Screen is not visible", false);
		}
		return flag;
	}


	public static boolean EditAndVerifyUpdatedThermostatName(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		ThermostatSettingsScreen tss=new ThermostatSettingsScreen(testCase);
		ThermostatConfigurationScreen tc = new ThermostatConfigurationScreen(testCase,inputs);
		DeviceInformation dv=new DeviceInformation(testCase , inputs);

		String originalStatValue="";
		if(tc.isDeleteThermostatOptionVisible() || tc.isThermoStatNameEditVisible(inputs)||tc.isStatNametextVisible())
		{
			originalStatValue=tc.getThermoStatNameFieldValue(inputs);
			String updateStatValue = inputs.getInputValue("LOCATION1_DEVICE1_NAME")+" "+"Auto";

			inputs.setInputValue(GlobalVariables.Current_StatName,inputs.getInputValue("LOCATION1_DEVICE1_NAME"));

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				tc.ClickOnThermoStatNameEdit();

				if(dv.getDeviceType().equalsIgnoreCase("Storm")) {
				if(tc.isAddRoomVisible(inputs))
					tc.ClickOnAddRoomButton(inputs);
				}
				tc.setThermoStatNameEdit(updateStatValue);
				if(MobileUtils.isRunningOnAndroid(testCase))	{
					if(dv.getDeviceType().equalsIgnoreCase("Storm")) {
						testCase.getMobileDriver().tap(1, 700, 1100);
					}else {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
				}

				Keyword.ReportStep_Pass(testCase, "Thermostat Configuration: Thermostat Name is set to "+ inputs.getInputValue(GlobalVariables.Current_StatName));

				//testCase.getMobileDriver().findElement(By.id("view_thermostat_name_text")).sendKeys(updateStat);
			}
			else
			{
				tc.isThermostatVisible(inputs,updateStatValue);
				tc.ClickOnThermoStatButton(inputs,updateStatValue);

				if(dv.getDeviceType().equalsIgnoreCase("Storm")) {
				if(tc.isAddRoomVisible(inputs))
					tc.ClickOnAddRoomButton(inputs);

				}


				/*if(MobileUtils.isMobElementExists("XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']", testCase, 5))
					{
						MobileUtils.clickOnElement(testCase, "XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']");
					}*/


				WebElement tap =tc.getThermoStatButton(inputs, "Room Name");
				//MobileUtils.getMobElement(testCase, "XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']");
				tap.clear();
				tap.sendKeys(updateStatValue);

				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");

				if(MobileUtils.isMobElementExists("name", "next", testCase,5)){
					MobileUtils.clickOnElement(testCase, "name", "next");
				}
				if(MobileUtils.isMobElementExists("name", "Done", testCase,5)){
					MobileUtils.clickOnElement(testCase, "name", "Done");
				}

				if(MobileUtils.isMobElementExists("name", "Return", testCase)){
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
				Keyword.ReportStep_Pass(testCase, "Thermostat Configuration: Thermostat Name is set as empty");

			}



			flag= flag && tc.navigateToBackFromThermostatConfig();


			if(tss.isThermostatConfigurationVisible())
			{
				flag= flag && tss.navigateToThermostatConfigurationPage();
			}
			else
			{
				flag= flag && tss.scrollToThermostatConfiguration();
				flag= flag && tss.navigateToThermostatConfigurationPage();
			}

			/*if(tc.isThermoStatNameEditVisible(inputs))
			{*/
			if(tc.getThermoStatNameFieldValueStorm(updateStatValue).equalsIgnoreCase(updateStatValue))
			{
				Keyword.ReportStep_Pass(testCase, "Thermostat Configuration: Thermostat updated name has been displayed");
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Thermostat Configuration: Thermostat name is changed", false);

				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					tc.ClickOnThermoStatNameEdit();

					if(dv.getDeviceType().equalsIgnoreCase("Storm")) {
					if(tc.isAddRoomVisible(inputs))
						tc.ClickOnAddRoomButton(inputs);
					}


					tc.setThermoStatNameEdit(originalStatValue);
					if(MobileUtils.isRunningOnAndroid(testCase))	{

						if(dv.getDeviceType().equalsIgnoreCase("Storm")) {
							testCase.getMobileDriver().tap(1, 700, 1100);
						}else {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
						}
					}

					Keyword.ReportStep_Pass(testCase, "Thermostat Configuration: Thermostat Name is set as "+originalStatValue);

					//testCase.getMobileDriver().findElement(By.id("view_thermostat_name_text")).sendKeys(updateStat);
				}
				else
				{
					tc.isThermostatVisible(inputs,"");
					tc.ClickOnThermoStatButton(inputs,"");

					/*
					if(tc.isAddRoomVisible(inputs))
						tc.ClickOnAddRoomButton(inputs); */


					/*if(MobileUtils.isMobElementExists("XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']", testCase, 5))
							{
								MobileUtils.clickOnElement(testCase, "XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']");
							}*/


					WebElement tap =tc.getThermoStatButton(inputs,updateStatValue);
					//MobileUtils.getMobElement(testCase, "XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']");
					tap.click();
					tap.clear();
					tap.sendKeys(originalStatValue);

					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");

					if(MobileUtils.isMobElementExists("name", "next", testCase,3)){
						MobileUtils.clickOnElement(testCase, "name", "next");
					}

					if(MobileUtils.isMobElementExists("name", "Done", testCase,3)){
						MobileUtils.clickOnElement(testCase, "name", "Done");
					}

					if(MobileUtils.isMobElementExists("name", "Return", testCase,3)){
						MobileUtils.clickOnElement(testCase, "name", "Return");
					}
					Keyword.ReportStep_Pass(testCase, "Thermostat Configuration: Thermostat Name is set as empty");

				}
			}

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				tc.ClickOnThermoStatNameEdit();
				if(dv.getDeviceType().equalsIgnoreCase("Storm")) {
				if(tc.isAddRoomVisible(inputs))
					tc.ClickOnAddRoomButton(inputs);
				}


				tc.setThermoStatNameEdit(originalStatValue);
				if(MobileUtils.isRunningOnAndroid(testCase))	{
					if(dv.getDeviceType().equalsIgnoreCase("Storm")) {
						testCase.getMobileDriver().tap(1, 700, 1100);
					}else {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
				}

				Keyword.ReportStep_Pass(testCase, "Thermostat Configuration: Thermostat Name is set to original name i.e "+originalStatValue );

				//testCase.getMobileDriver().findElement(By.id("view_thermostat_name_text")).sendKeys(updateStat);
			}
			else
			{
				tc.isThermostatVisible(inputs,updateStatValue);
				tc.ClickOnThermoStatButton(inputs,updateStatValue);
				// to remove
				if(tc.isAddRoomVisible(inputs))
					tc.ClickOnAddRoomButton(inputs);


				/*if(MobileUtils.isMobElementExists("XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']", testCase, 5))
					{
						MobileUtils.clickOnElement(testCase, "XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']");
					}*/


				WebElement tap =tc.getThermoStatButton(inputs,"Room Name");
				//MobileUtils.getMobElement(testCase, "XPATH", "//UIAStaticText[@value='" + inputs.getInputValue("LOCATION1_DEVICE1_NAME") + "']");
				tap.clear();
				tap.sendKeys(originalStatValue);

				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");

				if(MobileUtils.isMobElementExists("name", "next", testCase,5)){
					MobileUtils.clickOnElement(testCase, "name", "next");
				}
				if(MobileUtils.isMobElementExists("name", "Done", testCase,5)){
					MobileUtils.clickOnElement(testCase, "name", "Done");
				}

				if(MobileUtils.isMobElementExists("name", "Return", testCase)){
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
				Keyword.ReportStep_Pass(testCase, "Thermostat Configuration: Thermostat Name is set to original name i.e "+originalStatValue );

			}




			//}
			/*else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Thermostat Configuration: Thermostat Name field is not visible", false);
			}*/

		}
		else{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Thermostat Configuration Screen is not visible", false);
		}
		return flag;
		}



	public static boolean VerifyScreenLocalization(TestCases testCase,String Screenname)
	{
		String lang=testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		boolean flag=true;
		List<String>eleList = null;
		try {
			if(testCase.getTestCaseInputs().getInputValue("LANGUAGE").equals(null) || testCase.getTestCaseInputs().getInputValue("LANGUAGE").equals("")){
				eleList=optikUtils.read(testCase, "English_US", Screenname);
			}else{
				eleList=optikUtils.read(testCase, lang, Screenname);
			}
		} catch (IOException e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		if(!(optikUtils.compare(eleList, testCase)))
		{
			flag=false;
		}
		else
		{
			Keyword.ReportStep_Pass(testCase , "Successfully verified the screen :"+Screenname) ;
		}

		return flag;
	}

	public static List<String> read(TestCases testCase, String fileName, String screenName)throws IOException
	{

		boolean flag = true ;

		String key = "", value = "" ;
		List<String> elementlist = new LinkedList<String>() ;
		FileInputStream file = null ;
		try
		{
			file = new FileInputStream(new File(fileName + ".xls")) ;

			// Get the workbook instance for XLS file
			HSSFWorkbook workbook = new HSSFWorkbook(file) ;

			// Get first sheet from the workbook
			HSSFSheet sheet = workbook.getSheet(screenName) ;

			Iterator<Row> rowIterator = sheet.iterator() ;
			while (rowIterator.hasNext())
			{
				flag = true ;
				Row row = rowIterator.next() ;
				// For each row, iterate through each columns
				Iterator<Cell> cellIterator = row.cellIterator() ;
				while (cellIterator.hasNext())
				{

					Cell cell = cellIterator.next() ;

					if (flag)
					{
						key = cell.getStringCellValue() ;
						flag = false ;

					}
					else
					{
						if (MobileUtils.isRunningOnAndroid(testCase))
						{
							value = cell.getStringCellValue() ;
							flag = true ;
						}
						else
						{
							cell = cellIterator.next() ;
							value = cell.getStringCellValue() ;
							flag = true ;
						}
					}
				}

				if (!(value.equalsIgnoreCase("IOS") || value.equalsIgnoreCase("Android") || value.equalsIgnoreCase("NULL")))
				{
					elementlist.add(value) ;
				}
			}

		}
		catch (Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		return elementlist ;
	}
	public static boolean compare(List<String> dsd, TestCases testCase)
	{

		boolean flag = true, isScreenshotTaken = true ,comparedBySplit=true ,tempSplitFlag=true ;
		String tempSplit="" , convertFirstLetterCaps= "";
		try
		{
			MobileScreens ms = new MobileScreens(testCase) ;
			Document doc = ms.getPageSource() ; // XML
			CustomDriver driver = testCase.getMobileDriver() ;
			for (String temp : dsd) // Follow
			{
				
				if (MobileUtils.isRunningOnAndroid(testCase))
				{
					if (ms.isElementPresent(doc , String.format("//*[contains(@content-desc,'%s') or contains(@text,'%s')]" , temp , temp)))
					{
						String strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + temp + "') or contains(@text,'" + temp+ "')]" , false , false).getText() ;
						if (strText.isEmpty() || strText == null)
						{
							if (testCase.getTestCaseInputs().isRunningOn("TestObject"))
							{
								strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + temp + "') or contains(@text,'"+ temp + "')]" , false , false).getAttribute("contentDescription") ;
							}
							else
							{
								strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + temp + "') or contains(@text,'"+ temp + "')]" , false , false).getAttribute("name") ;
							}
						}
						if (isScreenshotTaken)
						{
							ReportStep_Pass_With_ScreenShot(testCase , "Expected Text displayed : "+ strText , driver) ;
							isScreenshotTaken = false ;
						}
						else
						{
							Keyword.ReportStep_Pass(testCase , "Expected Text displayed : " + strText) ;
						}
						
					}
					else if  (ms.isElementPresent(doc , String.format("//*[contains(@content-desc,'%s') or contains(@text,'%s')]" , temp.toLowerCase() , temp.toLowerCase())))
					{
						String strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + temp.toLowerCase() + "') or contains(@text,'" + temp.toLowerCase()+ "')]" , false , false).getText() ;
						if (strText.isEmpty() || strText == null)
						{
							if (testCase.getTestCaseInputs().isRunningOn("TestObject"))
							{
								strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + temp.toLowerCase() + "') or contains(@text,'"+ temp.toLowerCase() + "')]" , false , false).getAttribute("contentDescription") ;
							}
							else
							{
								strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + temp.toLowerCase() + "') or contains(@text,'"+ temp.toLowerCase() + "')]" , false , false).getAttribute("name") ;
							}
						}
						if (ms.isElementPresent(doc , String.format("//*[contains(@content-desc,'%s') or contains(@text,'%s')]" , temp.toLowerCase() , temp.toLowerCase())))
						{
							ReportStep_Pass_With_ScreenShot(testCase , "Expected Text displayed : "+ strText , driver) ;
							isScreenshotTaken = false ;
						}
						else
						{
							Keyword.ReportStep_Pass(testCase , "Expected Text displayed : " + strText) ;
						}
					}else if  (ms.isElementPresent(doc , String.format("//*[contains(@content-desc,'%s') or contains(@text,'%s')]" , temp.toUpperCase() , temp.toUpperCase())))
					{
						String strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + temp.toUpperCase() + "') or contains(@text,'" + temp.toUpperCase()+ "')]" , false , false).getText() ;
						if (strText.isEmpty() || strText == null)
						{
							if (testCase.getTestCaseInputs().isRunningOn("TestObject"))
							{
								strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + temp.toUpperCase() + "') or contains(@text,'"+ temp.toUpperCase() + "')]" , false , false).getAttribute("contentDescription") ;
							}
							else
							{
								strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + temp.toUpperCase() + "') or contains(@text,'"+ temp.toUpperCase() + "')]" , false , false).getAttribute("name") ;
							}
						}
						if (ms.isElementPresent(doc , String.format("//*[contains(@content-desc,'%s') or contains(@text,'%s')]" , temp.toUpperCase() , temp.toUpperCase())))
						{
							ReportStep_Pass_With_ScreenShot(testCase , "Expected Text displayed : "+ strText , driver) ;
							isScreenshotTaken = false ;
						}
						else
						{
							Keyword.ReportStep_Pass(testCase , "Expected Text displayed : " + strText) ;
						}
					}else if(comparedBySplit) {
						
						//char string[] = temp;  
						//System.out.println("Before split :- "+temp);

						String[] Space = temp.split( " " );
						
					//	int count = String.countMatches( temp, " " );
						//System.out.println("Space.length :- "+Space.length);
						
						// ArrayList<String> list=new ArrayList<String>();//Creating arraylist    
						 try {
						
						 for(int i=0 ; i< Space.length;i++) {
							tempSplit= temp.split(" ")[i];
							convertFirstLetterCaps=ConvertFirstLetterCaps(tempSplit);
							//System.out.println(" After split :- "+tempSplit);
					    //  list.add(tempSplit);//Adding object in arraylist
						/*	if (!ms.isElementPresent(doc , String.format("//*[contains(@content-desc,'%s') or contains(@text,'%s')]" , tempSplit , tempSplit))){						
							
								MobileUtils.scrollToExactAndroid(testCase , tempSplit);
								
								}else if ( ms.isElementPresent(doc , String.format("//*[contains(@content-desc,'%s') or contains(@text,'%s')]" , convertFirstLetterCaps , convertFirstLetterCaps)))
									{
									MobileUtils.scrollToExactAndroid(testCase , convertFirstLetterCaps);
									}else if(ms.isElementPresent(doc , String.format("//*[contains(@content-desc,'%s') or contains(@text,'%s')]" , tempSplit.toLowerCase() , tempSplit.toLowerCase()))){
									MobileUtils.scrollToExactAndroid(testCase , tempSplit.toLowerCase());
									}else if  (ms.isElementPresent(doc , String.format("//*[contains(@content-desc,'%s') or contains(@text,'%s')]" , tempSplit.toUpperCase() , tempSplit.toUpperCase()))){
										MobileUtils.scrollToExactAndroid(testCase , tempSplit);
										}
											    */  
					      if (ms.isElementPresent(doc , String.format("//*[contains(@content-desc,'%s') or contains(@text,'%s')]" , tempSplit , tempSplit))
					    		  ||
					    		  ms.isElementPresent(doc , String.format("//*[contains(@content-desc,'%s') or contains(@text,'%s')]" , convertFirstLetterCaps , convertFirstLetterCaps))
					    		  )
							{
								String strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + tempSplit + "') or contains(@text,'" + tempSplit+ "')]" , false , false).getText() ;
								if (strText.isEmpty() || strText == null)
								{
									if (testCase.getTestCaseInputs().isRunningOn("TestObject"))
									{
										strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + tempSplit + "') or contains(@text,'"+ tempSplit + "')]" , false , false).getAttribute("contentDescription") ;
									}
									else
									{
										strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + tempSplit + "') or contains(@text,'"+ tempSplit + "')]" , false , false).getAttribute("name") ;
									}
								}
								if (isScreenshotTaken)
								{
									ReportStep_Pass_With_ScreenShot(testCase , " Text displayed : "+ tempSplit+" From Expected Text :-"+ strText , driver) ;
									isScreenshotTaken = false ;
								}
								else
								{
									Keyword.ReportStep_Pass(testCase , " Text displayed : "+ tempSplit+" From Expected Text :-"+ strText ) ;
								}
							}
							else if  (ms.isElementPresent(doc , String.format("//*[contains(@content-desc,'%s') or contains(@text,'%s')]" , tempSplit.toLowerCase() , tempSplit.toLowerCase())))
							{
								String strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + tempSplit.toLowerCase() + "') or contains(@text,'" + tempSplit.toLowerCase()+ "')]" , false , false).getText() ;
								if (strText.isEmpty() || strText == null)
								{
									if (testCase.getTestCaseInputs().isRunningOn("TestObject"))
									{
										strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + tempSplit.toLowerCase() + "') or contains(@text,'"+ tempSplit.toLowerCase() + "')]" , false , false).getAttribute("contentDescription") ;
									}
									else
									{
										strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + tempSplit.toLowerCase() + "') or contains(@text,'"+ tempSplit.toLowerCase() + "')]" , false , false).getAttribute("name") ;
									}
								}
								if (ms.isElementPresent(doc , String.format("//*[contains(@content-desc,'%s') or contains(@text,'%s')]" , tempSplit.toLowerCase() , tempSplit.toLowerCase())))
								{
									ReportStep_Pass_With_ScreenShot(testCase , " Text displayed : "+ tempSplit.toLowerCase()+" From Expected Text :-"+ strText  , driver) ;
									isScreenshotTaken = false ;
								}
								else
								{
									Keyword.ReportStep_Pass(testCase , " Text displayed : "+ tempSplit.toLowerCase()+" From Expected Text :-"+ strText) ;
								}
							}else if  (ms.isElementPresent(doc , String.format("//*[contains(@content-desc,'%s') or contains(@text,'%s')]" , tempSplit.toUpperCase() , tempSplit.toUpperCase())))
							{
								String strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + tempSplit.toUpperCase() + "') or contains(@text,'" + tempSplit.toUpperCase()+ "')]" , false , false).getText() ;
								if (strText.isEmpty() || strText == null)
								{
									if (testCase.getTestCaseInputs().isRunningOn("TestObject"))
									{
										strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + tempSplit.toUpperCase() + "') or contains(@text,'"+ tempSplit.toUpperCase() + "')]" , false , false).getAttribute("contentDescription") ;
									}
									else
									{
										strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + tempSplit.toUpperCase() + "') or contains(@text,'"+ tempSplit.toUpperCase() + "')]" , false , false).getAttribute("name") ;
									}
								}
								if (ms.isElementPresent(doc , String.format("//*[contains(@content-desc,'%s') or contains(@text,'%s')]" , tempSplit.toUpperCase() , tempSplit.toUpperCase())))
								{
									ReportStep_Pass_With_ScreenShot(testCase , " Text displayed : "+ tempSplit.toUpperCase()+" From Expected Text :-"+ strText , driver) ;
									isScreenshotTaken = false ;
								}
								else
								{
									Keyword.ReportStep_Pass(testCase , " Text displayed : "+ tempSplit.toUpperCase()+" From Expected Text :-"+ strText ) ;
								}
								
							}else
							{
								
								tempSplitFlag =  false;
							} 
					      
					      //System.out.println("list.get("+i+")"+list.get(i));
						 }
						 
						 if(!tempSplitFlag) {
							 Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Expected Text: " + temp ,
										driver) ;
							 flag=false;
						 }
						 
						 } catch (Exception e) {
							  
							 System.out.println(e.getStackTrace());
							
						 }
				
					}
				
				}
				else
				{
					if (ms.isElementPresent(doc , String.format("//*[(@value='%s') or (@name='%s') or (@label='%s')]" , temp , temp , temp)))
					{
						if (isScreenshotTaken)
						{
							ReportStep_Pass_With_ScreenShot(testCase , "Text displayed : " + temp ,driver) ;
							isScreenshotTaken = false ;
						}
						else
						{
							Keyword.ReportStep_Pass(testCase , "Text displayed : " + temp) ;
						}
					}

					else if (ms.isElementPresent(doc , String.format("//*[contains(@value,'%s') or contains(@name,'%s') or contains(@label,'%s') ]" , temp ,temp , temp)))
					{
						if (isScreenshotTaken)
						{
							ReportStep_Pass_With_ScreenShot(testCase , "Text displayed : " + temp ,driver) ;
							isScreenshotTaken = false ;
						}
						else
						{
							Keyword.ReportStep_Pass(testCase , "Text displayed : " + temp) ;
						}
					}
					else if (MobileUtils.getMobElements(testCase, "XPATH", "//*[contains(@value,'"+temp+"') or contains(@name,'"+temp+"') or contains(@label,'"+temp+"') ]", false,false,true)!=null)
					{
						if (isScreenshotTaken)
						{
							ReportStep_Pass_With_ScreenShot(testCase , "Text displayed : " + temp ,driver) ;
							isScreenshotTaken = false ;
						}
						else
						{
							Keyword.ReportStep_Pass(testCase , "Text displayed : " + temp) ;
						}
					}else if (ms.isElementPresent(doc , String.format("//*[(@value='%s') or (@name='%s') or (@label='%s')]" , temp.toLowerCase() , temp.toLowerCase() , temp.toLowerCase())))
					{
						if (isScreenshotTaken)
						{
							ReportStep_Pass_With_ScreenShot(testCase , "Text displayed : " + temp.toLowerCase() ,driver) ;
							isScreenshotTaken = false ;
						}
						else
						{
							Keyword.ReportStep_Pass(testCase , "Text displayed : " + temp.toLowerCase()) ;
						}
					}

					else if (ms.isElementPresent(doc , String.format("//*[contains(@value,'%s') or contains(@name,'%s') or contains(@label,'%s') ]" , temp.toLowerCase() ,temp.toLowerCase() , temp.toLowerCase())))
					{
						if (isScreenshotTaken)
						{
							ReportStep_Pass_With_ScreenShot(testCase , "Text displayed : " + temp.toLowerCase() ,driver) ;
							isScreenshotTaken = false ;
						}
						else
						{
							Keyword.ReportStep_Pass(testCase , "Text displayed : " + temp.toLowerCase()) ;
						}
					}
					else if (MobileUtils.getMobElements(testCase, "XPATH", "//*[contains(@value,'"+temp.toLowerCase()+"') or contains(@name,'"+temp.toLowerCase()+"') or contains(@label,'"+temp.toLowerCase()+"') ]", false,false,true)!=null)
					{
						if (isScreenshotTaken)
						{
							ReportStep_Pass_With_ScreenShot(testCase , "Text displayed : " + temp.toLowerCase() ,driver) ;
							isScreenshotTaken = false ;
						}
						else
						{
							Keyword.ReportStep_Pass(testCase , "Text displayed : " + temp.toLowerCase()) ;
						}
					}else if (ms.isElementPresent(doc , String.format("//*[(@value='%s') or (@name='%s') or (@label='%s')]" , temp.toUpperCase() , temp.toUpperCase() , temp.toUpperCase())))
					{
						if (isScreenshotTaken)
						{
							ReportStep_Pass_With_ScreenShot(testCase , "Text displayed : " + temp.toUpperCase() ,driver) ;
							isScreenshotTaken = false ;
						}
						else
						{
							Keyword.ReportStep_Pass(testCase , "Text displayed : " + temp.toUpperCase()) ;
						}
					}

					else if (ms.isElementPresent(doc , String.format("//*[contains(@value,'%s') or contains(@name,'%s') or contains(@label,'%s') ]" , temp.toUpperCase() ,temp.toUpperCase() , temp.toUpperCase())))
					{
						if (isScreenshotTaken)
						{
							ReportStep_Pass_With_ScreenShot(testCase , "Text displayed : " + temp.toUpperCase() ,driver) ;
							isScreenshotTaken = false ;
						}
						else
						{
							Keyword.ReportStep_Pass(testCase , "Text displayed : " + temp.toUpperCase()) ;
						}
					}
					else if (MobileUtils.getMobElements(testCase, "XPATH", "//*[contains(@value,'"+temp.toUpperCase()+"') or contains(@name,'"+temp.toUpperCase()+"') or contains(@label,'"+temp.toUpperCase()+"') ]", false,false,true)!=null)
					{
						if (isScreenshotTaken)
						{
							ReportStep_Pass_With_ScreenShot(testCase , "Text displayed : " + temp.toUpperCase() ,driver) ;
							isScreenshotTaken = false ;
						}
						else
						{
							Keyword.ReportStep_Pass(testCase , "Text displayed : " + temp.toUpperCase()) ;
						}
					}else if (comparedBySplit)
					{
						//char string[] = temp;  
						String[] Space = temp.split( " " );
					//	int count = String.countMatches( temp, " " );
						// ArrayList<String> list=new ArrayList<String>();//Creating arraylist    
						 for(int i=0 ; i< Space.length;i++) {
							tempSplit= temp.split(" ")[i];
							convertFirstLetterCaps=ConvertFirstLetterCaps(tempSplit);
					     // list.add(tempSplit.split(" ")[i]);//Adding object in arraylist
					      
					      if (ms.isElementPresent(doc , String.format("//*[(@value='%s') or (@name='%s') or (@label='%s')]" , tempSplit , tempSplit , tempSplit)) 
					    		  ||
					    		  ms.isElementPresent(doc , String.format("//*[(@value='%s') or (@name='%s') or (@label='%s')]" , convertFirstLetterCaps , convertFirstLetterCaps , convertFirstLetterCaps))
					    		  )
							{
								if (isScreenshotTaken)
								{
									ReportStep_Pass_With_ScreenShot(testCase , " Text displayed : "+ tempSplit+" From Expected Text :-"+ temp  ,driver) ;
									isScreenshotTaken = false ;
								}
								else
								{
									Keyword.ReportStep_Pass(testCase , " Text displayed : "+ tempSplit +" From Expected Text :-"+ temp) ;
								}
							}

							else if (ms.isElementPresent(doc , String.format("//*[contains(@value,'%s') or contains(@name,'%s') or contains(@label,'%s') ]" , tempSplit ,tempSplit , tempSplit)) 
									||
									ms.isElementPresent(doc , String.format("//*[contains(@value,'%s') or contains(@name,'%s') or contains(@label,'%s') ]" , convertFirstLetterCaps ,convertFirstLetterCaps , convertFirstLetterCaps))
									)
							{
								if (isScreenshotTaken)
								{
									ReportStep_Pass_With_ScreenShot(testCase , " Text displayed : "+ tempSplit +" From Expected Text :-"+ temp ,driver) ;
									isScreenshotTaken = false ;
								}
								else
								{
									Keyword.ReportStep_Pass(testCase , " Text displayed : "+ tempSplit +" From Expected Text :-"+ temp) ;
								}
							}
							else if (MobileUtils.getMobElements(testCase, "XPATH", "//*[contains(@value,'"+tempSplit+"') or contains(@name,'"+tempSplit+"') or contains(@label,'"+tempSplit+"') ]", false,false,true)!=null
									||
									MobileUtils.getMobElements(testCase, "XPATH", "//*[contains(@value,'"+convertFirstLetterCaps+"') or contains(@name,'"+convertFirstLetterCaps+"') or contains(@label,'"+convertFirstLetterCaps+"') ]", false,false,true)!=null
									)
							{
								if (isScreenshotTaken)
								{
									ReportStep_Pass_With_ScreenShot(testCase , " Text displayed : "+ tempSplit+" From Expected Text :-"+ temp ,driver) ;
									isScreenshotTaken = false ;
								}
								else
								{
									Keyword.ReportStep_Pass(testCase , " Text displayed : "+ tempSplit+" From Expected Text :-"+ temp) ;
								}
							}else if (ms.isElementPresent(doc , String.format("//*[(@value='%s') or (@name='%s') or (@label='%s')]" , tempSplit.toLowerCase() , tempSplit.toLowerCase() , tempSplit.toLowerCase())))
							{
								if (isScreenshotTaken)
								{
									ReportStep_Pass_With_ScreenShot(testCase , " Text displayed : "+ tempSplit.toLowerCase() +" From Expected Text :-"+ temp ,driver) ;
									isScreenshotTaken = false ;
								}
								else
								{
									Keyword.ReportStep_Pass(testCase , " Text displayed : "+ tempSplit.toLowerCase() +" From Expected Text :-"+ temp ) ;
								}
							}

							else if (ms.isElementPresent(doc , String.format("//*[contains(@value,'%s') or contains(@name,'%s') or contains(@label,'%s') ]" , tempSplit.toLowerCase() ,tempSplit.toLowerCase() , tempSplit.toLowerCase())))
							{
								if (isScreenshotTaken)
								{
									ReportStep_Pass_With_ScreenShot(testCase , " Text displayed : "+ tempSplit.toLowerCase() +" From Expected Text :-"+ temp,driver) ;
									isScreenshotTaken = false ;
								}
								else
								{
									Keyword.ReportStep_Pass(testCase , " Text displayed : "+ tempSplit.toLowerCase() +" From Expected Text :-"+ temp) ;
								}
							}
							else if (MobileUtils.getMobElements(testCase, "XPATH", "//*[contains(@value,'"+tempSplit.toLowerCase()+"') or contains(@name,'"+tempSplit.toLowerCase()+"') or contains(@label,'"+tempSplit.toLowerCase()+"') ]", false,false,true)!=null)
							{
								if (isScreenshotTaken)
								{
									ReportStep_Pass_With_ScreenShot(testCase ," Text displayed : "+ tempSplit.toLowerCase() +" From Expected Text :-"+ temp,driver) ;
									isScreenshotTaken = false ;
								}
								else
								{
									Keyword.ReportStep_Pass(testCase ," Text displayed : "+ tempSplit.toLowerCase() +" From Expected Text :-"+ temp) ;
								}
							}else if (ms.isElementPresent(doc , String.format("//*[(@value='%s') or (@name='%s') or (@label='%s')]" , tempSplit.toUpperCase() , tempSplit.toUpperCase() , tempSplit.toUpperCase())))
							{
								if (isScreenshotTaken)
								{
									ReportStep_Pass_With_ScreenShot(testCase , " Text displayed : "+ tempSplit.toUpperCase()  +" From Expected Text :-"+ temp ,driver) ;
									isScreenshotTaken = false ;
								}
								else
								{
									Keyword.ReportStep_Pass(testCase ," Text displayed : "+ tempSplit.toUpperCase()  +" From Expected Text :-"+ temp) ;
								}
							}

							else if (ms.isElementPresent(doc , String.format("//*[contains(@value,'%s') or contains(@name,'%s') or contains(@label,'%s') ]" , tempSplit.toUpperCase() ,tempSplit.toUpperCase() , tempSplit.toUpperCase())))
							{
								if (isScreenshotTaken)
								{
									ReportStep_Pass_With_ScreenShot(testCase , " Text displayed : "+ tempSplit.toUpperCase()  +" From Expected Text :-"+ temp ,driver) ;
									isScreenshotTaken = false ;
								}
								else
								{
									Keyword.ReportStep_Pass(testCase , " Text displayed : "+ tempSplit.toUpperCase()  +" From Expected Text :-"+ temp) ;
								}
							}
							else if (MobileUtils.getMobElements(testCase, "XPATH", "//*[contains(@value,'"+tempSplit.toUpperCase()+"') or contains(@name,'"+tempSplit.toUpperCase()+"') or contains(@label,'"+tempSplit.toUpperCase()+"') ]", false,false,true)!=null)
							{
								if (isScreenshotTaken)
								{
									ReportStep_Pass_With_ScreenShot(testCase , " Text displayed : "+ tempSplit.toUpperCase()  +" From Expected Text :-"+ temp ,driver) ;
									isScreenshotTaken = false ;
								}
								else
								{
									Keyword.ReportStep_Pass(testCase , " Text displayed : "+ tempSplit.toUpperCase()  +" From Expected Text :-"+ temp) ;
								}
							}else
							{
							//	Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Expected Text: " + tempSplit +" From Expected Text :-"+ temp) ;
								flag = false ;
							}
					      
					   //   System.out.println("list.get("+i+")"+list.get(i));
						 }
						 
						 if(flag) {
							 Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Expected Text: " + temp ,
										driver) ;
						 }

					}
				}
			}

		}
		catch (Exception e)
		{
			Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Error occurred : "+e.getMessage()) ;
		}
		return flag ;
	}
	
	public static String ConvertFirstLetterCaps(String ConvertFirstLetterCaps) {


	    // create two substrings from name
	    // first substring contains first letter of name
	    // second substring contains remaining letters
	    String firstLetter = ConvertFirstLetterCaps.substring(0, 1);
	    String remainingLetters = ConvertFirstLetterCaps.substring(1, ConvertFirstLetterCaps.length());

	    // change the first letter to uppercase
	    firstLetter = firstLetter.toUpperCase();

	    // join the two substrings
	    ConvertFirstLetterCaps = firstLetter + remainingLetters;
	  //  System.out.println("ConvertFirstLetterCaps: " + ConvertFirstLetterCaps);
	    
	    return ConvertFirstLetterCaps;
	  }
	

	public final static void ReportStep_Pass_With_ScreenShot(TestCases testCase, String message, CustomDriver driver)
	{

		if (testCase != null && driver != null)
		{

			testCase.incrementScreenShotCount() ;

			String screenShotName = takeScreenShot(testCase.getScrShotPath() , driver) ;

			message = "<b>[PASS]</b> " + message + "::::" + new File(testCase.getScrShotPath()).getName() + "/"
					+ screenShotName ;
			reportStep(testCase , Reporting.PASS , message) ;
		}
		else
		{
			ReportStep_Pass(testCase , message) ;
		}
	}

	public static void reportStep(TestCases testCase, int status, String message)
	{

		String[] splittedMessage = message.split("::::") ;
		message = splittedMessage[0] ;
		testCase.getXMLTestNode().addMessageToCurrentKeyword(message) ;

		switch (status)
		{
		case Reporting.PASS:
			testCase.getLogFile().logPass(message) ;
			if ("#".equals(splittedMessage[1]))
			{
				// Nothing to do..
			}
			else
			{
				testCase.getXMLTestNode().addScreenShotToCurrentKeyword(splittedMessage[1]) ;
			}
			break ;
		case Reporting.FAIL:
			if ("#".equals(splittedMessage[1]))
			{
				// Nothing to do..
			}
			else
			{
				testCase.getXMLTestNode().addScreenShotToCurrentKeyword(splittedMessage[1]) ;
			}
			testCase.getXMLTestNode().getCurrentKeyword().setKeywordSuccess(false) ;
			testCase.getXMLTestNode().setTestSuccess(false) ;
			break ;
		}

		testCase.getXMLTestNode().commitTest(testCase) ;

	}
	public final static void ReportStep_Pass(TestCases testCase, String message)
	{

		if (testCase != null)
		{
			message = "<b>[PASS]</b> " + message ;
			reportStep(testCase , Reporting.PASS , message) ;
		}
		else
		{

		}

	}

	public static boolean closeAppLaunchPopupsLocal(TestCases testCase) {
		String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		boolean flag = true;
		OSPopUps os = new OSPopUps(testCase,language);
		LoginScreen ls = new LoginScreen(testCase,language);
		if(os.isOkButtonVisible()){
			os.clickOnOkButton();
		}
		if (MobileUtils.isRunningOnAndroid(testCase)) {

			if(os.isPreLaunchSkipButtonVisible())
			{
				flag = flag && os.clickOnPreLaunchSkipButton();
			}


		} else {
			try {
				FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(testCase.getMobileDriver());
				fWait.pollingEvery(Duration.ofSeconds(1));
				fWait.withTimeout(Duration.ofSeconds(10));
				Boolean isEventReceived = fWait.until(new Function<CustomDriver, Boolean>() {
					@Override
					public Boolean apply(CustomDriver driver) {
						try {
							if (ls.isoptikLogoVisible()) {
								return true;
							}
/*							if(os.isIgnoreButtonVisible(3))
							{
								os.clickOnIgnoreButton();
								return false;
							}
							if (os.isCancelButtonVisible()) {
								os.clickOnCancelButton();
								return false;
							}

							if(os.isPreLaunchSkipButtonVisible())
							{
								os.clickOnPreLaunchSkipButton();
								return true;

							}*/

							if (os.isAllowButtonVisible(3)) {
								os.clickOnAllowButton();
								return true;

							}

							else {
								((CustomIOSDriver) testCase.getMobileDriver()).switchTo().alert().accept();
								return true;
							}
						} catch (Exception e) {
							return false;
						}
					}
				});
				if (isEventReceived) {
					Keyword.ReportStep_Pass(testCase, "Successfully navigated to all screens in optik tv app");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Login To optik : Unable to navigate to homepage. Could not find notification icon on homepage");
				}

			} catch (TimeoutException e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Timed out while loading. Wait time : 2 minutes");
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			}
		}
		return flag;
	}
	/*
	 * This is used to swipe element down to particular element.
	 */
	public static void swipeTo(String element,TestCases testCase, TestCaseInputs inputs) {
		//TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
		//int i = 0;

		/*while ((!ts.isElementVisible(element)) && i < 10) {
			touchAction.press((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5)).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * -.4))
			.release().perform();*/
		try {
			if(element.contains("SleepBrightness")){
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.scrollToExactAndroid(testCase , "Sleep Brightness Mode");
				}
				else
				{
					scrollToElementUsingExactAttributeValue(testCase,"value","Sleep Brightness Mode");
				}
			}else if (element.contains("Sound"))
			{
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.scrollToExactAndroid(testCase , "Sound");
				}
				else
				{

					scrollToElementUsingExactAttributeValue(testCase,"value","Sound");
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			//}
			//i++;
		}
	}

	/*
	 * This Method verify Sound Screen and sound status check
	 */
	public static boolean verifySound(TestCases testCase, TestCaseInputs inputs ) {
		boolean flag = true;
		ThermostatSettingsScreen thermostatSettingsObject=new ThermostatSettingsScreen(testCase);
		SoundScreen soundObject = new SoundScreen(testCase);

		if (thermostatSettingsObject.isThermostatSettingSoundTextVisible()) {

			if (thermostatSettingsObject.ClickOnThermostatSettingSoundText()) {
				Keyword.ReportStep_Pass(testCase, "Clicked on 'ThermostatSetting Sound option'");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to click on ThermostatSetting Sound option ");
				flag = false;
			}

		} else {

			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to locate Thermostat Setting Sound Text not present ");
			flag = false;

		}

		if (soundObject.isSoundLowModeVisible() && soundObject.isSoundNormalModeVisible()
				&& soundObject.isSoundOffModeVisible()) {

			Keyword.ReportStep_Pass(testCase, "All three options (Off, Low, Normal) are available in sound screen");

		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Options are missing in sound screen");
			flag = false;
		}

		if (soundObject.ClickOnOffOption()) {
			Keyword.ReportStep_Pass(testCase, "Clicked on 'Off'");

			if (soundObject.navigateToBackFromSoundScreen(testCase)) {

				Keyword.ReportStep_Pass(testCase, "Navitgate back from sound screen");
			} else {

				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to Navitgate back from sound screen");
				flag = false;
			}

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				swipeTo("Sound",testCase,inputs);
			}
			else
			{
				try {
					scrollToElementUsingExactAttributeValue(testCase, "value", "Sound");
				} catch (Exception e) {
					e.printStackTrace();
				}
			}


			if (thermostatSettingsObject.getThermostatSettingSoundModeStatus().equalsIgnoreCase("OFF")) {
				Keyword.ReportStep_Pass(testCase, "Sound is turned 'Off' and same is appearing on Thermostat Settings");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Sound is turned 'Off and same is not appearing on Thermostat Settings");
				flag = false;
			}
		} else {

			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to Sound is click 'Off on sound Screen");
			flag = false;

		}

		if (thermostatSettingsObject.isThermostatSettingSoundTextVisible()) {

			if (thermostatSettingsObject.ClickOnThermostatSettingSoundText()) {
				Keyword.ReportStep_Pass(testCase, "Clicked on 'ThermostatSetting Sound option'");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to click on ThermostatSetting Sound option ");
				flag = false;
			}

		} else {

			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to locate Thermostat Setting Sound Text not present ");
			flag = false;

		}

		if (soundObject.ClickOnLowOption()) {
			Keyword.ReportStep_Pass(testCase, "Clicked on 'Low'");
			if (soundObject.navigateToBackFromSoundScreen(testCase)) {

				Keyword.ReportStep_Pass(testCase, "Navitgate back from sound screen");
			} else {

				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to Navitgate back from sound screen");
				flag = false;
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				swipeTo("Sound",testCase,inputs);
			}
			else
			{
				try {
					scrollToElementUsingExactAttributeValue(testCase, "value", "Sound");
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			if (thermostatSettingsObject.getThermostatSettingSoundModeStatus().equalsIgnoreCase("LOW")) {
				Keyword.ReportStep_Pass(testCase, "Sound is turned 'Low' and same is appearing on Thermostat Settings");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Sound is turned 'Low' and same is not appearing on Thermostat Settings");
				flag = false;
			}
		} else {

			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to Sound is click 'Off on sound Screen");
			flag = false;

		}
		if (thermostatSettingsObject.isThermostatSettingSoundTextVisible()) {

			if (thermostatSettingsObject.ClickOnThermostatSettingSoundText()) {
				Keyword.ReportStep_Pass(testCase, "Clicked on 'ThermostatSetting Sound option'");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to click on ThermostatSetting Sound option ");
				flag = false;
			}

		} else {

			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to locate Thermostat Setting Sound Text not present ");
			flag = false;

		}
		if (soundObject.ClickOnNormalOption()) {
			Keyword.ReportStep_Pass(testCase, "Clicked on 'Normal'");
			if (soundObject.navigateToBackFromSoundScreen(testCase)) {

				Keyword.ReportStep_Pass(testCase, "Navitgate back from sound screen");
			} else {

				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to Navitgate back from sound screen");
				flag = false;
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				swipeTo("Sound",testCase,inputs);
			}
			else
			{
				try {
					scrollToElementUsingExactAttributeValue(testCase, "value", "Sound");
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			if (thermostatSettingsObject.getThermostatSettingSoundModeStatus().equalsIgnoreCase("NORMAL")) {
				Keyword.ReportStep_Pass(testCase,
						"Sound is turned 'Normal' and same is appearing on Thermostat Settings");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Sound is turned 'Normal' and same is not appearing on Thermostat Settings");
				flag = false;
			}
		} else {

			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to Sound is click 'Off on sound Screen");
			flag = false;

		}

		return flag;
	}
	/*
	 * This Method verifies the sleep brightness screen , functionality perform using Slider and checking status
	 */

	public static boolean verifyBrightness(TestCases testCase, TestCaseInputs inputs) {

		boolean flag = true;
		ThermostatSettingsScreen thermostatSettingsObject=new ThermostatSettingsScreen(testCase);

		SleepBrightnessModeScreen sb=new SleepBrightnessModeScreen(testCase, inputs);

		if(thermostatSettingsObject.isSleepBrightnessTextVisible()){
			if(thermostatSettingsObject.ClickOnSleepBrightnessOption()){
				Keyword.ReportStep_Pass(testCase, "Clicked on 'ThermostatSetting Brightness option'");
			}else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to click on ThermostatSetting Brightness option ");
				flag = false;
			}
		}


		if(sb.isSeekBarVisible() && sb.isSleepBrightnessModeTextVisible() && sb.isMinValueVisible() && sb.isMaxValueVisible() &&  sb.isSleepBrightnessModeValueVisible())
		{
			Keyword.ReportStep_Pass(testCase, "All options are available in Brightness screen");
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Options are missing in Brightness screen");
			flag = false;
		}



		Keyword.ReportStep_Pass(testCase,
				"Minimum brightness is : " + sb.getMinValue(testCase));
		Keyword.ReportStep_Pass(testCase,
				"Maximum brightness is : " + sb.getMaxValue(testCase));
		if (MobileUtils.isRunningOnAndroid(testCase)) {
			int xAxismin = sb.slideSeekBar(testCase).getLocation().getX();
			int yAxis = sb.slideSeekBar(testCase).getLocation().getY();
			int xAxismax = xAxismin + sb.slideSeekBar(testCase).getSize().width;
			Random rn = new Random();
			Double xcoor = xAxismin + (xAxismax - xAxismin) * rn.nextDouble();
			TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

			flag=flag && changeBrightness(xcoor.intValue(), yAxis, touchAction,testCase,inputs);

		} else {
			flag=flag && changeBrightness(0, 0, null,testCase,inputs);
		}

		return flag;
	}





	/*
	 * This method used to move slider on sleep brightness screen and check status reflected on Thermostat Settings Screen
	 */

	public static boolean changeBrightness(int xAxis, int yAxis, TouchAction touchAction,TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		ThermostatSettingsScreen thermostatSettingsObject=new ThermostatSettingsScreen(testCase);

		SleepBrightnessModeScreen sb=new SleepBrightnessModeScreen(testCase, inputs);

		if (MobileUtils.isRunningOnAndroid(testCase)) {

			//touchAction.tap(xAxis, yAxis).perform();
			touchAction.tap(tapOptions().withPosition(point(xAxis, yAxis))).perform();

		} else {
			inputs.setInputValue(GlobalVariables.MIN, "2");
			inputs.setInputValue(GlobalVariables.MAX, "50");
			inputs.setInputValue(GlobalVariables.CURRENT_VALUE_XPATH,
					"//*[@name='Brightness_value']");
			Random rn = new Random();
			double value = 50 * rn.nextDouble();

			inputs.setInputValue(GlobalVariables.EXPECTED_VALUE, Integer.toString((((int) value) / 10) * 10));
			inputs.setInputValue(GlobalVariables.GRADIENT, "10");
			optikUtils.setValueToSlider(testCase, inputs);

		}
		String changedBrightness = sb.getSleepBrightnessModeValue(testCase);
		Keyword.ReportStep_Pass(testCase, "Brightness is changed to " + changedBrightness);
		if (sb.navigateToBackFromSoundScreen(testCase)) {

			Keyword.ReportStep_Pass(testCase, "Navitgate back from Brightness screen");
		} else {

			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to Navitgate back from Brightness screen");
			flag = false;
		}
		swipeTo("SleepBrightness",testCase, inputs);

		String brightnessTextValue =thermostatSettingsObject.getSleepBrightnessStatus();

		if (changedBrightness.equalsIgnoreCase(brightnessTextValue)) {
			Keyword.ReportStep_Pass(testCase, "Changed brightness value is appearing properly on Thermostat Settings Screen");
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Changed brightness value is not appearing properly on Thermostat Settings Screen");
			flag = false;
		}


		return flag;
	}

	/*
	 * This Method used to set value on slider for sleep Brightness  Screen
	 */
	public static boolean setValueToSlider(TestCases testCase, TestCaseInputs inputs) {
		String currentValue = MobileUtils.getFieldValue(testCase, "xpath", inputs.getInputValue(GlobalVariables.CURRENT_VALUE_XPATH))
				.replace("%", "");

		if (!currentValue.contains("##ELEMENT_NOT_FOUND##")) {
			if (!currentValue.equals(inputs.getInputValue(GlobalVariables.EXPECTED_VALUE))) {

				int max = Integer.parseInt(inputs.getInputValue(GlobalVariables.MAX));
				int min = Integer.parseInt(inputs.getInputValue(GlobalVariables.MIN));
				int gradient = Integer.parseInt(inputs.getInputValue(GlobalVariables.GRADIENT));
				int expectedValue = Integer.parseInt(inputs.getInputValue(GlobalVariables.EXPECTED_VALUE));
				int currentValueInteger = Integer.parseInt(currentValue);

				WebElement element = MobileUtils.getMobElement(testCase, "name", "Slider_cell");

				if (element != null) {

					Dimension dimension = element.getSize();

					Point point = element.getLocation();

					int width = dimension.getWidth();
					int height = dimension.getHeight() / 2;

					int numberOfBlocks = (max - min) / gradient;

					int eachBlockLength = Math.round(width / numberOfBlocks);

					int currentCircleXPoint = point.getX() + ((currentValueInteger - min) / gradient) * eachBlockLength;

					int currentCircleYPoint = point.getY() + height;

					TouchAction tAction = new TouchAction(testCase.getMobileDriver());

					int difference = 0;

					double direction = 1; // left to right

					if (currentValueInteger < expectedValue) {
						difference = (expectedValue - currentValueInteger) / gradient;
						direction = 1.1;
					} else {
						difference = (currentValueInteger - expectedValue) / gradient;
						direction = -1;
					}

					for (int counter = 0; counter < difference; counter++) {

						try {
						/*	tAction.press(currentCircleXPoint, currentCircleYPoint)
							.moveTo(point((int) (Math.round(eachBlockLength * direction)), 0).release().perform();*/

							tAction.press(point(currentCircleXPoint, currentCircleYPoint)).moveTo(point((int) (Math.round(eachBlockLength * direction)), 0)).release().perform();

							//tAction.press(point(width / 2, height / 2)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(width / 2, 82)).release().perform();

						} catch (Exception e) {
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Change Slider Value : Not able to move slider. Error occurred - " + e.getMessage());
							break;
						}

						currentValue = MobileUtils
								.getFieldValue(testCase, "xpath", inputs.getInputValue(GlobalVariables.CURRENT_VALUE_XPATH))
								.replace("%", "");
						if (currentValue.equals(inputs.getInputValue(GlobalVariables.EXPECTED_VALUE))) {
							break;
						} else {
							currentCircleXPoint = (int) Math.round(currentCircleXPoint + eachBlockLength * direction);
						}
					}

					currentValue = MobileUtils
							.getFieldValue(testCase, "xpath", inputs.getInputValue(GlobalVariables.CURRENT_VALUE_XPATH))
							.replace("%", "");

					currentValueInteger = Integer.parseInt(currentValue);

					if (currentValue.equals(inputs.getInputValue(GlobalVariables.EXPECTED_VALUE))) {
						return true;
					} else {
						if (expectedValue == min || expectedValue == max) {
							difference = 2;
						} else {
							if (expectedValue == min + gradient || expectedValue == max - gradient) {
								difference = 1;
							}
						}

						if (currentValueInteger < expectedValue) {
							direction = 1.2;
						} else {
							direction = -1.2;
						}

						currentCircleXPoint = point.getX() + ((currentValueInteger - min) / gradient) * eachBlockLength;

						for (int counter = 0; counter < difference; counter++) {

							try {
								/*tAction.press(currentCircleXPoint, currentCircleYPoint)
								.moveTo((int) (Math.round(eachBlockLength * direction)), 0).release().perform();
							*/
								tAction.press(point(currentCircleXPoint, currentCircleYPoint)).moveTo(point((int) (Math.round(eachBlockLength * direction)), 0)).release().perform();


							} catch (Exception e) {
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"Change Slider Value : Not able to move slider. Error occurred - "
												+ e.getMessage());
								break;
							}

							currentValue = MobileUtils
									.getFieldValue(testCase, "xpath", inputs.getInputValue(GlobalVariables.CURRENT_VALUE_XPATH))
									.replace("%", "");

							if (currentValue.equals(inputs.getInputValue(GlobalVariables.EXPECTED_VALUE))) {
								break;
							} else {
								currentCircleXPoint = (int) Math
										.round(currentCircleXPoint + eachBlockLength * direction);
							}
						}

					}

				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Change Slider Value : Slider element is not available.");
					return false;
				}

			} else {
				return true;
			}

		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Change Slider Value : Not able to read the Current value of the slider.");
			return false;
		}
		return true;
	}

	public static boolean VerifyLoginScreenLocalization(TestCases testCase,TestCaseInputs inputs)
	{
		boolean flag=true;
		String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		LoginScreen ls=new LoginScreen(testCase,language);

		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "Login");

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			ls.clickOnLoginButton();
		}else
		{

			if(language.contains("English_US")||language.contains("English_UK")||language.contains("English_IR"))
			{
				ls.clickOnLoginButton();
			}
			else if(ls.isLoginButtonLocalVisible(inputs))
			{
				ls.clickOnoptikLogo();
				ls.isClickLoginButtonFirstLocal(inputs);
			}

		}
		if (MobileUtils.isRunningOnAndroid(testCase)) {
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}

		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "Login2");

		return flag;
	}



	public static boolean VerifyEULA(TestCases testCase,String Screenname,String lang,TestCaseInputs inputs) {

		String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		EULAScreen es=new EULAScreen(testCase,language);
        Dashboard db=new Dashboard(testCase);
        LocationDetailsScreen lds = new LocationDetailsScreen(testCase);
		EditAddressLocation eal=new EditAddressLocation(testCase,language);
		ChangeCountryScreen ccs= new ChangeCountryScreen(testCase,language);
		CreateAccountScreen ca=new CreateAccountScreen(testCase,language);
		SecondaryCardSettings sc = new SecondaryCardSettings(testCase,language);
		String countryname="";
         boolean flag=true;
      if(lds.isEditexistingaddressVisible(10))
			{
				lds.navigateToEditAddressScreen();
			}

      if(eal.isEditAddressChangeCountryButtonVisible())
		{
			eal.clickOnEditAddressChangeCountryButton();
		}
     else
  	   if(eal.isChangeCountryButtonVisible())
			{
				eal.clickOnChangeCountryButton();
			}


           if(ccs.isCountrySearchTextFieldVisible())
			{
				Keyword.ReportStep_Pass(testCase,"Successfully Navigated to select country.");
			}
           else
			{
				eal.clickOnCountryButton();
				ccs.isCountrySearchTextFieldAvailable(50);
			}

	     if(language.equalsIgnoreCase("English_US"))
		{
			countryname="United States";
		}
		else if(language.equalsIgnoreCase("English_UK"))
		{
			countryname="United Kingdom";
		}

		else if(language.equalsIgnoreCase("English_IR"))
		{
			countryname="Ireland";
		}
		else if(language.equalsIgnoreCase("French_CA"))
		{
			countryname="Canada";
		}
		else if(language.equalsIgnoreCase("French"))
		{
			countryname="France";
		}
		else if(language.equalsIgnoreCase("French_BE"))
		{
			countryname="Belgique";
		}
		else if(language.equalsIgnoreCase("French_SUI"))
		{
			countryname="Suisse";
		}
		else if(language.equalsIgnoreCase("Dutch"))
		{
			countryname="Nederland";
		}
		else if(language.equalsIgnoreCase("Dutch_BE"))
		{
			countryname="Belgi";
		}
		else if(language.equalsIgnoreCase("German"))
		{
			countryname="Deutschland";
		}
		else if( language.equalsIgnoreCase("German_AUS") )
		{
			countryname="sterreich";
		}
		else if( language.equalsIgnoreCase("German_SUI"))
		{
			countryname="Schweiz";
		}
		else if(language.equalsIgnoreCase("Italian") )
		{
			countryname="Italia";
		}
		else if(language.equalsIgnoreCase("Italian_SUI"))
		{
			countryname="Svizzera";
		}
		else if(language.equalsIgnoreCase("PortuguesePL"))
		{
			countryname="Portugal";
		}
		else if(language.equalsIgnoreCase("PortugueseBR"))
		{
			countryname="Brasil";
		}
		else if(language.equalsIgnoreCase("Spanish"))
		{
			countryname="Espa";
		}
		else if(language.equalsIgnoreCase("Spanish_Mexico"))
		{
			countryname="xico";
		}
		else if(language.equalsIgnoreCase("Spanish_Costarica"))
		{
			countryname="Costa Rica";
		}
		else if(language.equalsIgnoreCase("Spanish_Colombia"))
		{
			countryname="Colombia";
		}
		else if(language.equalsIgnoreCase("Spanish_Panama"))
		{
			countryname="Panam";
		}
		else if(language.equalsIgnoreCase("Spanish_Peru"))
		{
			countryname="Per";
		}
		else if(language.equalsIgnoreCase("Spanish_Chile"))
		{
			countryname="Chile";
		}
		else if(language.equalsIgnoreCase("Spanish_Argentina"))
		{
			countryname="Argentina";
		}
		else if(language.equalsIgnoreCase("Polish"))
		{
			countryname="Polska";
		}
		else if(language.equalsIgnoreCase("Slovakian"))
		{
			countryname="Slovensko";
		}
		else if(language.equalsIgnoreCase("Hungarian"))
		{
			countryname="Magyarorsz";
		}
		else if(language.equalsIgnoreCase("Czech"))
		{
			countryname="esk";
		}
		else if(language.equalsIgnoreCase("Slovenian"))
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				countryname="Slovenija";
			}else
			{
				countryname="Slovenia";
			}

		}
		else if(language.equalsIgnoreCase("Romanian"))
		{
			countryname="Rom";
		}
		else if(language.equalsIgnoreCase("Estonia"))
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				countryname="Eesti";
			}else
			{
				countryname="Estonia";
			}
		}
		else if(language.equalsIgnoreCase("LITHUANIA"))
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				countryname="Lietuva";
			}else
			{
				countryname="Lithuania";
			}

		}
		else if(language.equalsIgnoreCase("Latvia"))
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				countryname="Latvija";
			}else
			{
				countryname="Latvia";
			}

		}
		else if(language.equalsIgnoreCase("Bulgarian"))
		{
			try {
				countryname=optikUtils.readMapping(testCase,"Bulgarian", "Mapping_Android","CountryName");
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		else if(language.equalsIgnoreCase("Croatian"))
		{
			countryname="Hrvatska";
		}

		else{
			countryname="United States";
		}


	     if(ccs.isCountrySearchTextFieldVisible())
			{
				ccs.SetCountrySearchTextField(countryname);
			}

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}

			if(ccs.SelectCountry(countryname))
			{
				Keyword.ReportStep_Pass(testCase, "Click on "+countryname);
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on" +countryname+"country");
				flag=false;
			}

			if(ca.isAcceptButtonVisible(5))
			{
				ca.clickOnAcceptButton();
			}

			if(language.equalsIgnoreCase("English_IR"))
			{
		   eal.setZipCodeAdressFieldValue("D02AF30");
			}
			else if(language.equalsIgnoreCase("French"))
			{
				  eal.setZipCodeAdressFieldValue("75008");
			}
			else if(language.equalsIgnoreCase("Dutch_BE"))
			{
				  eal.setZipCodeAdressFieldValue("1110");
			}
			else if(language.equalsIgnoreCase("PortuguesePL")||language.equalsIgnoreCase("French_BE"))
			{
				  eal.setZipCodeAdressFieldValue("4000");
			}
			else if(language.equalsIgnoreCase("Italian"))
			{
				  eal.setZipCodeAdressFieldValue("00000");
			}
			else if(language.equalsIgnoreCase("Dutch"))
			{
				  eal.setZipCodeAdressFieldValue("1090GD");
			}


			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}



			if(ccs.isSaveAvailable(5))
			{
				ccs.ClickonsaveButton();
			}

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(db.isBackButtonVisible())
				{
					db.clickOnBackButton(5);


				}
				else
				{
					 MobileUtils.pressBackButton(testCase);

				}
			}
			if(lds.isEditexistingaddressVisible(1))
			{
			  if(MobileUtils.isRunningOnAndroid(testCase))
				{db.clickOnBackButton(5);
				}else{ MobileUtils.pressBackButton(testCase);}
			}

			if (!sc.selectOptionFromSecondarySettings(SecondaryCardSettings.APPSETTINGSANDINFO)) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Could not click on About the App from Global drawer");
			}

    if(es.isEulaAndPrivacy(6))
		{
			es.clickOnEulaAndPrivacyButton();
		}
		else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"[Eula Screen] : Failed to click on Eula and Privacy");
			flag = false;
		}
		es.isEulaAndPrivacyDesc(10);

		try
		{
			List<String>eleList = null;
			try {
				eleList=optikUtils.read(testCase, lang, Screenname);
			} catch (IOException e) {
				e.printStackTrace();
			}
			if(!(optikUtils.compare(eleList, testCase)))
			{
				flag=false;
			}
			else
			{
				Keyword.ReportStep_Pass(testCase , "Successfully verified the screen :"+Screenname) ;
			}

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(db.isBackButtonVisible())
				{
					db.clickOnBackButton(5);
					db.clickOnBackButton(5);

				}
				else
				{
					 MobileUtils.pressBackButton(testCase);
					 MobileUtils.pressBackButton(testCase);
				}
			}


			if (!MobileUtils.isRunningOnAndroid(testCase)) {

				if(es.isCancelEULAVisible(10))
				{
					es.clickCancel();
					es.clickOnBackForLocal(inputs);
					es.clickOnBackForLocal(inputs);


				}

				else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"[Eula Screen] : Done Button not displayed");
					flag = false;
				}

				//db.clickOnBackButton(5);

			}

		}
		catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error message: " + e.getMessage());
		}
		return flag;


	}



	public static boolean verifyScheduleScreenTimetoGeofence(TestCases testCase, String language, TestCaseInputs inputs) {List<String> file = null;
	Schedule scheduleObject = new Schedule(testCase,inputs, inputs.getInputValue("LANGUAGE"));
	boolean flag = true;

	PrimaryCard PrimaryCardObject = new PrimaryCard(testCase);
	DeviceInformation statInfo = new DeviceInformation(testCase, inputs);

	if(!statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger"))
	{String T = PrimaryCardObject.getScheduleStatus();
	if (PrimaryCardObject.isScheduleStatusVisible(20))
	{

		Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
	}
	else {
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
				"Not Verified Primary Card Text i.e." + T);
		flag = false;
	}}


	if (scheduleObject.isScheduleButtonVisible(5)) {
		flag = flag && scheduleObject.clickOnScheduleButton();
	} else if (MobileUtils.isMobElementExists("XPATH", "//*[contains(@text,'SCHEDULE')]", testCase)) {

		flag = flag && MobileUtils.clickOnElement(testCase, "XPATH", "//*[contains(@text,'SCHEDULE')]");
	} else if (scheduleObject.ClickSchduleButtonMappingIndex()){
		 flag = true; 
	}else {
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
				"Create New Schedule : Schedule Button not found on Primary Card");
		flag = false;
	}

	if (inputs.getInputValue(GlobalVariables.JASPER_STAT_TYPE).equals(GlobalVariables.JASPER_NA))
	{
		try {
			if(!scheduleObject.isOptionsButtonVisible(10)) {
				scheduleObject.ClickSchduleButtonMappingIndex();
			}
			if (inputs.isInputAvailable("LANGUAGE"))
			{
				file = optikUtils.read(testCase, inputs.getInputValue("LANGUAGE"), "TimeSchedulePage");
			}
			else
			{
			}

			if(!(optikUtils.compare(file, testCase)))
			{
				flag=false;
			}
			else
			{
				Keyword.ReportStep_Pass(testCase , "Successfully verified the screen :"+" TimeSchedulePage") ;
			}
		}
		catch (IOException e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			flag = false;
		}
	} else {
		try {
			if(!scheduleObject.isOptionsButtonVisible(10)) {
				scheduleObject.ClickSchduleButtonMappingIndex();
			}
			if (inputs.isInputAvailable("LANGUAGE")) {
				file = optikUtils.read(testCase, inputs.getInputValue("LANGUAGE"), "TimeScheduleEmea");
			} else {
			}

			if(!(optikUtils.compare(file, testCase)))
			{
				flag=false;
			}
			else
			{
				Keyword.ReportStep_Pass(testCase , "Successfully verified the screen :"+" TimeScheduleEmea") ;
			}
		} catch (IOException e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			flag = false;
		}

	}

	if (scheduleObject.isOptionsButtonVisible(5)) {
		flag = flag && scheduleObject.clickOnOptionsButton();
	}
	try {
		if (scheduleObject.isSwitchToGeofencingVisible(10)) {
		}

		if (inputs.isInputAvailable("LANGUAGE")) {
			file = optikUtils.read(testCase, inputs.getInputValue("LANGUAGE"), "TimeBasedOptionPage");
		} else {
		}

		if(!(optikUtils.compare(file, testCase)))
		{
			flag=false;
		}
		else
		{
			Keyword.ReportStep_Pass(testCase , "Successfully verified the screen :"+" TimeBasedOptionPage") ;
		}
	} catch (IOException e) {
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		flag = false;
	}

	if (scheduleObject.isSwitchToGeofencingVisible(5)) {
		flag=true;

		flag = flag && scheduleObject.clickOnSwitchToGeofencingButton();

		try {
			if (inputs.isInputAvailable("LANGUAGE")) {
				if (scheduleObject.isUseGeofencingButtonVisible(10)) {
				}

				file = optikUtils.read(testCase, inputs.getInputValue("LANGUAGE"), "ScheduleTimeToGeoPage1");
			} else {
			}

			if(!(optikUtils.compare(file, testCase)))
			{
				flag=false;
			}
			else
			{
				Keyword.ReportStep_Pass(testCase , "Successfully verified the screen :"+" ScheduleTimeToGeoPage1") ;
			}
		} catch (IOException e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			flag = false;
		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			flag=true;
			if (scheduleObject.isUseGeofencingButtonVisible(5)) {
				flag=true;
				flag = flag && scheduleObject.clickOnUseGeofencingButton();
			}
			try {
				if (scheduleObject.isNextButtonVisible(10)) {}
				if (inputs.isInputAvailable("LANGUAGE")) {
					file = optikUtils.read(testCase, inputs.getInputValue("LANGUAGE"), "ScheduleTimeToGeoPage2");
				} else {
				}

				if(!(optikUtils.compare(file, testCase)))
				{
					flag=false;
				}
				else
				{
					Keyword.ReportStep_Pass(testCase , "Successfully verified the screen :"+" ScheduleTimeToGeoPage2") ;
				}
			} catch (IOException e) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
				flag = false;
			}

			if (scheduleObject.isNextButtonVisible(5)) {
				flag=true;
				flag = flag && scheduleObject.clickOnNextButton();
			}
			try {
				if (scheduleObject.isNextButtonVisible(10)) {}
				if (inputs.isInputAvailable("LANGUAGE")) {
					file = optikUtils.read(testCase, inputs.getInputValue("LANGUAGE"), "ScheduleTimeToGeoPage3");
				} else {
				}

				if(!(optikUtils.compare(file, testCase)))
				{
					flag=false;
				}
				else
				{
					Keyword.ReportStep_Pass(testCase , "Successfully verified the screen :"+" ScheduleTimeToGeoPage3") ;
				}
			} catch (IOException e) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
				flag = false;
			}

			if (scheduleObject.isNextButtonVisible(5)) {
				flag=true;
				flag = flag && scheduleObject.clickOnNextButton();
			}
			try {
				if (scheduleObject.isNextButtonVisible(10)) {}
				if (inputs.isInputAvailable("LANGUAGE")) {
					file = optikUtils.read(testCase, inputs.getInputValue("LANGUAGE"), "ScheduleTimeToGeoPage4");
				} else {
				}

				if(!(optikUtils.compare(file, testCase)))
				{
					flag=false;
				}
				else
				{
					Keyword.ReportStep_Pass(testCase , "Successfully verified the screen :"+" ScheduleTimeToGeoPage4") ;
				}
			} catch (IOException e) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
				flag = false;
			}

			if (scheduleObject.isNextButtonVisible(5)) {
				flag=true;
				flag = flag && scheduleObject.clickOnNextButton();
			}

			try {
				if (scheduleObject.isNextButtonVisible(10)) {}
				if (inputs.isInputAvailable("LANGUAGE")) {
					file = optikUtils.read(testCase, inputs.getInputValue("LANGUAGE"), "ScheduleTimeToGeoPage5");
				} else {
				}

				if(!(optikUtils.compare(file, testCase)))
				{
					flag=false;
				}
				else
				{
					Keyword.ReportStep_Pass(testCase , "Successfully verified the screen :"+" ScheduleTimeToGeoPage5") ;
				}
			} catch (IOException e) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
				flag = false;
			}

			if (scheduleObject.isNextButtonVisible(5)) {
				flag=true;
				flag = flag && scheduleObject.clickOnNextButton();

			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Done Button not found");
				flag = false;

			}
	}
		else
		{
			if(scheduleObject.isBackButtonVisible())
			{
				scheduleObject.clickOnBackButton();
				scheduleObject.clickOnBackButton();
			}
		}
	}
	return flag;
	}


	public static boolean VerifyPrimaryCardTextLocal(TestCases testCase, String language, TestCaseInputs inputs) {boolean flag = true;

	PrimaryCard PrimaryCardObject = new PrimaryCard(testCase);
	PrimaryCardObject.isXYZVisible(3);
	try
	{
	
	if (PrimaryCardObject.isScheduleStatusVisible(10)) {
		String T = PrimaryCardObject.getScheduleStatus();
		if (inputs.getInputValue("LANGUAGE").contains("English")) {

			if (T.contains("Following Schedule") || T.contains("Following schedule") || T.contains("No Schedule")
					|| T.contains("No schedule") || T.contains("Schedule Off") || T.contains("Sleep")
					|| T.contains("Home") || T.contains("Away")||T.contains("Vacation") || T.contains("Holiday") || T.contains("Hold")) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else if (T.contains("Following Schedule".toUpperCase()) || T.contains("Following schedule".toUpperCase()) || T.contains("No Schedule".toUpperCase())
					|| T.contains("No schedule".toUpperCase()) || T.contains("Schedule Off".toUpperCase()) || T.contains("Sleep".toUpperCase())
					|| T.contains("Home".toUpperCase()) || T.contains("Away".toUpperCase())||T.contains("Vacation".toUpperCase()) || T.contains("Holiday".toUpperCase()) || T.contains("Hold".toUpperCase())) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Not Verified Primary Card Text i.e." + T);
				flag = false;
			}

		} else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("Spanish")) {

			if (T.contains("Seg")
					|| T.contains("programa")||T.contains("Retener") || T.contains("Vacaciones")) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else if (T.contains("Seg".toUpperCase())
					|| T.contains("programa".toUpperCase())||T.contains("Retener".toUpperCase()) || T.contains("Vacaciones".toUpperCase())) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Not Verified Primary Card Text i.e." + T);
				flag = false;

			}

		}

		else if (inputs.getInputValue("LANGUAGE").contains("Italian"))
		{

			if (T.contains("Segui pianificazione") || T.contains("Utilizzare impostazioni Casa")
					|| T.contains("Utilizzare impostazioni Sonno")|| T.contains("Pianificazione Off") || T.contains("Utilizzare impostazioni Assente")
					|| T.contains("Utilizzare impostazioni Riposo") || T.contains("Pianificazione Off")||T.contains("Tenere ") || T.contains("Vacanze")||T.contains("Segui")) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else if (T.contains("Segui pianificazione".toUpperCase()) || T.contains("Utilizzare impostazioni Casa".toUpperCase())
					|| T.contains("Utilizzare impostazioni Sonno".toUpperCase())|| T.contains("Pianificazione Off".toUpperCase()) || T.contains("Utilizzare impostazioni Assente".toUpperCase())
					|| T.contains("Utilizzare impostazioni Riposo".toUpperCase()) || T.contains("Pianificazione Off".toUpperCase())||T.contains("Tenere".toUpperCase()) || T.contains("Vacanze")||T.contains("Segui".toUpperCase())) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Not Verified Primary Card Text i.e." + T);
				flag = false;

			}

		}

		else if (inputs.getInputValue("LANGUAGE").contains("German")
				) {

			if (T.contains("Zeitplan wird befolgt") || T.contains("Abwesend-Einstellungen verwendet")
					|| T.contains("Zuhause-Einstellungen verwendet") || T.contains("Zeitplan aus")
					|| T.contains("Schlaf-Einstellungen verwendet")||T.contains("halten ") || T.contains("Urlaub")) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else if (T.contains("Zeitplan wird befolgt".toUpperCase()) || T.contains("Abwesend-Einstellungen verwendet".toUpperCase())
					|| T.contains("Zuhause-Einstellungen verwendet".toUpperCase()) || T.contains("Zeitplan aus".toUpperCase())
					|| T.contains("Schlaf-Einstellungen verwendet".toUpperCase())||T.contains("halten ".toUpperCase()) || T.contains("Urlaub".toUpperCase())) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Not Verified Primary Card Text i.e." + T);
				flag = false;

			}

		}

		else if (inputs.getInputValue("LANGUAGE").contains("Dutch")) {

			// fs,off,home,sleep,away
			if (T.contains("Schema wordt gevolgd") || T.contains("Schema")
					|| T.contains("Instellingen van Thuis worden gebruikt")||T.contains("Instellingen")
					|| T.contains("Instellingen van Slapen worden gebruikt")
					|| T.contains("Instellingen van Afwezig worden gebruikt")||T.contains("Houd") || T.contains("Vakantie")) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else if (T.contains("Schema wordt gevolgd".toUpperCase()) || T.contains("Schema".toUpperCase())
					|| T.contains("Instellingen van Thuis worden gebruikt".toUpperCase())||T.contains("Instellingen".toUpperCase())
					|| T.contains("Instellingen van Slapen worden gebruikt".toUpperCase())
					|| T.contains("Instellingen van Afwezig worden gebruikt".toUpperCase())||T.contains("Houd".toUpperCase()) || T.contains("Vakantie".toUpperCase())) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Not Verified Primary Card Text i.e." + T);
				flag = false;

			}

		}

		else if (inputs.getInputValue("LANGUAGE").contains("French")) {

			// fs,away,off
			if (T.contains("Programme suivi") || T.contains("Utilisation")
					|| T.contains("Programme ") ||T.contains("Suivant le programme".toLowerCase())
					||T.contains("Maintenir") || T.contains("vacances")|| T.contains("Utilisant")|| T.contains("Absence")|| T.contains("les")) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			}else if  (T.contains("Programme suivi".toUpperCase()) || T.contains("Utilisation".toUpperCase())
					|| T.contains("Programme ".toUpperCase()) ||T.contains("Suivant le programme".toUpperCase())
					||T.contains("Maintenir".toUpperCase()) || T.contains("vacances".toUpperCase())|| T.contains("Utilisant".toUpperCase())|| T.contains("Absence".toUpperCase())|| T.contains("les".toUpperCase())) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else  {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Not Verified Primary Card Text i.e." + T);
				flag = false;

			}
		}


		else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortugueseBR")) {

			// fs,away,off
			if (T.contains("Seg") || T.contains("Programa")
					|| T.contains("Usando")
					|| T.contains("configura") ||T.contains("Maintenir") || T.contains("vacances")) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			}else if (T.contains("Seg".toUpperCase()) || T.contains("Programa".toUpperCase())
					|| T.contains("Usando".toUpperCase())
					|| T.contains("configura".toUpperCase()) ||T.contains("Maintenir".toUpperCase()) || T.contains("vacances".toUpperCase())) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else  {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Not Verified Primary Card Text i.e." + T);
				flag = false;

			}

		}

		else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortuguesePL")) {

			// fs,away,off
			if (T.contains("A seguir ") || T.contains("Hor")
					|| T.contains("A utilizar")
					||T.contains("Maintenir") || T.contains("vacances")) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else if (T.contains("A seguir ".toUpperCase()) || T.contains("Hor".toUpperCase())
					|| T.contains("A utilizar".toUpperCase())
					||T.contains("Maintenir".toUpperCase()) || T.contains("vacances".toUpperCase())) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Not Verified Primary Card Text i.e." + T);
				flag = false;
			}

		}


		else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("Polish")) {

			// fs,away,off
			if (T.contains("A seguir ") || T.contains("harmonogramem")
					|| T.contains("ustawie")
					||T.contains("Maintenir") || T.contains("vacances")) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else if (T.contains("A seguir".toUpperCase()) || T.contains("harmonogramem".toUpperCase())
					|| T.contains("ustawie".toUpperCase())
					||T.contains("Maintenir".toUpperCase()) || T.contains("vacances".toUpperCase())) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Not Verified Primary Card Text i.e." + T);
				flag = false;
			}

		}

		else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("Czech")) {

			// fs,away,off
			if (T.contains("astaven") || T.contains("rozvrh")
					|| T.contains("ustawie")
					||T.contains("nastave") || T.contains("vacances")) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else if (T.contains("astaven".toUpperCase()) || T.contains("rozvrh".toUpperCase())
					|| T.contains("ustawie".toUpperCase())
					||T.contains("nastave".toUpperCase()) || T.contains("vacances".toUpperCase())) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Not Verified Primary Card Text i.e." + T);
				flag = false;
			}

		}
		else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("Slovakian")) {

			// fs,away,off
			if (T.contains("Dovolenka do") || T.contains("rozvrhu")
					|| T.contains("nastavenia")
					||T.contains("Maintenir") || T.contains("nastave")) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			} else if (T.contains("Dovolenka do".toUpperCase()) || T.contains("rozvrhu".toUpperCase())
					|| T.contains("nastavenia".toUpperCase())
					||T.contains("Maintenir".toUpperCase()) || T.contains("nastave".toUpperCase())) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			}else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Not Verified Primary Card Text i.e." + T);
				flag = false;
			}

		}
		else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("Hungarian")) {

			// fs,away,off
			if (T.contains("program") || T.contains("haszn")
					|| T.contains("nastavenia")
					||T.contains("nastaven") || T.contains("program")) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			}else if (T.contains("program".toUpperCase()) || T.contains("haszn".toUpperCase())
					|| T.contains("nastavenia".toUpperCase())
					||T.contains("nastaven".toUpperCase()) || T.contains("program".toUpperCase())) {
				Keyword.ReportStep_Pass(testCase, "Verified Primary Card Text i.e." + T);
			}
			else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Not Verified Primary Card Text i.e." + T);
				flag = false;
			}

		}
	}	
	}catch(Exception e) {
		
	}
	return flag;}

	public static boolean verifyScheduleScreenGeofenceToTime(TestCases testCase, String language, TestCaseInputs inputs)
	{List<String> file = null;
	boolean flag=true;
	Schedule scheduleObject = new Schedule(testCase,inputs, inputs.getInputValue("LANGUAGE"));

	if (scheduleObject.isScheduleButtonVisible(5)) {
		flag = flag && scheduleObject.clickOnScheduleButton();

	}else if (scheduleObject.ClickSchduleButtonMappingIndex()){
		 flag = true; 
	} else {
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
				"Create New Schedule : Schedule Button not found on Primary Card");
	}
	try {
		if (inputs.isInputAvailable("LANGUAGE")) {

			if (scheduleObject.isOptionsButtonVisible(10)) {}
			file = optikUtils.read(testCase, inputs.getInputValue("LANGUAGE"), "GeofenceShedulePage");
		} else {
		}

		if(!(optikUtils.compare(file, testCase)))
		{
			flag=false;
		}
		else
		{
			Keyword.ReportStep_Pass(testCase , "Successfully verified the screen :"+" GeofenceShedulePage") ;
		}
	} catch (IOException e) {
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
	}

	if (scheduleObject.isOptionsButtonVisible(5)) {
		flag=true;
		flag = flag && scheduleObject.clickOnOptionsButton();
	}

	try {
		if (scheduleObject.isSwitchToTimeSchedulingVisible(5) ) {}
		if (inputs.isInputAvailable("LANGUAGE")) {
			file = optikUtils.read(testCase, inputs.getInputValue("LANGUAGE"), "GeofenceOptionPage");
		} else {
		}

		if(!(optikUtils.compare(file, testCase)))
		{
			flag=false;
		}
		else
		{
			Keyword.ReportStep_Pass(testCase , "Successfully verified the screen :"+" GeofenceOptionPage") ;
		}
	} catch (IOException e) {
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
	}

	if (scheduleObject.isSwitchToTimeSchedulingVisible(5) ) {
		flag=true;
		flag = flag && scheduleObject.clickOnSwitchToTimeSchedulingButton();
	}
	try {
		if (scheduleObject.isEverydayScheduleButtonVisible()){}
		if (inputs.isInputAvailable("LANGUAGE")) {
			file = optikUtils.read(testCase, inputs.getInputValue("LANGUAGE"), "ScheduleGeoToTimePage1");
		} else {
		}

		if(!(optikUtils.compare(file, testCase)))
		{
			flag=false;
		}
		else
		{
			Keyword.ReportStep_Pass(testCase , "Successfully verified the screen :"+" ScheduleGeoToTimePage1") ;
		}
	} catch (IOException e) {
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
	}
	if (scheduleObject.isEverydayScheduleButtonVisible()) {
		flag=true;
		flag = flag && scheduleObject.clickOnEverydayScheduleButton();
	}
	try {
		if (scheduleObject.isViewByIndividualDaysVisible(5)) {}
		if (inputs.isInputAvailable("LANGUAGE")) {
			file = optikUtils.read(testCase, inputs.getInputValue("LANGUAGE"),
					"ScheduleGeoToTimePage2ForTime");
		} else {
		}

		if(!(optikUtils.compare(file, testCase)))
		{
			flag=false;
		}
		else
		{
			Keyword.ReportStep_Pass(testCase , "Successfully verified the screen :"+" ScheduleGeoToTimePage2ForTime") ;
		}
	} catch (IOException e) {
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
	}

	if (scheduleObject.isViewByIndividualDaysVisible(5)) {
		flag=true;
		flag = flag && scheduleObject.clickOnViewByIndividualDaysButton();
	}
	/*try {
		if (inputs.getInputValue("LANGUAGE").contains("Spanish")) {
			file1.add("Lunes");
		} else if (inputs.getInputValue("LANGUAGE").contains("Italian")) {
			file1.add("Luned");
		} else if (inputs.getInputValue("LANGUAGE").contains("German")) {
			file1.add("Montag");
		} else if (inputs.getInputValue("LANGUAGE").contains("Dutch")) {
			file1.add("Maandag");
		} else if (inputs.getInputValue("LANGUAGE").contains("French")) {
			file1.add("Lundi");
		} else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortuguesePL")) {
			file1.add("2\u00AA feira");
		} else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortugueseBR")) {
			file1.add("Segunda-feira");
		} else if (inputs.getInputValue("LANGUAGE").contains("English")) {
			file1.add("Monday");
		}


		if (!optikUtils.compare(file1, testCase)) {
			flag = false;
		}
		file1.removeAll(file1);

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			action.press(350, 900).waitAction().moveTo(250, 250).release().perform();
		}
		else
		{
			CustomDriver driver = testCase.getMobileDriver();

			Dimension dimension = driver.manage().window().getSize();
			action.press(10, (int) (dimension.getHeight() * .5)).moveTo(0, (int) (dimension.getHeight() * -.4))
			.release().perform();


		}


		if (inputs.getInputValue("LANGUAGE").contains("Spanish")) {
			file1.add("Martes");
		} else if (inputs.getInputValue("LANGUAGE").contains("Italian")) {
			file1.add("Marted");
		} else if (inputs.getInputValue("LANGUAGE").contains("German")) {
			file1.add("Dienstag");
		} else if (inputs.getInputValue("LANGUAGE").contains("Dutch")) {
			file1.add("Dinsdag");
		} else if (inputs.getInputValue("LANGUAGE").contains("French")) {
			file1.add("Mardi");
		} else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortuguesePL")) {
			file1.add("3\u00AA feira");
		} else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortugueseBR")) {
			file1.add("a-feira");
		} else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("English")) {
			file1.add("Tuesday");
		}


		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			action.press(350, 900).waitAction().moveTo(250, 250).release().perform();
		}
		else
		{

			CustomDriver driver = testCase.getMobileDriver();

			Dimension dimension = driver.manage().window().getSize();
			action.press(10, (int) (dimension.getHeight() * .5)).moveTo(0, (int) (dimension.getHeight() * -.4))
			.release().perform();



		}


		if (!optikUtils.compare(file1, testCase)) {
			flag = false;
		}
		file1.removeAll(file1);

		if (inputs.getInputValue("LANGUAGE").contains("Spanish")) {
			file1.add("rcoles");
		} else if (inputs.getInputValue("LANGUAGE").contains("Italian")) {
			file1.add("Mercoled");
		} else if (inputs.getInputValue("LANGUAGE").contains("German")) {
			file1.add("Mittwoch");
		} else if (inputs.getInputValue("LANGUAGE").contains("Dutch")) {
			file1.add("Woensdag");
		} else if (inputs.getInputValue("LANGUAGE").contains("French")) {
			file1.add("Mercredi");
		} else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortuguesePL")) {
			file1.add("4\u00AA feira");
		} else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortugueseBR")) {
			file1.add("Quarta-feira");
		} else if (inputs.getInputValue("LANGUAGE").contains("English")) {
			file1.add("Wednesday");
		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			action.press(350, 900).waitAction().moveTo(250, 250).release().perform();
		}
		else
		{
			CustomDriver driver = testCase.getMobileDriver();

			Dimension dimension = driver.manage().window().getSize();
			action.press(10, (int) (dimension.getHeight() * .5)).moveTo(0, (int) (dimension.getHeight() * -.4))
			.release().perform();

		}


		if (!optikUtils.compare(file1, testCase)) {
			flag = false;
		}
		file1.removeAll(file1);


		if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("Spanish"))
		{
			file1.add("Jueves");
		} else if (inputs.getInputValue("LANGUAGE").contains("Italian")) {
			file1.add("Gioved");
		} else if (inputs.getInputValue("LANGUAGE").contains("German")
				) {
			file1.add("Donnerstag");
		} else if (inputs.getInputValue("LANGUAGE").contains("Dutch")) {
			file1.add("Donderdag");
		} else if (inputs.getInputValue("LANGUAGE").contains("French")) {
			file1.add("Jeudi");
		} else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortuguesePL")) {
			file1.add("5\u00AA feira");
		} else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortugueseBR")) {
			file1.add("Quinta-feira");
		} else if (inputs.getInputValue("LANGUAGE").contains("English")) {
			file1.add("Thursday");
		}


		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			action.press(350, 900).waitAction().moveTo(250, 250).release().perform();
		}
		else
		{
			CustomDriver driver = testCase.getMobileDriver();

			Dimension dimension = driver.manage().window().getSize();
			action.press(10, (int) (dimension.getHeight() * .5)).moveTo(0, (int) (dimension.getHeight() * -.4))
			.release().perform();

		}


		if (!optikUtils.compare(file1, testCase)) {
			flag = false;
		}
		file1.clear();



		if(!MobileUtils.isMobElementExists("XPATH", "//*[@text='Sunday']", testCase));
		{
			action.press(350, 900).waitAction().moveTo(250, 250).release().perform();
		}

		if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("Spanish")) {
			file1.add("Viernes");
		} else if (inputs.getInputValue("LANGUAGE").contains("Italian")) {
			file1.add("Venerd");
		} else if (inputs.getInputValue("LANGUAGE").contains("German")) {
			file1.add("Freitag");
		} else if (inputs.getInputValue("LANGUAGE").contains("Dutch")) {
			file1.add("Vrijdag");
		} else if (inputs.getInputValue("LANGUAGE").contains("French")) {
			file1.add("Vendredi");
		} else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortuguesePL")) {
			file1.add("6\u00AA feira");
		} else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortugueseBR")) {
			file1.add("Sexta-feira");
		} else if (inputs.getInputValue("LANGUAGE").contains("English")) {
			file1.add("Friday");
		}


		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			action.press(350, 900).waitAction().moveTo(250, 250).release().perform();
		}
		else
		{
			CustomDriver driver = testCase.getMobileDriver();

			Dimension dimension = driver.manage().window().getSize();
			action.press(10, (int) (dimension.getHeight() * .5)).moveTo(0, (int) (dimension.getHeight() * -.4))
			.release().perform();

		}


		if (!optikUtils.compare(file1, testCase)) {
			flag = false;
		}

		file1.clear();

		if (inputs.getInputValue("LANGUAGE").contains("Spanish")) {
			file1.add("bado");
		} else if (inputs.getInputValue("LANGUAGE").contains("Italian")) {
			file1.add("Sabato");
		} else if (inputs.getInputValue("LANGUAGE").contains("German")) {
			file1.add("Samstag");
		} else if (inputs.getInputValue("LANGUAGE").contains("Dutch")) {
			file1.add("Zaterdag");
		} else if (inputs.getInputValue("LANGUAGE").contains("French")) {
			file1.add("Samedi");
		} else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortuguesePL")) {
			file1.add("bado");
		} else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortugueseBR")) {
			file1.add("bado");
		} else if (inputs.getInputValue("LANGUAGE").contains("English")) {
			file1.add("Saturday");
		}


		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			action.press(350, 900).waitAction().moveTo(250, 250).release().perform();
		}
		else
		{
			CustomDriver driver = testCase.getMobileDriver();

			Dimension dimension = driver.manage().window().getSize();
			action.press(10, (int) (dimension.getHeight() * .5)).moveTo(0, (int) (dimension.getHeight() * -.4))
			.release().perform();

		}


		if (!optikUtils.compare(file1, testCase)) {
			flag = false;
		}

		file1.clear();



		if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("Spanish")) {
			file1.add("Domingo");
		} else if (inputs.getInputValue("LANGUAGE").contains("Italian")) {
			file1.add("Domenica");
		} else if (inputs.getInputValue("LANGUAGE").contains("German")) {
			file1.add("Sonntag");
		} else if (inputs.getInputValue("LANGUAGE").contains("Dutch")) {
			file1.add("Zondag");
		} else if (inputs.getInputValue("LANGUAGE").contains("French")) {
			file1.add("Dimanche");
		} else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortuguesePL")
				|| inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortugueseBR")) {
			file1.add("Domingo");
		} else if (inputs.getInputValue("LANGUAGE").contains("English")) {
			file1.add("Sunday");
		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			action.press(350, 900).waitAction().moveTo(250, 250).release().perform();
		}
		else
		{
			CustomDriver driver = testCase.getMobileDriver();

			Dimension dimension = driver.manage().window().getSize();
			action.press(10, (int) (dimension.getHeight() * .5)).moveTo(0, (int) (dimension.getHeight() * -.4))
			.release().perform();

		}


		if (!optikUtils.compare(file1, testCase)) {
			flag = false;
		}

		file1.clear();

	}

	catch (Exception e) {

	}*/

	if (scheduleObject.isSaveButtonVisible(5)) {
		flag=true;
		flag = flag && scheduleObject.ClickOnSaveButton();

	}else if(inputs.getInputValue("LANGUAGE").contains("French_CA"))
	{if(MobileUtils.isRunningOnAndroid(testCase))
	{
		if(scheduleObject.isSaveVisible())
		{
			scheduleObject.ClicksaveButton();}
	}
		
	}


	else {
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Save Button not found");
		flag = false;

	}

	try {
		if (inputs.isInputAvailable("LANGUAGE")) {
			file = optikUtils.read(testCase, inputs.getInputValue("LANGUAGE"), "ConfirmPopup");
		}
		optikUtils.compare(file, testCase);
	} catch (IOException e) {
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
	}

	if (scheduleObject.isConfirmChangeButtonVisible()) {
		flag=true;
		flag = flag && scheduleObject.clickOnConfirmChangeButton();
	} else {
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Confirm Change Button not found");
		flag = false;

	}
	return flag;
	}

	public static boolean verifyScheduleTimeWeekDayWeekEnd(TestCases testCase, String language, TestCaseInputs inputs)
	{

		List<String> file = null;
		List<String> file1 = new ArrayList<String>();
		TouchAction action = new TouchAction(testCase.getMobileDriver());
		Schedule scheduleObject = new Schedule(testCase,inputs, inputs.getInputValue("LANGUAGE"));
		boolean flag = true;

		if (scheduleObject.isScheduleButtonVisible(5)) {
			flag = flag && scheduleObject.clickOnScheduleButton();
		}else if (scheduleObject.ClickSchduleButtonMappingIndex()){
			 flag = true; 
		}
		 else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create New Schedule : Schedule Button not found on Primary Card");
			flag = false;
		}

		if (inputs.getInputValue(GlobalVariables.JASPER_STAT_TYPE).equals(GlobalVariables.JASPER_NA)) {
			try {
				if(!scheduleObject.isOptionsButtonVisible(10)) {
					scheduleObject.ClickSchduleButtonMappingIndex();
				}
				if (inputs.isInputAvailable("LANGUAGE")) {
					file = optikUtils.read(testCase, inputs.getInputValue("LANGUAGE"), "TimeSchedulePage");
				} else {
				}

				optikUtils.compare(file, testCase);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		if (scheduleObject.isOptionsButtonVisible(5)) {
			flag = flag && scheduleObject.clickOnOptionsButton();
		}else {
			if(!scheduleObject.isOptionsButtonVisible(2)) {
				scheduleObject.ClickSchduleButtonMappingIndex();
				flag = flag && scheduleObject.clickOnOptionsButton();
			}
		}

		if (scheduleObject.isCreateNewTimeScheduleVisible(5)) {
			flag = flag && scheduleObject.clickOnCreateNewTimeScheduleButton();
		}

		try {
			if (inputs.isInputAvailable("LANGUAGE")) {
				file = optikUtils.read(testCase, inputs.getInputValue("LANGUAGE"), "ScheduleGeoToTimePage1");
			} else {
			}

			optikUtils.compare(file, testCase);
		} catch (IOException e) {
			e.printStackTrace();
		}
		if (scheduleObject.isWeekdayandWeekendScheduleButtonVisible()) {

			flag = flag && scheduleObject.clickOnOKWeekdayandWeekendScheduleButton();

			try {
				if (inputs.isInputAvailable("LANGUAGE")) {
					file = optikUtils.read(testCase, inputs.getInputValue("LANGUAGE"), "ScheduleGeoToTimePage2ForWeek");
				} else {
				}


				optikUtils.compare(file, testCase);


				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					//action.press(350, 900).waitAction().moveTo(250, 250).release().perform();


					action.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

				}
				else
				{
					CustomDriver driver = testCase.getMobileDriver();

					Dimension dimension = driver.manage().window().getSize();
					/*action.press((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5)).moveTo( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))
					.release().perform();*/

					action.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))).release().perform();


					if(language.contains("Hungarian"))
					{
						try {
							scrollToElementUsingExactAttributeValue(testCase, "value", "Ment�s");
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}


				}
				if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("Spanish"))
				{
					file1.add("bado - Domingo");
				}
				else if (inputs.getInputValue("LANGUAGE").contains("Italian"))
				{
					file1.add("Sabato - Domenica");
				}
				else if (inputs.getInputValue("LANGUAGE").contains("German"))
				{
					file1.add("Samstag - Sonntag");

				} else if (inputs.getInputValue("LANGUAGE").contains("Dutch"))
				{
					file1.add("Zaterdag - Zondag");

				} else if (inputs.getInputValue("LANGUAGE").contains("French"))
				{
					file1.add("Samedi - Dimanche");
				} else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortuguesePL"))
				{
					file1.add("bado - Domingo");
				} else if (inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortugueseBR"))
				{
					file1.add("bado - Domingo");
				} else if (inputs.getInputValue("LANGUAGE").contains("English"))
				{
					file1.add("Saturday - Sunday");
				}
				if (!optikUtils.compare(file1, testCase)) {
					flag = false;
				}

			} catch (IOException e) {
				e.printStackTrace();
			}
			file1.removeAll(file1);
			file1.clear();

		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "WeekdayWeekendButton not found");
			flag = false;

		}

		if (scheduleObject.isSaveButtonVisible(10)) {
			flag = flag && scheduleObject.ClickOnSaveButton();
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Done Button not found");
			flag = false;

		}

		return flag;
	}

	public static boolean VerifyCreateAccountScreenLocalization(TestCases testCase,TestCaseInputs inputs)
	{
		boolean flag=true;
		String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		LoginScreen ls;
		CreateAccountScreen cas;
		ChangeCountryScreen ccs;

		if(inputs.isInputAvailable("LANGUAGE"))
		{
			ls=new LoginScreen(testCase,language);
			cas=new CreateAccountScreen(testCase,language);
			ccs= new ChangeCountryScreen(testCase,language);

		}else{

			ls=new LoginScreen(testCase);
			cas=new CreateAccountScreen(testCase);
			ccs= new ChangeCountryScreen(testCase);
		}
		EditAddressLocation eal=new EditAddressLocation(testCase);
		TouchAction action = new TouchAction(testCase.getMobileDriver());
		CustomDriver driver = testCase.getMobileDriver();
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
		MobileUtilsLocal l=new MobileUtilsLocal();
		if(ls.isCreateAccountVisible()){
			ls.navigateToCreateAccountScreen();


			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "CreateAccountAndroid");



			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtilsLocal.swipeup(testCase);
				}

			String country_name=Verifycountry(testCase, inputs);
			if(country_name.equalsIgnoreCase(eal.getChangeCountryButtonFieldValue()) ||country_name.contains(eal.getChangeCountryButtonFieldValue()) || eal.getChangeCountryButtonFieldValue().contains(country_name)){
				Keyword.ReportStep_Pass(testCase, "Already Set Country");
			}else{
				flag=Setcountry(testCase, inputs);
			}

		}


		flag=flag && EnterValidCredentialsCreateAccountScreenLocalization(testCase, inputs);

		//This code use -if TITAN R1-IDAAS button
	/*	if(cas.isSendVerificationCodeVisible(5))
		{
			cas.clickOnSendVerificationCode();
			Keyword.ReportStep_Pass(testCase, "Click on Send Verification Code");

		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on Send Verification Code");
		}
		*/


		if(!(language.equalsIgnoreCase("French_CA")||language.equalsIgnoreCase("English_US")||language.equalsIgnoreCase("Spanish_Mexico")||language.equalsIgnoreCase("Spanish_Costarica")||language.equalsIgnoreCase("Spanish_Colombia")||language.equalsIgnoreCase("Spanish_Panama")||language.equalsIgnoreCase("Spanish_Peru")||language.equalsIgnoreCase("Spanish_Chile")||language.equalsIgnoreCase("Spanish_Argentina")||language.equalsIgnoreCase("PortugueseBR")))
		{

			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				/*CustomDriver driver1 = testCase.getMobileDriver();

				Dimension dimension = driver1.manage().window().getSize();
				action.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				.release().perform();*/
				l.swipe(testCase);
				l.swipe(testCase);
			}else
			{
				action.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

			}

			if(cas.getGDPRToggleStatus().contains("OFF")||cas.getGDPRToggleStatus().contains("false")||cas.getGDPRToggleStatus().contains("Off")||

					cas.getGDPRToggleStatus().contains("0")||cas.getGDPRToggleStatus().contains("DESACTIVADO"))
			{
				cas.clickGDPRToggle();
			}

			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "GDPRScreen");
			if(cas.getGDPRToggleStatus().contains("ON")||cas.getGDPRToggleStatus().contains("true")||cas.getGDPRToggleStatus().contains("On")||

					cas.getGDPRToggleStatus().contains("1")||cas.getGDPRToggleStatus().contains("ACTIVADO"))
			{
				cas.clickGDPRToggle();
			}

		}
		Schedule.SwipeDown(testCase);
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(language.equalsIgnoreCase("English_US"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacy Policy && EULA");
			}
			else if(language.equalsIgnoreCase("English_UK") || language.equalsIgnoreCase("English_IR") || language.equalsIgnoreCase("Lithuania"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacy Policy && EULA");
			}

			else if(language.equalsIgnoreCase("French_CA"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Politique de confidentialit");
			}

			else if(language.equalsIgnoreCase("French"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "claration de confidentialit");
			}

			else if(language.equalsIgnoreCase("French_BE"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "claration de confidentiali");
			}

			else if(language.equalsIgnoreCase("French_SUI"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "claration de confidentialit");
			}

			else if(language.equalsIgnoreCase("Dutch"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacybeleid en licentieovereenkomst voor eindgebruikers (EULA)");
			}

			else if(language.equalsIgnoreCase("Dutch_BE"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacybeleid en licentieovereenkomst voor eindgebruikers (EULA)");
			}

			else if(language.equalsIgnoreCase("German") || language.equalsIgnoreCase("German_AUS") || language.equalsIgnoreCase("German_SUI"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Datenschutzrichtlinie und EULA");
			}

			else if(language.equalsIgnoreCase("Italian") || language.equalsIgnoreCase("Italian_SUI"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Informativa sulla privacy e contratto di licenza con l");
			}

			else if(language.equalsIgnoreCase("PortuguesePL"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "de Privacidade e EULA");
			}

			else if(language.equalsIgnoreCase("PortugueseBR"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "de privacidade e EULA");
			}

			else if(language.equalsIgnoreCase("Spanish"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "de privacidad y CLUF");
			}
			else if(language.equalsIgnoreCase("Spanish_Mexico")||language.equalsIgnoreCase("Spanish_Costarica")||language.equalsIgnoreCase("Spanish_Colombia")||language.equalsIgnoreCase("Spanish_Panama")||language.equalsIgnoreCase("Spanish_Peru")||language.equalsIgnoreCase("Spanish_Chile")||language.equalsIgnoreCase("Spanish_Argentina"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "de Privacidad");
			}

			else if(language.equalsIgnoreCase("Polish"))
			{

				MobileUtils.scrollToExactAndroid(testCase , "wiadczenie o");

			}
			else if(language.equalsIgnoreCase("Slovakian"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "ochrane osobn");

			}
			else if(language.equalsIgnoreCase("Hungarian"))
			{

				MobileUtils.scrollToExactAndroid(testCase , "Adelmi nyilatkozat");

			}
			else if(language.equalsIgnoreCase("Romanian"))
			{

				MobileUtils.scrollToExactAndroid(testCase , "de confiden");

			}
			else if(language.equalsIgnoreCase("Latvia"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacy Statement End-User License Agreement");
			}
			if(language.equalsIgnoreCase("Croatian"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacy Statement");
			}
			else if(language.equalsIgnoreCase("Czech"))
			{
				/*Dimension dimension = driver.manage().window().getSize();
				touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				.release().perform();

				touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				.release().perform();*/
				MobileUtils.scrollToExactAndroid(testCase , "o ochran");

			}
			else if(language.equalsIgnoreCase("Bulgarian"))
			{



			}
			else if(language.equalsIgnoreCase("Estonia"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacy Statement End-User License Agreement");
			}
			else
			{
				l.swipe(testCase);
				l.swipe(testCase);
				l.swipe(testCase);
				Schedule.SwipeDown(testCase);
			}


		}
		else
		{
			try
			{


				l.swipe(testCase);
				l.swipe(testCase);
				l.swipe(testCase);
				Schedule.SwipeDown(testCase);


			}
			catch (Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			}
		}
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "CreateAccountAndroid2");



		return flag;
	}

	public static boolean VerifyForgotPasswordScreenLocalization(TestCases testCase,TestCaseInputs inputs) {
		boolean flag=true;
		String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		LoginScreen ls=new LoginScreen(testCase,language);
		OSPopUps os=new OSPopUps(testCase, language);
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			ls.clickOnLoginButton();
			ls.clickOnForgotPasswordButton();
		}
		else
		{
			if(language.contains("English_US")||language.contains("English_UK")||language.contains("English_IR"))
			{
				ls.clickOnForgotPasswordButton();
			}
			else
			{
				//ls.clickOnoptikLogo();
				try {
					if(ls.isForgotPasswordLocalVisible(inputs)) {
						ls.ClickOnForgotPasswordLocal(inputs);
					}else{
						if(!ls.ClickOnForgotPasswordLocal(inputs)){
							testCase.getMobileDriver().findElement(By.xpath("//*[contains(@name,'Elfelejtette')]")).click();

						}
					}
				} catch (Exception e) {
					// TODO: handle exception
				}

			}

		}


		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ForgotPassword");
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			if(ls.isEmailAddressTextFieldVisibleLocal(inputs)){
				ls.setEmailAddressValue(inputs,"abc@gr.la");
			}else{
				ls.setEmailAddressValue(inputs,"abc@gr.la");
			}

			if(MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Return")){

				if(language.equalsIgnoreCase("Italian"))
				{
					if(os.isAlwaysAllowVisible(20))
					{
						//os.clickOnAlwaysAllow();
					}
				}

				flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ResetPopMessage");
			}
		}
		else{
			if(ls.isEmailAddressTextFieldVisibleLocal(inputs)){
				ls.setEmailAddressValue(inputs,"abc@gr.la");
			}else{
				ls.setEmailAddressValue(inputs,"abc@gr.la");
				//ls.clickonResetButton();
			}
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
			ls.clickonResetButton();

			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ResetPopMessage");
		}
		return flag;
	}
	public static String getDeviceEquivalentUTCTime(TestCases testCase, TestCaseInputs inputs, String UTCTime) {
		String deviceTime = "";
		try {
			TimeZone deviceTimeZone = null;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z' Z");
			Calendar deviceEqTime = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
			deviceEqTime.setTime(dateFormat.parse(UTCTime + " " + "UTC"));
			deviceTimeZone = getDeviceTimeZone(testCase, inputs);
			deviceEqTime.setTimeZone(deviceTimeZone);
			String ampm = "";
			if (deviceEqTime.get(Calendar.AM_PM) == Calendar.AM) {
				ampm = "AM";
			} else {
				ampm = "PM";
			}
			String hour;
			if (deviceEqTime.get(Calendar.HOUR) == 0) {
				hour = "12";
			} else {
				hour = String.valueOf(deviceEqTime.get(Calendar.HOUR));
			}
			if (Integer.parseInt(hour) < 10) {
				hour = "0" + hour;
			}
			String minute;
			if (deviceEqTime.get(Calendar.MINUTE) < 10) {
				minute = "0" + deviceEqTime.get(Calendar.MINUTE);
			} else {
				minute = String.valueOf(deviceEqTime.get(Calendar.MINUTE));
			}
			int month = deviceEqTime.get(Calendar.MONTH) + 1;
			deviceTime = String.valueOf(deviceEqTime.get(Calendar.YEAR) + "-" + month + "-"
					+ deviceEqTime.get(Calendar.DAY_OF_MONTH) + "T" + hour + ":" + minute + " " + ampm);
		} catch (Exception e) {
			deviceTime = "";
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		return deviceTime;
	}

	public static String getCurrentUTCTime(TestCases testCase) {
		String UTCTime = " ";
		try {
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			ZonedDateTime zone = ZonedDateTime.now(ZoneOffset.UTC);
			UTCTime = vacationDateFormat.format(vacationDateFormat.parse(zone.toString()));
		} catch (Exception e) {
			UTCTime = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Get Current UTC Time : Error occurred : " + e.getMessage());
		}
		return UTCTime;
	}

	public static boolean VerifyAppScreenNA(TestCases testCase,String language,TestCaseInputs inputs) {

		boolean flag=true;
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);

		optikUtils.verifyGlobaldrawerOptionScreen(testCase,language);

		sc.selectOptionFromSecondarySettings("Geofence");
		optikUtils.verifyGeofenceScreen(testCase,language,inputs);

		sc.selectOptionFromSecondarySettings("Vacation");
		sc.areSecondaryCardSettingsVisible(5);
		optikUtils.verifyVacationScreen(testCase,language,inputs);


		if((language.contains("French_CA"))&& !MobileUtils.isRunningOnAndroid(testCase))
		{

		}else
		{
			sc.selectOptionFromSecondarySettings("Activity History");
			optikUtils.verifyActivityHistoryScreen(testCase,language,inputs);
		}
		if((language.contains("French_CA"))&& !MobileUtils.isRunningOnAndroid(testCase))
		{
			sc.selectOptionFromSecondarySettings("Add Users");
			optikUtils.verifyAddUsersScreen(testCase,language,inputs);

			sc.selectOptionFromSecondarySettings("Location Address");
			optikUtils.verifyLocationAddressScreen(testCase,language,inputs);
		}else if(language.contains("English_US"))
		{
			sc.selectOptionFromSecondarySettings("Add Users");
			optikUtils.verifyAddUsersScreen(testCase,language,inputs);

			sc.selectOptionFromSecondarySettings("Location Address");
			optikUtils.verifyLocationAddressScreen(testCase,language,inputs);
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(language.contains("French")){
				
				MobileUtils.scrollToExactAndroid(testCase, "DÃƒÆ’Ã‚Â©connexion");
			}
			else if(language.contains("English"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Logout");
			}
			else if(language.contains("Spanish"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Cerrar sesiÃ¯Â¿Â½n");
			}
		  else
			{
			  Schedule.SwipeDown(testCase);
			}
		}else
		{
			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

		/*	touchAction.press(10, (int) (dimension.getHeight() * .5)).moveTo(0, (int) (dimension.getHeight() * -.4)).release().perform();*/ //OLD CODE DEPREACTED

			testCase.getMobileDriver().swipe(10, (int) (dimension.getHeight() * .5), 0, (int) (dimension.getHeight() * -.4));

		}
		sc.selectOptionFromSecondarySettings("Edit Account");
		optikUtils.verifyEditAccountScreen(testCase,language,inputs);

		sc.selectOptionFromSecondarySettings("About the app");
		optikUtils.verifyAboutTheAppScreen(testCase,language,inputs);

		optikUtils.verifyThermostatSettingsScreen(testCase,language,inputs);

		return flag;
	}


	public static boolean VerifyAddDeviceNA(TestCases testCase,String language,TestCaseInputs inputs) {

		boolean flag=true;

		optikUtils.verifyAddDeviceScreen(testCase,language);


		return flag;
	}

	public static boolean VerifyAppScreenCamera(TestCases testCase,TestCaseInputs inputs, String language) {

		boolean flag=true;
		Dashboard db=new Dashboard(testCase, language);
       CameraSolutionCard csc=new CameraSolutionCard(testCase,language);
		CameraSettings c=new CameraSettings(testCase);
		CoachMarks cm=new CoachMarks(testCase);

		String deviceToClick=inputs.getInputValue("LOCATION1_DEVICE1_NAME");
		int i=0;
		while(cm.isGotitButtonVisible(3)){
			cm.clickOnGotitButton();
			if(i>6)
			{
				break;
			}
			i++;
		}

		if(db.ClickOnDevicePresentOnDashboard(deviceToClick))
		{
				while(cm.isGotitButtonVisible(3)){
					cm.clickOnGotitButton();
					if(i>6)
					{
						break;
					}
					i++;
				}

			if(csc.isSettingIconVisible(15))
			{
				if(csc.isTurnOnButtonVisible(10))
				{
					csc.clickTurnOnButton();
				}

				csc.clickOnSettingIcon();
			}
			else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Camera : Settings button for camera is not visible", false);
			}

				optikUtils.verifyCameraSettingsScreen(testCase, language);

				optikUtils.verifyManageAlertsCameraAppScreen(testCase, language);

				optikUtils.verifyCameraModeCameraScreen(testCase, language);

				optikUtils.verifyCameraMotionDetectionScreen(testCase, language);

				optikUtils.verifyCameraSoundDetectionScreen(testCase, language);

				optikUtils.verifyCameraNightVisionScreen(testCase, language);

				optikUtils.verifyCameraVideoQualityScreen(testCase, language);

				c.navigateToManageAlertCameraButton();



			if(csc.isBackButtonVisible(15))
			{
				csc.clickOnBackButton();
			}

			if(csc.isTurnOffButtonVisible(10))
			{
				csc.turnOffCameraButton();
			}
			if(csc.isBackButtonVisible(15))
			{
				csc.clickOnBackButton();
			}



		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Camera : Thermostat is not in present");
			flag=false;
		}

		return flag;
	}

	public static void verifyAboutTheAppScreen(TestCases testCase, String language,TestCaseInputs inputs) {
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			sc.selectOptionFromSecondarySettings("Feedback");
			optikUtils.verifyFeedbackScreen(testCase,language);

		}
		optikUtils.VerifyScreenLocalization(testCase, "AboutTheApp");
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			sc.clickOnBackButton();
			sc.clickOnBackButton();

		}else
		{
			if(language.contains("French")||language.contains("French_BE")||language.contains("German")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian")||language.contains("Polish")||language.contains("Slovakian")||language.contains("Hungarian")||language.contains("Czech"))
			{
			//CoachMarkUtils.closeCoachMarksLocal(testCase);
			sc.clickOnBackForLocal(inputs);
			sc.clickOnBackForLocal(inputs);
			}else
			{
				sc.clickOnBackButton();
				sc.clickOnBackButton();
			}

		}
	}

	public static void verifyLocationAddressScreen(TestCases testCase, String language,TestCaseInputs inputs) {
		boolean flag=true;
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "LocationAddress");

		/*
		 *

		 -- Due to unlimited loading on edit address page,..verification skipped of location edit location address page ..
		 -- As soon as issue will be resolved this section would get Uncommented and will verify this screen also.
		 -- Below Back Button also get uncommented when issue get resolved.


		if((language.contains("English") || language.contains("French")||language.contains("German")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian")||language.contains("Croatian")) && !MobileUtils.isRunningOnAndroid(testCase))
		{
			sc.clickOnEditExistingAddressButtonForLocal(inputs);
		}else
		{
			sc.clickOnEditExistingAddressButton();
		}
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "EditAddress");


		*/

		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			if(language.contains("French")||language.contains("German")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian"))
			{
				sc.clickOnNavigatebackButtonForLocal();
			}else
			{
				if(sc.isNavigateBackButtonVisible())
				{
				sc.clickOnNavigateBackButton();
				}
				else
				{
					sc.clickOnBackForLocal(inputs);
				}
			}
		}
		else
		{
			//sc.clickOnBackButton();

		if(sc.isYesButtonVisible())
		{
			sc.clickOnYesButton();
		}

		if((language.contains("French")||language.contains("German")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian")||language.contains("Polish")||language.contains("Slovakian")||language.contains("Hungarian")||language.contains("Czech"))&& !MobileUtils.isRunningOnAndroid(testCase))
		{
			sc.clickOnBackForLocal(inputs);

		}else
		{
			sc.clickOnBackButton();
		}
		}
	}



	public static void verifySetFilterReminderScreen(TestCases testCase, String language,TestCaseInputs inputs) {
		boolean flag=true;
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);
		if(sc.getFilterToggleStatus().contains("OFF")||sc.getFilterToggleStatus().contains("0")||sc.getFilterToggleStatus().contains("false"))
		{
			sc.clickOnFilterToggleOption();
		}
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "SetFilterReminder");
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			sc.clickOnBackButton();
		}else
		{
			if(language.contains("French_CA")||language.contains("French_BE")||language.contains("German"))
			{
				sc.ClickBackLocal(inputs);
			}else
			{
				sc.clickOnBack();
			}


		}
	}




	public static void verifyActivityHistoryScreen(TestCases testCase, String language,TestCaseInputs inputs) {
		boolean flag=true;
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);
		ActivityHistoryScreen ahc=new ActivityHistoryScreen(testCase);
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ActivityHistory");
		if((language.contains("French")||language.contains("French_BE")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian")||language.contains("Polish")||language.contains("Slovakian")||language.contains("Hungarian")||language.contains("Czech")) && !MobileUtils.isRunningOnAndroid(testCase))
		{
			if(sc.isBackForLocalVisible(inputs))
			{
				sc.clickOnBackForLocal(inputs);
			}else if(sc.isBackButtonVisible()) {
				sc.clickOnBackButton();
			}
			
		}else
		{
			sc.clickOnBackButton();
		}
		
		
	}


	public static void verifyEditAccountScreen(TestCases testCase, String language,TestCaseInputs inputs) {
		boolean flag=true;
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "EditAccount");
		flag=flag && optikUtils.VerifyPasscodeToggle(testCase, language, inputs);
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			CustomDriver driver = testCase.getMobileDriver();

			Dimension dimension = driver.manage().window().getSize();
			/*OLD CODE DEPRECATED touchAction.press((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5)).moveTo( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))
			.release().perform();*/
			touchAction.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))).release().perform();



			if(language.contains("Hungarian"))
			{
				try {

					scrollToElementUsingExactAttributeValue(testCase, "value", "Fi");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}else
		{
			/*touchAction.press(350, 900).waitAction().moveTo(250, 250).release().perform();*/ // CODE DEPRECATED

			touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();


		}


		if((language.contains("French")||language.contains("German")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian")||language.contains("Polish")||language.contains("Slovakian")||language.contains("Hungarian")||language.contains("Czech")) && !MobileUtils.isRunningOnAndroid(testCase))
		{
			if(sc.isBackForLocalVisible(inputs))
			{
				sc.clickOnBackForLocal(inputs);
			}
		}else
		{
			sc.clickOnBackButton();
		}


	}

	public static void verifyFeedbackScreen(TestCases testCase, String language) {
		boolean flag=true;
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "FeedBack");
		sc.clickOnCloseButton();
	}

	public static void verifyVacationScreen(TestCases testCase, String language,TestCaseInputs inputs)
	{

		DeviceInformation statInfo=new DeviceInformation(testCase, inputs);
		boolean flag=true;
		VacationSettingScreen vs =new VacationSettingScreen(testCase, language);

		if((language.contains("French")||language.contains("German")||language.contains("French_BE")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian")||language.contains("Polish")||language.contains("Slovakian")||language.contains("Hungarian")||language.contains("Czech")) && !MobileUtils.isRunningOnAndroid(testCase))
		{
			String Vacationsettingtogglestatus=vs.getVacationSettingsToggleStatusLocal(inputs);
			if(Vacationsettingtogglestatus.contains("OFF")||Vacationsettingtogglestatus.contains("0")||Vacationsettingtogglestatus.contains("false"))
			{
				vs.clickOnVacationSettingToggleLocal(inputs);
			}

		}else
		{
			String Vacationsettingtogglestatuswithoutinput= vs.getVacationSettingsToggleStatus();
			if(Vacationsettingtogglestatuswithoutinput.contains("OFF")||Vacationsettingtogglestatuswithoutinput.contains("0")||Vacationsettingtogglestatuswithoutinput.contains("false"))
			{
				vs.clickOnVacationSettingToggle();
			}
		}


		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "VacationSettingPage");

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			vs.clickOnVacationThermostatSettings();
		}else
		{
			if(vs.isStatNameVisible())
			{
				vs.navigateToVacationSetPointspage();

			}

		}

		if(statInfo.getDeviceType().equalsIgnoreCase("Flycatcher") || statInfo.getDeviceType().equalsIgnoreCase("Storm"))
		{
			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "VacationSetPointPageFlycatcher");
		}
		else
		{
			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "VacationSetPointPage");
		}


		if((language.contains("French")||language.contains("German")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian")||language.contains("Polish")||language.contains("Slovakian")||language.contains("Hungarian")||language.contains("Czech")) && !MobileUtils.isRunningOnAndroid(testCase))
		{
			vs.clickOnVacationBackButtonLocal(inputs);
			vs.clickOnVacationBackButtonLocal(inputs);
		}else
		{
			vs.clickOnVacationBackButton();
			vs.clickOnVacationBackButton();
		}

	}

	public static void verifyAddUsersScreen(TestCases testCase, String language,TestCaseInputs inputs) {
		boolean flag=true;
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);
		flag = flag && optikUtils.VerifyPasscodeScreen(testCase , inputs,true, false);
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "AddUsers");

		try {
			if(language.contains("French")||language.contains("French_BE")||language.contains("Spanish")||language.contains("English")||language.contains("Dutch")||language.contains("Italian")||language.contains("Polish")||language.contains("Slovakian")||language.contains("Hungarian")||language.contains("Czech"))
			{
				if(sc.isaddVisible())
				{
					sc.clickOnAddUserButton();}

			}else if(language.contains("German"))
			{
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					sc.clickOnAddUserButton();
				}else
				{
					sc.clickOnAddUserButtonLocal(inputs);}

			}
		} catch (Exception e) {

		}

		try {
			if(sc.isInviteVisible())
			{
				sc.clickOnInviteUsersButton();
			}
		} catch (Exception e) {
		}

		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "InviteUsers");
		if((language.contains("French")||language.contains("German")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian")||language.contains("Polish")||language.contains("Czech")||language.contains("Slovakian")||language.contains("Hungarian")) && !MobileUtils.isRunningOnAndroid(testCase))
		{
			sc.clickOnBackForLocal(inputs);
			sc.clickOnBackForLocal(inputs);
		}else{
			sc.clickOnBackButton();
			sc.clickOnBackButton();
		}
	}


	public static boolean verifyFAQScreen(TestCases testCase, String language,TestCaseInputs inputs) {
		boolean flag=true;
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);
		flag=flag && optikUtils.VerifyScreenLocalization(testCase,"FAQs");
		if(inputs.getInputValue("LANGUAGE").contains("Dutch")||inputs.getInputValue("LANGUAGE").contains("French")||inputs.getInputValue("LANGUAGE").contains("Portuguese")||
				inputs.getInputValue("LANGUAGE").contains("English")||inputs.getInputValue("LANGUAGE").contains("German")||inputs.getInputValue("LANGUAGE").contains("Polish")||inputs.getInputValue("LANGUAGE").contains("Slovakian")||inputs.getInputValue("LANGUAGE").contains("Czech")||inputs.getInputValue("LANGUAGE").contains("Hungarian")||inputs.getInputValue("LANGUAGE").contains("Croatian")||inputs.getInputValue("LANGUAGE").contains("Slovenian")||inputs.getInputValue("LANGUAGE").contains("Italian"))
		{
			sc.clickOnBackButton();
		}
		else
		{
			sc.clickOnFAQBackForLocal(inputs);
		}
		return flag;
	}

	public static boolean verifyGeofenceScreen(TestCases testCase, String language,TestCaseInputs inputs) { 
		boolean flag=true;
		GeoFenceSettingsScreen gs=new GeoFenceSettingsScreen(testCase,language);
		OSPopUps os=new OSPopUps(testCase, language);
	if(os.TurnOnLocationVisible())
	{
		os.clickTurnOnLocationbutton();
		if(os.AllowWhileUsingAppVisible())
		{
			os.clickAllowWhileUsingAppbutton();

		}
		if(os.isAllowButtonVisible(inputs))
		{
			os.isAllowButtonClick(inputs);

		}
	}else {	
		if (!gs.isGeofenceToggleGeofenceRadiusVisible()){
		gs.clickOnGeofenceToggleButton();
		if (!MobileUtils.isRunningOnAndroid(testCase)) {
			if(gs.isLocationAccessIOSSettingVisible())
			{
				gs.clickOnLocationAccessIOSSetting();
				if(gs.isLocationWhileUsingVisible())
				{
					gs.clickOnLocationWhileUsing();	
					
				}
				if(gs.isLocationAlwaysVisible())
				{
					gs.clickOnLocationAlways();
				}
				if(gs.isPreciseLocationToggleVisible())
				{
					gs.clickOnPreciseToggleLocation();
				}
				testCase.getMobileDriver().launchApp();
				optikUtils.VerifyPasscodeScreen(testCase , inputs,true, false);
				
				if(gs.isLocationAccessCloseVisible())
				{
					gs.clickOnLocationAccessClose();
				}
				gs.clickOnGeofenceToggleButton();
			}	}
		else {
				if(os.TurnOnLocationVisible())
				{
					os.clickTurnOnLocationbutton();
					if(os.AllowWhileUsingAppVisible())
					{
						os.clickAllowWhileUsingAppbutton();

					}
					if(os.isAllowButtonVisible(inputs))
					{
						os.isAllowButtonClick(inputs);

					}
				}
			}

		
	}
	}
	flag=flag && optikUtils.VerifyScreenLocalization(testCase, "Geofence");
	
	if(MobileUtils.isRunningOnAndroid(testCase))
	{
		gs.clickOnGeofenceGeofenceRadiusButton();
		
		if(os.isAllowButtonVisible(inputs))
		{
			os.isAllowButtonClick(inputs);

		}
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "GeofenceRadiusPage");
		GeofenceCenterScreen gc=new GeofenceCenterScreen(testCase,language);
		gc.clickOnUpdateGeofenceCenterButton();
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "UpadtegeofencePage");
		gc.clickOnCancelPopupButton();
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			gs.clickOnBackButton();
		}else{
			gc.clickOnCancelPopupButton();
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(gc.isCancelGeoChangePopupVisible())
			{
				//gc.clickOnYesPopupButton();
			}
		}
	}


	if((language.contains("French")||language.contains("German")||language.contains("French_BE")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian")||language.contains("Polish")||language.contains("Czech")||language.contains("Slovakian")||language.contains("Hungarian")) && !MobileUtils.isRunningOnAndroid(testCase))
	{
		if(gs.isBackForLocalAvailable(language))
		{
			gs.clickOnBackForLocalCA(inputs);
		}
	}else
	{
		gs.clickOnBackButton();
	}
	return flag;
	}



	public static boolean verifyGlobaldrawerOptionScreen(TestCases testCase, String language) {
		boolean flag=true;
		Dashboard ds = new Dashboard(testCase,language);
		try {
			flag= flag && ds.clickOnGlobalDrawerButton();
			System.out.println("flag"+flag);
		} catch (Exception e) {
			// TODO: handle exception
		}
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "Globaldrawer_1");
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{

			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			 /*//CODE DEPRECATED touchAction.press((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5)).moveTo( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))
			.release().perform();*/
			touchAction.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))).release().perform();

			Schedule.SwipeDown(testCase);
			if(language.contains("Hungarian"))
			{
				try {
					scrollToElementUsingExactAttributeValue(testCase, "value", "Kijelentkez�s");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}


		}else
		{
			if(language.contains("French"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "DÃƒÂ©connexion");
			}
			else if(language.contains("Italian"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Disconnessione");
			}
			else if(language.contains("English"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Logout");
			}
			else if(language.contains("German"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Abmelden");
			}
			else if(language.contains("Spanish"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Cerrar sesiÃ¯Â¿Â½n");
			}
			else if(language.contains("Dutch"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Afmelden");
			}
			else if(language.contains("PortugueseBR"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Cerrar sesiÃ¯Â¿Â½n");
			}else if(language.contains("PortuguesePL"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Terminar sessÃ¯Â¿Â½o");
			}else
			{
				/*touchAction.press(350, 900).waitAction().moveTo(250, 250).release().perform();
				touchAction.press(350, 900).waitAction().moveTo(250, 250).release().perform();*/

				touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();
				touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

			}
		}

		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "Globaldrawer_2");
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{

			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			// touchAction.press(10, (int) (dimension.getHeight() * .5)).moveTo(0, (int) (dimension.getHeight() * -.4)).release().perform();
			touchAction.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * -.4))).release().perform();

			if(language.contains("Hungarian"))
			{
				try {
					scrollToElementUsingExactAttributeValue(testCase, "value", "Geofencing");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		}else
		{
			if(language.contains("Spanish"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Geovalla");


				if(!MobileUtils.isRunningOnAndroid(testCase))
				{
					CustomDriver driver = testCase.getMobileDriver();

					Dimension dimension = driver.manage().window().getSize();
					/*touchAction.press(10, (int) (dimension.getHeight() * .5)).moveTo(0, (int) (dimension.getHeight() * -.4))
					.release().perform();*/
					touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4))).release().perform();
				}else
				{

				}

			}

			else if(language.contains("PortuguesePL")||language.contains("PortugueseBR")||language.contains("Polish")||language.contains("Slovakian")||language.contains("Czech")||language.contains("Hungarian")||language.contains("Romanian"))
			{

				TouchAction action = new TouchAction(testCase.getMobileDriver());

				CustomDriver driver = testCase.getMobileDriver();
				Dimension dimension = driver.manage().window().getSize();
				try {
					 /*CODE DEPRECATED action.press(dimension.getWidth()/2, dimension.getHeight()/2).waitAction().moveTo(dimension.getWidth()-50, dimension.getHeight()-50).release().perform();
*/
					action.press(point(dimension.getWidth()/2, dimension.getHeight()/2)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(dimension.getWidth()-50, dimension.getHeight()-50)).release().perform();

				} catch (Exception e)
				{

				}

			}
			else
			{
				MobileUtils.scrollToExactAndroid(testCase, "Geofence");
			}
		}
		return flag;

	}

	public static boolean verifyAddDeviceScreenNA(TestCases testCase) {
		boolean flag=true;
		Dashboard ds = new Dashboard(testCase);
		CreateAccountScreen cs=new CreateAccountScreen(testCase);
		AddNewDeviceScreen ad=new AddNewDeviceScreen(testCase);
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			ds.clickOnAddNewDeviceIcon();
		}
		else
		{
			if(ds.isAddDeviceIconBelowExistingDevicesVisible(3))
			{
			  ds.clickOnAddDeviceIconBelowExistingDASDevice();
			}
		}
		if(cs.isCameraDevice())
		{
			Keyword.ReportStep_Pass(testCase,"Successfully Displayed Smart Home Security");
		}else
		{
			Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Smart Home Security not display") ;
			return false ;
		}
		if(ad.isoptikThermostatVisible())
		{
			Keyword.ReportStep_Pass(testCase,"Successfully Displayed optik Round Wi-Fi Thermostat");
		}else
		{
			Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"optik Round Wi-Fi Thermostat not display") ;
			return false ;
		}
		if(ad.isD6DuctlessControllerVisible())
		{
			Keyword.ReportStep_Pass(testCase,"Successfully Displayed D6 Pro Wi-Fi Ductless Controller");
		}else
		{
			Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"D6 Pro Wi-Fi Ductless Controller not display") ;
			return false ;
		}
		if(ad.isT5StatDisplayed())
		{
			Keyword.ReportStep_Pass(testCase,"Successfully Displayed T5 Thermostat");
		}else
		{
			Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"T5 Thermostat not display") ;
			return false ;
		}
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			touchAction.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))).release().perform();

		}else
		{
			touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

		}
		if(ad.isT6ThermostatVisible())
		{
			Keyword.ReportStep_Pass(testCase,"Successfully Displayed T6 Thermostat");
		}else
		{
			Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"T6 Thermostat not display") ;
			return false ;
		}
		if(ad.isWaterLeakDetectorVisible())
		{
			Keyword.ReportStep_Pass(testCase,"Successfully Displayed Water Leak Detector");
		}else
		{
			Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Water Leak Detector not display") ;
			return false ;
		}
		if(ad.isC1CameraDevice())
		{
			Keyword.ReportStep_Pass(testCase,"Successfully Displayed C1 Security Camera");
		}else
		{
			Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"C1 Security Camera not display") ;
			return false ;
		}
		if(ad.isC2CameraDevice())
		{
			Keyword.ReportStep_Pass(testCase,"Successfully Displayed C2 Security Camera");
		}else
		{
			Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"C2 Security Camera not display") ;
			return false ;
		}
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			touchAction.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))).release().perform();

		}else
		{
			touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

		}
		if(ad.isT9orT10Visible())
		{
			Keyword.ReportStep_Pass(testCase,"Successfully Displayed T9 or T10 Pro");
		}else
		{
			Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"T9 or T10 Pro not display") ;
			return false ;
		}
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			ad.clickOnCancelButtonOfAddDeviceScreen();
		}
		else
		{
			ad.clickOnBackButton();
		}
		optikUtils.navigatetoGlobalDrwaerOption(testCase , "about the app");
		if(ad.isVersionVisible())
		{
			Keyword.ReportStep_Pass(testCase,"Successfully Displayed Updated Version");
		}else
		{
			Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Updated Version not display") ;
			return false ;
		}
		ad.clickOnBackButton();
		return flag;

	}

	public static boolean verifyAddDeviceScreen(TestCases testCase, String language) {
		boolean flag=true;
		Dashboard ds = new Dashboard(testCase,language);
		AddNewDeviceScreen ad=new AddNewDeviceScreen(testCase);

		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			ds.clickOnAddNewDeviceIcon();

		}
		else
		{
			if(ds.isAddDeviceIconBelowExistingDevicesVisible(3))
			{
			  ds.clickOnAddDeviceIconBelowExistingDASDevice();
			}
		}

//		ds.clickOnAddNewDeviceIcon();
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

		if(ds.isAddNewDeviceHeaderDisplayed(5)) {
			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "AddNewDevice");
		}

//		if(MobileUtils.isRunningOnAndroid(testCase))
//		{
//			if(eal.isChangeCountryButtonVisible())
//			{
//				eal.clickOnChangeCountryButton();
//			}
//
//			if(ccs.isCountrySearchTextFieldVisible())
//			{
//				Keyword.ReportStep_Pass(testCase,"Successfully Navigated to select country.");
//			}
//		}
//			else
//			{
//				eal.clickOnCountryButton();
//				ccs.isCountrySearchTextFieldAvailable(50);
//			}
//
//		String countryname="";
//
//		if(language.equalsIgnoreCase("English_US"))
//		{
//			countryname="United States";
//		}
//		else if(language.equalsIgnoreCase("English_UK"))
//		{
//			countryname="United Kingdom";
//		}
//
//		else{
//			countryname="United States";
//		}
//
//
//		if(ccs.isCountrySearchTextFieldVisible())
//		{
//			ccs.SetCountrySearchTextField(countryname);
//		}
//		if(MobileUtils.isRunningOnAndroid(testCase))
//		{
//			MobileUtils.hideKeyboard(testCase.getMobileDriver());
//		}
//
//		if(ccs.SelectCountry(countryname))
//		{
//			Keyword.ReportStep_Pass(testCase, "Click on "+countryname);
//		}
//		else
//		{
//			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on" +countryname+"country");
//			flag=false;
//		}
//		if(!MobileUtils.isRunningOnAndroid(testCase))
//		{
//			MobileUtils.hideKeyboard(testCase.getMobileDriver());
//		}
//

		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "AddNewDevice_1");
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{

			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			 /*//CODE DEPRECATED touchAction.press((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5)).moveTo( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))
			.release().perform();*/
			touchAction.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))).release().perform();



		}else
		{
				/*touchAction.press(350, 900).waitAction().moveTo(250, 250).release().perform();
				touchAction.press(350, 900).waitAction().moveTo(250, 250).release().perform();*/

				//touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();
				touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

		}
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "AddNewDevice_2");
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{

			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			 /*//CODE DEPRECATED touchAction.press((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5)).moveTo( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))
			.release().perform();*/
			touchAction.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))).release().perform();



		}else
		{
				/*touchAction.press(350, 900).waitAction().moveTo(250, 250).release().perform();
				touchAction.press(350, 900).waitAction().moveTo(250, 250).release().perform();*/

				//touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();
				touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

		}
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "AddNewDevice_3");
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{

			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			// touchAction.press(10, (int) (dimension.getHeight() * .5)).moveTo(0, (int) (dimension.getHeight() * -.4)).release().perform();
			touchAction.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * -.4))).release().perform();


		}else
		{

		}

		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			ad.clickOnCancelButtonOfAddDeviceScreen();
		}
		else
		{
			ad.clickOnBackButton();
		}
		return flag;

	}

	public static boolean verifyAddDeviceScreenNADas(TestCases testCase, String language) {
		boolean flag=true;

            if(language.isEmpty()==true) {
			language="English_US";
		}
		Dashboard ds = new Dashboard(testCase,language);
		AddNewDeviceScreen ad=new AddNewDeviceScreen(testCase);
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
//		ds.clickOnAddNewDeviceIcon();
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			ds.clickOnAddNewDeviceIcon();

		}
		else
		{
			touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();
			ds.clickOnAddDeviceIconBelowExistingDASDevice();
		}


		if(ds.isAddNewDeviceHeaderDisplayed(5)) {
			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "AddNewDevice");
		}
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "AddNewDeviceWithDASDevice_1");
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{

			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			 /*//CODE DEPRECATED touchAction.press((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5)).moveTo( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))
			.release().perform();*/
			touchAction.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))).release().perform();
			touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();


		}else
		{
				/*touchAction.press(350, 900).waitAction().moveTo(250, 250).release().perform();
				touchAction.press(350, 900).waitAction().moveTo(250, 250).release().perform();*/

				//touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();
				touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();
				//touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();
		}
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "AddNewDeviceWithDASDevice_2");
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{

			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			 /*//CODE DEPRECATED touchAction.press((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5)).moveTo( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))
			.release().perform();*/
			touchAction.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))).release().perform();
			touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();


		}else
		{
				/*touchAction.press(350, 900).waitAction().moveTo(250, 250).release().perform();
				touchAction.press(350, 900).waitAction().moveTo(250, 250).release().perform();*/

				//touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();
				touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

		}
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "AddNewDeviceWithDASDevice_3");
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{

			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			// touchAction.press(10, (int) (dimension.getHeight() * .5)).moveTo(0, (int) (dimension.getHeight() * -.4)).release().perform();
			touchAction.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * -.4))).release().perform();


		}else
		{

		}

		if(!MobileUtils.isRunningOnAndroid(testCase))
		{

			ad.clickOnCancelButtonOfAddDeviceScreen();
			ad.clickOnYesButton();
			ds.clickOnDone();


		}
		else
		{
			ad.clickOnBackButton();
		}

		return flag;

	}

	public static boolean verifyAddDeviceScreenEMEA(TestCases testCase, String language) {
		boolean flag=true;
		Dashboard ds = new Dashboard(testCase,language);
		AddNewDeviceScreen ad=new AddNewDeviceScreen(testCase);
		OSPopUps os=new OSPopUps(testCase);
		//ds.clickOnAddNewDeviceIcon();
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			ds.clickOnAddNewDeviceIcon();

		}
		else
		{
			ds.clickOnAddDeviceIconBelowExistingDASDevice();
		}
		if(os.isAllowButtonVisible())
		{
			os.clickOnAllowButton();
		}
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "AddNewDevice_1EMEA");
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{

			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			 /*//CODE DEPRECATED touchAction.press((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5)).moveTo( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))
			.release().perform();*/
			touchAction.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))).release().perform();



		}else
		{
				/*touchAction.press(350, 900).waitAction().moveTo(250, 250).release().perform();
				touchAction.press(350, 900).waitAction().moveTo(250, 250).release().perform();*/

				//touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();
				touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

		}
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "AddNewDevice_2EMEA");
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{

			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			// touchAction.press(10, (int) (dimension.getHeight() * .5)).moveTo(0, (int) (dimension.getHeight() * -.4)).release().perform();
			touchAction.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * -.4))).release().perform();


		}else
		{

		}

		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			ad.clickOnCancelButtonOfAddDeviceScreen();
		}
		else
		{
			ad.clickOnBackButton();
		}

		return flag;

	}

	public static void verifyGlobaldrawerOptionScreenCamera(TestCases testCase, String language) {
		boolean flag=true;
		Dashboard ds = new Dashboard(testCase,language);
		ds.clickOnGlobalDrawerButton();
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "Globaldrawer_Cam1");
		if(language.contains("French_CA"))
		{
			MobileUtils.scrollToExactAndroid(testCase, "DÃƒÆ’Ã‚Â©connexion");
		}
		else if(language.contains("Italian_SUI"))
		{
			MobileUtils.scrollToExactAndroid(testCase, "Disconnessione");
		}
		else if(language.contains("English_US"))
		{
			MobileUtils.scrollToExactAndroid(testCase, "Logout");
		}
		else if(language.equalsIgnoreCase("German_AUS") || language.equalsIgnoreCase("German") || language.equalsIgnoreCase("German_SUI"))
		{
			MobileUtils.scrollToExactAndroid(testCase, "Abmelden");
		}
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "Globaldrawer_Cam2");
		MobileUtils.scrollToExactAndroid(testCase, "Geofence");

	}









	public static boolean verifyThermostatSettingsScreen(TestCases testCase, String language,TestCaseInputs inputs) {
		boolean flag=true;
		DeviceInformation statInfo=new DeviceInformation(testCase, inputs);
		ThermostatSensorSettingScreen tss = new ThermostatSensorSettingScreen(testCase,inputs);
		TouchAction action = new TouchAction(testCase.getMobileDriver());
		Dashboard ds = new Dashboard(testCase,language);
		PrimaryCard pc=new PrimaryCard(testCase);
		ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase, language);
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);
		if((!MobileUtils.isRunningOnAndroid(testCase)) && !language.contains("English"))
		{
			CoachMarkUtils.closeCoachMarksLocal(testCase,inputs);
		}else
		{
			CoachMarkUtils.closeCoachMarks(testCase);

		}
        ds.isWeatherIconVisible(10);

		ds.clickOnDevice();
		if((!MobileUtils.isRunningOnAndroid(testCase)) && !language.contains("English"))
		{
			CoachMarkUtils.closeCoachMarksLocal(testCase,inputs);
		}else
		{
			CoachMarkUtils.closeCoachMarks(testCase);

		}
		pc.clickOnCogIcon();

		if(statInfo.getDeviceType().equalsIgnoreCase("Flycatcher") || statInfo.getDeviceType().equalsIgnoreCase("Storm"))
		{
			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ThermostatSettingsFlycatcher");
		}
		else
		{
			flag=optikUtils.VerifyScreenLocalization(testCase, "ThermostatSettings");
		}


 		if(ts.ClickOnManageAlerts())
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				ts.ClickOnManageAlertToggle();
				Keyword.ReportStep_Pass(testCase, "Successfully click on Manage Alerts Toggle");

			}
			else
			{
				try{
					ts.ClickmanageAlertToggle();
					}
				catch(Exception e){}
			}
		}


		flag=optikUtils.VerifyScreenLocalization(testCase, "ManageAlerts");
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			sc.clickOnBackButton();
		}else
		{
			if(language.contains("French")||language.contains("French_BE")||language.contains("German")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian")||language.contains("Polish")||language.contains("Slovakian")||language.contains("Hungarian")||language.contains("Czech")||language.contains("Croatian"))
			{
				sc.ClickBackLocal(inputs);
			}else
			{
				sc.clickOnBack();
			}
		}

		if(language.contains("French_CA"))
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(sc.areFilterReminderVisible()){
					sc.selectOptionFromSecondarySettings("Set Filter Reminder");
					optikUtils.verifySetFilterReminderScreen(testCase,language,inputs);
				}
					
			}
			else
			{
				if(MobileUtils.isMobElementExists("xpath", "//*[contains(@value,'Filter Reminder')]", testCase))
				{
					MobileUtils.clickOnElement(testCase, "xpath", "//*[contains(@value,'Filter Reminder')]");
					optikUtils.verifySetFilterReminderScreen(testCase,language,inputs);
				}
				
			}
		}

		if(statInfo.getDeviceType().equalsIgnoreCase("Flycatcher") || statInfo.getDeviceType().equalsIgnoreCase("Storm") )
		{
			if(ts.isDeviceAndSensorsVisible())
			{
				ts.ClickDeviceAndSensor();
			}


			flag=optikUtils.VerifyScreenLocalization(testCase, "DeviceSensor");

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				List<WebElement> sensornames= tss.getSensorNames();

				if(sensornames.get(0)!=null)
				{
					sensornames.get(0).click();
					Keyword.ReportStep_Pass(testCase, " Sensor Settings : Clicked on 1st sensor");
				}
				else
				{
					Keyword.ReportStep_Pass(testCase, "Sensor Setting: No Sensor is displayed");
				}
			}
			else
			{
				if(tss.ClickOnSensor(0))
				{
					Keyword.ReportStep_Pass(testCase, "Sensor Setting: Clicked on 1st Sensor");
				}
				else
				{
					Keyword.ReportStep_Pass(testCase, "Sensor Setting: No Sensor is displayed");
				}
			}

			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "SensorSettingScreen");



			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				sc.clickOnBackButton();
				sc.clickOnBackButton();
			}else
			{
				if(language.contains("French_CA")||language.contains("French_BE")||language.contains("German"))
				{
					sc.ClickBackLocal(inputs);
					sc.ClickBackLocal(inputs);
				}else
				{
					sc.clickOnBack();
					sc.clickOnBack();
				}

			}

			if(ts.isResetWifi())
			{
				ts.ClickResetWifi();
			}
			flag=optikUtils.VerifyScreenLocalization(testCase, "ResetWifi");

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				sc.clickOnBackButton();
			}else
			{
				if(language.contains("French_CA")||language.contains("French_BE")||language.contains("German"))
				{
					sc.ClickBackLocal(inputs);
				}else
				{
					sc.clickOnBack();
				}

			}


		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{

			/*action.press(350, 900).waitAction().moveTo(250, 250).release().perform();*/

			action.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

			if(language.contains("Spanish"))
			{
				ts.clickOnTheromoStatConfigButton("Spanish");
			}
			else  if(language.contains("PortugueseBR"))
			{
				ts.clickOnTheromoStatConfigButton("PortugueseBR");
			}
			else  if(language.contains("PortuguesePL"))
			{
				ts.clickOnTheromoStatConfigButton("PortuguesePL");
			}
			else if(language.contains("French"))
			{
				ts.clickOnTheromoStatConfigButton("French");
			}

			else if(language.contains("Dutch"))
			{
				ts.clickOnTheromoStatConfigButton("Dutch");
			}else
			{
				ts.navigateToThermostatConfigurationPage();
			}

		}
		else
		{
			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			//action.press(10, (int) (dimension.getHeight() * .5)).moveTo(0, (int) (dimension.getHeight() * -.4)).release().perform();

			action.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))).release().perform();


			if(language.contains("Hungarian"))
			{
				try {

					scrollToElementUsingExactAttributeValue(testCase, "value", "Termoszt�t konfigur�l�sa");
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			ts.navigateToThermostatConfigurationPage();
		}



		flag=optikUtils.VerifyScreenLocalization(testCase, "ThermostatConfiguration");

		if(statInfo.getDeviceType().equalsIgnoreCase("Flycatcher") ||statInfo.getDeviceType().equalsIgnoreCase("Storm"))
		{if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			if(language.contains("French")||language.contains("French_BE")||language.contains("German")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian")||language.contains("Polish")||language.contains("Slovakian")||language.contains("Hungarian")||language.contains("Czech"))
			{
				sc.ClickBackLocal(inputs);
				sc.clickOnBackForLocal(inputs);
			}else
			{
				sc.clickOnBack();
				sc.clickOnBackButton();
			}

		}else
		{
			sc.clickOnBackButton();
			sc.clickOnBackButton();
		}
		}

		else
		{
			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				if(language.contains("French")||language.contains("French_BE")||language.contains("German")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian")||language.contains("Polish")||language.contains("Slovakian")||language.contains("Hungarian")||language.contains("Czech")||language.contains("Croatian"))
				{
					sc.ClickBackLocal(inputs);
					sc.clickOnBackForLocal(inputs);
					sc.clickOnBackForLocal(inputs);
				}else
				{
					sc.clickOnBack();
					sc.clickOnBackButton();
					sc.clickOnBackButton();}

			}else
			{
				sc.clickOnBackButton();
				sc.clickOnBackButton();
				sc.clickOnBackButton();}
		}


		return flag;
	}

	public static boolean verifySecurityAlertPopUp(TestCases testCase, TestCaseInputs inputs)
	{

		boolean flag = true ;
		try
		{
			CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase);
			if (!MobileUtils.isRunningOnAndroid(testCase))
			{
				if (cyPop.isTitleTextVisible())
				{
					Keyword.ReportStep_Pass(testCase , "'"+cyPop.getTitleText()+"' pop-up screen display") ;
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"'Security Alert' pop-up screen not display") ;
					return false ;

				}
			}
			else
			{
				if (cyPop.isTitleTextVisible())
				{
					if (cyPop.getTitleText().toUpperCase().contains("Increase Security".toUpperCase()))
					{
						Keyword.ReportStep_Pass(testCase , "'"+cyPop.getTitleText()+"' pop-up screen display") ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"'Security Alert' pop-up screen not match.") ;
						flag = false ;
					}
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"'Security Alert' pop-up screen not display") ;
					return false ;
				}
			}
		}
		catch (Exception e)
		{
		}
		return flag ;
	}

	public static boolean verifyAdditionalSecurityPopUp(TestCases testCase, TestCaseInputs inputs, boolean isVerifyPopUp)
	{

		boolean flag = true ;
		CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase);
		if (!isVerifyPopUp)
		{
			if (!cyPop.isTouchIDDisabledTextVisible())
			{
				Keyword.ReportStep_Pass(testCase ,"'Touch ID Disabled' or 'Add Fingerprint Unlock' prompt is not displayed, when users device is not secured with Touch ID.") ;
			}
			else
			{
				Keyword.ReportStep_Fail(testCase ,FailType.FRAMEWORK_CONFIGURATION ,"'Touch ID Disabled' or 'Add Fingerprint Unlock' pop-up screen is displayed, when users device is not secured with Touch ID.") ;
				return false ;
			}
		}
		return flag ;
	}

	public static boolean verifyIncreaseSecurityPopUp(TestCases testCase, TestCaseInputs inputs, boolean isVerifyPopUp)
	{

		boolean flag = true ;
		CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase);
		try
		{
			if (isVerifyPopUp)
			{
				if (!MobileUtils.isRunningOnAndroid(testCase))
				{
					if (cyPop.isIncreaseSecurityTextVisible())
					{
						Keyword.ReportStep_Pass(testCase , "'Increase Security' pop-up screen display") ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"'Increase Security' pop-up screen not display") ;
						return false ;
					}
				}
				else
				{
					if (cyPop.isTitleTextVisible())
					{
						if (cyPop.getTitleText().equals("Increase Security"))
						{
							Keyword.ReportStep_Pass(testCase , "'Increase Alert' pop-up screen display") ;
						}
						else
						{
							Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"'Increase Alert' pop-up screen not match.") ;
							flag = false ;
						}
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"'Security Alert' pop-up screen not display") ;
						return false ;
					}
				}
			}
			else
			{
				if (!MobileUtils.isRunningOnAndroid(testCase))
				{
					if (!cyPop.isIncreaseSecurityTextVisible())
					{
						Keyword.ReportStep_Pass(testCase , "'Increase Security' pop-up screen not display") ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"'Increase Security' pop-up screen display") ;
						return false ;
					}
				}
				else
				{
					if (!cyPop.isTitleTextVisible())
					{
						Keyword.ReportStep_Pass(testCase , "'Increase Alert' pop-up screen not display") ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"'Security Alert' pop-up screen not display") ;
						return false ;
					}
				}
			}

		}
		catch (Exception e)
		{
		}
		return flag ;
	}

	public static boolean ClickOnDontUsePasscode(TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag = true ;
		CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase);
		if (cyPop.isDontUseTextVisible(40))
		{
			cyPop.clickOnDontUseButton();
		}
		else
		{
			if (getNoDeviceInformation(testCase, inputs) != null) {
				Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"[Login To optik] : 'Security Alert' pop-up screen not display") ;
				flag = false ;
			}
		}

		return flag ;
	}

	public static boolean verifyTouchIdPromptPrimaryCard(TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag = true ;
		CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase);
		if (cyPop.isTouchIDDisabledTextVisible())
		{
			Keyword.ReportStep_Pass(testCase , "'Touch ID Disabled' or 'Add Fingerprint Unlock' prompt display.") ;
		}
		else
		{
			Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"'Touch ID Disabled' prompt not display.") ;
			flag = false ;
		}
		if (cyPop.isAddFingerPrintDescpTextVisible())
		{
			Keyword.ReportStep_Pass(testCase ,"'You do not have fingerprint unlock/Touch ID enabled on this device. Go to Settings and enable fingerprint unlock/Touch ID', description display.") ;
		}
		else
		{
			Keyword.ReportStep_Fail(testCase ,FailType.FRAMEWORK_CONFIGURATION ,"'You do not have fingerprint unlock/Touch ID enabled on this device. Go to Settings and enable fingerprint unlock/Touch ID', description not display.") ;
			flag = false ;
		}
		return flag ;
	}

	public static boolean verifyPasscodeDisablePopUp(TestCases testCase, TestCaseInputs inputs, boolean isVerifyPopUp)
	{
		CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase);
		boolean flag = true ;
		try
		{
			if (isVerifyPopUp)
			{
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					try
					{
						if (!cyPop.setPasscodeEmulator(testCase , inputs , "2406"))
						{
							flag = false ;
						}
						else
						{
							Keyword.ReportStep_Pass(testCase,"Passcode Has been Disabled Successfully");
						}
					}
					catch (Exception e)
					{
						flag = false ;
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , e.getMessage()) ;
					}
				}
				else
				{
				if (cyPop.isPasscodeDisablePopUpVisible())
				{
					Keyword.ReportStep_Pass(testCase , "Passcode Disable pop-up for unlock device is displayed") ;

					if (cyPop.isPasscodeDisablePopUpMsgVisible())
					{
						Keyword.ReportStep_Pass(testCase ,"Passcode Disable pop-up for unlock device is displayed i.e." + cyPop.getPasscodeDisablePopUpMsg()) ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Passcode Disable pop-up for unlock device is not displayed") ;
						flag = false ;
					}
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Passcode Disable pop-up for unlock device is not displayed") ;
					flag = false ;
				}
				if (cyPop.isOkButonVisible())
				{
					cyPop.ClickonOKButton();
				}
			}
			}
		}
		catch (Exception e)
		{
		}
		return flag ;
	}

	public static boolean VerifycreatePasscodeScreen(TestCases testCase, TestCaseInputs inputs, boolean create)
	{

		boolean flag = true ;
		CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase);
		try
		{
			if (create)
			{
				if(inputs.isInputAvailable("LANGUAGE"))
				{
					cyPop.isAddSecurityTextVisible(180);
				}
				
				if (cyPop.isAddSecurityTextVisible())
				{
					cyPop.clickOnAddSecurityButton();
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Secrurity pop_up is not displayed") ;
					return false ;
				}
			}
			if (cyPop.isCreatePasscodeScreenVisible())
			{
				Keyword.ReportStep_Pass(testCase , "Create Passcode screen is displayed") ;
			}
			else
			{
				Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Create Passcode screen is  not displayed") ;
				return false ;
			}
		}
		catch (Exception e)
		{
		}
		return flag ;
	}

	public static boolean CreatePasscodeAfterLoginPopUp(TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag = true ;
		CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase);
		if(inputs.isInputAvailable("LANGUAGE") && !MobileUtils.isRunningOnAndroid(testCase)){
			if(cyPop.isCreatePasscodeTextVisible()){
				flag = flag && cyPop.ClickCreatePasscodeTextLocal();
			}else
			{
			//	flag = false ;
			//	Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"[Logout of optik] : Create Passcode Text Not Visible") ;
			}
		}else {
			
			if (cyPop.isCreatePasscodeScreenVisible())
			{
				Keyword.ReportStep_Pass(testCase ,"After click on Add Security button, able to move to the Create passcode Screen") ;
			
			}else {
			
			if (cyPop.isCreatePasscodeTextVisible() || cyPop.isCreatePasscodeTextOnEditAccountVisible())
			{
				if(cyPop.isCreatePasscodeTextVisible())
				{
					cyPop.ClickonCreatePasscodeButton();
				}
				else
				{
					cyPop.ClickonCreatePasscodeButtonOnEditAccount();
				}
				if (cyPop.isCreatePasscodeScreenVisible())
				{
					Keyword.ReportStep_Pass(testCase ,"After click on Add Security button, able to move to the Create passcode Screen") ;
				}
			}else
			{
				flag = false ;
				Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"[Logout of optik] : Create Passcode Text Not Visible") ;
			}
			
			
			}
			
		}
		
			
				if (!MobileUtils.isRunningOnAndroid(testCase))
				{
					cyPop.setValuePasscode("2406");
					//cyPop.ClickOnTwoKeyText();
					//cyPop.ClickOnFourKeyText();
					//cyPop.ClickOnZeroKeyText();
					//cyPop.ClickOnSixKeyText();
				}
				else
				{
					try
					{
						if (!cyPop.setPasscodeEmulator(testCase , inputs , "2406"))
						{
							flag = false ;
						}
					}
					catch (Exception e)
					{
						flag = false ;
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , e.getMessage()) ;
					}

				}
			
			

		
		

		return flag ;
	}

	public static boolean VerifyPasscodeScreen(TestCases testCase, TestCaseInputs inputs, boolean validate,boolean messageVerify)
	{

		boolean flag = true ;
		CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase);
		OSPopUps os = new OSPopUps(testCase);
		if (cyPop.isVerifyPasscodeScreenVisible())
		{
			Keyword.ReportStep_Pass(testCase , "After setting the passcode, able to move verify passcode screen") ;	
		}
			if (validate)
			{
				if (!MobileUtils.isRunningOnAndroid(testCase))
				{
					cyPop.setValuePasscode("2406");
					//cyPop.ClickOnTwoKeyText();
					//cyPop.ClickOnFourKeyText();
					//cyPop.ClickOnZeroKeyText();
					//cyPop.ClickOnSixKeyText();
				}
				else
				{
					try
					{
						if (!cyPop.setPasscodeEmulator(testCase , inputs , "2406"))
						{
							flag = false ;
						}
						
						inputs.setInputValue("PASSCODE", "2406", false);
					}
					catch (Exception e)
					{
						flag = false ;
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , e.getMessage()) ;
					}
				}
				if (messageVerify)
				{

					if( MobileUtils.isRunningOnAndroid(testCase))
					{
						if(os.isIgnoreButtonVisible(3))
						{
							os.clickOnIgnoreButton();
						}
					}


					if (cyPop.isAddTouchIdVisible())
					{
						Keyword.ReportStep_Pass(testCase , "'Add Fingerprint Unlock or Add Touch Id', header display.") ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"'Add Fingerprint Unlock', header not display.") ;
						flag = false ;
					}

					if (cyPop.isAddFingerPrintMessageVisible())
					{
						Keyword.ReportStep_Pass(testCase ,"'Would you like to set up fingerprint now? You can always set it up in your account menu.', message display.") ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"'Would you like to set up fingerprint now? You can always set it up in your account menu.', message not display.") ;
						flag = false ;
					}

					if (cyPop.isAddFinferPrintButtonVisible())
					{
						Keyword.ReportStep_Pass(testCase , "'ADD FINGERPRINT', button display.") ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"'ADD FINGERPRINT', button not display.") ;
						flag = false ;
					}
					if (cyPop.isNOButtonVisible())
					{
						Keyword.ReportStep_Pass(testCase , "'No', button display.") ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "'No', button not display.") ;
						flag = false ;
					}
				}
				else
				{
					if (MobileUtils.isRunningOnAndroid(testCase))
					{
						if (!inputs.isRunningOnSauceLabs())
						{
							if(!os.clickOnNextButton()) {
							if (cyPop.isNoButtonVisible())
							{
								cyPop.ClickonNoButton();
							}
							else if (cyPop.isNOButtonVisible())
							{
								cyPop.ClickonNOButton();
							}
							else
							{
								if (cyPop.isRetryTextVisible())
								{
									cyPop.ClickonRetryButton();
									Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to set passcode.") ;
									flag = false ;
								}
								if (cyPop.isOkButonVisible())
								{
									flag = false ;
									cyPop.ClickonOKButton();
								}
								return flag ;
							}
							}
						}
					}
					else
					{
						if (cyPop.isOkButonVisible())
						{
							//THIS CODE COMMENTED  due to further app verification failing because of below 'flag' in case u required this flag as uncomment please discuss with automation team
							//flag = false ;
							cyPop.ClickonOKButton();
						}
						/*
						if(!os.clickOnNextButton()) {
						if (cyPop.isNoButtonVisible())
						{
							cyPop.ClickonNoButton();
						}
						else
						{
							if (cyPop.isRetryTextVisible())
							{
								cyPop.ClickonRetryButton();
								Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to set passcode.") ;
								flag = false ;
							}
							if (cyPop.isOkButonVisible())
							{
								//THIS CODE COMMENTED  due to further app verification failing because of below 'flag' in case u required this flag as uncomment please discuss with automation team
								//flag = false ;
								cyPop.ClickonOKButton();
							}
							return flag ;
						}
					}
						*/
					}
				}

			}
			else
			{
				if (!MobileUtils.isRunningOnAndroid(testCase))
				{
					cyPop.setValuePasscode("6402");
					//cyPop.ClickOnSixKeyText();
					//cyPop.ClickOnFourKeyText();
					//cyPop.ClickOnZeroKeyText();
					//cyPop.ClickOnTwoKeyText();
				}
				else
				{
					try
					{
						if (!cyPop.setPasscodeEmulator(testCase , inputs , "1246"))
						{
							flag = false ;
						}
					}
					catch (Exception e)
					{
						flag = false ;
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , e.getMessage()) ;
					}
				}
				if (!MobileUtils.isRunningOnAndroid(testCase))
				{
					if (cyPop.isMisMatchPasscodeTextVisible())
					{
						Keyword.ReportStep_Pass(testCase ,"After entering wrong passcode, 'Verify your Passcode' text displayed.") ;
					}
					else
					{
						flag = false ;
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"After entering wrong passcode, Verify passcode screen not display.") ;
					}

					cyPop.ClickOnBACKButton();
					cyPop.ClickOnBACKButton();
				}
				else
				{
					if (cyPop.isVerifyPasscodeScreenVisible())
					{
						Keyword.ReportStep_Pass(testCase ,"After entering wrong passcode, Verify passcode screen display.") ;
					}
					else
					{
						flag = false ;
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"After entering wrong passcode, Verify passcode screen not display.") ;
					}
					testCase.getMobileDriver().navigate().back() ;
					try
					{
						Thread.sleep(2000) ;
					}
					catch (InterruptedException e)
					{
					}
					testCase.getMobileDriver().navigate().back() ;
				}
			}
		
		if(cyPop.isAddFinferPrintButtonVisible()) {
			cyPop.ClickonAddFinferPrintButton();
			if(cyPop.isCancelButtonVisible()) {
				cyPop.ClickonCancelButton();
			}
			
		}
		
		
		
		return flag ;
	}
	public static boolean verifyWLDScreen(TestCases testCase,TestCaseInputs inputs) {
		boolean flag=true;
		String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		Dashboard ds = new Dashboard(testCase,language);
		WLDScreen ws=new WLDScreen(testCase,language);
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

		WLDPrimaryCard wp=new WLDPrimaryCard(testCase,language);
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(wp.isDismissButtonVisible())
			{
				wp.clickOnDismissButton();
			}
		}else
		{
			wp.ClickIgnoreIOS(inputs);
			wp.ClickDissmissVisibleIOS(inputs);

		}
		optikUtils.VerifyScreenLocalization(testCase,"WLD_PrimaryCard");

		ws.navigatetoLeakDetectorSettingsScreen();

		if(ws.isManageAlertButtonVisible())
		{
			Keyword.ReportStep_Pass(testCase , "Successfully Navigated to Leak Detector setting.") ;
		}

		optikUtils.VerifyScreenLocalization(testCase,"LeakDetectorSettings");

		ws.clickOnManageAlerts();
		optikUtils.VerifyScreenLocalization(testCase,"Manage_Alerts");

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(language.contains("French"))
			{
				MobileUtils.scrollTo(testCase, "Courriels des contacts");
			}else if(language.contains("German"))
			{
				MobileUtils.scrollTo(testCase, "E-Mail-Kontakte");
			}
			else if(language.contains("Italian"))
			{
				MobileUtils.scrollTo(testCase, "Contatti e-mail");
			}else if(language.contains("Dutch"))
			{
				MobileUtils.scrollTo(testCase, "E-mailcontacten");
			}else if(language.contains("Spanish"))
			{
				MobileUtils.scrollTo(testCase, "Contactos de correo electrÃ³nico");
			}
			else if(language.contains("Polish"))
			{
				MobileUtils.scrollTo(testCase, "Kontakty e-mail");
			}
			else if(language.contains("Slovakian"))
			{
				MobileUtils.scrollTo(testCase, "Kontakty e-mail");
			}
			else if(language.contains("Czech"))
			{
				touchAction.press(point(350, 900)).moveTo(point(250, 250)).release().perform();
				touchAction.press(point(350, 900)).moveTo(point(250, 250)).release().perform();

			}
			else
			{
				MobileUtils.scrollTo(testCase, "Email Contacts");
			}}else
			{
				CustomDriver driver = testCase.getMobileDriver();
				Dimension dimension = driver.manage().window().getSize();

				touchAction.press(point(10, (int) (dimension.getHeight() * .8))).moveTo(point(0, (int) (dimension.getHeight() * -.10))).release().perform();
				touchAction.press(point(10, (int) (dimension.getHeight() * .8))).moveTo(point(0, (int) (dimension.getHeight() * -.10))).release().perform();
				try {
					if(inputs.getInputValue("LANGUAGE").contains("German"))
					{
						scrollToElementUsingExactAttributeValue(testCase, "value", "E-Mail-Kontakte");
					}
					else if(language.contains("Italian"))
					{
						scrollToElementUsingExactAttributeValue(testCase, "value", "Contatti e-mail");
					}
					else if(language.contains("French"))
					{
						scrollToElementUsingExactAttributeValue(testCase,"value", "Contacts courriel");
					}else if(language.contains("Dutch"))
					{
						scrollToElementUsingExactAttributeValue(testCase,"value","E-mailcontacten");

					}
					else if(language.contains("PortuguesePL"))
					{
						scrollToElementUsingExactAttributeValue(testCase,"value", "Contatos de e-mail");
					}

					else if(language.contains("English")){
						scrollToElementUsingExactAttributeValue(testCase, "value", "Email Contacts");
					}else
					{
						touchAction.press(point(10, (int) (dimension.getHeight() * .8))).moveTo(point(0, (int) (dimension.getHeight() * -.10)))
						.release().perform();
						touchAction.press(point(10, (int) (dimension.getHeight() * .8))).moveTo(point(0, (int) (dimension.getHeight() * -.10)))
						.release().perform();
					}
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		optikUtils.VerifyScreenLocalization(testCase,"Humidity_Alert");

		ws.clickOnEmailcontacts();

		if (!MobileUtils.isRunningOnAndroid(testCase))
		{
			OSPopUps os=new OSPopUps(testCase);
			if(os.isOkButtonVisible(5))
			{
				os.clickOnOkButton();
				Keyword.ReportStep_Pass(testCase , "Successfully Navigated to Email Notifications.") ;
			}
		}
		optikUtils.VerifyScreenLocalization(testCase,"EmailContacts");
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(ws.isBackButtonVisible())
			{
				ws.clickOnBackbutton();
			}
			else
			{

				Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Back button is not visible.") ;
				flag = false ;
			}
			if(ws.isBackButtonVisible())
			{
				ws.clickOnBackbutton();
			}
			else
			{

				Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Back button is not visible.") ;
				flag = false ;
			}
		}
		else
		{

			if(inputs.getInputValue("LANGUAGE").contains("Spanish") ||inputs.getInputValue("LANGUAGE").contains("PortuguesePL") || inputs.getInputValue("LANGUAGE").contains("French") || inputs.getInputValue("LANGUAGE").contains("German")||inputs.getInputValue("LANGUAGE").contains("Italian") || inputs.getInputValue("LANGUAGE").contains("Dutch") || inputs.getInputValue("LANGUAGE").contains("Polish") || inputs.getInputValue("LANGUAGE").contains("Slovakian")||inputs.getInputValue("LANGUAGE").contains("Czech")||inputs.getInputValue("LANGUAGE").contains("Hungarian")||inputs.getInputValue("LANGUAGE").contains("Croatian"))
			{

				if(ws.isBackbuttonVisible(inputs))
				{
					ws.clickOnBackbutton(inputs);
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Back button is not visible.") ;
					flag = false ;
				}
				if(ws.isBackbuttonVisible(inputs))
				{
					ws.clickOnBackbutton(inputs);
				}

			}
			else if(inputs.getInputValue("LANGUAGE").contains("English"))
			{
				if(ws.isBackButtonVisible())
				{
					ws.clickOnBackbutton();
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Back button is not visible.") ;
					flag = false ;
				}
				if(ws.isBackButtonVisible())
				{
					ws.clickOnBackbutton();
				}
			}
			else
			{

				Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Back button is not visible.") ;
				flag = false ;
			}

			if (!MobileUtils.isRunningOnAndroid(testCase))
			{
				OSPopUps os=new OSPopUps(testCase);
				if(os.isOkButtonVisible(5))
				{
					os.clickOnOkButton();
					Keyword.ReportStep_Pass(testCase , "Successfully Navigated to Email Notifications.") ;
				}
			}


		}

		if(ws.isManageAlertButtonVisible())
		{
			Keyword.ReportStep_Pass(testCase , "Successfully Navigated to Leak Detector setting.") ;
		}

		if(ws.isupdatefrequencyButtonVisible())
		{
			ws.clickOnUpdateFrequency();
		}
		optikUtils.VerifyScreenLocalization(testCase,"Update_Frequency");

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			ws.clickOnBackbutton();}
		else
		{
			if(inputs.getInputValue("LANGUAGE").contains("English"))
			{
				ws.clickOnBackbutton();
			}
			else if(inputs.getInputValue("LANGUAGE").contains("PortuguesePL"))
			{
				if(MobileUtils.isMobElementExists("XPATH", "//*[contains(@name,'Voltar') or contains(@label,'Voltar')]", testCase))
				{
					 MobileUtils.clickOnElement(testCase, "XPATH", "//*[contains(@name,'Voltar') or contains(@label,'Voltar')]");
				}
				else if(MobileUtils.isMobElementExists("XPATH", "//*[contains(@name,'Vol') or contains(@label,'Vol')]", testCase))
				{
					 MobileUtils.clickOnElement(testCase, "XPATH", "//*[contains(@name,'Voltar') or contains(@label,'Vol')]");
				}
				else
				{
					return false;
				}
			}else
			{
				ws.clickOnBackbutton(inputs);

			}
		}
		if(inputs.getInputValue("LANGUAGE").contains("Spanish"))
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{

				ws.clickOnTheromoStatConfigButton("Spanish");
			}else
			{
				ws.clickonLeakDetectorConfiguration();

			}

		}
		else if(inputs.getInputValue("LANGUAGE").contains("PortugueseBR"))
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{

				ws.clickOnTheromoStatConfigButton("PortugueseBR");
			}else
			{
				ws.clickonLeakDetectorConfiguration();

			}

		}else
		{
			ws.clickonLeakDetectorConfiguration();
		}
		optikUtils.VerifyScreenLocalization(testCase,"LeakDetectorConfig");

		if((!MobileUtils.isRunningOnAndroid(testCase)) && (inputs.getInputValue("LANGUAGE").contains("French") ||inputs.getInputValue("LANGUAGE").contains("PortuguesePL") || inputs.getInputValue("LANGUAGE").contains("German")||inputs.getInputValue("LANGUAGE").contains("Italian") || inputs.getInputValue("LANGUAGE").contains("Dutch")||inputs.getInputValue("LANGUAGE").contains("Polish")||inputs.getInputValue("LANGUAGE").contains("Hungarian")||inputs.getInputValue("LANGUAGE").contains("Czech")||inputs.getInputValue("LANGUAGE").contains("Slovakian")))
		{
			if(ws.isBackbuttonVisible(inputs))
			{
				ws.clickOnBackbutton(inputs);

				if(ws.isManageAlertButtonVisible())
				{
					Keyword.ReportStep_Pass(testCase , "Successfully Navigated to Leak Detector setting.") ;
				}
			}

			if(ws.isBackbuttonVisible(inputs))
			{
				ws.clickOnBackbutton(inputs);
				if(ws.isactionsettingbuttonvisible())
				{
					Keyword.ReportStep_Pass(testCase , "Successfully Navigated to primary card.") ;
				}
			}

			if(ws.isBackbuttonVisible(inputs))
			{
				ws.clickOnBackbutton(inputs);
				if(ds.isGlobalDrawerButtonVisible(5))
				{
					Keyword.ReportStep_Pass(testCase , "Successfully Navigated to thermostat page.") ;
				}
			}


		}else
		{
			if(ws.isBackButtonVisible())
			{
				ws.clickOnBackbutton();

				if(ws.isManageAlertButtonVisible())
				{
					Keyword.ReportStep_Pass(testCase , "Successfully Navigated to Leak Detector setting.") ;
				}
			}

			if(ws.isBackButtonVisible())
			{
				ws.clickOnBackbutton();
				if(ws.isactionsettingbuttonvisible())
				{
					Keyword.ReportStep_Pass(testCase , "Successfully Navigated to primary card.") ;
				}
			}

			if(ws.isBackButtonVisible())
			{
				ws.clickOnBackbutton();
				if(ds.isGlobalDrawerButtonVisible(5))
				{
					Keyword.ReportStep_Pass(testCase , "Successfully Navigated to thermostat page.") ;
				}
			}
		}

		optikUtils.VerifyWLDGDScreen(testCase,inputs);

		return flag;
	}

	public static boolean VerifyWLDGDScreen(TestCases testCase,TestCaseInputs inputs) {
		boolean flag=true;
		String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

		optikUtils.verifyWLDGlobaldrawerOptionScreen(testCase,language);

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			sc.selectOptionFromSecondarySettings("Activity History");
			optikUtils.verifyActivityHistoryScreen(testCase,language,inputs);
		}
		sc.selectOptionFromSecondarySettings("Add Users");
		optikUtils.verifyAddUsersScreen(testCase,language,inputs);

		sc.selectOptionFromSecondarySettings("Location Address");
		optikUtils.verifyLocationAddressScreen(testCase,language,inputs);

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.scrollToExactAndroid(testCase, "Logout");
			Schedule.SwipeDown(testCase);
		}else
		{
			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
			.release().perform();

		}
		sc.selectOptionFromSecondarySettings("Edit Account");
		optikUtils.verifyEditAccountScreen(testCase,language,inputs);

		sc.selectOptionFromSecondarySettings("About the app");
		optikUtils.verifyAboutTheAppScreen(testCase,language,inputs);

		return flag;
	}

	public static boolean verifyWLDGlobaldrawerOptionScreen(TestCases testCase, String language) {
		boolean flag=true;
		Dashboard ds = new Dashboard(testCase,language);
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

		ds.clickOnGlobalDrawerButton();
		if(MobileUtils.isRunningOnAndroid(testCase))
		MobileUtils.swipe(testCase, 300, 400, 300, 300);
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "Globaldrawer_WLD");

		return flag;
	}
	public static boolean navigatetoGlobalDrwaerOption(TestCases testCase, String optionName)
	{
		boolean flag=true;

		Dashboard ds = new Dashboard(testCase);
		SecondaryCardSettings scs= new SecondaryCardSettings(testCase);
		if(ds.isGlobalDrawerButtonVisible())
		{
			ds.clickOnGlobalDrawerButton();

			switch(optionName.toUpperCase())
			{
			case "EDIT ACCOUNT":

				if(scs.isEditAccountVisible())
				{
					scs.selectOptionFromSecondarySettings(SecondaryCardSettings.EDITACCOUNT);
				}
				else
				{
					if (MobileUtils.isRunningOnAndroid(testCase))
					{
						WebElement element = null ;

						element = testCase.getMobileDriver().scrollTo("Logout") ;
						if (element != null)
						{

							return scs.selectOptionFromSecondarySettings(SecondaryCardSettings.EDITACCOUNT) ;
						}
					}
					else
					{
						try
						{
							if(testCase.getTestCaseInputs().isRunningOn("Perfecto"))
							{
								boolean success=false;
								Dimension dimension = testCase.getMobileDriver().manage().window().getSize();
								TouchAction action = new TouchAction(testCase.getMobileDriver());
								for (int i = 0; i < 3; ++i) {
									if (success) {
										break;
									}
									try {
										action.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.5))).release().perform();
									} catch (Exception e) {
									}
									FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(testCase.getMobileDriver());
									fWait.pollingEvery(Duration.ofSeconds(5));
									fWait.withTimeout(Duration.ofSeconds(5));
									try {
										WebElement logoutElement = fWait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[(contains(@label,'Logout') or (contains(@value,'Logout')))]")));
										if (logoutElement != null) {
											success = true;
										} else {
										}
									} catch (TimeoutException e) {
										// Retry again
									}
								}
								return scs.selectOptionFromSecondarySettings(SecondaryCardSettings.EDITACCOUNT) ;
							}
							else
							{
								if (optikUtils.scrollToElementUsingExactAttributeValue(testCase, "value", "Logout")) {
									return scs.selectOptionFromSecondarySettings(SecondaryCardSettings.EDITACCOUNT) ;
								}
							}
						}
						catch (Exception e)
						{
							e.printStackTrace();
							flag=false;
						}
					}
				}
				break;

			case "ACTIVITY HISTORY":
				if(scs.isActivityHistoryOptionVisible())
				{
					scs.selectOptionFromSecondarySettings(SecondaryCardSettings.ACTIVITYHISTORY);
				}
				break;

			case "demo MEMBERSHIP":
				if(scs.isActivityHistoryOptionVisible())
				{
					scs.selectOptionFromSecondarySettings(SecondaryCardSettings.demoMEMBERSHIP);
				}
				break;


			case "LOCATION ADDRESS":
				if(scs.isLocationAddressOptionVisible())
				{
					scs.selectOptionFromSecondarySettings(SecondaryCardSettings.LOCATIONADDRESS);
				}
				break;

			case "VACATION":
				if(scs.isVacationOptionVisible())
				{
					scs.selectOptionFromSecondarySettings(SecondaryCardSettings.VACATION);
				}
				break;

			case "ADD USER":
				if(!MobileUtils.isRunningOnAndroid(testCase)){

					if(scs.isAddUserGlobalDrawerOptionVisible())

					{
					scs.selectOptionFromSecondarySettings(SecondaryCardSettings.ADDUSERS);
				}
				}else{
				try {
					List<WebElement> timeList = MobileUtils.getMobElements(testCase,"ID","list_item_optik_horizontal_text_view_primary_text");


					if (timeList != null)
					{ int i=0;
					for(i=0;i<=5;i++)
					{

						if(timeList.get(i).getText().equalsIgnoreCase("Users"))
						{
							timeList.get(i).click();
						}
					}


					}
				} catch (Exception e) {
					// TODO: handle exception
				}
				}
				break;

			case "ABOUT THE APP":

				if(scs.isAbouttheAppOptionVisible(10))
				{
					scs.selectOptionFromSecondarySettings(SecondaryCardSettings.ABOUTTHEAPP);
				}
				else
				{
					if (MobileUtils.isRunningOnAndroid(testCase))
					{
						WebElement element = null ;

						element = testCase.getMobileDriver().scrollTo("Log Out") ;
						if (element != null)
						{

							return scs.selectOptionFromSecondarySettings(SecondaryCardSettings.ABOUTTHEAPP) ;
						}
					}
					else
					{
						try
						{
							if(testCase.getTestCaseInputs().isRunningOn("Perfecto"))
							{
								boolean success=false;
								Dimension dimension = testCase.getMobileDriver().manage().window().getSize();
								TouchAction action = new TouchAction(testCase.getMobileDriver());
								for (int i = 0; i < 3; ++i) {
									if (success) {
										break;
									}
									try {
										action.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.5))).release().perform();
									} catch (Exception e) {
									}
									FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(testCase.getMobileDriver());
									fWait.pollingEvery(Duration.ofSeconds(5));
									fWait.withTimeout(Duration.ofSeconds(5));
									try {
										WebElement logoutElement = fWait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[(contains(@label,'Logout') or (contains(@value,'Logout')))]")));
										if (logoutElement != null) {
											success = true;
										} else {
										}
									} catch (TimeoutException e) {
										// Retry again
									}
								}
								return scs.selectOptionFromSecondarySettings(SecondaryCardSettings.ABOUTTHEAPP) ;
							}
							else
							{
								if (optikUtils.scrollToElementUsingExactAttributeValue(testCase, "value", "About the app")) {
									return scs.selectOptionFromSecondarySettings(SecondaryCardSettings.ABOUTTHEAPP) ;
								}
							}
						}
						catch (Exception e)
						{
							e.printStackTrace();
							flag=false;
						}
					}
				}
				break;

			default:
				break;
			}
		}
		return flag;
	}

	public static boolean CreateNewPasscode(TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag = true ;
		CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase);
		MyAccountScreen myAcc= new MyAccountScreen(testCase);
		SecondaryCardSettings scs=new SecondaryCardSettings(testCase);
		if(myAcc.isChangePasscodeButtonVisible(5))
		{
			myAcc.navigateToChangePasscodeScreen();
			Keyword.ReportStep_Pass(testCase , "My Account page: Click on Change Passcode Option") ;
		}
		if (cyPop.isForgetTextVisible())
		{
			Keyword.ReportStep_Pass(testCase ,"After click on Change Passcode button, able to move to the Change Passcode Screen") ;

			if (!MobileUtils.isRunningOnAndroid(testCase))
			{
				cyPop.ClickOnTwoKeyText();
				cyPop.ClickOnFourKeyText();
				cyPop.ClickOnZeroKeyText();
				cyPop.ClickOnSixKeyText();
			}
			else
			{
				try
				{
					if (!cyPop.setPasscodeEmulator(testCase , inputs , "2406"))
					{
						flag = false ;
					}
				}
				catch (Exception e)
				{
					flag = false ;
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , e.getMessage()) ;
				}
			}

			if (cyPop.isCreatePasscodeScreenVisible())
			{
				if (!MobileUtils.isRunningOnAndroid(testCase))
				{
					cyPop.ClickOnFourKeyText();
					cyPop.ClickOnTwoKeyText();
					cyPop.ClickOnZeroKeyText();
					cyPop.ClickOnSixKeyText();
				}
				else
				{
					try
					{
						if (!cyPop.setPasscodeEmulator(testCase , inputs , "4206"))
						{
							flag = false ;
						}
					}
					catch (Exception e)
					{
						flag = false ;
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , e.getMessage()) ;
					}

				}
			}

			if (cyPop.isVerifyPasscodeScreenVisible())
			{
				if (!MobileUtils.isRunningOnAndroid(testCase))
				{
					cyPop.ClickOnFourKeyText();
					cyPop.ClickOnTwoKeyText();
					cyPop.ClickOnZeroKeyText();
					cyPop.ClickOnSixKeyText();
				}
				else
				{
					try
					{
						if (!cyPop.setPasscodeEmulator(testCase , inputs , "4206"))
						{

						}
					}
					catch (Exception e)
					{
						flag = false ;
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , e.getMessage()) ;
					}
				}
				if (MobileUtils.isRunningOnAndroid(testCase))
				{
					if (!inputs.isRunningOnSauceLabs())
					{
						if (cyPop.isNoButtonVisible())
						{
							cyPop.ClickonNoButton();
						}
						else
						{
							if (cyPop.isRetryTextVisible())
							{
								cyPop.ClickonRetryButton();
								Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to set password.") ;
								flag = false ;
							}
							if (cyPop.isOkButonVisible())
							{
								flag = false ;
								cyPop.ClickonOKButton();
							}
						}
					}
				}
				else
				{
					if (cyPop.isNoButtonVisible())
					{
						cyPop.ClickonNoButton();
					}
					else
					{
						if (cyPop.isRetryTextVisible())
						{
							cyPop.ClickonRetryButton();
							Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to set password.") ;
							flag = false ;
						}
						if (cyPop.isOkButonVisible())
						{
							cyPop.ClickonOKButton();
						}
					}
				}

			}
		}
		else
		{
			flag = false ;
			Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "") ;
		}
		if(myAcc.isBackButtonVisible())
		{
			myAcc.clickOnBackButton();

		}
		if(scs.isBackButtonVisible())
		{
			scs.clickOnBackButton();
		}
		return flag ;
	}

	public static boolean CreatePasscodeUsingCreateScreen(TestCases testCase, TestCaseInputs inputs)
	{

		boolean flag = true ;
		CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase);
		if (cyPop.isCreatePasscodeScreenVisible())
		{
			if (!MobileUtils.isRunningOnAndroid(testCase))
			{
				cyPop.ClickOnFourKeyText();
				cyPop.ClickOnTwoKeyText();
				cyPop.ClickOnZeroKeyText();
				cyPop.ClickOnSixKeyText();
			}
			else
			{
				try
				{
					if (cyPop.isSecurityPin1Visible())
					{
						cyPop.ClickonSecurityPin1();
					}
					if (!cyPop.setPasscodeEmulator(testCase , inputs , "4206"))
					{

					}
				}
				catch (Exception e)
				{
					flag = false ;
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , e.getMessage()) ;
				}

			}
		}

		if (cyPop.isVerifyPasscodeScreenVisible())
		{
			if (!MobileUtils.isRunningOnAndroid(testCase))
			{
				cyPop.ClickOnFourKeyText();
				cyPop.ClickOnTwoKeyText();
				cyPop.ClickOnZeroKeyText();
				cyPop.ClickOnSixKeyText();
			}
			else
			{
				try
				{
					if (!cyPop.setPasscodeEmulator(testCase , inputs , "4206"))
					{

					}
				}
				catch (Exception e)
				{
					flag = false ;
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , e.getMessage()) ;
				}
			}
			if (MobileUtils.isRunningOnAndroid(testCase))
			{
				if (!inputs.isRunningOnSauceLabs())
				{
					if (cyPop.isNoButtonVisible())
					{
						cyPop.ClickonNoButton();
					}
					else
					{
						if (cyPop.isRetryTextVisible())
						{
							cyPop.ClickonRetryButton();
							Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to set password.") ;
							flag = false ;
						}
						if (cyPop.isOkButonVisible())
						{
							flag = false ;
							cyPop.ClickonOKButton();
						}
						return flag ;
					}
				}
			}
			else
			{
				if (cyPop.isNoButtonVisible())
				{
					cyPop.ClickonNoButton();
				}
				else
				{
					if (cyPop.isRetryTextVisible())
					{
						cyPop.ClickonRetryButton();
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to set password.") ;
						flag = false ;
					}
					if (cyPop.isOkButonVisible())
					{
						flag = false ;
						cyPop.ClickonOKButton();
					}
					return flag ;
				}
			}

		}

		return flag ;
	}

	public static boolean verifyCreatePasscodeToggleButton(TestCases testCase, TestCaseInputs inputs, boolean isOn)
	{
		boolean flag = true, chk = false ;
		MyAccountScreen myAcc= new MyAccountScreen(testCase);
		if (isOn)
		{
			if (MobileUtils.isRunningOnAndroid(testCase))
			{
				if (myAcc.isUsePasscodeToggleVisible(5))
				{
					if (myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("ON")|| myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("1")|| myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("true"))
					{
						Keyword.ReportStep_Pass(testCase , "Toggle Button is in turn On state/Passcode is already set") ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is not in turn On state") ;
						flag = false ;
					}
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is not present'") ;
					flag = false ;
				}
			}
			else
			{
				List<WebElement> elements = myAcc.getListUsePasscodeToggleStatus();
				if (elements != null)
				{
					for (WebElement s : elements)
					{
						if (s.getAttribute("value").equalsIgnoreCase("ON")|| s.getAttribute("value").equalsIgnoreCase("1")|| s.getAttribute("value").equalsIgnoreCase("true"))
						{
							Keyword.ReportStep_Pass(testCase ,"Toggle Button is in turn On state/Passcode is already set") ;
							chk = true ;
						}
					}
					if (!chk)
					{
						Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is not in turn On state") ;
						flag = false ;
					}
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is not present'") ;
					flag = false ;
				}
			}
		}
		else
		{
			if (MobileUtils.isRunningOnAndroid(testCase))
			{
				if (myAcc.isUsePasscodeToggleVisible(5))
				{
					if (myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("ON")|| myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("1")|| myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("true"))
					{
						myAcc.clickOnUsePasscodeToggleButton();
						Keyword.ReportStep_Pass(testCase , "Successfully turn off Create Passcode toggle switch") ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Unable to turn off passcode toggle") ;
						flag = false ;
					}
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is not present'") ;
					flag = false ;
				}
			}
			else
			{
				List<WebElement> elements =myAcc.getListUsePasscodeToggleStatus();
				if (elements != null)
				{
					for (WebElement s : elements)
					{
						if (s.getAttribute("value").equalsIgnoreCase("ON")|| s.getAttribute("value").equalsIgnoreCase("1")|| s.getAttribute("value").equalsIgnoreCase("true"))
						{
							myAcc.clickOnUsePasscodeToggleButton();
							Keyword.ReportStep_Pass(testCase , "Successfully turn off Create Passcode toggle switch") ;
							chk = true ;
						}
					}
					if (!chk)
					{
						Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Unable to turn off passcode toggle") ;
						flag = false ;
					}
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is not present'") ;
					flag = false ;
				}
			}
		}
		return flag ;
	}



	public static boolean logoutOfoptikAppLocalization(TestCases testCase,TestCaseInputs inputs) {
		boolean flag = true;
		String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		LoginScreen ls = new LoginScreen(testCase, language);
		Dashboard db = new Dashboard(testCase, language);
		SecondaryCardSettings sc = new SecondaryCardSettings(testCase,language);

		//ClickOnDoneButtonForIOSOnDashbord(testCase);

		if(db.isGlobalDrawerButtonVisible(5))
		{
			flag = flag && db.clickOnGlobalDrawerButton();
		}

		try
		{
			if(!MobileUtils.isRunningOnAndroid(testCase)) {
				optikUtils.scrollToElementUsingExactAttributeValue(testCase, "name", "logout_title");
				}

			flag = flag && sc.clickOnLogoutOptionForLocalization();
			if (ls.isLoginButtonVisible()||ls.isLoginButtonLocalVisible(inputs)) {
				testCase.stopTimer("Logout_Timer", "Time-Measurment", "Logout-Time", "Jasper");
				Keyword.ReportStep_Pass(testCase, "[Logout of optik] : Logout operation Successful.");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"[Logout of optik] : Login screen verification failed.Not able to logout of the App after click on Logout option.");
				flag = false;
			}
		}
		catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					" of app :  Error occurred - " + e.getMessage());
			flag = false;
		}
		return flag;
	}


	public static boolean VerifyAppScreenEMEA(TestCases testCase,String language,TestCaseInputs inputs) {
		boolean flag=true;
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

		optikUtils.verifyGlobaldrawerOptionScreen(testCase,language);

		sc.selectOptionFromSecondarySettings("Geofence");
		optikUtils.verifyGeofenceScreen(testCase,language,inputs);

		sc.selectOptionFromSecondarySettings("Vacation");
		optikUtils.verifyVacationScreen(testCase,language,inputs);

		if((language.contains("German")||(language.contains("Polish")))&& !MobileUtils.isRunningOnAndroid(testCase))
		{

		}else
		{
			sc.selectOptionFromSecondarySettings("Activity History");
			optikUtils.verifyActivityHistoryScreen(testCase,language,inputs);
		}
		sc.selectOptionFromSecondarySettings("Add Users");
		optikUtils.verifyAddUsersScreen(testCase,language,inputs);

		/*if(language.contains("Spanish")||language.contains("Hungarian"))
		{

		}else
		{
			sc.selectOptionFromSecondarySettings("Location Address");
			optikUtils.verifyLocationAddressScreen(testCase,language,inputs);

		}*/
		Keyword.ReportStep_Pass(testCase,
				"****************************************************************************************"
				+ "\n\n\n\n"
				+"This Build Page Loading Screen issue Obsereved on Edit page due to skip Location Address"
				+"\n\n\n\n"
				+"****************************************************************************************"
				);

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(language.contains("Italian"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Disconnessione");
			}
			else if(language.contains("French"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "DÃ¯Â¿Â½connexion");
			}
			else if(language.contains("German"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Abmelden");
			}
			else if(language.contains("Dutch"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Afmelden");
			}
			else if(language.contains("English")||language.contains("Croatian"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Logout");
			}
			else if(language.contains("Spanish"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Cerrar sesiÃ¯Â¿Â½n");
			}
			else if(language.contains("PortugueseBR"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Desconectar");
			}else if(language.contains("PortuguesePL"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Terminar sessÃ¯Â¿Â½o");
			}else
			{
				touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();
				touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

			}
		}else
		{

			Dimension dimensions = testCase.getMobileDriver().manage().window().getSize();
			Double screenHeightStart = dimensions.getHeight() * 0.5;
			int scrollStart = screenHeightStart.intValue();
			Double screenHeightEnd = dimensions.getHeight() * 0.2;
			int scrollEnd = screenHeightEnd.intValue();
			testCase.getMobileDriver().swipe(0, scrollStart, 0, scrollEnd, 1050);
			testCase.getMobileDriver().swipe(0, scrollStart, 0, scrollEnd, 1050);

//			CustomDriver driver = testCase.getMobileDriver();
//			Dimension dimension = driver.manage().window().getSize();
//			//touchAction.press(point(10, (int) (dimension.getHeight() * .5)).moveTo(point(0, (int) (dimension.getHeight() * -.4)).release().perform();
//			touchAction.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0)))
//			.release().perform();

			if(language.contains("Hungarian"))
			{
				try {
					scrollToElementUsingExactAttributeValue(testCase, "value", "Kijelentkez�s");
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		sc.selectOptionFromSecondarySettings("Edit Account");
		optikUtils.verifyEditAccountScreen(testCase,language,inputs);

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(language.contains("Spanish"))
			{}
			else
			{

               MobileUtils.swipe(testCase,50, 800, 70, 100);
				if(sc.areFAQVisible())
				{
				sc.selectOptionFromSecondarySettings("Faq");
				optikUtils.verifyFAQScreen(testCase,language,inputs);}
			}

		}

		sc.selectOptionFromSecondarySettings("About the app");
		optikUtils.verifyAboutTheAppScreen(testCase,language,inputs);
		CoachMarkUtils.closeCoachMarks(testCase);
		optikUtils.verifyThermostatSettingsScreen(testCase,language,inputs);

		return flag;

	}






	public static String getDateSelected(int differenceBetweenMonth, int dayORMonth)
	{

		Calendar cal = Calendar.getInstance() ;
		if (dayORMonth == 2)
		{
			cal.add(Calendar.MONTH , differenceBetweenMonth) ;
		}
		else
		{
			cal.add(Calendar.DATE , differenceBetweenMonth) ;
		}

		return getDate(cal) ;
	}

	public static String getDate(Calendar cal)
	{

		return "" + cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" + cal.get(Calendar.YEAR) ;
	}

	public static int convertStringMonthInToIntegerMonth(TestCases testCase, String currentMonth)
	{
		int months;
		try {
			switch (currentMonth) {
			case "janv.":
				months = 1;
				break;
			case "Jan":
				months = 1;
				break;
			case "Feb":
				months = 2;
				break;
			case "fevr":
				months = 2;
				break;
			case "Mar":
				months = 3;
				break;
			case "mars.":
				months = 3;
				break;
			case "Apr":
				months = 4;
				break;
			case "avr.":
				months = 4;
				break;
			case "May":
				months = 5;
				break;
			case "mai":
				months = 5;
				break;
			case "Jun":
				months = 6;
				break;
			case "juin":
				months = 6;
				break;
			case "Jul":
				months = 7;
				break;
			case "juil.":
				months = 7;
				break;
			case "Aug":
				months = 8;
				break;
			case "aoÃƒÆ’Ã‚Â¯Ãƒâ€šÃ‚Â¿Ãƒâ€šÃ‚Â½t":
				months = 8;
				break;
			case "Sep":
				months = 9;
				break;
			case "sept.":
				months = 9;
				break;
			case "Oct":
				months = 10;
				break;
			case "oct.":
				months = 10;
				break;
			case "Nov":
				months = 11;
				break;
			case "nov.":
				months = 11;
				break;
			case "Dec":
				months = 12;
				break;
			case "dÃƒÆ’Ã‚Â¯Ãƒâ€šÃ‚Â¿Ãƒâ€šÃ‚Â½c.":
				months = 12;
				break;
			default:
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to match month");
				months = 99;
				break;
			}
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			months = 99;
		}
		return months;
	}

	public static String setIOSDate(TestCases testCase, TestCaseInputs inputs, int addTime)
	{

		try
		{
			String flag1 = "" ;
			String dateChange = addNMinutesToTime(inputs , addTime , "Date", testCase) ;

			String date = "", months = "" ;
			int month ;

			date = String.valueOf(Integer.parseInt(dateChange.split("-")[0])) ;

			month = Integer.parseInt(dateChange.split("-")[1]) ;
			switch (month)
			{
			case 1:
				months = "Jan" ;
				break ;
			case 2:
				months = "Feb" ;
				break ;
			case 3:
				months = "Mar" ;
				break ;
			case 4:
				months = "Apr" ;
				break ;
			case 5:
				months = "May" ;
				break ;
			case 6:
				months = "Jun" ;
				break ;
			case 7:
				months = "Jul" ;
				break ;
			case 8:
				months = "Aug" ;
				break ;
			case 9:
				months = "Sep" ;
				break ;
			case 10:
				months = "Oct" ;
				break ;
			case 11:
				months = "Nov" ;
				break ;
			case 12:
				months = "Dec" ;
				break ;
			default:
				months = " " ;
				break ;
			}

			if (!MobileUtils.isRunningOnAndroid(testCase))
			{
				String day = addNMinutesToTime(inputs , addTime , "day", testCase) ;
				if (addTime == 0)
				{
					flag1 = "Today" ;
				}
				else
				{
					flag1 = day + ", " + months + " " + date ;
				}
			}

			return flag1 ;
		}
		catch (Exception e)
		{
			return "" ;
		}

	}

	public static String addNMinutesToTime(TestCaseInputs inputs, int minutesToAdd, String diff, TestCases testCase)
	{

		/*DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
				LocationInformation locInfo = new LocationInformation(testCase, inputs);

				String timezone;

				try {
					timezone = locInfo.getTimeZone();
					String f=Character.toString(timezone.split(" ")[0].charAt(0));
					String s=Character.toString(timezone.split(" ")[1].charAt(0));
					String t=Character.toString(timezone.split(" ")[2].charAt(0));
					timezone=f+s+t;
					timezone=timezone.trim();
					GregorianCalendar date ;
					date = new GregorianCalendar(TimeZone.getTimeZone(timezone)) ;
					TimeZone.setDefault(TimeZone.getTimeZone(timezone)) ;
					date.setTimeZone(TimeZone.getTimeZone(timezone)) ;
				} catch (Exception e1) {
					e1.printStackTrace();
				}*/

		GregorianCalendar date ;
		if (inputs.isRunningOnSauceLabs())
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				 // timechange from PST to UTC  // US/Pacific to UTC
				date = new GregorianCalendar(TimeZone.getTimeZone("UTC")) ;
				TimeZone.setDefault(TimeZone.getTimeZone("UTC")) ;
				date.setTimeZone(TimeZone.getTimeZone("UTC")) ;
			}
			else
			{
				// timechange from PST to UTC
				date = new GregorianCalendar(TimeZone.getTimeZone("UTC")) ;
				TimeZone.setDefault(TimeZone.getTimeZone("UTC")) ;
				date.setTimeZone(TimeZone.getTimeZone("UTC")) ;
			}

		}
		else if (inputs.isRunningOn("Perfecto"))
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				try
				{
					date = new GregorianCalendar(getDeviceTimeZone(testCase , inputs)) ;
					TimeZone.setDefault(getDeviceTimeZone(testCase , inputs)) ;
					date.setTimeZone(getDeviceTimeZone(testCase , inputs)) ;
				}
				catch (Exception e)
				{
				}
			}
			else
			{
				try
				{
					date = new GregorianCalendar(getDeviceTimeZone(testCase , inputs)) ;
					TimeZone.setDefault(getDeviceTimeZone(testCase , inputs)) ;
					date.setTimeZone(getDeviceTimeZone(testCase , inputs)) ;
				}
				catch (Exception e)
				{
				}
			}
		}
		else
		{
			date = new GregorianCalendar() ;
		}

		Calendar startTime = Calendar.getInstance() ;
		Calendar date1 = Calendar.getInstance() ;
		String dateStr ;
		SimpleDateFormat df = null ;
		if (diff.equalsIgnoreCase("WEEK"))
		{
			df = new SimpleDateFormat("yyyy-MM-dd") ;
			startTime.add(date1.DAY_OF_WEEK , minutesToAdd) ;
		}
		else if (diff.equalsIgnoreCase("MINUTE"))
		{
			df = new SimpleDateFormat("hh:mm a") ;
			startTime.add(date1.MINUTE , minutesToAdd) ;
		}
		else if (diff.equalsIgnoreCase("HOUR"))
		{
			df = new SimpleDateFormat("hh:mm a") ;
			startTime.add(date1.HOUR , minutesToAdd) ;
		}
		else if (diff.equalsIgnoreCase("DATE"))
		{
			df = new SimpleDateFormat("dd-MM-yyyy") ;
			startTime.add(date1.DATE , minutesToAdd) ;
		}
		else if (diff.equalsIgnoreCase("DATEFORMAT"))
		{
			df = new SimpleDateFormat("yyyy-MM-dd") ;
			startTime.add(date1.DATE , minutesToAdd) ;
		}
		else if (diff.equalsIgnoreCase("day"))
		{
			startTime.add(date1.DAY_OF_WEEK , minutesToAdd) ;
			df = new SimpleDateFormat("EE" , Locale.ENGLISH) ;
		}
		dateStr = df.format(startTime.getTime()) ;
		return dateStr ;
	}
	
	public static String SetTimeToActivatePeriod(TestCaseInputs inputs, int minutesToAdd, String diff, TestCases testCase)
	{

		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
				LocationInformation locInfo = new LocationInformation(testCase, inputs);
				
				String timeToSetForActivatePeriod=statInfo.getNextPeriodTime();

				SimpleDateFormat sdf = new SimpleDateFormat("hh:mm:ss");
				
				Date dateToSet =null;
				try {
					 dateToSet = (Date)sdf.parse(timeToSetForActivatePeriod);
					
				} catch (ParseException e) {
					e.printStackTrace();
				}

				Calendar startTime = Calendar.getInstance() ;
				Calendar date1 = Calendar.getInstance() ;
				String dateStr ;
				date1.setTime(dateToSet);
				startTime.setTime(dateToSet);
				SimpleDateFormat df = null ;
				if (diff.equalsIgnoreCase("WEEK"))
				{
					df = new SimpleDateFormat("yyyy-MM-dd") ;
					startTime.add(date1.DAY_OF_WEEK , minutesToAdd) ;
				}
				else if (diff.equalsIgnoreCase("MINUTE"))
				{
					df = new SimpleDateFormat("hh:mm a") ;
					
					startTime.add(date1.MINUTE , minutesToAdd) ;
				}
				else if (diff.equalsIgnoreCase("HOUR"))
				{
					df = new SimpleDateFormat("hh:mm a") ;
					startTime.add(date1.HOUR , minutesToAdd) ;
				}
				else if (diff.equalsIgnoreCase("DATE"))
				{
					df = new SimpleDateFormat("dd-MM-yyyy") ;
					startTime.add(date1.DATE , minutesToAdd) ;
				}
				else if (diff.equalsIgnoreCase("DATEFORMAT"))
				{
					df = new SimpleDateFormat("yyyy-MM-dd") ;
					startTime.add(date1.DATE , minutesToAdd) ;
				}
				else if (diff.equalsIgnoreCase("day"))
				{
					startTime.add(date1.DAY_OF_WEEK , minutesToAdd) ;
					df = new SimpleDateFormat("EE" , Locale.ENGLISH) ;
				}
				
				dateStr = df.format(startTime.getTime()) ;
		return dateStr ;
	}
	

	public static boolean CreatePasscodeToggleButton(TestCases testCase, TestCaseInputs inputs, boolean isOn)
	{
		boolean flag = true ;
		MyAccountScreen myAcc= new MyAccountScreen(testCase);
		CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase);
		if (isOn)
		{
			if (myAcc.isUsePasscodeToggleVisible(5))
			{
				if (myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("OFF")|| myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("0")|| myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("false"))
				{
					if (myAcc.clickOnUsePasscodeToggleButton())
					{
						Keyword.ReportStep_Pass(testCase , "Toggle Button is turning on state.") ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is in off state'") ;
						flag = false ;
					}
					if (cyPop.isCreatePasscodeScreenVisible())
					{
						Keyword.ReportStep_Pass(testCase ,"Successfully switch from the 'My Account' screen to Passcode screen.") ;
						Keyword.ReportStep_Pass(testCase , "Create Passcode screen is displayed.") ;
					}
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is not in turn On state") ;
					flag = false ;
				}
			}
		}
		else
		{

			if (myAcc.isUsePasscodeToggleVisible(5))
			{
				if (myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("ON")|| myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("1")|| myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("true"))
				{
					if (myAcc.clickOnUsePasscodeToggleButton())
					{
						Keyword.ReportStep_Pass(testCase , "Toggle Button is turning off state.") ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is in ON state'") ;
						flag = false ;
					}
					if (cyPop.isForgetTextVisible())
					{
						Keyword.ReportStep_Pass(testCase ,"Successfully switch from the 'My Account' screen to Passcode screen.") ;
						Keyword.ReportStep_Pass(testCase , "Passcode screen is displayed to authenticate the user.") ;
					}
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is not in turn On state") ;
					flag = false ;
				}
			}
		}

		return flag ;
	}

	public static boolean CreatePasscodeToggleButtonWithEnteringPasscode(TestCases testCase, TestCaseInputs inputs, boolean isOn)
	{
		boolean flag = true ;
		MyAccountScreen myAcc= new MyAccountScreen(testCase);
		CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase);
		if (isOn)
		{
			if (myAcc.isUsePasscodeToggleVisible(5))
			{
				if (myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("OFF")|| myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("0")|| myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("false"))
				{
					if (myAcc.clickOnUsePasscodeToggleButton())
					{
						Keyword.ReportStep_Pass(testCase , "Toggle Button is turning on state.") ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is in off state'") ;
						flag = false ;
					}
					if (cyPop.isCreatePasscodeScreenVisible())
					{
						Keyword.ReportStep_Pass(testCase ,"Successfully switch from the 'My Account' screen to Passcode screen.") ;
						Keyword.ReportStep_Pass(testCase , "Create Passcode screen is displayed.") ;

						flag = flag && optikUtils.CreatePasscodeAfterLoginPopUp(testCase , inputs);
						flag = flag && optikUtils.VerifyPasscodeScreen(testCase , inputs,true, false);
					}
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is not in turn On state") ;
					flag = false ;
				}
			}

		}
		else
		{

			if (myAcc.isUsePasscodeToggleVisible(5))
			{
				if (myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("ON")|| myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("1")|| myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("true"))
				{
					if (myAcc.clickOnUsePasscodeToggleButton())
					{
						Keyword.ReportStep_Pass(testCase , "Toggle Button is turning off state.") ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is in ON state'") ;
						flag = false ;
					}
					if (cyPop.isForgetTextVisible())
					{
						Keyword.ReportStep_Pass(testCase ,"Successfully switch from the 'My Account' screen to Passcode screen.") ;
						Keyword.ReportStep_Pass(testCase , "Passcode screen is displayed to authenticate the user.") ;
					}
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is not in turn On state") ;
					flag = false ;
				}
			}
		}

		return flag ;
	}

	public static boolean SelectForgotAndVerifyloggedout(TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag = true ;
		CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase);
		LoginScreen ls = new LoginScreen(testCase);
		if(cyPop.isForgetTextVisible())
		{
			if (cyPop.ClickOnForgetButton())
			{
				Keyword.ReportStep_Pass(testCase , "Successfully select Forgot passcode option.") ;
				if (ls.isoptikLogoVisible(15))
				{
					Keyword.ReportStep_Pass(testCase ,"As expected, After selecting 'Forgot Passcode',the user gets logged out of the app") ;
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"After selecting 'Forgot Passcode',the user gets logged out") ;
					flag = false ;
				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Unable to select Forgot passcode option.") ;
				flag = false ;
			}
		}
		else
		{

		}
		return flag ;
	}

	public static boolean verifyTouchIdOption(TestCases testCase, TestCaseInputs inputs, boolean isOptionDisplay)
	{

		boolean flag = true ;
		MyAccountScreen myAcc= new MyAccountScreen(testCase);
		if (isOptionDisplay)
		{
			if (myAcc.isUnlockWithTouchIdLabelVisible(5))
			{
				Keyword.ReportStep_Pass(testCase , "Touch Id option is display, as device is supporting Touch Id.") ;
			}
			else
			{
				Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Touch Id option is not display, as device is supporting Touch Id") ;
				flag = false ;
			}
		}
		else
		{
			if (!myAcc.isUnlockWithTouchIdLabelVisible(5))
			{
				Keyword.ReportStep_Pass(testCase ,"Touch Id option is not display, as device is not supporting Touch Id.") ;
			}
			else
			{
				Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Touch Id option is display, as device is not supporting Touch Id") ;
				flag = false ;
			}
		}
		return flag ;
	}

	public static boolean verifyTouchIdPrompt(TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag = true ;
		MyAccountScreen myAcc= new MyAccountScreen(testCase);
		if (myAcc.isUnlockWithTouchIdToggleButtonVisible(10))
		{
			if (myAcc.enableUnlockWithTouchIdToggle())
			{
				if (myAcc.isTouchIdDisabledPopupLabelVisible(10))
				{
					Keyword.ReportStep_Pass(testCase , "'Touch ID Disabled or Add Fingerprint Unlock' prompt display.") ;
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"'Touch ID Disabled' prompt not display.") ;
					flag = false ;
				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"'Toggle button is already turn on'") ;
				flag = false ;
			}
		}
		return flag ;
	}

	public static boolean verifyTouchIdToggleButton(TestCases testCase, TestCaseInputs inputs, boolean isOn)
	{
		boolean flag = true ;
		MyAccountScreen myAcc= new MyAccountScreen(testCase);
		String getStatus=myAcc.getUnlockWithTouchIdToggleStatus();
		if (isOn)
		{
			if (myAcc.isUnlockWithTouchIdToggleButtonVisible(10))
			{

				if (getStatus.equalsIgnoreCase("ON")|| getStatus.equalsIgnoreCase("1")|| getStatus.equalsIgnoreCase("true"))
				{
					Keyword.ReportStep_Pass(testCase , "Toggle Button is in turn On state.") ;
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is not in turn On state") ;
					flag = false ;
				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION , "Toggle Button is not present'") ;
				flag = false ;
			}
		}
		else
		{
			if (myAcc.isUnlockWithTouchIdToggleButtonVisible(10))
			{
				if (getStatus.equalsIgnoreCase("OFF")|| getStatus.equalsIgnoreCase("0")|| getStatus.equalsIgnoreCase("false"))
				{
					Keyword.ReportStep_Pass(testCase , "Toggle Button is in turn off state.") ;
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is not in turn off state") ;
					flag = false ;
				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION , "Toggle Button is not present'") ;
				flag = false ;
			}
		}
		return flag ;
	}

	public static boolean verifySettingscreenNavigation(TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag = true ;
		MyAccountScreen myAcc= new MyAccountScreen(testCase);
		AppSettingScreen appset= new AppSettingScreen(testCase);
		if (myAcc.isTouchIdDisabledPopupLabelVisible(5))
		{
			if (myAcc.isSettingsButtonVisible(10))
			{
				if (myAcc.navigateToSettingsScreen())
				{
					if (!myAcc.isTouchIdDisabledPopupLabelVisible(5))
					{
						Keyword.ReportStep_Pass(testCase , "Successfully navigate on setting screen") ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Unable to navigate on setting screen") ;
						flag = false ;
					}
					if(!appset.NavigatetoMyAccountScreenfromSetttingScreen())
					{
						flag = false ;
					}
				}
			}
		}
		return flag ;
	}

	public static void verifyCameraSettingsScreen(TestCases testCase, String language) {
		boolean flag=true;

		CameraSettings cs=new CameraSettings(testCase, language);

		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "CameraSetting1");

		if(cs.navigateToCameraConfigOption())
		{
			cs.isCameraModeButtonVisible(10);
		}

		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "CameraSetting2");

		cs.navigateToManageAlertCameraButton();

	}

	public static void verifyManageAlertsCameraAppScreen(TestCases testCase, String language) {
		boolean flag=true;
		CameraSettings cs =new CameraSettings(testCase, language);
		ManageAlertsCamera ma=new ManageAlertsCamera(testCase, language);
		cs.clickOnManageAlertButton();
		//ma.isCameraStatusToggleVisible(20);

		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ManageAlerts_Camera_1");
		ma.navigateToMotionEventAlertsToggle();
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ManageAlerts_Camera_2");
		ma.clickOnBackButton();
	}

	public static void verifyCameraModeCameraScreen(TestCases testCase, String language) {
		boolean flag=true;
		CameraSettings cs =new CameraSettings(testCase, language);
		CameraMode cm=new CameraMode(testCase, language);

		cs.clickOnCameraModeButton();

		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "CameraMode");
		cm.clickOnBackButton();
	}

	public static void verifyCameraMotionDetectionScreen(TestCases testCase, String language) {
		boolean flag=true;
		CameraSettings cs =new CameraSettings(testCase, language);
		CameraMotionDetection cmd=new CameraMotionDetection(testCase, language);

		cs.clickOnMotionDetectionButton();
		cmd.isMotionDetectionToggleVisible(15);
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "MotionDetection");
		cmd.clickOnBackButton();
	}

	public static void verifyCameraSoundDetectionScreen(TestCases testCase, String language) {
		boolean flag=true;
		CameraSettings cs =new CameraSettings(testCase, language);
		CameraSoundDetection csd=new CameraSoundDetection(testCase, language);

		cs.clickOnSoundDetectionButton();

		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "SoundDetection");
		csd.clickOnBackButton();
	}

	public static void verifyCameraNightVisionScreen(TestCases testCase, String language) {
		boolean flag=true;
		CameraSettings cs =new CameraSettings(testCase, language);
		NightVision nv=new NightVision(testCase, language);

		cs.clickOnNightVisionButton();
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "CameraNightVision");
		nv.clickOnBackButton();
	}

	public static void verifyCameraVideoQualityScreen(TestCases testCase, String language) {
		boolean flag=true;
		CameraSettings cs =new CameraSettings(testCase, language);
		CameraVideoQuality cvq=new CameraVideoQuality(testCase, language);
		NightVision nv=new NightVision(testCase, language);
		cs.clickOnVideoQualityButton();
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "VideoQuality");
	  if(cvq.isBackButtonVisible(1)){
			cvq.clickOnBackButton();
		}else{
			nv.clickOnBackButton();
		}


	}

	public static void verifyCameraConfiguration(TestCases testCase, String language) {
		boolean flag=true;
		CameraSettings cs =new CameraSettings(testCase, language);
		CameraConfiguration cf=new CameraConfiguration(testCase, language);

		cs.clickOnCameraConfigButton();
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ConfigurationCamera");
		cf.clickOnBackButton();

	}


	public static boolean VerifyAppScreenBB(TestCases testCase,String language,TestCaseInputs inputs) {

		boolean flag=true;
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);
		optikUtils.verifyGlobaldrawerOptionScreen(testCase,language);


		if(language.contains("Spanish"))
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{

				MobileUtils.scrollToExactAndroid(testCase, "Geovalla");
			}

		}

		sc.selectOptionFromSecondarySettings("Geofence");
		optikUtils.verifyGeofenceScreen(testCase,language,inputs);

		//sc.selectOptionFromSecondarySettings("Vacation");
		//optikUtils.verifyVacationScreen(testCase,language,inputs);


		if((language.contains("German") || language.contains("French") || language.contains("Spanish"))&& !MobileUtils.isRunningOnAndroid(testCase))
		{

		}else
		{
			//sc.selectOptionFromSecondarySettings("Activity History");
			//optikUtils.verifyActivityHistoryScreen(testCase,language,inputs);
		}
        if(!MobileUtils.isRunningOnAndroid(testCase))
			{
        	 Schedule.SwipeDown(testCase);
			}else
			{
				TouchAction action = new TouchAction(testCase.getMobileDriver());
				action.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

			}

		sc.selectOptionFromSecondarySettings("About the app");
		optikUtils.verifyAboutTheAppScreen(testCase,language,inputs);


		optikUtils.verifyThermostatSettingsScreen(testCase,language,inputs);

		return flag;
	}



	public static boolean navigateToPrimaryCard(TestCases testCase) {
		boolean flag=true,f = true;
		int i=1;
		PrimaryCard pc=new PrimaryCard(testCase);
		Schedule sc=new Schedule(testCase);
		while(f && i<5)
		{
			if(pc.isCogIconVisible())
			{
				f=false;
				break;
			}

			if (pc.isBackButtonAvailable()) {
				pc.ClickOnBackButton();
			}  else if (sc.isBackButtonVisible()) {
				sc.clickOnBackButton();
			}
			i++;
		}
		return flag;
	}

	public static boolean waitForVacationStartDR(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			if (statInfo.isVacationRunning()) {
				Keyword.ReportStep_Pass(testCase, "Wait For Vacation Start : Vacation is already running");
				return true;
			}
			String vacationStartTime = statInfo.getVacationStartTime() + ".000Z";
			vacationStartTime = optikUtils.getDeviceEquivalentUTCTime(testCase, inputs, vacationStartTime);
			String deviceTime = "";
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-M-d'T'HH:mm a");
			try {
				deviceTime = optikUtils.getDeviceTime(testCase, inputs);
			} catch (Exception e) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
				return false;
			}
			Date startTime = vacationDateFormat.parse(vacationStartTime);
			Date currentTime = vacationDateFormat.parse(deviceTime);
			long dif = startTime.getTime() - currentTime.getTime();
			int diffInMinutes = (int) ((dif / 1000) / 60);
			if (diffInMinutes > 15) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Wait for Vacation start : Difference between vacation start time and current time is greater than 15 mins");
				return false;
			} else if (diffInMinutes < 0) {
				Keyword.ReportStep_Pass(testCase,
						"Wait for Vacation Start : Vacation start time is past current device time");
				return true;
			} else {
				FluentWait<String> fWait = new FluentWait<String>(" ");
				fWait.pollingEvery(10, TimeUnit.SECONDS);
				fWait.withTimeout(15, TimeUnit.MINUTES);
				Boolean isEventReceived = fWait.until(new Function<String, Boolean>() {
					@Override
					public Boolean apply(String a) {
						DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
						String vacationStartTime = "";
						String deviceTime = "";
						try {
							try {
								if (testCase.getMobileDriver() != null) {
									MobileUtils.isMobElementExists("id", "actionbar_activity_log_image", testCase);
								}
							} catch (NullPointerException e) {
							}
							vacationStartTime = statInfo.getVacationStartTime() + ".000Z";
							vacationStartTime = optikUtils.getDeviceEquivalentUTCTime(testCase, inputs,
									vacationStartTime);
							deviceTime = optikUtils.getDeviceTime(testCase, inputs);
						} catch (Exception e) {
							return false;
						}
						try {
							Date startTime = vacationDateFormat.parse(vacationStartTime);
							Date currentTime = vacationDateFormat.parse(deviceTime);
							long dif = startTime.getTime() - currentTime.getTime();
							int diffInMinutes = (int) ((dif / 1000) / 60);
							if (diffInMinutes != 0) {
								return false;
							} else {
								return true;
							}
						} catch (Exception e) {
							return false;
						}
					}
				});
				fWait.pollingEvery(10, TimeUnit.SECONDS);
				fWait.withTimeout(2, TimeUnit.MINUTES);
				isEventReceived = fWait.until(new Function<String, Boolean>() {
					@Override
					public Boolean apply(String a) {
						try {
							DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
							if (statInfo.isVacationRunning()) {
								return true;
							} else {
								return false;
							}
						} catch (Exception e) {
							return false;
						}
					}
				});
				if (isEventReceived) {
					Keyword.ReportStep_Pass(testCase, "Wait for Vacation To Start : Vacation is running in CHIL");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Wait for Vacation To Start : Vacation is not running in CHIL after waiting for 2 minutes");
				}
			}
		} catch (TimeoutException e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Wait for Vacation To Start : Vacation is not running in CHIL after waiting for 2 minutes");
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		return flag;
	}

	public static String convertFromCelsiusToFahrenhiet(TestCases testCase, String celsiusTemp) {
		try {
			Double temp = Double.parseDouble(celsiusTemp);
			temp = (9.0 / 5.0) * temp + 32;
			return String.valueOf(temp.intValue());
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred :"+e.getMessage());
			return " ";
		}
	}
	
	public static String convertFromCelsiusToFahrenhietDouble(TestCases testCase, String celsiusTemp) {
		try {
			Double temp = Double.parseDouble(celsiusTemp);
			temp = (9.0 / 5.0) * temp + 32;
			return String.valueOf(temp);
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred :"+e.getMessage());
			return " ";
		}
	}

	public static String roundOffTimeToTheNearest15minutes(TestCases testCase, String time) {
		String roundOffTime = " ";
		try {
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			Calendar c = Calendar.getInstance();
			c.setTime(vacationDateFormat.parse(time));
			int minutes = c.get(Calendar.MINUTE);
			int Seconds = c.get(Calendar.SECOND);
			int modMinutes = minutes % 15;
			int modSeconds= Seconds % 59 ;
			int diffMinutes = 15 - modMinutes;
			int diffSeconds = 60 - modSeconds;
			c.add(Calendar.MINUTE, diffMinutes);
			if(diffMinutes==0 && diffSeconds>5) {
			c.add(Calendar.SECOND, diffSeconds);
			}else {
				c.add(Calendar.SECOND, 0);
			}
			roundOffTime = vacationDateFormat.format(c.getTime());
		} catch (Exception e) {
			roundOffTime = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Add days to date : Error occurred : " + e.getMessage());
		}
		return roundOffTime;
	}

	public static String addDaysToDate(TestCases testCase, String date, int noOfDays) {
		String dateAfterAddition = "";
		try {
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			Calendar c = Calendar.getInstance();
			c.setTime(vacationDateFormat.parse(date));
			c.add(Calendar.DATE, noOfDays);
			dateAfterAddition = vacationDateFormat.format(c.getTime());
		} catch (Exception e) {
			dateAfterAddition = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Add days to date : Error occurred : " + e.getMessage());
		}
		return dateAfterAddition;
	}

	public static String getRandomSetPointValueBetweenMinandMax(TestCases testCase, TestCaseInputs inputs, Double max,
			Double min) {
		Random rn = new Random();
		Double setPoint = min + (max - min) * rn.nextDouble();
		return String.valueOf(setPoint.intValue());
	}

	public static String getLocationTime(TestCases testCase, TestCaseInputs inputs) {
		String time = " ";
		try {
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			Calendar date = Calendar.getInstance(TimeZone.getTimeZone(locInfo.getLocationTimeZone()));
			String ampm;
			if (date.get(Calendar.AM_PM) == Calendar.AM) {
				ampm = "AM";
			} else {
				ampm = "PM";
			}
			String hour;
			if (date.get(Calendar.HOUR) == 0) {
				hour = "12";
			} else {
				hour = String.valueOf(date.get(Calendar.HOUR));
			}
			if (Integer.parseInt(hour) < 10) {
				hour = "0" + hour;
			}
			String minute;
			if (date.get(Calendar.MINUTE) < 10) {
				minute = "0" + date.get(Calendar.MINUTE);
			} else {
				minute = String.valueOf(date.get(Calendar.MINUTE));
			}
			int month = date.get(Calendar.MONTH) + 1;
			time = String.valueOf(date.get(Calendar.YEAR) + "-" + month + "-" + date.get(Calendar.DAY_OF_MONTH) + "T"
					+ hour + ":" + minute + " " + ampm);
		} catch (Exception e) {
			time = "";
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Get Android Device Time : Error occurred : " + e.getMessage());
		}
		return time;
	}

	public static boolean VerifyAppScreenHBB(TestCases testCase,String language,TestCaseInputs inputs) {

		boolean flag=true;
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);
		
		Schedule shc=new Schedule(testCase) ;

		optikUtils.verifyGlobaldrawerOptionScreenHBB(testCase,language);

		sc.selectOptionFromSecondarySettings("Geofence");
		optikUtils.verifyGeofenceScreen(testCase,language,inputs);

		sc.selectOptionFromSecondarySettings("Activity History");
		optikUtils.verifyActivityHistoryScreen(testCase,language,inputs);

		sc.selectOptionFromSecondarySettings("Add Users");
		optikUtils.verifyAddUsersScreen(testCase,language,inputs);

		/*sc.selectOptionFromSecondarySettings("Location Address");
		optikUtils.verifyLocationAddressScreen(testCase,language,inputs);*/
		Keyword.ReportStep_Pass(testCase,
				"****************************************************************************************"
				+ "\n\n\n\n"
				+"This Build Page Loading Screen issue Obsereved on Edit page due to skip Location Address"
				+"\n\n\n\n"
				+"****************************************************************************************"
				);


        /*sc.selectOptionFromSecondarySettings("Edit Account");
		optikUtils.verifyEditAccountScreen(testCase,language,inputs);*/
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
      Schedule.SwipeDown(testCase);}
		else
		{TouchAction action = new TouchAction(testCase.getMobileDriver());
			action.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

		}


		sc.selectOptionFromSecondarySettings("About the app");
		optikUtils.verifyAboutTheAppScreen(testCase,language,inputs);


		/*sc.selectOptionFromSecondarySettings("Feedback");
				optikUtils.verifyFeedbackScreen(testCase,language);		*/

		optikUtils.verifyThermostatSettingsScreenHBB(testCase,language,inputs);

		return flag;
	}




	public static boolean verifyGlobaldrawerOptionScreenHBB(TestCases testCase, String language) {
		boolean flag=true;
		Dashboard ds = new Dashboard(testCase,language);
		ds.clickOnGlobalDrawerButton();
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "GlobalDrawer_HBB");
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{

			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			 /*//CODE DEPRECATED touchAction.press((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5)).moveTo( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))
			.release().perform();*/
			touchAction.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))).release().perform();

			Schedule.SwipeDown(testCase);
			if(language.contains("Hungarian"))
			{
				try {
					scrollToElementUsingExactAttributeValue(testCase, "value", "Kijelentkez�s");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}


		}else
		{
			if(language.contains("French"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "DÃƒÂ©connexion");
			}
			else if(language.contains("Italian"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Disconnessione");
			}
			else if(language.contains("English"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Logout");
			}
			else if(language.contains("German"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Abmelden");
			}
			else if(language.contains("Spanish"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Cerrar sesiÃ¯Â¿Â½n");
			}
			else if(language.contains("Dutch"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Afmelden");
			}
			else if(language.contains("PortugueseBR"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Cerrar sesiÃ¯Â¿Â½n");
			}else if(language.contains("PortuguesePL"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Terminar sessÃ¯Â¿Â½o");
			}else
			{
				/*touchAction.press(350, 900).waitAction().moveTo(250, 250).release().perform();
				touchAction.press(350, 900).waitAction().moveTo(250, 250).release().perform();*/

				touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();
				touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

			}
		}

		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "Globaldrawer_2");
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{

			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			// touchAction.press(10, (int) (dimension.getHeight() * .5)).moveTo(0, (int) (dimension.getHeight() * -.4)).release().perform();
			touchAction.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * -.4))).release().perform();

			if(language.contains("Hungarian"))
			{
				try {
					scrollToElementUsingExactAttributeValue(testCase, "value", "Geofencing");
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		}else
		{
			if(language.contains("Spanish"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Geovalla");


				if(!MobileUtils.isRunningOnAndroid(testCase))
				{
					CustomDriver driver = testCase.getMobileDriver();

					Dimension dimension = driver.manage().window().getSize();
					/*touchAction.press(10, (int) (dimension.getHeight() * .5)).moveTo(0, (int) (dimension.getHeight() * -.4))
					.release().perform();*/
					touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4))).release().perform();
				}else
				{

				}

			}

			else if(language.contains("PortuguesePL")||language.contains("PortugueseBR")||language.contains("Polish")||language.contains("Slovakian")||language.contains("Czech")||language.contains("Hungarian")||language.contains("Romanian"))
			{

				TouchAction action = new TouchAction(testCase.getMobileDriver());

				CustomDriver driver = testCase.getMobileDriver();
				Dimension dimension = driver.manage().window().getSize();
				try {
					 /*CODE DEPRECATED action.press(dimension.getWidth()/2, dimension.getHeight()/2).waitAction().moveTo(dimension.getWidth()-50, dimension.getHeight()-50).release().perform();
*/
					action.press(point(dimension.getWidth()/2, dimension.getHeight()/2)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(dimension.getWidth()-50, dimension.getHeight()-50)).release().perform();

				} catch (Exception e)
				{

				}

			}
			else
			{
				MobileUtils.scrollToExactAndroid(testCase, "Geofence");
			}
		}
		return flag;

	}


	public static boolean verifyThermostatSettingsScreenHBB(TestCases testCase, String language,TestCaseInputs inputs) {
		boolean flag=true;
		Dashboard ds = new Dashboard(testCase,language);
		PrimaryCard pc=new PrimaryCard(testCase);
		ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase, language);
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);
		TouchAction action = new TouchAction(testCase.getMobileDriver());
		if((!MobileUtils.isRunningOnAndroid(testCase)) && !language.contains("English"))
		{
			CoachMarkUtils.closeCoachMarksLocal(testCase,inputs);
		}else
		{
			CoachMarkUtils.closeCoachMarks(testCase);

		}
        ds.isWeatherIconVisible(10);

		ds.clickOnDevice();
		if((!MobileUtils.isRunningOnAndroid(testCase)) && !language.contains("English"))
		{
			CoachMarkUtils.closeCoachMarksLocal(testCase,inputs);
		}else
		{
			CoachMarkUtils.closeCoachMarks(testCase);

		}

		pc.clickOnCogIcon();

		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ThermostatSettingsHBB");

		ts.ClickOnManageAlerts();
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "AlertsAndNotificationHBB");
		sc.clickOnBackButton();
		if(language.contains("French_CA") || language.contains("English"))
		{
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(sc.areFilterReminderVisible()){
				sc.selectOptionFromSecondarySettings("Set Filter Reminder");
				optikUtils.verifySetFilterReminderScreen(testCase,language,inputs);
			}
				
		}
		else
		{
			if(MobileUtils.isMobElementExists("xpath", "//*[contains(@value,'Filter Reminder')]", testCase))
			{
				MobileUtils.clickOnElement(testCase, "xpath", "//*[contains(@value,'Filter Reminder')]");
				optikUtils.verifySetFilterReminderScreen(testCase,language,inputs);
			}
			
		}


		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(language.contains("French_CA"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Configuration du thermostat");
			}
			else
			{
				MobileUtils.scrollToExactAndroid(testCase, "Thermostat Configuration");
			}
		}
		else
		{
			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			action.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4))).release().perform();
			action.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4))).release().perform();


		}
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ThermostatSettingsHBB2");
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{

			/*action.press(350, 900).waitAction().moveTo(250, 250).release().perform();*/

			action.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

			if(language.contains("Spanish"))
			{
				ts.clickOnTheromoStatConfigButton("Spanish");
			}
			else  if(language.contains("PortugueseBR"))
			{
				ts.clickOnTheromoStatConfigButton("PortugueseBR");
			}
			else  if(language.contains("PortuguesePL"))
			{
				ts.clickOnTheromoStatConfigButton("PortuguesePL");
			}
			else if(language.contains("French"))
			{
				ts.clickOnTheromoStatConfigButton("French");
			}

			else if(language.contains("Dutch"))
			{
				ts.clickOnTheromoStatConfigButton("Dutch");
			}else
			{
				ts.navigateToThermostatConfigurationPage();
			}

		}
		else
		{
			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			//action.press(10, (int) (dimension.getHeight() * .5)).moveTo(0, (int) (dimension.getHeight() * -.4)).release().perform();

			action.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5))).moveTo(point( (int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .0))).release().perform();


			if(language.contains("Hungarian"))
			{
				try {

					scrollToElementUsingExactAttributeValue(testCase, "value", "Termoszt�t konfigur�l�sa");
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			ts.navigateToThermostatConfigurationPage();
		}

		optikUtils.VerifyScreenLocalization(testCase, "ThermostatConfigurationHBB");

		sc.clickOnBackButton();
		sc.clickOnBackButton();
		sc.clickOnBackButton();
		return flag;
	}

	public static String[] getAllMessages(TestCases testCase) throws Exception {
		String msgs[] = new String[1];
		try {
			ActivityHistoryScreen ah=new ActivityHistoryScreen(testCase);
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				if (ah.isMessagesDisplayed())
				{
					List<WebElement> messages = ah.getMessagesList();
					msgs = new String[messages.size()];
					int i = 0;
					List<WebElement> messageDetails = ah.getMessagesList();
					if(i<messages.size())
					{
						for (WebElement details : messageDetails) {
							msgs[i] = details.getAttribute("text");
							i++;
						}
					}
				} else {
					throw new Exception("No Messages found");
				}
			} else {
				if (ah.isMessagesDisplayed()) {

					List<WebElement> newalerts = ah.getMessagesList();
					msgs = new String[newalerts.size()];
					int i = 0;
					for(WebElement ele :newalerts){
						msgs[i] = ele.getAttribute("value");
						i++;
					}

				} else {
					throw new Exception("No Alerts found");
				}
			}
		} catch (Exception e) {
			throw new Exception(e.getMessage());
		}
		return msgs;
	}

	public static boolean verifyVacationStatusOnPrimaryCard(TestCases testCase, TestCaseInputs inputs, boolean isOn) {
		boolean flag = true;
		String adHocText = "";
		String endDate = "";
		String endDateToBeDisplayed = "";
		AdhocScreen adhocscreen= new AdhocScreen(testCase);
		DHW dhw = new DHW(testCase);
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		if (isOn) {
			try {
				if(adhocscreen.isAdhocButtonVisible(10))
				{
					adHocText= adhocscreen.getAdhocButtonText();
				}
				else
				{
					if(dhw.isStatusDetailVisible(15))
					{
					adHocText = dhw.getStatusDetailText();
					}
				}

			} catch (NoSuchElementException e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Verify Vacation Status On Primary Card : Could not find Ad Hoc Button on Primary Card");
				return flag;
			}
			endDate = statInfo.getVacationEndTime();
			SimpleDateFormat adHocDateFormat = new SimpleDateFormat("MMM dd");
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			try {
				endDateToBeDisplayed = adHocDateFormat.format(vacationDateFormat.parse(endDate));
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,"Error Occored : " + e.getMessage());
			}
			if (adHocText.equalsIgnoreCase("Vacation until " + endDateToBeDisplayed.split("\\s+")[1] + " "+ endDateToBeDisplayed.split("\\s+")[0])||adHocText.equalsIgnoreCase("Vacation until " + endDateToBeDisplayed.split("\\s+")[0] + " "+ endDateToBeDisplayed.split("\\s+")[1])||adHocText.equalsIgnoreCase("Holiday until " + endDateToBeDisplayed.split("\\s+")[1] + " "+ endDateToBeDisplayed.split("\\s+")[0])||adHocText.equalsIgnoreCase("holiday until " + endDateToBeDisplayed.split("\\s+")[0] + " "+ endDateToBeDisplayed.split("\\s+")[1])) {
				Keyword.ReportStep_Pass(testCase,"Verify Vacation Status On Primary Card : Vacation/Holiday is on in the primary card and displayed end date is displayed correctly");
			} else {
				if (adHocText.toUpperCase().contains("Vacation")||adHocText.toUpperCase().contains("Holiday")) {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Verify Vacation Status On Primary Card : Vacation/Holiday is on in the primary card but displayed end date is not correct");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Verify Vacation Status On Primary Card : Vacation/Holiday is not on in the primary card");
				}
			}
		} else {
			if (adhocscreen.isAdhocButtonVisible(5)) {
				if (adhocscreen.getAdhocButtonText().contains("VACATION")) {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Verify Vacation Status on Primary Card : Vacation is on in the primary card");
				} else {
					Keyword.ReportStep_Pass(testCase,"Verify Vacation Status On Primary Card : Vacation is off in the Primary Card");
				}

			} else {
				Keyword.ReportStep_Pass(testCase,"Verify Vacation Status On Primary Card : Vacation is off in the Primary Card");
			}
		}
		return flag;
	}

	public static boolean endOrCancelGuideMessage(TestCases testCase, boolean selectEnd) {
		boolean flag = true;
		VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);
		if (selectEnd) {
			flag = flag && vacaScreen.ClickOnVacationEndButton();
		} else if (!selectEnd) {
			flag = flag && vacaScreen.ClickOnVacationCancelButton();
		}
		return flag;
	}

	public static boolean verifyGuideMessage(TestCases testCase) {
		boolean flag = true;
		VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);
		String alertTitle;
		String alertMessage;
		String deviceAlertTitle;
		String deviceAlertMessage;
		alertTitle = "End Vacation Mode?";
		if (MobileUtils.isRunningOnAndroid(testCase)) {
			alertMessage = "Tap \u2018End\u2019 to stop your vacation settings and resume your normal schedule.";
		} else {
			alertMessage = "Tap 'End' to stop your vacation settings and resume your normal schedule.";
		}
		deviceAlertTitle = vacaScreen.getEndVacationAlertTitleText();
		deviceAlertMessage = vacaScreen.getEndVacationMessage();

		if (deviceAlertTitle.equals(alertTitle)) {
			Keyword.ReportStep_Pass(testCase, "Verify Guide Message : Guide message alert title displayed correctly");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Verify Guide Message : Guide message alert not displayed correctly. Displayed message : "
					+ deviceAlertTitle);
		}
		if (alertMessage.equals(deviceAlertMessage)) {
			Keyword.ReportStep_Pass(testCase, "Verify Guide Message : Guide message displayed correctly");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Verify Guide Message : Guide message not displayed correctly. Displayed message : "+ deviceAlertMessage);
		}
		return flag;
	}


	public static boolean verifyVacationSwitchStatus(TestCases testCase, boolean isOn)
	{
		boolean flag = true;
		VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);
		String vacationSatus="";
		if (vacaScreen.isUpdateVacationSettingsSwitchVisible())
		{
			vacationSatus=vacaScreen.getVacationSettingsToggleStatus();
			if (isOn) {
				if(vacationSatus.equalsIgnoreCase("1")||vacationSatus.equalsIgnoreCase("ON")||vacationSatus.equalsIgnoreCase("true"))
				{
					Keyword.ReportStep_Pass(testCase,"Verify Vacation Switch Status(ON) : Vacation switch is in ON state");
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Verify Vacation Switch Status(ON) : Vacation switch is not in ON state");
				}
			} else if (!isOn) {
				if(vacationSatus.equalsIgnoreCase("0")||vacationSatus.equalsIgnoreCase("OFF")||vacationSatus.equalsIgnoreCase("false"))
				{
					Keyword.ReportStep_Pass(testCase,"Verify Vacation Switch Status(OFF) : Vacation switch is in OFF state");
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Verify Vacation Switch Status(OFF) : Vacation switch is not in OFF state");
				}
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Verify Vacation Switch : Vacation switch not present");
		}
		return flag;
	}

	public static boolean navigateToVacationSettings(TestCases testCase) {
		boolean flag = true;
		VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);
		if (vacaScreen.isUpdateVacationSettingsSwitchVisible()) {
			Keyword.ReportStep_Pass(testCase,"Navaigate to Vacation Settings : App is already on vaction settings page");
			return flag;
		} else {
			if (navigatetoGlobalDrwaerOption(testCase , "VACATION")) {
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Navigate to Vacation Settings : Vacation option not available after clicking on global drawer button");
			}
			if (vacaScreen.isUpdateVacationSettingsSwitchVisible()) {
				Keyword.ReportStep_Pass(testCase,"Navigate to Vacation Settings : Successfully navigated to vacation settings page");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Navigate to Vacation Settings : Failed to navigate to vacation settings page");
			}
		}
		return flag;
	}

	public static boolean toggleVacationSwitch(TestCases testCase, boolean turnOn) {
		boolean flag = true;
		String getStatus="";
		VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);
		getStatus=vacaScreen.getVacationSettingsToggleStatus();
		if (turnOn) {

			if(getStatus.equalsIgnoreCase("ON")||getStatus.equalsIgnoreCase("1")||getStatus.equalsIgnoreCase("true"))
			{
				Keyword.ReportStep_Pass(testCase,"Toggle Vacation Switch (ON) : Vacation switch is already in ON state");
			}
			else
			{
				vacaScreen.clickOnVacationSettingToggle();
				getStatus=vacaScreen.getVacationSettingsToggleStatus();
				if(getStatus.equalsIgnoreCase("ON")||getStatus.equalsIgnoreCase("1")||getStatus.equalsIgnoreCase("true"))
				{
					Keyword.ReportStep_Pass(testCase,"Toggle Vacation Switch (ON) : Vacation switch toggled to ON state");
				}
				else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Toggle Vacation Switch(ON) : Vacation switch is not turned on in vacation settings after clicking on vacation switch");
				}
			}
		} else if (!turnOn) {
			if(getStatus.equalsIgnoreCase("OFF")||getStatus.equalsIgnoreCase("0")||getStatus.equalsIgnoreCase("false"))
			{
				Keyword.ReportStep_Pass(testCase,"Toggle Vacation Switch (OFF) : Vacation switch is already in OFF state");
			}
			else
			{
				vacaScreen.clickOnVacationSettingToggle();
			}
		}
		return flag;
	}

	public static int getTimeDiffenceInHoursBetweenFromTimeAndToTimeAPI(TestCases testCase, TestCaseInputs inputs) {
		int noOfHours = 0;	
		
		try {
			SimpleDateFormat date12Format;
			SimpleDateFormat date24Format;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			SimpleDateFormat displayedDateFormat = new SimpleDateFormat("EEE MMM dd, yyyy");
			String fromTime = " ";
			Date displayedFromDateAndTime;
			Date displayedToDateAndTime;
			String toTime = " ";
			CHILUtil cUtil = new CHILUtil(inputs);
			
			JSONObject obj = cUtil.getVacationTime(testCase);
			System.out.println("obj: "+obj);
			
			Date startDate = vacationDateFormat.parse(cUtil.getVacationTime(testCase).getString("vacationStart"));// Set start date
			Date endDate   = vacationDateFormat.parse(cUtil.getVacationTime(testCase).getString("vacationEnd"));// Set end date

			long diff  = endDate.getTime() - startDate.getTime();
			noOfHours = (int) (diff / (60 * 60 * 1000));

		} catch (Exception e) {
			noOfHours = -1;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Get Time Difference Between To and From Time : Error occurred : " + e.getMessage());
		}
		return noOfHours;
	}
	
	public static int getTimeDiffenceInHoursBetweenFromTimeAndToTime(TestCases testCase) {
		int noOfHours = 0;
		try {
			SimpleDateFormat date12Format;
			SimpleDateFormat date24Format;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			SimpleDateFormat displayedDateFormat = new SimpleDateFormat("EEE MMM dd, yyyy");
			String fromTime = " ";
			Date displayedFromDateAndTime;
			Date displayedToDateAndTime;
			String toTime = " ";
			VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				date12Format = new SimpleDateFormat("hh:mm a");
				date24Format = new SimpleDateFormat("HH:mm:ss");
				String displayedFromTime = vacaScreen.getVacationFromTimeAndroidValue();
				testCase.getTestCaseInputs().setInputValue("startTime" , displayedFromTime);
				if (displayedFromTime.toUpperCase().contains("AM") || displayedFromTime.toUpperCase().contains("PM")) {
					fromTime = date24Format.format(date12Format.parse(displayedFromTime));
				} else {
					displayedFromTime=displayedFromTime.trim();
					displayedFromTime=displayedFromTime.concat(":00");
					fromTime = date24Format.format(date24Format.parse(displayedFromTime));
				}
				String displayedFromDate = vacaScreen.getVacationFromDateAndroidValue();
				String fromDate = dateFormat.format(displayedDateFormat.parse(displayedFromDate));
				displayedFromDateAndTime = vacationDateFormat.parse(fromDate + "T" + fromTime);
				String displayedToTime = vacaScreen.getVacationToTimeAndroidValue();
				testCase.getTestCaseInputs().setInputValue("endTime" , displayedToTime);
				if (displayedToTime.toUpperCase().contains("AM") || displayedToTime.toUpperCase().contains("PM")) {
					toTime = date24Format.format(date12Format.parse(displayedToTime));
				} else {
					displayedToTime=displayedToTime.trim();
					displayedToTime=displayedToTime.concat(":00");
					toTime = date24Format.format(date24Format.parse(displayedToTime));
				}
				String displayedToDate = vacaScreen.getVacationToDateAndroidValue();
				String toDate = dateFormat.format(displayedDateFormat.parse(displayedToDate));
				displayedToDateAndTime = vacationDateFormat.parse(toDate + "T" + toTime);
			} else {
				date12Format = new SimpleDateFormat("EEE, MMM dd, yyyy, h:mm a");
				date24Format = new SimpleDateFormat("EEE, MMM dd, yyyy, HH:mm");
				String fromDateAndTime = vacaScreen.getVacationFromDateTimeIOSValue();
				String toDateAndTime = vacaScreen.getVacationToDateTimeIOSValue();
				testCase.getTestCaseInputs().setInputValue("startTime" , fromDateAndTime);
				testCase.getTestCaseInputs().setInputValue("endTime" , toDateAndTime);
				if ((fromDateAndTime.toUpperCase().contains("AM") || fromDateAndTime.toUpperCase().contains("PM"))
						&& (toDateAndTime.toUpperCase().contains("AM") || toDateAndTime.toUpperCase().contains("PM"))) {
					displayedFromDateAndTime = date12Format.parse(fromDateAndTime);
					displayedToDateAndTime = date12Format.parse(toDateAndTime);
				} else {
					displayedFromDateAndTime = date24Format.parse(fromDateAndTime);
					displayedToDateAndTime = date24Format.parse(toDateAndTime);
				}
			}
			long dif = displayedToDateAndTime.getTime() - displayedFromDateAndTime.getTime();
			noOfHours = (int) (dif / (60 * 60 * 1000));
		} catch (Exception e) {
			noOfHours = -1;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Get Time Difference Between To and From Time : Error occurred : " + e.getMessage());
		}
		return noOfHours;
	}

	public static boolean selectDeviceFromDashBoard(TestCases testCase, String deviceToBeSelected) {
		boolean flag = true;
		Dashboard pc = new Dashboard(testCase);
		flag=pc.ClickOnDevicePresentOnDashboard(deviceToBeSelected);
		return flag;
	}
	public static boolean WaitForVacationToStart(TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag=true;
		VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);
		try
		{
			String time12hours=inputs.getInputValue("startTime").toString();
			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				time12hours=time12hours.split("\\,")[3].trim();
				if(!time12hours.toUpperCase().contains("AM".toUpperCase())||!time12hours.toUpperCase().contains("PM".toUpperCase()))
				{
					SimpleDateFormat date12Format = new SimpleDateFormat("hh:mm a");
					SimpleDateFormat date24Format = new SimpleDateFormat("HH:mm");
					try
					{
						time12hours = date12Format.format(date24Format.parse(time12hours));
					} catch (ParseException e)
					{

					}
				}
			}
			else
			{
				if(!time12hours.toUpperCase().contains("M".toUpperCase()))
				{
					SimpleDateFormat date12Format = new SimpleDateFormat("hh:mm a");
					SimpleDateFormat date24Format = new SimpleDateFormat("HH:mm");
					try
					{
						time12hours = date12Format.format(date24Format.parse(time12hours));
					} catch (ParseException e)
					{

					}
				}
			}
			int targetedHour = Integer.parseInt(time12hours.toString().split(":")[0]) ;
			String endTime = addNMinutesToTime(inputs, 0, "minute", testCase) ;
			int currentMin = Integer.parseInt(endTime.split(":")[1].split(" ")[0]) ;
			int currentHour = Integer.parseInt(endTime.split(":")[0]) ;
			int targetedMin = Integer.parseInt(time12hours.toString().split(":")[1].split(" ")[0]) ;
			int s1,wait ;
			if (targetedHour > currentHour)
			{
				s1 = 60 - currentMin ;
				wait = s1 + targetedMin ;
			}
			else
			{
				wait = targetedMin - currentMin;
				if (wait <= 0)
				{
					wait = 0;
				}
			}
			String getCurrentTime12HRFormat="";
			try
			{
				for(int i=0;i<wait;i++)
				{
					vacaScreen.isVacationSwitchTextVisible(60);
					getCurrentTime12HRFormat = addNMinutesToTime(inputs, 0, "minute", testCase);
					Keyword.ReportStep_Pass(testCase, "Current time :" + getCurrentTime12HRFormat);
				}
				vacaScreen.isVacationSwitchTextVisible(30);

			}
			catch (Exception ex)
			{
				return false;
			}
		}
		catch(Exception e)
		{
			return false;
		}
		return flag;
	}
	public static boolean turnOffVacationFromPrimaryCard(TestCases testCase) {
		boolean flag = true;
		AdhocScreen adhocscreen= new AdhocScreen(testCase);
		flag = flag && adhocscreen.clickOnAdhocButton();
		flag = flag && adhocscreen.clickOnEndVacation();
		return flag;
	}
	public static String executeADBCommand(TestCases testCase, String cmd) {
		String output = " ";
		try {
			String[] tempArr = cmd.split(" ");
			String[] cmdArray;
			List<String> cmdList = new ArrayList<String>();
			cmdList.add(SuiteConstants.getConstantValue(SuiteConstantTypes.PROJECT_SPECIFIC, "LOCAL_ADB_PATH"));
			for (int i = 1; i < tempArr.length; i++) {
				cmdList.add(tempArr[i]);
			}
			cmdArray = cmdList.toArray(new String[cmdList.size()]);
			int n = tempArr.length - 1;
			String[] commandArr = new String[n];
			System.arraycopy(tempArr, 1, commandArr, 0, n);
			Runtime run = Runtime.getRuntime();
			Process pr = null;

			// pr = run.exec(new
			// String[]{"/usr/local/Cellar/android-sdk/24.4.1_1/bin/adb"},commandArr);
			pr = run.exec(cmdArray);
			BufferedReader buf = new BufferedReader(new InputStreamReader(pr.getInputStream()));
			String temp;
			while ((temp = buf.readLine()) != null)
				output += temp;
		} catch (IOException e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "IO Exception caused by " + e.getMessage());
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		return output;
	}
	public static String getAndroidDeviceTime(TestCases testCase) {
		String time = " ";
		String cmd = "adb shell date";
		time = executeADBCommand(testCase, cmd);
		return time;
	}

	public static String convertTimetoUTCTime(TestCases testCase, String time) {
		String convertedTime = " ";
		try {
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			Date date = vacationDateFormat.parse(time);
			vacationDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
			convertedTime = vacationDateFormat.format(date);
		} catch (Exception e) {
			convertedTime = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,"Convert Time to UTC Time : Error occurred : " + e.getMessage());
		}
		return convertedTime;
	}

	public static boolean verifyThermostatStatus(TestCases testCase, TestCaseInputs inputs, String scheduleType) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			AdhocScreen adhocscreen= new AdhocScreen(testCase);
			PrimaryCard pc = new PrimaryCard(testCase);
			if(!statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger"))
			{
				String status = "";
				String appStatus = "";
				if (scheduleType.equalsIgnoreCase("geofence")) {
					status = "Using " + statInfo.getCurrentSchedulePeriod() + " Settings";
				} else if (scheduleType.equalsIgnoreCase("time")) {
					status = "Following Schedule";
				} else if ((scheduleType.equalsIgnoreCase("off"))) {
					status = "Schedule Off";
				}
				else if ((scheduleType.equalsIgnoreCase("No schedule"))) {
					status = "No schedule";
				}
				else if ((scheduleType.equalsIgnoreCase("no adhoc text"))) {
					status = "";
				}
				else if ((scheduleType.equalsIgnoreCase("using home settings"))) {
					status = "using home settings";
				}
				else if ((scheduleType.equalsIgnoreCase("using away settings"))) {
					status = "using away settings";
				}
				else if ((scheduleType.equalsIgnoreCase("using sleep settings"))) {
					status = "using sleep settings";
				}
				if (statInfo.getThermoStatMode().equalsIgnoreCase("Off")) {
					Keyword.ReportStep_Pass(testCase, "Schedule status is not shown when system mode if OFF");
					return flag;
				}
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					if (pc.isScheduleStatusVisible(20)) {
						appStatus = pc.getScheduleStatus();
					} else {
						if (adhocscreen.isAdhocButtonVisible(10)) {
							appStatus = adhocscreen.getAdhocButtonText();
						}
					}

				} else {
					if (pc.isScheduleStatusVisible(20)) {
						appStatus = pc.getScheduleStatus();
					} else if (adhocscreen.isAdhocButtonVisible(10)) {
						appStatus = adhocscreen.getAdhocButtonText();
					}
				}
				if ((scheduleType.equalsIgnoreCase("no adhoc text"))) {
					if (appStatus.equalsIgnoreCase(status)) {
						Keyword.ReportStep_Pass(testCase,
								"Verify Thermostat Status : Status : Adhoc text is not displayed");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Verify Thermostat Status : Status : Adhoc text is displayed i.e "+appStatus);
					}
				}
				else if (appStatus.equalsIgnoreCase(status)) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Thermostat Status : Status : " + status + " is correctly displayed");
				} else {
					if(status.equalsIgnoreCase("using home settings") && appStatus.equalsIgnoreCase("using sleep settings"))
					{
						Keyword.ReportStep_Pass(testCase,
								"Verify Thermostat Status : User is in Home but sleep period is running, So Status : " + appStatus + " is correctly displayed.");
					}
					else
					{
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Verify Thermostat Status : Status: " + status + " is not displayed correctly");
					}
				}
			}
			else
			{
				Keyword.ReportStep_Pass(testCase,
						"Verify Thermostat Status : Adhoc status not displaed for HBB Account.");
			}
		} catch (NoSuchElementException e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Thermostat Schedule : No Such Element Exception. Could not find Thermostat Schedule Status");
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Thermostat Schedule : Error occurred : " + e.getMessage());
		}


		return flag;
	}

	public static boolean waitForVacationStart(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		try {
			AdhocScreen adhocscreen= new AdhocScreen(testCase);
			Dashboard pc = new Dashboard(testCase);
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			if (statInfo.isVacationRunning()) {
				Keyword.ReportStep_Pass(testCase, "Wait For Vacation Start : Vacation is already running");
				return true;
			}
			String vacationStartTime = statInfo.getVacationStartTime();
			String deviceTime = "";
			final SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			final SimpleDateFormat androidDateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				try {
					String time="";
					if(inputs.isRunningOn("Saucelab"))
					{
						time = vacationDateFormat.format(androidDateFormat.parse(getCurrentUTCTime(testCase)));
					}
					else
					{
						time = vacationDateFormat.format(androidDateFormat.parse(getAndroidDeviceTime(testCase).trim()));
					}
					deviceTime = convertTimetoUTCTime(testCase, time);
				} catch (Exception e) {

				}

			} else {
				deviceTime =  getIOSSimulatorTime(testCase,inputs);
			}
			Date startTime = vacationDateFormat.parse(vacationStartTime);
			Date currentTime = vacationDateFormat.parse(deviceTime);
			long dif = startTime.getTime() - currentTime.getTime();
			int diffInMinutes = (int) ((dif / 1000) / 60);
			if (diffInMinutes > 15) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Wait for Vacation start : Differnece between vacation start time and current time is greater than 15 mins");
				return false;
			} else if (diffInMinutes < 0) {
				Keyword.ReportStep_Pass(testCase,"Wait for Vacation Start : Vacation start time is past current device time");
				return true;
			} else {
				FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(testCase.getMobileDriver());
				fWait.pollingEvery(10, TimeUnit.SECONDS);
				fWait.withTimeout(15, TimeUnit.MINUTES);
				Boolean isEventReceived = fWait.until(new Function<CustomDriver, Boolean>() {
					@Override
					public Boolean apply(CustomDriver driver) {
						DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
						String vacationStartTime = statInfo.getVacationStartTime();
						String deviceTime = "";
						if (MobileUtils.isRunningOnAndroid(testCase)) {
							try {
								adhocscreen.isCancelVisible(20);
								String time = vacationDateFormat.format(androidDateFormat.parse(getAndroidDeviceTime(testCase).trim()));
								deviceTime = convertTimetoUTCTime(testCase, time);
							} catch (Exception e) {
							}

						} else {
							adhocscreen.isCancelVisible(20);
							deviceTime =  getIOSSimulatorTime(testCase,inputs);
						}
						try {
							Date startTime = vacationDateFormat.parse(vacationStartTime);
							Date currentTime = vacationDateFormat.parse(deviceTime);
							long dif = startTime.getTime() - currentTime.getTime();
							int diffInMinutes = (int) ((dif / 1000) / 60);
							if (dif > 0) {
								diffInMinutes = diffInMinutes + 1;
							}
							if (diffInMinutes != 0) {
								return false;
							} else {
								return true;
							}
						} catch (Exception e) {
							return false;
						}
					}
				});
				fWait.pollingEvery(10, TimeUnit.SECONDS);
				fWait.withTimeout(2, TimeUnit.MINUTES);
				isEventReceived = fWait.until(new Function<CustomDriver, Boolean>() {
					@Override
					public Boolean apply(CustomDriver driver) {
						DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
						String text = "";
						if (adhocscreen.isAdhocButtonVisible(2)) {
							text=adhocscreen.getAdhocButtonText();
						} else if (pc.isToolBarTextVisible(5)) {
							text=pc.getToolBarText();
						}
						try {
							if (statInfo.isVacationRunning() && text.toUpperCase().contains("VACATION")) {
								return true;
							} else {
								return false;
							}
						} catch (NoSuchElementException e) {
							return false;
						} catch (Exception e) {
							return false;
						}
					}
				});
				if (isEventReceived) {
					Keyword.ReportStep_Pass(testCase, "Wait for Vacation Active : Vacation is running in CHIL and UI");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Wait for Vacation Active : Vacation is not running in CHIL and UI after waiting for 2 minutes");
				}
			}
		} catch (Exception e) {

		}
		return flag;
	}

	public static boolean selectLocationFromDashBoard(TestCases testCase, String locationToBeSelected) {
		boolean flag = true;
		Dashboard ds= new Dashboard(testCase);
		OSPopUps os = new OSPopUps(testCase);
		if (MobileUtils.isRunningOnAndroid(testCase)) {
			if(os.isIgnoreButtonVisible(3))
			{
				os.clickOnIgnoreButton();
			}
		}
		if (ds.getLocationIconSpinnerElement() != null) {
			if (!MobileUtils.isRunningOnAndroid(testCase)) {
				if (ds.isLocationNameIOSVisible(5)) {
					if (ds.getLocationNameIOS().contains(locationToBeSelected)) {
						Keyword.ReportStep_Pass(testCase,"Select Location From DashBoard : User is already in location : "+ locationToBeSelected);
					} else {
						ds.clickOnLocationIconSpinned();

						if (ds.ClickOnLocationName(locationToBeSelected)) {
							Keyword.ReportStep_Pass(testCase,"Select Location From DashBoard : Successfully selected location : "+ locationToBeSelected);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Select Location From DashBoard : Failed to select location : "+ locationToBeSelected);
						}
					}
				}
			} else {
				if (ds.getLocationIconSpinnerText().equalsIgnoreCase(locationToBeSelected)) {
					Keyword.ReportStep_Pass(testCase,"Select Location From DashBoard : User is already in location : " + locationToBeSelected);
				} else {
					boolean f = false;
					flag = flag && ds.clickOnLocationIconSpinned();
					List<WebElement> locNames = ds.getLocationDropDownElement();
					for (WebElement ele : locNames) {
						if (ele.getText().equalsIgnoreCase(locationToBeSelected)) {
							ele.click();
							f = true;
							break;
						}
					}
					if (f) {
						Keyword.ReportStep_Pass(testCase,"Select Location From DashBoard : Successfully selected location : "+ locationToBeSelected);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Select Location From DashBoard : Failed to select location : " + locationToBeSelected);
					}
				}
			}
		}
		else
		{
			flag=false;
		}
		return flag;
	}
	public static boolean verifyVacationStatusOnDashboard(TestCases testCase, TestCaseInputs inputs, boolean isOn) {
		boolean flag = true;
		String toolbarSubtitleText = "";
		String endDate = "";
		String displayedEndDate = "";
		Dashboard adhocscreen= new Dashboard(testCase);
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		if (MobileUtils.isRunningOnAndroid(testCase)) {
			if (isOn) {
				toolbarSubtitleText =adhocscreen.getToolBarText();
				endDate = statInfo.getVacationEndTime();
				SimpleDateFormat adHocDateFormat = new SimpleDateFormat("dd MMM");
				SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
				try {
					displayedEndDate = adHocDateFormat.format(vacationDateFormat.parse(endDate));
				} catch (Exception e) {
					flag = false;
					Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,"Error Occored : " + e.getMessage());
				}
				if (toolbarSubtitleText.equals("Vacation until " + displayedEndDate)) {
					Keyword.ReportStep_Pass(testCase,"Verify Vacation Status On Dashboard : Vacation is on in the dashboard card and displayed end date is displayed correctly");
				} else {
					if (toolbarSubtitleText.contains("Vacation")) {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Verify Vacation Status On Dashboard : Vacation is on in the dashboard but displayed end date is not correct");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Verify Vacation Status On Dashboard : Vacation is not on in the Dashboard");
					}
				}
			} else {
				if (adhocscreen.isToolBarTextVisible(10)) {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Verify Vacation Status on Primary Card : Vacation is on in the dashboard");
				} else {
					Keyword.ReportStep_Pass(testCase,"Verify Vacation Status On Primary Card : Vacation is off in the dashboard");
				}
			}
		} else {

		}

		return flag;
	}

	public static boolean toggleUpdateVacationSettingsSwitch(TestCases testCase, boolean turnOn) {
		boolean flag = true;
		VacationThermoStatScreen vacatherScreen= new VacationThermoStatScreen(testCase);
		String getToggleStatus=vacatherScreen.getVacationthermostatSettingsToggleStatus();
		if(turnOn)
		{
			if(getToggleStatus.equalsIgnoreCase("ON")||getToggleStatus.equalsIgnoreCase("1")||getToggleStatus.equalsIgnoreCase("true"))
			{
				Keyword.ReportStep_Pass(testCase,"Toggle Update Vacation Settings Switch (ON) : Update Vacation switch is already in ON state");
			}
			else
			{
				vacatherScreen.clickOnVacationthermostatSettingsToggle();
			}
			getToggleStatus=vacatherScreen.getVacationthermostatSettingsToggleStatus();
			if(getToggleStatus.equalsIgnoreCase("ON")||getToggleStatus.equalsIgnoreCase("1")||getToggleStatus.equalsIgnoreCase("true"))
			{
				Keyword.ReportStep_Pass(testCase,"Toggle Update Vacation Settings Switch (ON) : Update Vacation switch is in ON state");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Toggle Update Vacation Settings Switch (ON) : Update Vacation switch is not turned on in vacation settings after clicking on vacation switch");
			}
		}
		else
		{
			if(getToggleStatus.equalsIgnoreCase("OFF")||getToggleStatus.equalsIgnoreCase("0")||getToggleStatus.equalsIgnoreCase("false"))
			{
				Keyword.ReportStep_Pass(testCase,"Toggle Vacation Switch (Off) : Vacation Thermostat switch is already in Off state");
			}
			else
			{
				vacatherScreen.clickOnVacationthermostatSettingsToggle();
				getToggleStatus=vacatherScreen.getVacationthermostatSettingsToggleStatus();
				if(getToggleStatus.equalsIgnoreCase("Off")||getToggleStatus.equalsIgnoreCase("0")||getToggleStatus.equalsIgnoreCase("false"))
				{
					Keyword.ReportStep_Pass(testCase,"Toggle Update Vacation Settings Switch (Off) : Update Vacation switch is in Off state");
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Toggle Update Vacation Settings Switch (Off) : Update Vacation switch is not turned off in vacation settings after clicking on vacation switch");
				}
			}
		}
		return flag;
	}

	public static boolean VerifyAndChangeVacationSetPointsMultiStat(TestCases testCase,boolean toggle1,boolean toggle2,TestCaseInputs inputs)
	{
		boolean flag=true;
		String getToggleStatus="";
		String getCoolSetPoints="", getHeatSetPoints="";

		VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);
		VacationThermoStatScreen vacatherScreen= new VacationThermoStatScreen(testCase);

		if (vacaScreen.isReviewVacationSetPointsVisible())
		{
			if(vacaScreen.getReviewVacationSetPointsValue().contains("55".split("\\.")[0]))
			{
				Keyword.ReportStep_Pass(testCase,"Heat set points display successfully i.e. 55"+InputVariables.degree+"");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Heat set points not display successfully i.e. 55"+InputVariables.degree+"") ;
				flag=false;
			}
			if(vacaScreen.getReviewVacationSetPointsValue().contains("85".split("\\.")[0]))
			{
				Keyword.ReportStep_Pass(testCase,"Cool set points display successfully i.e. 85"+InputVariables.degree);
			}
			else
			{
				Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Cool set points not display successfully i.e. 85"+InputVariables.degree) ;
				flag=false;
			}

			if(vacaScreen.getReviewVacationSetPointsValueStat2().contains("50".split("\\.")[0]))
			{
				Keyword.ReportStep_Pass(testCase,"Heat set points display successfully i.e. 50"+InputVariables.degree+" for stat2");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Heat set points not display successfully i.e. 50"+InputVariables.degree+" for stat2") ;
				flag=false;
			}
			if(vacaScreen.getReviewVacationSetPointsValueStat2().contains("90".split("\\.")[0]))
			{
				Keyword.ReportStep_Pass(testCase,"Cool set points display successfully i.e. 90"+InputVariables.degree+" for stat2");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Cool set points not display successfully i.e. 90"+InputVariables.degree+" for stat2") ;
				flag=false;
			}
		}
		else
		{
			Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Set points not displayed successfully") ;
			flag=false;
		}
		if(vacaScreen.clickOnVacationThermostatSettings())
		{
			getToggleStatus=vacatherScreen.getVacationthermostatSettingsToggleStatus();
			if(toggle1)
			{
				if(getToggleStatus.equalsIgnoreCase("ON")||getToggleStatus.equalsIgnoreCase("1")||getToggleStatus.equalsIgnoreCase("true"))
				{
					Keyword.ReportStep_Pass(testCase,"Toggle Vacation Switch (ON) : Vacation Thermostat switch is already in ON state");
				}
				else
				{
					vacatherScreen.clickOnVacationthermostatSettingsToggle();
				}

				vacatherScreen.decreaseCoolTemp(3);
				vacatherScreen.increseHeatTemp(3);
				getCoolSetPoints=vacatherScreen.getVacationthermostatSettingsCoolSetPoints();
				getHeatSetPoints=vacatherScreen.getVacationthermostatSettingsHeatSetPoints();
				inputs.setInputValue("coolSetPoints1" , getCoolSetPoints);
				inputs.setInputValue("heatSetPoints1" , getHeatSetPoints);

				vacatherScreen.navigateToVacationSettingPage();
				if (vacaScreen.isReviewVacationSetPointsVisible())
				{
					String updatedSetpoints=vacaScreen.getReviewVacationSetPointsValue();
					if(updatedSetpoints.contains(getHeatSetPoints.split("\\.")[0]))
					{
						Keyword.ReportStep_Pass(testCase,"Heat set points display successfully i.e."+getHeatSetPoints);
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Heat set points not display successfully i.e."+getHeatSetPoints) ;
						flag=false;
					}
					if(updatedSetpoints.contains(getCoolSetPoints.split("\\.")[0]))
					{
						Keyword.ReportStep_Pass(testCase,"Cool set points display successfully i.e."+getCoolSetPoints);
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Cool set points not display successfully i.e."+getCoolSetPoints) ;
						flag=false;
					}
				}
				else
				{
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Set points not displayed successfully") ;
					flag=false;
				}

				vacaScreen.clickOngetReviewVacationSetPointsValueStat2();
				getToggleStatus=vacatherScreen.getVacationthermostatSettingsToggleStatus();
				if(toggle2)
				{
					if(getToggleStatus.equalsIgnoreCase("ON")||getToggleStatus.equalsIgnoreCase("1")||getToggleStatus.equalsIgnoreCase("true"))
					{
						Keyword.ReportStep_Pass(testCase,"Toggle Vacation Switch (ON) : Vacation Thermostat switch is already in ON state");
					}
					else
					{
						vacatherScreen.clickOnVacationthermostatSettingsToggle();
					}

					vacatherScreen.decreaseCoolTemp(4);
					vacatherScreen.increseHeatTemp(4);
					getCoolSetPoints=vacatherScreen.getVacationthermostatSettingsCoolSetPoints();
					getHeatSetPoints=vacatherScreen.getVacationthermostatSettingsHeatSetPoints();
					inputs.setInputValue("coolSetPoints2" , getCoolSetPoints);
					inputs.setInputValue("heatSetPoints2" , getHeatSetPoints);
					vacatherScreen.navigateToVacationSettingPage();

					if (vacaScreen.isReviewVacationSetPointsVisible())
					{
						String updatedSetpoints=vacaScreen.getReviewVacationSetPointsValueStat2();
						if(updatedSetpoints.contains(getHeatSetPoints.split("\\.")[0]))
						{
							Keyword.ReportStep_Pass(testCase,"Heat set points display successfully i.e."+getHeatSetPoints+" for stat2");
						}
						else
						{
							Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Heat set points not display successfully i.e."+getHeatSetPoints+" for stat2") ;
							flag=false;
						}
						if(updatedSetpoints.contains(getCoolSetPoints.split("\\.")[0]))
						{
							Keyword.ReportStep_Pass(testCase,"Cool set points display successfully i.e."+getCoolSetPoints+" for stat2");
						}
						else
						{
							Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Cool set points not display successfully i.e."+getCoolSetPoints+" for stat2") ;
							flag=false;
						}
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Set points not displayed successfully") ;
						flag=false;
					}
				}
				else
				{
					if(getToggleStatus.equalsIgnoreCase("OFF")||getToggleStatus.equalsIgnoreCase("0")||getToggleStatus.equalsIgnoreCase("false"))
					{
						Keyword.ReportStep_Pass(testCase,"Toggle Vacation Switch (Off) : Vacation Thermostat switch is already in Off state");
						vacatherScreen.navigateToVacationSettingPage();
					}
					else
					{
						vacatherScreen.clickOnVacationthermostatSettingsToggle();
						vacatherScreen.navigateToVacationSettingPage();
					}
				}
			}
			else
			{
				if(getToggleStatus.equalsIgnoreCase("OFF")||getToggleStatus.equalsIgnoreCase("0")||getToggleStatus.equalsIgnoreCase("false"))
				{
					Keyword.ReportStep_Pass(testCase,"Toggle Vacation Switch (Off) : Vacation Thermostat switch is already in Off state");
					vacatherScreen.navigateToVacationSettingPage();
				}
				else
				{
					vacatherScreen.clickOnVacationthermostatSettingsToggle();
					vacatherScreen.navigateToVacationSettingPage();
				}
			}

		}
		vacaScreen.clickOnVacationBackButton();
		SecondaryCardSettings sc= new SecondaryCardSettings(testCase);
		sc.clickOnBackButton();
		return flag;

	}

	public static boolean VerifyAndChangeVacationSetPoints(TestCases testCase,boolean toggle,TestCaseInputs inputs)
	{
		boolean flag=true;

		DeviceInformation d=new DeviceInformation(testCase, inputs);

		VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);
		VacationThermoStatScreen vacatherScreen= new VacationThermoStatScreen(testCase);
		try
		{
			String getToggleStatus="";
			String getCoolSetPoints="", getHeatSetPoints="";
			if (vacaScreen.isReviewVacationSetPointsVisible())
			{
				String review=vacaScreen.getReviewVacationSetPointsValue();
				if(d.getDeviceType().equalsIgnoreCase("DHW")||d.getDeviceType().equalsIgnoreCase("EMEA") || d.getDeviceType().equalsIgnoreCase("Jasper"))
				{

					Keyword.ReportStep_Pass(testCase,"Heat set points display successfully i.e. "+review);

				}
				else
				{
					List<String> allowedModes=null ;
					try
					{
						allowedModes = d.getAllowedModes() ;
					}
					catch(Exception e)
					{

					}
					if(allowedModes.contains("Heat"))
					{
						if(review.contains("55".split("\\.")[0])||review.contains("61".split("\\.")[0]))
						{
							Keyword.ReportStep_Pass(testCase,"Default Heat set points display successfully");
						}
						else
						{
							Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Heat set points not display successfully i.e. 55"+InputVariables.degree+"") ;
							flag=false;
						}
					}
					if(allowedModes.contains("Cool"))
					{
						if(review.contains("85".split("\\.")[0])||review.contains("88".split("\\.")[0]))
						{
							Keyword.ReportStep_Pass(testCase,"Default Cool set points display successfully");
						}
						else
						{
							Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Cool set points not display successfully i.e. 85"+InputVariables.degree) ;
							flag=false;
						}
					}


				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Set points not displayed successfully") ;
				flag=false;
			}
			if(vacaScreen.clickOnVacationThermostatSettings())
			{
				getToggleStatus=vacatherScreen.getVacationthermostatSettingsToggleStatus();
				if(toggle)
				{
					if(getToggleStatus.equalsIgnoreCase("ON")||getToggleStatus.equalsIgnoreCase("1")||getToggleStatus.equalsIgnoreCase("true"))
					{
						Keyword.ReportStep_Pass(testCase,"Toggle Vacation Switch (ON) : Vacation Thermostat switch is already in ON state");
					}
					else
					{
						vacatherScreen.clickOnVacationthermostatSettingsToggle();
					}
					try
					{
						if(d.getDeviceType().equalsIgnoreCase("DHW"))
						{
							vacatherScreen.increseHeatTemp(3);
							getHeatSetPoints=vacatherScreen.getVacationthermostatSettingsHeatSetPoints();
							inputs.setInputValue("heatSetPoints" , getHeatSetPoints);
							flag = flag && DHWUtils.toggleHotWaterDuringVacation(testCase, true);

						}
						else{
							vacatherScreen.decreaseCoolTemp(3);
							vacatherScreen.increseHeatTemp(3);
							getCoolSetPoints=vacatherScreen.getVacationthermostatSettingsCoolSetPoints();
							getHeatSetPoints=vacatherScreen.getVacationthermostatSettingsHeatSetPoints();
							inputs.setInputValue("coolSetPoints" , getCoolSetPoints);
							inputs.setInputValue("heatSetPoints" , getHeatSetPoints);

						}

					}
					catch(Exception e)
					{

					}
					vacatherScreen.navigateToVacationSettingPage();
					if (vacaScreen.isReviewVacationSetPointsVisible())
					{
						String updatedSetpoints=vacaScreen.getReviewVacationSetPointsValue();


						if(d.getDeviceType().equalsIgnoreCase("DHW")||d.getDeviceType().equalsIgnoreCase("EMEA"))
						{
							if(updatedSetpoints.contains(getHeatSetPoints.split("\\.")[0]))
							{
								Keyword.ReportStep_Pass(testCase,"Heat set points display successfully i.e."+getHeatSetPoints);
							}
							else
							{
								Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Heat set points not display successfully i.e."+getHeatSetPoints) ;
								flag=false;
							}
						}
						else{
							if(updatedSetpoints.contains(getHeatSetPoints.split("\\.")[0]))
							{
								Keyword.ReportStep_Pass(testCase,"Heat set points display successfully i.e."+getHeatSetPoints);
							}
							else
							{
								Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Heat set points not display successfully i.e."+getHeatSetPoints) ;
								flag=false;
							}
							if(updatedSetpoints.contains(getCoolSetPoints.split("\\.")[0]))
							{
								Keyword.ReportStep_Pass(testCase,"Cool set points display successfully i.e."+getCoolSetPoints);
							}
							else
							{
								Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Cool set points not display successfully i.e."+getCoolSetPoints) ;
								flag=false;
							}
						}
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Set points not displayed successfully") ;
						flag=false;
					}
				}
				else
				{
					if(getToggleStatus.equalsIgnoreCase("OFF")||getToggleStatus.equalsIgnoreCase("0")||getToggleStatus.equalsIgnoreCase("false"))
					{
						Keyword.ReportStep_Pass(testCase,"Toggle Vacation Switch (Off) : Vacation Thermostat switch is already in Off state");
						vacatherScreen.navigateToVacationSettingPage();
					}
					else
					{
						vacatherScreen.clickOnVacationthermostatSettingsToggle();
						vacatherScreen.navigateToVacationSettingPage();
					}
				}
			}
		}
		catch(Exception e)
		{
		}
		vacaScreen.clickOnVacationBackButton();
		SecondaryCardSettings sc= new SecondaryCardSettings(testCase);
		sc.clickOnNavigateBackButton();
		return flag;

	}

	public static boolean VerifyvacationStatusStatISOffMode(TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag=true;
		try
		{
			DeviceInformation di= new DeviceInformation(testCase , inputs);
			try
			{
				if(di.isStatOnline())
				{
					Keyword.ReportStep_Pass(testCase , "Not able to verify scenario due to thermostat is Online.");
				}
				else
				{
					VacationSettingScreen vs= new VacationSettingScreen(testCase);
					if(vs.VacationDisabledModeFromDate())
					{
						Keyword.ReportStep_Pass(testCase,"Check If Vacation Settings are Enabled : From date is disabled on vacation settings");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Check If Vacation Settings are Enabled : From date is not disabled on vacation settings");
						flag=false;
					}

					if(vs.VacationDisabledModeToDate())
					{
						Keyword.ReportStep_Pass(testCase,"Check If Vacation Settings are Enabled : To date is disabled on vacation settings");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Check If Vacation Settings are Enabled : To date is not disabled on vacation settings");
						flag=false;
					}

					VacationSettingScreen vaca = new VacationSettingScreen(testCase);
					vaca.clickOnVacationBackButton();
					SecondaryCardSettings sc= new SecondaryCardSettings(testCase);
					sc.clickOnBackButton();
				}
			}
			catch(Exception e)
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,e.getMessage());
			}
		}
		catch(Exception e)
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,e.getMessage());
		}
		return flag;

	}

	public static boolean VerifyVacationfSettingPage(TestCases testCase, TestCaseInputs inputs, String VacationStatus) {
		boolean flag=true;
		VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);
		String getVacationStatus="";
		if (vacaScreen.isVacationTextVisible())
		{
			Keyword.ReportStep_Pass(testCase,	"Vacation Header Text is verified ");
		}

		if (vacaScreen.isUpdateVacationSettingsSwitchVisible()) {

			Keyword.ReportStep_Pass(testCase," Vacation Settings : Vacation Toggle Button is verified ");

		} else {
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Vacation Settings : Fail to verify Vacation Toggle Button ");
		}
		if(VacationStatus.equalsIgnoreCase("Off"))
		{
			getVacationStatus = vacaScreen.getVacationSettingsToggleStatus();

			if (getVacationStatus.equalsIgnoreCase("OFF")||getVacationStatus.equalsIgnoreCase("0")||getVacationStatus.equalsIgnoreCase("false"))
			{
				Keyword.ReportStep_Pass(testCase, "Disabled Vacation/Holiday settings");
				Keyword.ReportStep_Pass(testCase, "Disable mode and User should not allowed to perform any action on settings.");
			}

			if(vacaScreen.isVacationHeaderTextVisible())
			{
				Keyword.ReportStep_Pass(testCase,"Vacation Settings Header Text  "+vacaScreen.getVacationHeaderText() +"is verified");
			}

		}else if(VacationStatus.equalsIgnoreCase("On"))
		{
			getVacationStatus = vacaScreen.getVacationSettingsToggleStatus();

			if (getVacationStatus.equalsIgnoreCase("ON")||getVacationStatus.equalsIgnoreCase("1")||getVacationStatus.equalsIgnoreCase("true"))
			{
				Keyword.ReportStep_Pass(testCase, "Disabled Vacation/Holiday settings");
				Keyword.ReportStep_Pass(testCase, "Disable mode and User should not allowed to perform any action on settings.");
			}

			if(vacaScreen.isVacationDescriptionVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Vacation Message: "+vacaScreen.getVacationDescription()+" is displayed");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Vacation description is not shown.");
			}

			if(vacaScreen.isVacationReviewTextVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Vacation Message: "+vacaScreen.getVacationReviewText()+" is displayed");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Vacation review text is not shown.");
			}

			if (MobileUtils.isRunningOnAndroid(testCase))
			{
				if (vacaScreen.isVacationDateAndroidVisible())
				{
					Keyword.ReportStep_Pass(testCase, "From date is shown: " + vacaScreen.getVacationFromDateAndroidValue());
					Keyword.ReportStep_Pass(testCase, "To date is shown: " + vacaScreen.getVacationToDateAndroidValue());
				} else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "From/To dates are not shown");
				}
				if (vacaScreen.isVacationTimeVisibleAndroidValue())
				{
					Keyword.ReportStep_Pass(testCase, "From Time is shown: " + vacaScreen.getVacationFromTimeAndroidValue());
					Keyword.ReportStep_Pass(testCase, "To Time is shown: " + vacaScreen.getVacationToTimeAndroidValue());
					inputs.setInputValue("startTime" , vacaScreen.getVacationFromTimeAndroidValue());
					inputs.setInputValue("endTime" , vacaScreen.getVacationToTimeAndroidValue());
				} else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "From/To times are not shown");
				}

				if (vacaScreen.isReviewVacationSetPointsVisible()) {
					Keyword.ReportStep_Pass(testCase, "Review setpoints is shown: " + vacaScreen.getReviewVacationSetPointsValue());
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Stat name is not shown");
					flag=false;
				}
			}else
			{
				if(vacaScreen.isVacationFromDateTimeVisibleIOSValue())
				{
					Keyword.ReportStep_Pass(testCase, "From Date && Time is shown: " + vacaScreen.getVacationFromDateTimeIOSValue());
					inputs.setInputValue("startTime" , vacaScreen.getVacationFromDateTimeIOSValue());
				}else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "FromDateVacation not displayed");
				}
				if(vacaScreen.isVacationToDateTimeVisibleIOSValue())
				{
					Keyword.ReportStep_Pass(testCase, "To Date && Time is shown: " + vacaScreen.getVacationToDateTimeIOSValue());
					inputs.setInputValue("endTime" , vacaScreen.getVacationToDateTimeIOSValue());
				}
				else
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "To DateVacation not displayed");
				}

			}
			if(vacaScreen.isStatNameVisible())
			{
				Keyword.ReportStep_Pass(testCase," Thermostat Name displayed successfully i.e '"+vacaScreen.getStatName()+ "'");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Stat Name is not displayed.");
			}

		}
		return flag;
	}

	public static boolean verifyVisibilityOfAdHocButtonOnSolutionCard(TestCases testCase, boolean isVisible) {
		boolean flag = true;
		AdhocScreen ad=new AdhocScreen(testCase);




		if (isVisible) {
			if (ad.isAdhocButtonVisible(5))
			{
				Keyword.ReportStep_Pass(testCase,
						"Verify Ad Hoc Override Present On Solution Card : Ad hoc override button is visible on solution card");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Ad Hoc Override Present On Solution Card : Ad hoc override button is not visible on solution card");
			}
		} else {
			if (ad.isAdhocButtonVisible(5)) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Ad Hoc Override Present On Solution Card : Ad hoc override button visible on solution card");
			} else {
				Keyword.ReportStep_Pass(testCase,
						"Verify Ad Hoc Override Present On Solution Card : Ad hoc override button not visible on solution card");
			}
		}
		return flag;
	}

	public static boolean EditScheduleOptionVerification(TestCases testCase, TestCaseInputs inputs, String scheduleType) {
		boolean flag = true;
		Schedule sc=new Schedule(testCase);
		if (scheduleType.equals(InputVariables.TIME_BASED_SCHEDULE)) {
			if (sc.isSwitchToGeofencingVisible(5))
			{
				Keyword.ReportStep_Pass(testCase,"'Switch to geofencing' Button visible after clicking on Edit option.");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," 'Switch to geofencing' Button not  visible after clicking on option.");
			}
			if (sc.isCreateNewTimeScheduleVisible(5))
			{
				Keyword.ReportStep_Pass(testCase,"'Create new time schedule' Button visible after clicking on Edit option.");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," 'Create new time schedule' Button not  visible after clicking on option.");
			}
		} else {
			if (sc.isSwitchToTimeSchedulingVisible(5))
			{
				Keyword.ReportStep_Pass(testCase,"'Switch to time scheduling' Button visible after clicking on Edit option.");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," 'Switch to time scheduling' Button not  visible after clicking on option.");
			}
		}
		if (sc.isTurnScheduleOffVisible(5))
		{
			Keyword.ReportStep_Pass(testCase, " Turn schedule off is visible.");

		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Schedule Off Button is not visible.");
		}
		if (sc.isCancelVisible(3))
		{
			Keyword.ReportStep_Pass(testCase, "Cancel is displayed");
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Cancel not shown in edit options");
			flag = false;
		}

		return flag;
	}

	public static boolean verifySelectedScreenInViewScheduleScreen(TestCases testCase,
			String scheduleTypeToBeValidated) {
		boolean flag = true;
		PrimaryCard pc=new PrimaryCard(testCase);
		Schedule sc=new Schedule(testCase);

		if (pc.isScheduleIconVisible()) {
			pc.clickOnScheduleIcon();
		}

		if (scheduleTypeToBeValidated.equalsIgnoreCase("No")) {
			if (sc.isCreateNewScheduleVisible(5) && sc.isVisibleNoScheduleScreen())
			{
				Keyword.ReportStep_Pass(testCase, "No Schedule screen is shown in View schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"No Schedule screen in not shown in View schedule screen");
			}
		} else if (scheduleTypeToBeValidated.equalsIgnoreCase("Everyday")) {
			if (sc.isEverydayTextVisible(5)) {
				Keyword.ReportStep_Pass(testCase, "Everyday Schedule screen is shown in View schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Everyday Schedule screen in not shown in View schedule screen");
			}

		} else if (scheduleTypeToBeValidated.equalsIgnoreCase("Weekday and Weekend")) {
			if (sc.isMondayFridayVisible()) {
				Keyword.ReportStep_Pass(testCase,
						"Weekday and Weekend Schedule screen is shown in View schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Weekday and Weekend Schedule screen in not shown in View schedule screen");
			}
		} else if (scheduleTypeToBeValidated.equalsIgnoreCase("Geofence")) {
			if (sc.isVisibleUseMyHomeSettingsText())
			{
				Keyword.ReportStep_Pass(testCase, "Geofence Schedule screen is shown in View schedule screen");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Geofence Schedule screen in not shown in View schedule screen");
			}
		}

		return flag;
	}

	public static boolean verifyGeofenceHomeSchedulePage(TestCases testCase, TestCaseInputs inputs) {

		boolean flag = true;
		Schedule sc=new Schedule(testCase);
		if(sc.isGeoHomeSetPointPageForMultiTempVisible()||sc.isGeoHomeSetPointPageForSingleTempVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Verified the Description of Geofence home settings page");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify the Description of Geofence home settings page");
		}
		return flag;
	}


	public static boolean verifyGeofenceHomePeriod(TestCases testCase, TestCaseInputs inputs) {

		boolean flag = true;
		Schedule sc=new Schedule(testCase);
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		if(sc.isuseMyHomeVisible()){
			sc.clickuseMyHomeButton();
			Keyword.ReportStep_Pass(testCase, "Navigated to Geofence home settings page");

			if(sc.isGeoHomeSetPointPageForMultiTempVisible()||sc.isGeoHomeSetPointPageForSingleTempVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Verified the Description of Geofence home settings page");
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Schedule Screen: Unable to verify Geofence Home Period's Header", false);
			}

			if(statInfo.getDeviceType().equalsIgnoreCase("Blackbeard")){
				if(sc.isDuctlessButtonVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Geofence Home Period: Ductless Unit is displayed");
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Geofence Home Period: Ductless Unit is not displayed", false);
				}
			}

			if(sc.isVisibleWhenHeatingText())
			{
				Keyword.ReportStep_Pass(testCase, "Geofence Home Period: Heat setpoint is displayed");
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Geofence Home Period: Heat setpoint is not displayed", false);
			}

			if(!statInfo.getJasperDeviceType().equalsIgnoreCase("EMEA"))
			{
				if(sc.isVisibleWhenCoolingText())
				{
					Keyword.ReportStep_Pass(testCase, "Geofence Home Period: Cool setpoint is displayed");
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Geofence Home Period: Cool setpoint is not displayed", false);
				}
			}

			if(sc.isPeriodBackButtonVisible())
			{
				flag=flag && sc.clickOnPeriodBackButton();
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Geofence Home Period : Unable to find Back button", false);
			}
		}
		else{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Schedule Screen: Unable to verify Geofence Home Period", false);
		}

		return flag;
	}


	public static boolean verifyGeofenceAwaySchedulePage(TestCases testCase, TestCaseInputs inputs) {

		boolean flag = true;
		Schedule sc=new Schedule(testCase);
		if(sc.isGeoAwaySetPointPageForMultiTempVisible()||sc.isGeoAwaySetPointPageForSingleTempVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Verified the Description of Geofence away settings page");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify the Description of Geofence away settings page");
		}
		return flag;
	}


	public static boolean verifyGeofenceAwayPeriod(TestCases testCase, TestCaseInputs inputs) {

		boolean flag = true;
		Schedule sc=new Schedule(testCase);
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		if(sc.isuseMyAwayVisible()){
			sc.clickuseMyAwayButton();
			Keyword.ReportStep_Pass(testCase, "Navigated to Geofence Away settings page");

			if(sc.isGeoAwaySetPointPageForSingleTempVisible()||sc.isGeoAwaySetPointPageForMultiTempVisible()||sc.isGeoHomeSetPointPageForSingleTempVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Verified the Description of Geofence Away settings page");
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Schedule Screen: Unable to verify Geofence Away Period's Header", false);
			}

			if(statInfo.getDeviceType().equalsIgnoreCase("Blackbeard")){
				if(sc.isDuctlessButtonVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Geofence Away Period: Ductless Unit is displayed");
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Geofence Away Period: Ductless Unit is not displayed", false);
				}
			}

			if(sc.isVisibleWhenHeatingText())
			{
				Keyword.ReportStep_Pass(testCase, "Geofence Away Period: Heat setpoint is displayed");
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Geofence Away Period: Heat setpoint is not displayed", false);
			}

			if(!statInfo.getJasperDeviceType().equalsIgnoreCase("EMEA"))
			{
				if(sc.isVisibleWhenCoolingText())
				{
					Keyword.ReportStep_Pass(testCase, "Geofence Away Period: Cool setpoint is displayed");
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Geofence Away Period: Cool setpoint is not displayed", false);
				}
			}

			if(sc.isPeriodBackButtonVisible())
			{
				flag=flag && sc.clickOnPeriodBackButton();
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Geofence Away Period : Unable to find Back button", false);
			}
		}
		else{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Schedule Screen: Unable to verify Geofence Away Period", false);
		}

		return flag;
	}


	public static boolean verifyGeofenceSleepSchedulePage(TestCases testCase, TestCaseInputs inputs) {

		boolean flag = true;
		Schedule sc=new Schedule(testCase);
		if(sc.isGeoSleepSetPointPageForMultiTempVisible()||sc.isGeoSleepSetPointPageForSingleTempVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Verified the Description of Geofence sleep settings page");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify the Description of Geofence sleep settings page");
		}
		return flag;
	}


	public static boolean verifyGeofenceScheduleScreen(TestCases testCase, TestCaseInputs inputs) {

		boolean flag = true;
		Schedule sc=new Schedule(testCase);
		if(sc.isGeoScheduleScreenVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Verified the Geofence Schedule screen displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify the Geofence Schedule screen.");
		}
		return flag;
	}

	public static boolean VerifyEditAddressTextField(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		String temp="";
		LocationDetailsScreen lds = new LocationDetailsScreen(testCase);
		EditAddressLocation eal=new EditAddressLocation(testCase);
		SecondaryCardSettings scs=new SecondaryCardSettings(testCase);

		flag =flag && optikUtils.navigatetoGlobalDrwaerOption(testCase, "LOCATION ADDRESS");

		flag= flag && lds.navigateToEditAddressScreen();

		if (eal.isStreetAddressFieldVisible()) {
			eal.clickOnStreetAddressField();

			if (eal.setStreetAddressFieldValue("~`|<>")) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());

					temp=eal.getStreetAddressFieldValue();
					if(!temp.contains("~`|<>")){
						Keyword.ReportStep_Pass(testCase,
								"Edit Adress Screen : Street Address field does not accepts special characters");
					}
					else{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Adress Screen : Street Address accepts the special characters", false);
					}
				}
				else
				{
					Keyword.ReportStep_Pass(testCase,
							"Edit Adress Screen : Entered special characters in Street Address field");
				}

			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Edit Adress Screen : Not able to set Street Address.");
				flag = false;
			}
		}
		else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Address Screen: Not able to find ''Street Address Field'' ", false);
		}

		if (eal.isCityAddressFieldVisible()) {
			eal.clickOnCityAddressField();
			if (eal.setCityAddressFieldValue("~`|<>")) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());

					temp=eal.getCityAddressFieldValue();
					if(!temp.contains("~`|<>")){
						Keyword.ReportStep_Pass(testCase,
								"Edit Adress Screen : City Address field does not accepts special characters");
						flag=true;
					}
					else{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Adress Screen : Street Address accepts the special characters", false);
						flag=false;
					}
				}
				else
				{
					Keyword.ReportStep_Pass(testCase,
							"Edit Adress Screen : Entered special characters in City Address field");
				}

			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Edit Adress Screen : Not able to set City Address.");
				flag = false;
			}
		}
		else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Address Screen: Not able to find ''City Address Field'' ", false);
			flag=false;
		}


		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			if (eal.isStateAddressFieldVisible()) {
				eal.clickOnStateAddressField();
				if (eal.setStateAddressFieldValue("~`|<>")) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());

						temp=eal.getStateAddressFieldValue();
						if(!temp.contains("~`|<>")){
							Keyword.ReportStep_Pass(testCase,
									"Edit Adress Screen : State Address field does not accepts special characters");
							flag=true;
						}
						else{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Adress Screen : State Address accepts the special characters", false);
							flag=false;
						}
					}
					else
					{
						if(MobileUtils.isMobElementExists("name", "Return", testCase))
						{
							MobileUtils.clickOnElement(testCase, "name", "Return");
						}

						/*eal.clickOnBackButton();

						if(eal.isNoButtonPopupVisible())
						{
							eal.clickOnNoButtonPopup();
						}*/
						Keyword.ReportStep_Pass(testCase,
								"Edit Adress Screen : Entered special characters in State Address field");
					}

				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Edit Adress Screen : Not able to set State Address.");
					flag = false;
				}
			}
			else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Address Screen: Not able to find ''City Address Field'' ", false);
				flag=false;
			}

		}

		if (eal.isSaveButtonVisible()) {
			flag = flag && eal.clickOnSaveButton();
			Keyword.ReportStep_Pass(testCase, "Edit Address: Clicked on save button");

			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				if(eal.isLocationUpdateErrorVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Edit Address : ''Location Update Error'' is displayed for saving Location address with ''special characters''");

					if(eal.isLocationUpdateErrorOkButtonVisible())
					{
						eal.clickOnLocationUpdateErrorOkButton();
					}

					if(eal.isBackButtonVisible())
					{
						eal.clickOnBackButton();
						Keyword.ReportStep_Pass(testCase, "Edit Address: Clicked on back button");

						if(eal.isYesButtonPopupVisible())
						{
							eal.clickOnYesButtonPopup();
							Keyword.ReportStep_Pass(testCase, "Edit Address :Clicked on yes button popup for discarding the changes for Location address");
						}
					}
					else{
						flag=false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Address: Back button not displayed", false);
					}

				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Address Field: ''Location Update Error'' is not displayed for saving Location address with ''special characters''", false);
				}
			}else {

				if(eal.isLocationUpdateErrorOkButtonVisible()) {

					Keyword.ReportStep_Pass(testCase, "Edit Address :Error popup displaying "+eal.getLocationUpdateErrorDescriptionValue());

					eal.clickOnZipUpdateErrorOkButton();
					if(lds.isBackButtonVisible(6))
	    			{
	    				flag = flag && lds.ClickOnBackButton();
	    				if(eal.isYesButtonPopupVisible())
						{
							eal.clickOnYesButtonPopup();
							Keyword.ReportStep_Pass(testCase, "Edit Address :Clicked on yes button popup for discarding the changes for Location address");
						}
	    			}

				}
			}
		}
		else{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Address: Unable to find Save button", false);
		}

		if(lds.isBackButtonVisible(6))
		{
			flag = flag && lds.ClickOnBackButton();

		}

		if(scs.isBackButtonVisible())
		{
			flag = flag && scs.clickOnBackButton();
		}

		return flag;
	}


	public static boolean verifyturnOffOnDuctlesToggle(TestCases testCase,
			TestCaseInputs inputs, String period, boolean turnOn) {
		boolean flag = true;

		Schedule scheduleObject = new Schedule(testCase);

		if (period.toLowerCase().contains("wake")) {
			if (inputs.getInputValue(InputVariables.TYPE_OF_SCHEDULE).equals(GlobalVariables.TIME_BASED_SCHEDULE)) {

				if (scheduleObject.getWakeEverydayText().toLowerCase()
						.equalsIgnoreCase("Wake")) {
					scheduleObject.getEveryDayWake().click();
				}
			}

		} else if (period.toLowerCase().contains("home")) {
			if (inputs.getInputValue(InputVariables.TYPE_OF_SCHEDULE).equals(GlobalVariables.TIME_BASED_SCHEDULE)) {

				if (scheduleObject.getHomeEverydayText().toLowerCase()
						.contains("home")) {
					scheduleObject.getEveryDayHome().click();
				}
			} else {
				if (scheduleObject.isuseMyHomeVisible()) {
					scheduleObject.clickuseMyHomeButton();
				}
			}

		} else if (period.toLowerCase().contains("away")) {

			if (inputs.getInputValue(InputVariables.TYPE_OF_SCHEDULE).equals(GlobalVariables.TIME_BASED_SCHEDULE)) {
				if (scheduleObject.getAwayEverydayText().toLowerCase()
						.contains("away")) {
					scheduleObject.getEveryDayAway().click();
				}

			} else {
				if (scheduleObject.isuseMyAwayVisible()) {
					scheduleObject.clickuseMyAwayButton();
				}

			}

		} else if (period.toLowerCase().contains("sleep")) {

			if (inputs.getInputValue(InputVariables.TYPE_OF_SCHEDULE).equals(GlobalVariables.TIME_BASED_SCHEDULE)) {

				if (period.toLowerCase().contains("weekday")) {

					if (MobileUtils.isRunningOnAndroid(testCase)) {

						scheduleObject.getWeekDaySleep().click();
					} else {
						if (scheduleObject.getWeekDaySleep()
								.getAttribute("value").toLowerCase()
								.contains("sleep")) {
							scheduleObject.getWeekDaySleep().click();
						}
					}
				} else if (inputs.getInputValue(InputVariables.TYPE_OF_SCHEDULE).equals(GlobalVariables.TIME_BASED_SCHEDULE)) {
					if (scheduleObject.getSleepEverydayText().toLowerCase()
							.contains("sleep")) {
						scheduleObject.getEveryDaySleep().click();
					}
				}
			} else {
				if (scheduleObject.isuseMySleepVisible()) {
					scheduleObject.clickuseMySleepButton();
				}
			}

		}

		if (turnOn) {
			if (scheduleObject.getDuctlessToggleStatus().contains("ON")
					|| scheduleObject.getDuctlessToggleStatus().contains("1")
					|| scheduleObject.getDuctlessToggleStatus()
					.contains("true")) {
				Keyword.ReportStep_Pass(testCase,
						"Verify the Toggle button is  switched On && the user is still on the "
								+ period + " settings page");

			}

			else {
				scheduleObject.clickDuctlessButton();
				Keyword.ReportStep_Pass(testCase,
						"Verify the Toggle button is now switched On && the user is still on the "
								+ period + " settings page");
			}

		} else {
			if (scheduleObject.getDuctlessToggleStatus().contains("0")
					|| scheduleObject.getDuctlessToggleStatus()
					.contains("false")
					|| scheduleObject.getDuctlessToggleStatus()
					.contains("OFF")) {
				Keyword.ReportStep_Pass(testCase,
						"Verify the Toggle button is now switched OFF && the user is still on the "
								+ period + " settings page");

			} else {
				scheduleObject.clickDuctlessButton();
				Keyword.ReportStep_Pass(testCase,
						"Verify the Toggle button is now switched OFF && the user is still on the "
								+ period + " settings page");

			}

		}

		scheduleObject.clickOnSaveButton();
		OSPopUps os=new OSPopUps(testCase);

		if(!MobileUtils.isRunningOnAndroid(testCase)){
			if(os.isOkButtonVisible()){
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed on Unexpected Error Message after ductless off - for" + period);
				os.clickOnOkButton();
			}
		}

		return flag;

	}


	public static boolean setGeofenceSleepSettings(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;

		Schedule scheduleObject = new Schedule(testCase);

		if (scheduleObject.isScheduleButtonVisible(5)) {
			flag = flag && scheduleObject.clickOnScheduleButton();
		}

		if(scheduleObject.isuseMySleepVisible())
		{
			scheduleObject.clickuseMySleepButton();
		}
		Keyword.ReportStep_Pass(testCase, " ");
		Keyword.ReportStep_Pass(testCase,
				"*************** Setting time and set points for Sleep period ***************");
		flag = flag && optikUtils.setPeriodTime(testCase, inputs.getInputValue(GlobalVariables.GEOFENCE_SLEEP_START_TIME),"GeofenceSleepStartTime", true, true);
		flag = flag && optikUtils.setPeriodTime(testCase, inputs.getInputValue(GlobalVariables.GEOFENCE_SLEEP_END_TIME),"GeofenceSleepEndTime", true, true);
		scheduleObject.clickOnSaveButton();

		scheduleObject.clickOnBackButton();

		return flag;
	}





	public static boolean setPeriodTime(TestCases testCase, String time, String locatorValueinObjectDefinition,
			boolean isValidTime, boolean verifySetPeriodTime)
	{

		HashMap<String, MobileObject> fieldObjects = MobileUtils.loadObjectFile(testCase , "ScheduleScreen") ;
		boolean flag = true ;
		Schedule scheduleObject = new Schedule(testCase) ;

		try
		{
			String timeToSet = " " ;
			String time24hours = " " ;
			String hours = time.split(":")[0] ;
			String minutes = time.split(":")[1].split(" ")[0] ;
			String ampm = time.split(":")[1].split(" ")[1] ;
			String invalidTime = " " ;

			if (scheduleObject.getGeofenceSleepStartTimevisible() || scheduleObject.getGeofenceSleepEndTimevisible())
			{
				if (!MobileUtils.isRunningOnAndroid(testCase))
				{

					if (locatorValueinObjectDefinition.equalsIgnoreCase("TimeChooser"))
					{

						scheduleObject.clickonTimeChooser() ;

					}
					else if (locatorValueinObjectDefinition.equalsIgnoreCase("TimeChooserEndTime"))
					{
						scheduleObject.clickonTimeChooserEndTime() ;

					}
					else
					{
						flag = flag
								&& MobileUtils.clickOnElement(fieldObjects , testCase , locatorValueinObjectDefinition) ;
					}
				}
				else
				{

					if (scheduleObject.getGeofenceSleepStartTimevisible())
					{

						scheduleObject.clickGeofenceSleepStartTimeButton() ;
					}

				}
			}
			if (MobileUtils.isRunningOnAndroid(testCase))
			{
				SimpleDateFormat date12Format = new SimpleDateFormat("hh:mm a") ;
				SimpleDateFormat date24Format = new SimpleDateFormat("HH:mm") ;
				time24hours = date24Format.format(date12Format.parse(time)) ;

				if (scheduleObject.isTimeAMPMVisible() || scheduleObject.isamVisible() || scheduleObject.ispmVisible())
				{
					if (ampm.equalsIgnoreCase("AM"))
					{
						ampm = "AM" ;
					}
					else
					{
						ampm = "PM" ;
					}
					timeToSet = hours + ":" + minutes + ampm ;
					invalidTime = hours + ":" + "25" + ampm ;
				}
				else
				{
					timeToSet = time24hours ;
					invalidTime = time24hours.split(":")[0] + ":25" ;
				}
				if (isValidTime)
				{

					if (testCase.getTestCaseInputs().isRunningOn("Perfecto"))
					{
						MobileElement obj = MobileUtils.getMobElement(fieldObjects , testCase , "TimePicker") ;

						flag = flag && setPeriodTimePerfecto(testCase , obj , timeToSet) ;
					}
					else
					{
						if (scheduleObject.isTimepickerVisible())
						{
							scheduleObject.setValueTimepicker(timeToSet) ;
							Keyword.ReportStep_Pass(testCase , "Set Period Time : Successfully set time " + timeToSet+ " to time picker") ;

						}
						else
						{
							Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Set Period Time : Failed to set time " + timeToSet + " to time picker") ;
							flag=false;
						}
					}

					if (scheduleObject.isOKButtonButtonFormdtpVisible())
					{
						scheduleObject.clickonOKButtonButtonFormdtp() ;
					}

				}
				else
				{

					if (scheduleObject.isTimepickerVisible())
					{
						if (!scheduleObject.setValueTimepicker(invalidTime))
						{
							Keyword.ReportStep_Pass(testCase , "Set Period Time : Successfully set time " + invalidTime
									+ " to time picker") ;
						}
						else
						{
							flag = false ;
							Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,
									"Set Period Time : Successfully set time " + timeToSet + " to time picker") ;
						}
						if (scheduleObject.setValueTimepicker(timeToSet))
						{
							Keyword.ReportStep_Pass(testCase , "Set Period Time : Successfully set time " + timeToSet
									+ " to time picker") ;
						}
						else
						{
							flag = false ;
							Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,
									"Set Period Time : Failed to set time " + timeToSet + " to time picker") ;
						}

					}

					if (scheduleObject.isOKButtonButtonFormdtpVisible())
					{
						scheduleObject.clickonOKButtonButtonFormdtp() ;
					}

				}

			}
			else
			{
				int i = Integer.parseInt(hours) ;
				hours = Integer.toString(i) ;

				if (scheduleObject.isTimeHoursVisible())
				{
					scheduleObject.setValueTimeHours(hours) ;
				}
				if (scheduleObject.isTimeMinutesVisible())
				{
					scheduleObject.setValueTimeMinutes(minutes) ;
				}
				if (scheduleObject.isTimeAMPMVisible())
				{
					scheduleObject.setValueTimeAMPM(ampm) ;
				}

				if (locatorValueinObjectDefinition.equalsIgnoreCase("TimeChooser"))
				{
					if (!scheduleObject.clickGeofenceSleepStartTimeButton())
					{
						flag = false ;

					}

				}
				else if (locatorValueinObjectDefinition.equalsIgnoreCase("TimeChooserEndTime"))
				{

					if (!scheduleObject.getGeofenceSleepEndTimeButton())
					{
						if (!scheduleObject.clickGeofenceSleepEndTimeButton())
							;
					}

					else
					{
						if (!scheduleObject.clickGeofenceSleepStartTimeButton());

					}

				}

				else
				{
					scheduleObject.clicklocatorvalue(locatorValueinObjectDefinition) ;
				}

			}

		}
		catch (Exception e)
		{
			flag = false ;
			Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Set Period Time : Error occurred : " + e.getMessage()) ;
		}
		return flag ;
	}

	public static boolean setPeriodTimePerfecto(TestCases testCase, MobileElement obj,
			String timeToset)
	{
		boolean flag = true;
		String str = timeToset;
		String[] res = new String[str.length()];
		for (int i = 0; i < str.length(); i++) {

			res[i] = Character.toString(str.charAt(i));
			if(!(res[i].equalsIgnoreCase(":") || res[i].equalsIgnoreCase(".")))
			{
				obj.sendKeys(res[i]);

			}
		}
		return flag;
	}

	public static boolean selectLocationFromDashBoardforMultiDevice(TestCases testCase, String locationtobeselected,TestCaseInputs inputs) {
		boolean flag = true;
		Dashboard ds=new Dashboard(testCase);

		if(ds.isLocationSpinnerIconVisible(5))
		{
			String DisplayLocation=ds.getCureentLocation();
			if(DisplayLocation.equalsIgnoreCase(locationtobeselected))
			{
				Keyword.ReportStep_Pass(testCase,
						"Select Location From DashBoard : User is already in location : " + locationtobeselected);
				optikUtils.verifyLocation(testCase,locationtobeselected);

				optikUtils.verifyDevicesInDashboard(testCase,inputs);
			}
			else
			{
				ds.clickOnLocationSpinner();
				List<WebElement> Locationlist = ds.getLocationNameElements();
				int i;
				for(i=0;i<=Locationlist.size()-1;i++)
				{
					Locationlist.get(i).click();

					if(ds.getCureentLocation().equalsIgnoreCase(locationtobeselected))
					{
						Keyword.ReportStep_Pass(testCase,
								"Select Location From DashBoard : Successfully selected location : "
										+ locationtobeselected);
						break;
					}
					else
					{
						ds.clickOnLocationSpinner();
					}

				}
				optikUtils.verifyLocation(testCase,locationtobeselected);
				optikUtils.verifyDevicesInDashboard(testCase,inputs);

			}
		}

		return flag;
	}



	public static boolean verifyDevicesInDashboard(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		Dashboard ds=new Dashboard(testCase);
		PrimaryCard pr=new PrimaryCard(testCase);
		SecondaryCardSettings scs=new SecondaryCardSettings(testCase);
		CameraSolutionCard csc=new CameraSolutionCard (testCase);
		if(ds.areDevicesVisibleOnDashboard(5))
		{
			List<WebElement> DeviceList = ds.getDeviceList();
			int n=DeviceList.size();
			Keyword.ReportStep_Pass(testCase, "Number of Devices Found:"+n);
			for(int i=0;i<=DeviceList.size()-1;i++)
			{
				String deviceName = DeviceList.get(i).getText();
				if(ds.isDevicePresentOnDashboard(deviceName))
				{
					Keyword.ReportStep_Pass(testCase, "Found Device On Dashboard: "+deviceName);
					DeviceList.get(i).click();
					CoachMarkUtils.closeCoachMarks(testCase);
					if(pr.isThermostatIsOffAvailable())
					{
						Keyword.ReportStep_Pass(testCase, "Thermostat: "+ deviceName + "status:" +pr.getThermostatIsOff());
					}
					else if(csc.isCameraOffButtonVisible(5)||csc.isCameraOnButtonVisible(5))
					{
						if(csc.isCameraIsOffAvailable())
						{
							Keyword.ReportStep_Pass(testCase, "Camera: "+ deviceName + "status:" +csc.getCameraIsOff());
						}

						else if(csc.isCameraIsOfflineAvailable())
						{
							Keyword.ReportStep_Pass(testCase, "Camera: "+ deviceName + "status:" +csc.getCameraIsOffline());
						}
						else
						{
							Keyword.ReportStep_Pass(testCase, "Camera: "+ deviceName + "status: Camera is On" );
						}
					}
					else
					{
						Keyword.ReportStep_Pass(testCase, "Thermostat: "+deviceName+ "status:Thermostat is Online");
					}
					if(scs.isNavigateBackButtonVisible())
					{
						flag = flag && scs.clickOnNavigateBackButton();
					}
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Unable to found Device on Dashboard: " + deviceName);
				}
			}
		}
		else
		{
			Keyword.ReportStep_Pass(testCase, "No device found");
		}
		return flag;
	}

	private static boolean verifyLocation(TestCases testCase, String locationtobeselected) {
		boolean flag = true;
		Dashboard ds=new Dashboard(testCase);
		if(ds.isLocationSpinnerIconVisible(5))
		{
			String DisplayLocation=ds.getCureentLocation();
			if(DisplayLocation.equalsIgnoreCase(locationtobeselected))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully verified Selected location present on Dashboard: " + locationtobeselected);
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Unable to verify Selected location present on Dashboard: " + locationtobeselected);
			}
		}
		return flag;
	}

	public static boolean VerifyVacationOptionForMutilLocationWithHBB(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true , status=true;

		Dashboard db=new Dashboard(testCase);
		VacationSettingScreen vss=new VacationSettingScreen(testCase);
		SecondaryCardSettings scs=new SecondaryCardSettings(testCase);

		if(db.isLocationSpinnerVisible())
		{
			flag=flag && db.changeLocationForStat(inputs.getInputValue("LOCATION1_NAME"));
		}
		if(db.isGlobalDrawerButtonVisible())
		{
			flag= flag && db.clickOnGlobalDrawerButton();
			if(scs.isVacationOptionVisible())
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Secondary card screen: Vacation option is present in HBB stat", false);
			}
			else{
				flag=flag && true;
				Keyword.ReportStep_Pass_With_ScreenShot(testCase, "Secondary card screen: Vacation option is not present in HBB stat", testCase.getMobileDriver());
			}
		}

		if(scs.isBackButtonVisible())
		{
			flag = flag && scs.clickOnBackButton();
		}

		if(db.isLocationSpinnerVisible())
		{
			flag=flag && db.changeLocationForStat(inputs.getInputValue("LOCATION2_NAME"));

			if(db.isGlobalDrawerButtonVisible())
			{
				flag= flag && db.clickOnGlobalDrawerButton();
				if(scs.isVacationOptionVisible())
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Secondary card screen: Vacation option is present in HBB stat", false);
				}
				else{
					flag=flag && true;
					Keyword.ReportStep_Pass_With_ScreenShot(testCase, "Secondary card screen: Vacation option is not present in HBB stat", testCase.getMobileDriver());
				}

				if(scs.isBackButtonVisible())
				{
					flag= flag && scs.clickOnBackButton();
				}
			}
		}

		return flag;
	}

	public static boolean validatePushNotifications(TestCases testCase, TestCaseInputs inputs,boolean expectingNotification)
	{
		boolean flag = true;
		boolean	notificationFlag = false,isEventReceived ;
		CustomDriver driver = testCase.getMobileDriver() ;
		if (driver != null)
		{

			FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(driver) ;
			fWait.withTimeout(120 , TimeUnit.SECONDS) ;
			fWait.pollingEvery(5 , TimeUnit.SECONDS) ;
			fWait.ignoring(NoSuchElementException.class) ;
			if (MobileUtils.isRunningOnAndroid(testCase))
			{
				if (MobileUtils.showNotificationAndroidOnly(driver))
				{
					try
					{

							isEventReceived=fWait.until(new Function<CustomDriver, Boolean>()
							{
								boolean notificationFlag = false ;
								@Override
								public Boolean apply(CustomDriver driver)
								{

									List<WebElement> titles = MobileUtils.getMobElements(testCase , "XPATH" ,"//*[@id='big_text' or @id='android:id/big_text' or @resource-id='android:id/big_text']",false,false) ;
									if(!titles.isEmpty())
									{
										for (int j = 0; j < titles.size(); j++)
										{
											for (WebElement noti : titles)
											{
												if (noti.getText().contains(inputs.getInputValue("ExpectedAlertText")))
												{
													notificationFlag = true ;
													return true ;
												}
											}
										}
									}
									if(!notificationFlag)
									{
										titles = MobileUtils.getMobElements(testCase , "XPATH" ,"//*[@id='text']",false,false) ;
										if(!titles.isEmpty())
										{
											for (int j = 0; j < titles.size(); j++)
											{
												for (WebElement noti : titles)
												{
													if (noti.getText().contains(inputs.getInputValue("ExpectedAlertText")))
													{
														Keyword.ReportStep_Pass(testCase ,"Expected Notification diplayed as " + noti.getText()) ;
														notificationFlag = true ;
														return true ;
													}
												}
											}
										}
										return false;
									}
									return false ;
								}
							}) ;


						if (expectingNotification)
						{
							if (isEventReceived != true)
							{
								flag = false ;
								Keyword.ReportStep_Fail(
										testCase ,
										FailType.COSMETIC_FAILURE ,
										"Not able to find Notifications with text -"
												+ inputs.getInputValue("ExpectedAlertText")) ;
							}
							else
							{
								Keyword.ReportStep_Pass(testCase ,
										"Notification found with text: " + inputs.getInputValue("ExpectedAlertText")) ;
							}
						}
						else
						{
							if (!isEventReceived)
							{
								Keyword.ReportStep_Pass(testCase ,
										"Notification: " + inputs.getInputValue("ExpectedAlertText") + " is not shown") ;
							}
							else
							{
								flag = false ;
								Keyword.ReportStep_Fail(testCase , FailType.COSMETIC_FAILURE , "Notification: "
										+ inputs.getInputValue("ExpectedAlertText")
										+ " is shown when push notification is not expected") ;
							}
						}
					}
					catch (TimeoutException e)
					{
						if (expectingNotification)
						{
							flag = false ;
							notificationFlag = false ;
							Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,
									"[TimeOut] Not able to find expected alert notification of the app") ;
						}
						else
						{
							Keyword.ReportStep_Pass(testCase ,
									"[TimeOut] Alert notification is not shown in app as expected") ;
						}
					}
				}
				else
				{
					flag = false ;
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Not able to view Notifications") ;
				}
			}
			else
			{
				List<String> notification = MobileUtils.getRecentNotificationMessageOnIOS(testCase) ;

				if(notification.size()!=0)
				{
					for (String notify : notification)
					{
						if (notify.toUpperCase().contains(inputs.getInputValue("ExpectedAlertText").toUpperCase()))
						{
							notificationFlag = true ;
							Keyword.ReportStep_Pass(testCase , "Push notification is shown in app as expected i.e."
									+ notify) ;
							break ;
						}
					}

				}
				else
				{
					if (expectingNotification)
					{
						if (notificationFlag != true)
						{
							flag = false ;
							Keyword.ReportStep_Fail(
									testCase ,
									FailType.COSMETIC_FAILURE ,
									"Not able to find Notifications with text -"
											+ inputs.getInputValue("ExpectedAlertText")) ;
						}
						else
						{
							Keyword.ReportStep_Pass(testCase ,
									"Notification found with text: " + inputs.getInputValue("ExpectedAlertText")) ;
						}
					}
					else
					{
						if (!notificationFlag)
						{
							Keyword.ReportStep_Pass(testCase ,
									"Notification: " + inputs.getInputValue("ExpectedAlertText") + " is not shown") ;
						}
						else
						{
							flag = false ;
							Keyword.ReportStep_Fail(testCase , FailType.COSMETIC_FAILURE , "Notification: "
									+ inputs.getInputValue("ExpectedAlertText")
									+ " is shown when push notification is not expected") ;
						}
					}
				}


			}
		}
		else
		{
			flag = false ;
			Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Driver is null") ;

		}
		return flag ;
	}


	public static boolean editTimeBasedScheduleByDeletingPeriods(TestCases testCase, TestCaseInputs inputs,
			String schedulePeriod, int periodCounterToBeDeleted) {
		boolean flag = true;
		WebElement period = null;
		String[] scheduleDays;
		if (inputs.getInputValue(InputVariables.TYPE_OF_TIME_SCHEDULE).contains(InputVariables.WEEKDAY_AND_WEEKEND_SCHEDULE)) {
			scheduleDays = new String[] { "Monday - Friday", "Saturday - Sunday" };
		} else {
			scheduleDays = new String[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday","Sunday" };
		}
		List<WebElement> scheduleDayHeaders = null;
		int desiredDayIndex = 0, lesserDayIndex = 0, greaterDayIndex = 0;

		Schedule scheduleObject = new Schedule(testCase);

		CustomDriver driver = testCase.getMobileDriver();
		Dimension dimension = driver.manage().window().getSize();
		int height = dimension.getHeight();
		int width = dimension.getWidth();
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

		if (MobileUtils.isRunningOnAndroid(testCase)) {

			if (!(scheduleObject.isSchedulePeriodForAndroidVisible(schedulePeriod))) {
				testCase.getMobileDriver().scrollToExact(schedulePeriod.split("_")[1]);
				while (!(scheduleObject.isSchedulePeriodForAndroidVisible(schedulePeriod))) {
					touchAction.press(point(width / 2, height / 2)).waitAction(waitOptions(MobileUtils.getDuration(2000)))
					.moveTo(point(width / 2, 82)).release();
					touchAction.perform();
				}
			}
			period = scheduleObject.isSchedulePeriodVisible(schedulePeriod);

		} else {
			desiredDayIndex = Arrays.asList(scheduleDays).indexOf(schedulePeriod.split("_")[0]);
			if (scheduleObject.isScheduleDayHeaderVisible()) {
				scheduleDayHeaders = scheduleObject.getScheduleDayHeaderList();
				lesserDayIndex = Arrays.asList(scheduleDays).indexOf(scheduleDayHeaders.get(0).getAttribute("value"));
				greaterDayIndex = Arrays.asList(scheduleDays)
						.indexOf(scheduleDayHeaders.get(scheduleDayHeaders.size() - 1).getAttribute("value"));
			}
			int i = 0;
			while ((!(scheduleObject.isSchedulePeriodForIOSVisible(schedulePeriod))) && i < 10) {
				if (desiredDayIndex > greaterDayIndex) {
					/*touchAction.press(point(10, (int) (dimension.getHeight() * .5)))
					.moveTo(point(0, (int) (dimension.getHeight() * -.4))).release().perform();
					*/
					Schedule.SwipeUp(testCase);

					i++;
				} else if (desiredDayIndex < lesserDayIndex) {
					/*touchAction.press(point(10, (int) (dimension.getHeight() * .5)))
					.moveTo(point(0, (int) (dimension.getHeight() * .4))).release().perform();*/
					Schedule.SwipeDown(testCase);
					i++;
				} else {
					/*touchAction.press(point(10, (int) (dimension.getHeight() * .5)))
					.moveTo(point(0, (int) (dimension.getHeight() * -.4))).release().perform();*/
					Schedule.SwipeUp(testCase);
					i++;
				}
			}
			period = scheduleObject.isSchedulePeriodVisible(schedulePeriod);
		}
		inputs.setInputValue(GlobalVariables.PERIOD_NAME_NA + periodCounterToBeDeleted, schedulePeriod);

		Keyword.ReportStep_Pass(testCase, " ");
		Keyword.ReportStep_Pass(testCase, "*************** Deleting period- " + schedulePeriod + " ***************");
		try {
			period.click();
			Keyword.ReportStep_Pass(testCase, "Selected period-" + schedulePeriod);
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed to select the period-" + period);
		}
		if (scheduleObject.isPeriodDeleteIconVisible()) {

			flag = flag && scheduleObject.clickOnPeriodDeleteIconButton();

			if(scheduleObject.isPeriodDeleteDialogBoxMessageVisible()){

				String msg=scheduleObject.getPeriodDeleteDialogBoxMessage();

				try
				{
					if(msg.contains(schedulePeriod.split("_")[0]) && msg.contains(schedulePeriod.split("_")[1])){

						Keyword.ReportStep_Pass(testCase, "Period Delete Dialog Box Message-" + msg+" display");

					}else{
						if( msg.contains(schedulePeriod.split("_")[1])||msg.contains(schedulePeriod.split("_")[1]))
						{
							Keyword.ReportStep_Pass(testCase, "Period Delete Dialog Box Message-" + msg+" display");
						}
						else
						{
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed to display ' "+msg+"' of Dialog Box Message .");

						}

					}
				}
				catch(Exception e)
				{

				}



			}else{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed to locate 'Dialog Box Message' .");

			}

		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed to locate the Period delete icon");
		}
		if (scheduleObject.isConfirmDeleteButtonVisible()) {
			if (!(scheduleObject.clickOnConfirmDeleteButton())) {
				flag = false;
			} else {
				if (scheduleObject.isOptionsButtonVisible(5) || scheduleObject.isCreateNewScheduleVisible(5)) {
					Keyword.ReportStep_Pass(testCase,
							"Schedule period is deleted when clicked on Delete during Delete operation");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Schedule period is not deleted when clicked on Delete during Delete operation");
				}
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Period Confirm Delete button not found");
		}

		Keyword.ReportStep_Pass(testCase,
				"*************** Completed deleting period- " + schedulePeriod + " ***************");

		if (schedulePeriod.contains("Wake") || schedulePeriod.contains("1")) {
			inputs.setInputValue(GlobalVariables.EVERYDAY_WAKE_TIME, "Tap to set");

		} else if (schedulePeriod.contains("Away") || schedulePeriod.contains("2")) {
			inputs.setInputValue(GlobalVariables.EVERYDAY_AWAY_TIME, "Tap to set");

		} else if (schedulePeriod.contains("Home") || schedulePeriod.contains("3")) {
			inputs.setInputValue(GlobalVariables.EVERYDAY_HOME_TIME, "Tap to set");

		} else if (schedulePeriod.contains("Sleep") || schedulePeriod.contains("4")) {
			inputs.setInputValue(GlobalVariables.EVERYDAY_SLEEP_TIME, "Tap to set");

		}

		return flag;
	}

	public static boolean selectIndividualDaysViewOrGroupedDaysView(TestCases testCase,TestCaseInputs inputs, String viewDays) {

		boolean flag = true;
		Schedule scheduleObject = new Schedule(testCase);
		try {
			if (!(scheduleObject.isViewByIndividualDaysVisible(5))) {
				flag = flag && viewScheduleOnPrimaryCards(testCase, inputs);
				if (!(scheduleObject.clickOnViewByGroupedDaysButton())) {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "App not in schedule view screen");
				}
			}

			if ("Individual Days".equalsIgnoreCase(viewDays)) {
				if (scheduleObject.isViewByIndividualDaysVisible(10)) {
					if (!(scheduleObject.clickOnViewByIndividualDaysButton())) {
						flag = false;
					} else {
						Keyword.ReportStep_Pass(testCase, "Selected View by Individual days");
					}
				}
			} else {
				if (scheduleObject.isViewByGroupedDaysVisible(5)) {
					if (!(scheduleObject.clickOnViewByGroupedDaysButton())) {
						flag = false;
					} else {
						Keyword.ReportStep_Pass(testCase, "Selected View by Grouped days");
					}
				}
			}

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Error occurred : " + e.getMessage());
		}

		return flag;
	}



	public static boolean viewScheduleOnPrimaryCards(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = false;
		PrimaryCard pc = new PrimaryCard(testCase);
		Schedule sc=new Schedule(testCase); 
		
		flag = flag && CoachMarkUtils.closeCoachMarks(testCase);
		
		
		if (!pc.isScheduleIconVisible()) {
			if(pc.isMoreTextVisible(5)){
				pc.clickonMoreText();
			}
		}
		if (pc.isScheduleIconVisible()) {
			 if(pc.clickOnScheduleIcon()) {
				 if(sc.isOptionsButtonVisible(3) || sc.isCreateNewScheduleVisible(3)) {
					 flag=true;
				 }else {
					 if(pc.isCrossButtonVisible()) {
						 if(pc.ClickOnCrossButton()) {
							 if (pc.isScheduleIconVisible()) {
								 if(pc.clickOnScheduleIcon()) {
									 if(sc.isOptionsButtonVisible(3)) {
										 flag=true;
									 }else {
										 flag = false;
									 }
						 
								 }
					 
							 }
						 }
					 }
				 
				 }
			 }
		}
		return flag;
	}

	public static boolean verifyScheduleEdited(TestCases testCase, TestCaseInputs inputs, String scheduleType) {
		boolean flag = true;
		HashMap<String, MobileObject> fieldObjects = MobileUtils.loadObjectFile(testCase, "ScheduleScreen");

		Schedule ScheduleObject = new Schedule(testCase);
		List<WebElement> schedule_setpoints = null;
		WebElement setPointIOS = null;
		String tempHeatSetPointApp = "", tempCoolSetPointApp = "", tempHeatSetPointFromInputs = "",
				tempCoolSetPointFromInputs = "", SleepStartEndTime = "", SleepStartTime = "", SleepEndTime = "",
				periodStartTimeApp = "", periodStartTimeInputs = "";
		String[] scheduleDays = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
		List<WebElement> scheduleDayHeaders = null;
		int desiredDayIndex = 0, lesserDayIndex = 0, greaterDayIndex = 0;

		flag = flag && viewScheduleOnPrimaryCards(testCase,inputs);

		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		List<String> allowedModes = null;
		try {
			allowedModes = statInfo.getAllowedModes();
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		if (scheduleType.equalsIgnoreCase("geofence")) {
			// ============================================ANDROID============================================================
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				if (allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("ID", "scheduling_period_heating_point", testCase, 5)) {
						schedule_setpoints = MobileUtils.getMobElements(testCase, "ID",
								"scheduling_period_heating_point");
						tempHeatSetPointApp = schedule_setpoints.get(0).getText();
						if (tempHeatSetPointApp.contains(".0")) {
							tempHeatSetPointApp = schedule_setpoints.get(0).getText().split("\\.")[0];
						}
						else if(tempHeatSetPointApp.contains("\u00B0")) {
							tempHeatSetPointApp = schedule_setpoints.get(0).getText().split("\\u00B0")[0];
						}
						tempHeatSetPointFromInputs = inputs.getInputValue(GlobalVariables.GEOFENCE_HOME_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs.split("\\.")[0];
						}
						if (tempHeatSetPointApp.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[HomeSettings] Home heat set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"[HomeSettings] Home heat set point: " + tempHeatSetPointFromInputs
									+ " is not shown correctly in solution card: " + tempHeatSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule heat set points");
					}
					if (MobileUtils.isMobElementExists("ID", "scheduling_period_cooling_point", testCase, 5)) {
						schedule_setpoints = MobileUtils.getMobElements(testCase, "ID",
								"scheduling_period_cooling_point");
						tempCoolSetPointApp = schedule_setpoints.get(0).getText();
						if (schedule_setpoints.get(0).getText().contains(".0")) {
							tempCoolSetPointApp = schedule_setpoints.get(0).getText().split("\\.")[0];
						}
						else if(tempCoolSetPointApp.contains("\u00B0")) {
							tempCoolSetPointApp = schedule_setpoints.get(0).getText().split("\\u00B0")[0];
						}

						tempCoolSetPointFromInputs = inputs.getInputValue(GlobalVariables.GEOFENCE_HOME_COOL_SETPOINT);
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs.split("\\.")[0];
						}
						if (tempCoolSetPointApp.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[HomeSettings] Home cool set point is shown correctly in solution card: "
											+ tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"[HomeSettings] Home cool set point: " + tempCoolSetPointFromInputs
									+ " is not shown correctly in solution card: " + tempCoolSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule cool set points");
					}
				} else if (allowedModes.contains("Cool") && !allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("ID", "scheduling_period_cooling_point", testCase, 5)) {
						schedule_setpoints = MobileUtils.getMobElements(testCase, "ID",
								"scheduling_period_cooling_point");
						tempCoolSetPointApp = schedule_setpoints.get(0).getText();
						if (schedule_setpoints.get(0).getText().contains(".0")) {
							tempCoolSetPointApp = schedule_setpoints.get(0).getText().split("\\.")[0];
						}
						else if(tempCoolSetPointApp.contains("\u00B0")) {
							tempCoolSetPointApp = schedule_setpoints.get(0).getText().split("\\u00B0")[0];
						}

						tempCoolSetPointFromInputs = inputs.getInputValue(GlobalVariables.GEOFENCE_HOME_COOL_SETPOINT);
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs.split("\\.")[0];
						}

						if (tempCoolSetPointApp.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[HomeSettings] Home cool set point is shown correctly in solution card: "
											+ tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"[HomeSettings] Home cool set point: " + tempCoolSetPointFromInputs
									+ " is not shown correctly in solution card: " + tempCoolSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule cool set points");
					}
				} else if (!allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("ID", "scheduling_period_heating_point", testCase, 5)) {
						schedule_setpoints = MobileUtils.getMobElements(testCase, "ID",
								"scheduling_period_heating_point");
						tempHeatSetPointApp = schedule_setpoints.get(0).getText();
						if (schedule_setpoints.get(0).getText().contains(".0")) {
							tempHeatSetPointApp = schedule_setpoints.get(0).getText().split("\\.")[0];
						}
						else if(tempHeatSetPointApp.contains("\u00B0")) {
							tempHeatSetPointApp = schedule_setpoints.get(0).getText().split("\\u00B0")[0];
						}

						tempHeatSetPointFromInputs = inputs.getInputValue(GlobalVariables.GEOFENCE_HOME_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs.split("\\.")[0];
						}
						if (tempHeatSetPointApp.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[HomeSettings] Home heat set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"[HomeSettings] Home heat set point: " + tempHeatSetPointFromInputs
									+ " is not shown correctly in solution card: " + tempHeatSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule heat set points");
					}
				}
			} else {
				// ==================================================IOS========================================================
				if (allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("name", "Geofence_Home_HeatTemperature", testCase, 5)) {
						setPointIOS = MobileUtils.getMobElement(testCase, "name", "Geofence_Home_HeatTemperature");
						tempHeatSetPointApp = setPointIOS.getAttribute("value");
						if (tempHeatSetPointApp.contains(".0")) {
							tempHeatSetPointApp = tempHeatSetPointApp.split("\\.")[0];
						}
						else if(tempHeatSetPointApp.contains("\u00B0")) {
							tempHeatSetPointApp = tempHeatSetPointApp.split("\\u00B0")[0];
						}
						else if(tempHeatSetPointApp.contains(String.valueOf(InputVariables.degreeIOS))) {

							tempHeatSetPointApp=tempHeatSetPointApp.split(String.valueOf(InputVariables.degreeIOS))[0];
						}
						tempHeatSetPointFromInputs = inputs.getInputValue(GlobalVariables.GEOFENCE_HOME_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs.split("\\.")[0];
						}
						if (tempHeatSetPointApp.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[HomeSettings] Home heat set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"[HomeSettings] Home heat set point: " + tempHeatSetPointFromInputs
									+ " is not shown correctly in solution card: " + tempHeatSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule heat set points");
					}
					if (MobileUtils.isMobElementExists("name", "Geofence_Home_CoolTemperature", testCase, 5)) {
						setPointIOS = MobileUtils.getMobElement(testCase, "name", "Geofence_Home_CoolTemperature");
						tempCoolSetPointApp = setPointIOS.getAttribute("value");
						if (tempCoolSetPointApp.contains(".0")) {
							tempCoolSetPointApp = tempCoolSetPointApp.split("\\.")[0];
						}
						else if(tempCoolSetPointApp.contains("\u00B0")) {
							tempCoolSetPointApp = tempCoolSetPointApp.split("\\u00B0")[0];
						}
						else if(tempCoolSetPointApp.contains(String.valueOf(InputVariables.degreeIOS))) {

							tempCoolSetPointApp=tempCoolSetPointApp.split(String.valueOf(InputVariables.degreeIOS))[0];
						}
						tempCoolSetPointFromInputs = inputs.getInputValue(GlobalVariables.GEOFENCE_HOME_COOL_SETPOINT);
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs.split("\\.")[0];
						}
						if (tempCoolSetPointApp.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[HomeSettings] Home cool set point is shown correctly in solution card: "
											+ tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"[HomeSettings] Home cool set point: " + tempCoolSetPointFromInputs
									+ " is not shown correctly in solution card: " + tempCoolSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule cool set points");
					}
				} else if (allowedModes.contains("Cool") && !allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("name", "Geofence_Home_CoolTemperature", testCase, 5)) {
						setPointIOS = MobileUtils.getMobElement(testCase, "name", "Geofence_Home_CoolTemperature");
						tempCoolSetPointApp = setPointIOS.getAttribute("value");
						if (tempCoolSetPointApp.contains(".0")) {
							tempCoolSetPointApp = tempCoolSetPointApp.split("\\.")[0];
						}
						else if(tempCoolSetPointApp.contains("\u00B0")) {
							tempCoolSetPointApp = tempCoolSetPointApp.split("\\u00B0")[0];
						}
						tempCoolSetPointFromInputs = inputs.getInputValue(GlobalVariables.GEOFENCE_HOME_COOL_SETPOINT);
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs.split("\\.")[0];
						}
						if (tempCoolSetPointApp.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[HomeSettings] Home cool set point is shown correctly in solution card: "
											+ tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"[HomeSettings] Home cool set point: " + tempCoolSetPointFromInputs
									+ " is not shown correctly in solution card: " + tempCoolSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule cool set points");
					}
				} else if (!allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("name", "Geofence_Home_HeatTemperature", testCase, 5)) {
						setPointIOS = MobileUtils.getMobElement(testCase, "name", "Geofence_Home_HeatTemperature");
						tempHeatSetPointApp = setPointIOS.getAttribute("value");
						if (tempHeatSetPointApp.contains(".0")) {
							tempHeatSetPointApp = tempHeatSetPointApp.split("\\.")[0];
						}
						else if(tempHeatSetPointApp.contains("\u00B0")) {
							tempHeatSetPointApp = tempHeatSetPointApp.split("\\u00B0")[0];
						}
						tempHeatSetPointFromInputs = inputs.getInputValue(GlobalVariables.GEOFENCE_HOME_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs.split("\\.")[0];
						}
						if (tempHeatSetPointApp.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[HomeSettings] Home heat set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"[HomeSettings] Home heat set point: " + tempHeatSetPointFromInputs
									+ " is not shown correctly in solution card: " + tempHeatSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule heat set points");
					}
				}
			}
			if (inputs.getInputValue(GlobalVariables.SET_GEOFENCE_SLEEP_TIMER).equalsIgnoreCase("No")) {
				if (MobileUtils.isMobElementExists(fieldObjects, testCase, "CreateSleepSettings", 5)) {
					Keyword.ReportStep_Pass(testCase, "Create Sleep Settings is shown on solution card");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Failed to find Create Sleep Settings option on solution card");
				}
			} else {
				// ============================================ANDROID============================================================
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					if (allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
						if (MobileUtils.isMobElementExists("ID", "scheduling_period_heating_point", testCase, 5)) {
							schedule_setpoints = MobileUtils.getMobElements(testCase, "ID",
									"scheduling_period_heating_point");
							tempHeatSetPointApp = schedule_setpoints.get(1).getText();
							if (schedule_setpoints.get(1).getText().contains(".0")) {
								tempHeatSetPointApp = schedule_setpoints.get(1).getText().split("\\.")[0];
							}
							else if(tempHeatSetPointApp.contains("\u00B0")) {
								tempHeatSetPointApp = schedule_setpoints.get(1).getText().split("\\u00B0")[0];
							}

							tempHeatSetPointFromInputs = inputs
									.getInputValue(GlobalVariables.GEOFENCE_SLEEP_HEAT_SETPOINT);
							if (tempHeatSetPointFromInputs.contains(".0")) {
								tempHeatSetPointFromInputs = tempHeatSetPointFromInputs.split("\\.")[0];
							}
							if (tempHeatSetPointApp.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
								Keyword.ReportStep_Pass(testCase,
										"[SleepSettings] Sleep heat set point is shown correctly in solution card: "
												+ tempHeatSetPointApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"[SleepSettings] Sleep heat set point: " + tempHeatSetPointFromInputs
										+ " is not shown correctly in solution card: " + tempHeatSetPointApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Failed to locate schedule heat set points");
						}
						if (MobileUtils.isMobElementExists("ID", "scheduling_period_cooling_point", testCase, 5)) {
							schedule_setpoints = MobileUtils.getMobElements(testCase, "ID",
									"scheduling_period_cooling_point");
							tempCoolSetPointApp = schedule_setpoints.get(1).getText();
							if (schedule_setpoints.get(1).getText().contains(".0")) {
								tempCoolSetPointApp = schedule_setpoints.get(1).getText().split("\\.")[0];
							}
							else if(tempCoolSetPointApp.contains("\u00B0")) {
								tempCoolSetPointApp = schedule_setpoints.get(1).getText().split("\\u00B0")[0];
							}
							tempCoolSetPointFromInputs = inputs
									.getInputValue(GlobalVariables.GEOFENCE_SLEEP_COOL_SETPOINT);
							if (tempCoolSetPointFromInputs.contains(".0")) {
								tempCoolSetPointFromInputs = tempCoolSetPointFromInputs.split("\\.")[0];
							}
							if (tempCoolSetPointApp.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
								Keyword.ReportStep_Pass(testCase,
										"[SleepSettings] Sleep cool set point is shown correctly in solution card: "
												+ tempCoolSetPointApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"[SleepSettings] Sleep cool set point: " + tempCoolSetPointFromInputs
										+ " is not shown correctly in solution card: " + tempCoolSetPointApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Failed to locate schedule cool set points");
						}
					} else if (allowedModes.contains("Cool") && !allowedModes.contains("Heat")) {
						if (MobileUtils.isMobElementExists("ID", "scheduling_period_cooling_point", testCase, 5)) {
							schedule_setpoints = MobileUtils.getMobElements(testCase, "ID",
									"scheduling_period_cooling_point");
							tempCoolSetPointApp = schedule_setpoints.get(1).getText();
							if (schedule_setpoints.get(1).getText().contains(".0")) {
								tempCoolSetPointApp = schedule_setpoints.get(1).getText().split("\\.")[0];
							}
							else if(tempCoolSetPointApp.contains("\u00B0"))
							{
								tempCoolSetPointApp = schedule_setpoints.get(1).getText().split("\\u00B0")[0];
							}

							tempCoolSetPointFromInputs = inputs
									.getInputValue(GlobalVariables.GEOFENCE_SLEEP_COOL_SETPOINT);
							if (tempCoolSetPointFromInputs.contains(".0")) {
								tempCoolSetPointFromInputs = tempCoolSetPointFromInputs.split("\\.")[0];
							}
							if (tempCoolSetPointApp.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
								Keyword.ReportStep_Pass(testCase,
										"[SleepSettings] Sleep cool set point is shown correctly in solution card: "
												+ tempCoolSetPointApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"[SleepSettings] Sleep cool set point: " + tempCoolSetPointFromInputs
										+ " is not shown correctly in solution card: " + tempCoolSetPointApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Failed to locate schedule cool set points");
						}
					} else if (!allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
						if (MobileUtils.isMobElementExists("ID", "scheduling_period_heating_point", testCase, 5)) {
							schedule_setpoints = MobileUtils.getMobElements(testCase, "ID",
									"scheduling_period_heating_point");
							tempHeatSetPointApp = schedule_setpoints.get(1).getText();
							if (schedule_setpoints.get(1).getText().contains(".0")) {
								tempHeatSetPointApp = schedule_setpoints.get(1).getText().split("\\.")[0];
							}
							else if(tempHeatSetPointApp.contains("\u00B0"))
							{
								tempHeatSetPointApp = schedule_setpoints.get(1).getText().split("\\u00B0")[0];
							}

							tempHeatSetPointFromInputs = inputs
									.getInputValue(GlobalVariables.GEOFENCE_SLEEP_HEAT_SETPOINT);
							if (tempHeatSetPointFromInputs.contains(".0")) {
								tempHeatSetPointFromInputs = tempHeatSetPointFromInputs.split("\\.")[0];
							}
							if (tempHeatSetPointApp.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
								Keyword.ReportStep_Pass(testCase,
										"[SleepSettings] Sleep heat set point is shown correctly in solution card: "
												+ tempHeatSetPointApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"[SleepSettings] Sleep heat set point: " + tempHeatSetPointFromInputs
										+ " is not shown correctly in solution card: " + tempHeatSetPointApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Failed to locate schedule heat set points");
						}
					}
					SleepStartEndTime = MobileUtils.getMobElement(testCase, "ID", "scheduling_period_startEnd_time")
							.getText();

					String dateString = SleepStartEndTime.replaceAll("\\.", "");
					String startTimeTemp, endTimeTemp;
					try {
						if (!dateString.contains("m") && !dateString.contains("M")) {
							final SimpleDateFormat sdf = new SimpleDateFormat("H:mm");
							final Date dateObj1 = sdf.parse(SleepStartEndTime.split("\\s+")[0]);
							startTimeTemp = new SimpleDateFormat("hh:mm aa").format(dateObj1);
							final Date dateObj2 = sdf.parse(SleepStartEndTime.split("\\s+")[2]);
							endTimeTemp = new SimpleDateFormat("hh:mm aa").format(dateObj2);
							SleepStartEndTime = startTimeTemp + " - " + endTimeTemp;
						}
					} catch (NumberFormatException e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"[NumberFormatException] Error message: " + e.getMessage());
					} catch (ParseException e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"[ParseException] Error message: " + e.getMessage());
					} catch (Exception e) {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"[Exception] Error message: " + e.getMessage());
					}

					SleepStartTime = SleepStartEndTime.split("\\s+")[0] + " " + SleepStartEndTime.split("\\s+")[1];
					SleepEndTime = SleepStartEndTime.split("\\s+")[3] + " " + SleepStartEndTime.split("\\s+")[4];
					if (SleepStartTime
							.equalsIgnoreCase(inputs.getInputValue(GlobalVariables.GEOFENCE_SLEEP_START_TIME))) {
						Keyword.ReportStep_Pass(testCase,
								"[SleepSettings] Sleep Start time is shown correctly in solution card: "
										+ SleepStartTime);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"[SleepSettings] Sleep Start time: "
										+ inputs.getInputValue(GlobalVariables.GEOFENCE_SLEEP_START_TIME)
										+ " is not shown correctly in solution card: " + SleepStartTime);
					}
					if (SleepEndTime.equalsIgnoreCase(inputs.getInputValue(GlobalVariables.GEOFENCE_SLEEP_END_TIME))) {
						Keyword.ReportStep_Pass(testCase,
								"[SleepSettings] Sleep End time is shown correctly in solution card: " + SleepEndTime);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"[SleepSettings] Sleep End time: "
										+ inputs.getInputValue(GlobalVariables.GEOFENCE_SLEEP_END_TIME)
										+ " is not shown correctly in solution card: " + SleepEndTime);
					}
				} else {
					// ==================================================IOS========================================================
					if (allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
						if (MobileUtils.isMobElementExists("name", "Geofence_Sleep_HeatTemperature", testCase, 5)) {
							setPointIOS = MobileUtils.getMobElement(testCase, "name", "Geofence_Sleep_HeatTemperature");
							tempHeatSetPointApp = setPointIOS.getAttribute("value");
							if (tempHeatSetPointApp.contains(".0")) {
								tempHeatSetPointApp = tempHeatSetPointApp.split("\\.")[0];
							}
							else if(tempHeatSetPointApp.contains("\u00B0"))
							{
								tempHeatSetPointApp = tempHeatSetPointApp.split("\\u00B0")[0];
							}

							tempHeatSetPointFromInputs = inputs
									.getInputValue(GlobalVariables.GEOFENCE_SLEEP_HEAT_SETPOINT);
							if (tempHeatSetPointFromInputs.contains(".0")) {
								tempHeatSetPointFromInputs = tempHeatSetPointFromInputs.split("\\.")[0];
							}
							if (tempHeatSetPointApp.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
								Keyword.ReportStep_Pass(testCase,
										"[SleepSettings] Sleep heat set point is shown correctly in solution card: "
												+ tempHeatSetPointApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"[SleepSettings] Sleep heat set point: " + tempHeatSetPointFromInputs
										+ " is not shown correctly in solution card: " + tempHeatSetPointApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Failed to locate schedule heat set points");
						}
						if (MobileUtils.isMobElementExists("name", "Geofence_Sleep_CoolTemperature", testCase, 5)) {
							setPointIOS = MobileUtils.getMobElement(testCase, "name", "Geofence_Sleep_CoolTemperature");
							tempCoolSetPointApp = setPointIOS.getAttribute("value");
							if (tempCoolSetPointApp.contains(".0")) {
								tempCoolSetPointApp = tempCoolSetPointApp.split("\\.")[0];
							}
							else if(tempCoolSetPointApp.contains("\u00B0"))
							{
								tempCoolSetPointApp = tempCoolSetPointApp.split("\\u00B0")[0];
							}

							tempCoolSetPointFromInputs = inputs
									.getInputValue(GlobalVariables.GEOFENCE_SLEEP_COOL_SETPOINT);
							if (tempCoolSetPointFromInputs.contains(".0")) {
								tempCoolSetPointFromInputs = tempCoolSetPointFromInputs.split("\\.")[0];
							}
							if (tempCoolSetPointApp.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
								Keyword.ReportStep_Pass(testCase,
										"[SleepSettings] Sleep cool set point is shown correctly in solution card: "
												+ tempCoolSetPointApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"[SleepSettings] Sleep cool set point: " + tempCoolSetPointFromInputs
										+ " is not shown correctly in solution card: " + tempCoolSetPointApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Failed to locate schedule cool set points");
						}
					} else if (allowedModes.contains("Cool") && !allowedModes.contains("Heat")) {
						if (MobileUtils.isMobElementExists("name", "Geofence_Sleep_CoolTemperature", testCase, 5)) {
							setPointIOS = MobileUtils.getMobElement(testCase, "name", "Geofence_Sleep_CoolTemperature");
							tempCoolSetPointApp = setPointIOS.getAttribute("value");
							if (tempCoolSetPointApp.contains(".0")) {
								tempCoolSetPointApp = tempCoolSetPointApp.split("\\.")[0];
							}
							else if(tempCoolSetPointApp.contains("\u00B0"))
							{
								tempCoolSetPointApp = tempCoolSetPointApp.split("\\u00B0")[0];
							}

							tempCoolSetPointFromInputs = inputs
									.getInputValue(GlobalVariables.GEOFENCE_SLEEP_COOL_SETPOINT);
							if (tempCoolSetPointFromInputs.contains(".0")) {
								tempCoolSetPointFromInputs = tempCoolSetPointFromInputs.split("\\.")[0];
							}
							if (tempCoolSetPointApp.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
								Keyword.ReportStep_Pass(testCase,
										"[SleepSettings] Sleep cool set point is shown correctly in solution card: "
												+ tempCoolSetPointApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"[SleepSettings] Sleep cool set point: " + tempCoolSetPointFromInputs
										+ " is not shown correctly in solution card: " + tempCoolSetPointApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Failed to locate schedule cool set points");
						}
					} else if (!allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
						if (MobileUtils.isMobElementExists("name", "Geofence_Sleep_HeatTemperature", testCase, 5)) {
							setPointIOS = MobileUtils.getMobElement(testCase, "name", "Geofence_Sleep_HeatTemperature");
							tempHeatSetPointApp = setPointIOS.getAttribute("value");
							if (tempHeatSetPointApp.contains(".0")) {
								tempHeatSetPointApp = tempHeatSetPointApp.split("\\.")[0];
							}
							else if(tempHeatSetPointApp.contains("\u00B0"))
							{
								tempHeatSetPointApp = tempHeatSetPointApp.split("\\u00B0")[0];
							}


							tempHeatSetPointFromInputs = inputs
									.getInputValue(GlobalVariables.GEOFENCE_SLEEP_HEAT_SETPOINT);
							if (tempHeatSetPointFromInputs.contains(".0")) {
								tempHeatSetPointFromInputs = tempHeatSetPointFromInputs.split("\\.")[0];
							}
							if (tempHeatSetPointApp.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
								Keyword.ReportStep_Pass(testCase,
										"[SleepSettings] Sleep heat set point is shown correctly in solution card: "
												+ tempHeatSetPointApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"[SleepSettings] Sleep heat set point: " + tempHeatSetPointFromInputs
										+ " is not shown correctly in solution card: " + tempHeatSetPointApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Failed to locate schedule heat set points");
						}
					}
					SleepStartEndTime = MobileUtils.getMobElement(testCase, "name", "Geofence_Sleep_subTitle")
							.getAttribute("value");
					SleepStartTime = SleepStartEndTime.split("\\s+")[0] + " " + SleepStartEndTime.split("\\s+")[1];
					SleepEndTime = SleepStartEndTime.split("\\s+")[3] + " " + SleepStartEndTime.split("\\s+")[4];
					if (SleepStartTime
							.equalsIgnoreCase(inputs.getInputValue(GlobalVariables.GEOFENCE_SLEEP_START_TIME))) {
						Keyword.ReportStep_Pass(testCase,
								"[SleepSettings] Sleep Start time is shown correctly in solution card: "
										+ SleepStartTime);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"[SleepSettings] Sleep Start time: "
										+ inputs.getInputValue(GlobalVariables.GEOFENCE_SLEEP_START_TIME)
										+ " is not shown correctly in solution card: " + SleepStartTime);
					}
					if (SleepEndTime.equalsIgnoreCase(inputs.getInputValue(GlobalVariables.GEOFENCE_SLEEP_END_TIME))) {
						Keyword.ReportStep_Pass(testCase,
								"[SleepSettings] Sleep End time is shown correctly in solution card: " + SleepEndTime);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"[SleepSettings] Sleep End time: "
										+ inputs.getInputValue(GlobalVariables.GEOFENCE_SLEEP_END_TIME)
										+ " is not shown correctly in solution card: " + SleepEndTime);
					}
				}
			}
			// ============================================ANDROID============================================================
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				int i;
				if (inputs.getInputValue(GlobalVariables.SET_GEOFENCE_SLEEP_TIMER).equalsIgnoreCase("Yes")) {
					i = 2;
				} else {
					i = 1;
				}
				if (allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("ID", "scheduling_period_heating_point", testCase, 5)) {
						schedule_setpoints = MobileUtils.getMobElements(testCase, "ID",
								"scheduling_period_heating_point");
						tempHeatSetPointApp = schedule_setpoints.get(i).getText();
						if (schedule_setpoints.get(i).getText().contains(".0")) {
							tempHeatSetPointApp = schedule_setpoints.get(i).getText().split("\\.")[0];
						}
						else if(tempHeatSetPointApp.contains("\u00B0"))
						{
							tempHeatSetPointApp = schedule_setpoints.get(i).getText().split("\\u00B0")[0];
						}


						tempHeatSetPointFromInputs = inputs.getInputValue(GlobalVariables.GEOFENCE_AWAY_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs.split("\\.")[0];
						}
						if (tempHeatSetPointApp.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away heat set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away heat set point: " + tempHeatSetPointFromInputs
									+ " is not shown correctly in solution card: " + tempHeatSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule heat set points");
					}
					if (MobileUtils.isMobElementExists("ID", "scheduling_period_cooling_point", testCase, 5)) {
						schedule_setpoints = MobileUtils.getMobElements(testCase, "ID",
								"scheduling_period_cooling_point");
						tempCoolSetPointApp = schedule_setpoints.get(i).getText();
						if (schedule_setpoints.get(i).getText().contains(".0")) {
							tempCoolSetPointApp = schedule_setpoints.get(i).getText().split("\\.")[0];
						}
						else if(tempCoolSetPointApp.contains("\u00B0"))
						{
							tempCoolSetPointApp = schedule_setpoints.get(i).getText().split("\\u00B0")[0];
						}

						tempCoolSetPointFromInputs = inputs.getInputValue(GlobalVariables.GEOFENCE_AWAY_COOL_SETPOINT);
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs.split("\\.")[0];
						}
						if (tempCoolSetPointApp.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away cool set point is shown correctly in solution card: "
											+ tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away cool set point: " + tempCoolSetPointFromInputs
									+ " is not shown correctly in solution card: " + tempCoolSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule cool set points");
					}
				} else if (allowedModes.contains("Cool") && !allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("ID", "scheduling_period_cooling_point", testCase, 5)) {
						schedule_setpoints = MobileUtils.getMobElements(testCase, "ID",
								"scheduling_period_cooling_point");
						tempCoolSetPointApp = schedule_setpoints.get(i).getText();
						if (schedule_setpoints.get(i).getText().contains(".0")) {
							tempCoolSetPointApp = schedule_setpoints.get(i).getText().split("\\.")[0];
						}
						else if(tempCoolSetPointApp.contains("\u00B0"))
						{
							tempCoolSetPointApp = schedule_setpoints.get(i).getText().split("\\u00B0")[0];
						}

						tempCoolSetPointFromInputs = inputs.getInputValue(GlobalVariables.GEOFENCE_AWAY_COOL_SETPOINT);
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs.split("\\.")[0];
						}
						if (tempCoolSetPointApp.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away cool set point is shown correctly in solution card: "
											+ tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away cool set point: " + tempCoolSetPointFromInputs
									+ " is not shown correctly in solution card: " + tempCoolSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule cool set points");
					}
				} else if (!allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("ID", "scheduling_period_heating_point", testCase, 5)) {
						schedule_setpoints = MobileUtils.getMobElements(testCase, "ID",
								"scheduling_period_heating_point");
						tempHeatSetPointApp = schedule_setpoints.get(i).getText();
						if (schedule_setpoints.get(i).getText().contains(".0")) {
							tempHeatSetPointApp = schedule_setpoints.get(i).getText().split("\\.")[0];
						}
						else if(tempHeatSetPointApp.contains("\u00B0"))
						{
							tempHeatSetPointApp = schedule_setpoints.get(i).getText().split("\\u00B0")[0];
						}

						tempHeatSetPointFromInputs = inputs.getInputValue(GlobalVariables.GEOFENCE_AWAY_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs.split("\\.")[0];
						}
						if (tempHeatSetPointApp.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away heat set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away heat set point: " + tempHeatSetPointFromInputs
									+ " is not shown correctly in solution card: " + tempHeatSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule heat set points");
					}
				}
			} else {
				// ==================================================IOS========================================================
				if (allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("name", "Geofence_Away_HeatTemperature", testCase, 5)) {
						setPointIOS = MobileUtils.getMobElement(testCase, "name", "Geofence_Away_HeatTemperature");
						tempHeatSetPointApp = setPointIOS.getAttribute("value");
						if (tempHeatSetPointApp.contains(".0")) {
							tempHeatSetPointApp = tempHeatSetPointApp.split("\\.")[0];
						}
						else if(tempHeatSetPointApp.contains("\u00B0"))
						{
							tempHeatSetPointApp = tempHeatSetPointApp.split("\\u00B0")[0];
						}

						else if(tempHeatSetPointApp.contains(String.valueOf(InputVariables.degreeIOS))) {

							tempHeatSetPointApp=tempHeatSetPointApp.split(String.valueOf(InputVariables.degreeIOS))[0];
						}
						tempHeatSetPointFromInputs = inputs.getInputValue(GlobalVariables.GEOFENCE_AWAY_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs.split("\\.")[0];
						}
						if (tempHeatSetPointApp.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away heat set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away heat set point: " + tempHeatSetPointFromInputs
									+ " is not shown correctly in solution card: " + tempHeatSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule heat set points");
					}
					if (MobileUtils.isMobElementExists("name", "Geofence_Away_CoolTemperature", testCase, 5)) {
						setPointIOS = MobileUtils.getMobElement(testCase, "name", "Geofence_Away_CoolTemperature");
						tempCoolSetPointApp = setPointIOS.getAttribute("value");
						if (tempCoolSetPointApp.contains(".0")) {
							tempCoolSetPointApp = tempCoolSetPointApp.split("\\.")[0];
						}
						else if(tempCoolSetPointApp.contains("\u00B0"))
						{
							tempCoolSetPointApp = tempCoolSetPointApp.split("\\u00B0")[0];
						}

						else if(tempCoolSetPointApp.contains(String.valueOf(InputVariables.degreeIOS))) {

							tempCoolSetPointApp=tempCoolSetPointApp.split(String.valueOf(InputVariables.degreeIOS))[0];
						}
						tempCoolSetPointFromInputs = inputs.getInputValue(GlobalVariables.GEOFENCE_AWAY_COOL_SETPOINT);
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs.split("\\.")[0];
						}
						if (tempCoolSetPointApp.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away cool set point is shown correctly in solution card: "
											+ tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away cool set point: " + tempCoolSetPointFromInputs
									+ " is not shown correctly in solution card: " + tempCoolSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule cool set points");
					}
				} else if (allowedModes.contains("Cool") && !allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("name", "Geofence_Away_CoolTemperature", testCase, 5)) {
						setPointIOS = MobileUtils.getMobElement(testCase, "name", "Geofence_Away_CoolTemperature");
						tempCoolSetPointApp = setPointIOS.getAttribute("value");
						if (tempCoolSetPointApp.contains(".0")) {
							tempCoolSetPointApp = tempCoolSetPointApp.split("\\.")[0];
						}
						else if(tempCoolSetPointApp.contains("\u00B0"))
						{
							tempCoolSetPointApp = tempCoolSetPointApp.split("\\u00B0")[0];
						}

						tempCoolSetPointFromInputs = inputs.getInputValue(GlobalVariables.GEOFENCE_AWAY_COOL_SETPOINT);
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs.split("\\.")[0];
						}
						if (tempCoolSetPointApp.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away cool set point is shown correctly in solution card: "
											+ tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away cool set point: " + tempCoolSetPointFromInputs
									+ " is not shown correctly in solution card: " + tempCoolSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule cool set points");
					}
				} else if (!allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
					if (MobileUtils.isMobElementExists("name", "Geofence_Away_HeatTemperature", testCase, 5)) {
						setPointIOS = MobileUtils.getMobElement(testCase, "name", "Geofence_Away_HeatTemperature");
						tempHeatSetPointApp = setPointIOS.getAttribute("value");
						if (tempHeatSetPointApp.contains(".0")) {
							tempHeatSetPointApp = tempHeatSetPointApp.split("\\.")[0];
						}
						else if(tempHeatSetPointApp.contains("\u00B0"))
						{
							tempHeatSetPointApp = tempHeatSetPointApp.split("\\u00B0")[0];
						}


						tempHeatSetPointFromInputs = inputs.getInputValue(GlobalVariables.GEOFENCE_AWAY_HEAT_SETPOINT);
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs.split("\\.")[0];
						}
						if (tempHeatSetPointApp.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"[AwaySettings] Away heat set point is shown correctly in solution card: "
											+ tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"[AwaySettings] Away heat set point: " + tempHeatSetPointFromInputs
									+ " is not shown correctly in solution card: " + tempHeatSetPointApp);
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Failed to locate schedule heat set points");
					}
				}
			}
		} else if (scheduleType.equalsIgnoreCase("Everyday")) {
			if (inputs.getInputValue(GlobalVariables.SHOW_VIEW_TYPE).equalsIgnoreCase("Grouped Days")) {
				flag = flag && optikUtils.selectIndividualDaysViewOrGroupedDaysView(testCase,inputs,"Grouped Days");
			} else if (inputs.getInputValue(GlobalVariables.SHOW_VIEW_TYPE).equalsIgnoreCase("Individual Days")) {
				flag = flag && optikUtils.selectIndividualDaysViewOrGroupedDaysView(testCase,inputs, "Individual Days");
			}

			WebElement period = null;
			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			int height = dimension.getHeight();
			int width = dimension.getWidth();
			TouchAction touchAction = new TouchAction(testCase.getMobileDriver());

			for (int i = 1; i <= 4; i++) {
				if (!inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).isEmpty()
						&& inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i) != null) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						if (!(ScheduleObject.isPERIOD_NAME_NAVisibles(inputs, i))) {
							//testCase.getMobileDriver().scrollToExact(inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).split("_")[1]);
							testCase.getMobileDriver().scrollToExact(inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).split("_")[1].toUpperCase());
							while (!(ScheduleObject.isPERIOD_NAME_NAVisibles(inputs, i))) {
								touchAction.press(point(width / 2, height / 2)).waitAction(waitOptions(MobileUtils.getDuration(2000)))
								.moveTo(point(width / 2, 82)).release();
								touchAction.perform();
							}
						}
						if(statInfo.getJasperDeviceType().equals("EMEA"))
						{
							if (!(ScheduleObject.isPERIOD_NAME_NAVisibles(inputs, 1))) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"Failed to locate the period: "
												+ inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i));
								return flag;

							} else {
								Keyword.ReportStep_Pass(testCase,
										"Successfully deleted period time to " + inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i));
								return true;

							}
						}
						period = ScheduleObject.isSchedulePeriodsVisible(inputs, i);

						if (ScheduleObject.isScheduling_period_timeVisible(inputs, period, i) != null) {
							periodStartTimeApp = ScheduleObject.getScheduling_period_time(period);
						}
						if (!periodStartTimeApp.equalsIgnoreCase("Tap to set")) {
							if (allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
								tempHeatSetPointApp = ScheduleObject.getScheduling_period_heating_point(period);
								tempCoolSetPointApp = ScheduleObject.getScheduling_period_cooling_point(period);
							} else if (allowedModes.contains("Cool") && !allowedModes.contains("Heat")) {
								tempCoolSetPointApp = ScheduleObject.getScheduling_period_cooling_point(period);
							} else if (!allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
								tempHeatSetPointApp = ScheduleObject.getScheduling_period_heating_point(period);
							}
						}

						if (inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).contains("Wake")
								|| inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).contains("1")) {
							if (statInfo.getDeviceType().equalsIgnoreCase("Blackbeard")
									|| statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")
									|| statInfo.getJasperDeviceType().equalsIgnoreCase("NA")) {
								periodStartTimeInputs = inputs.getInputValue(GlobalVariables.EVERYDAY_WAKE_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_WAKE_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_WAKE_COOL_SETPOINT);
							} else {
								periodStartTimeInputs = inputs.getInputValue(GlobalVariables.EVERYDAY_1_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_1_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_1_COOL_SETPOINT);
							}
						} else if (inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).contains("Away")
								|| inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).contains("2")) {
							if (statInfo.getDeviceType().equalsIgnoreCase("Blackbeard")
									|| statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")
									|| statInfo.getJasperDeviceType().equalsIgnoreCase("NA")) {
								periodStartTimeInputs = inputs.getInputValue(GlobalVariables.EVERYDAY_AWAY_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_AWAY_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_AWAY_COOL_SETPOINT);
							} else {
								periodStartTimeInputs = inputs.getInputValue(GlobalVariables.EVERYDAY_2_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_2_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_2_COOL_SETPOINT);
							}
						} else if (inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).contains("Home")
								|| inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).contains("3")) {
							if (statInfo.getDeviceType().equalsIgnoreCase("Blackbeard")
									|| statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")
									|| statInfo.getJasperDeviceType().equalsIgnoreCase("NA")) {
								periodStartTimeInputs = inputs.getInputValue(GlobalVariables.EVERYDAY_HOME_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_HOME_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_HOME_COOL_SETPOINT);
							} else {
								periodStartTimeInputs = inputs.getInputValue(GlobalVariables.EVERYDAY_3_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_3_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_3_COOL_SETPOINT);
							}
						} else if (inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).contains("Sleep")
								|| inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).contains("4")) {
							if (statInfo.getDeviceType().equalsIgnoreCase("Blackbeard")
									|| statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")
									|| statInfo.getJasperDeviceType().equalsIgnoreCase("NA")
									|| statInfo.getJasperDeviceType().equalsIgnoreCase("Jasper")) {
								periodStartTimeInputs = inputs.getInputValue(GlobalVariables.EVERYDAY_SLEEP_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_SLEEP_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_SLEEP_COOL_SETPOINT);
							} else {
								periodStartTimeInputs = inputs.getInputValue(GlobalVariables.EVERYDAY_4_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_4_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_4_COOL_SETPOINT);
							}
						}

						if (!periodStartTimeApp.equalsIgnoreCase("Tap to set")) {
							if (!periodStartTimeApp.contains("M") && !periodStartTimeApp.contains("m")) {
								Date returnTimeApp, returnTimeInputs;
								SimpleDateFormat df24 = new SimpleDateFormat("hh:mm");
								String dateStringApp = periodStartTimeApp.replaceAll("\\.", "");
								String dateStringInputs = periodStartTimeInputs.replaceAll("\\.", "");
								try {
									returnTimeApp = df24.parse(dateStringApp);
									periodStartTimeApp = df24.format(returnTimeApp);
									returnTimeInputs = df24.parse(dateStringInputs);
									periodStartTimeInputs = df24.format(returnTimeInputs);
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error: " + e.getMessage());
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error: " + e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error: " + e.getMessage());
								}
							}
						}
					} else {
						desiredDayIndex = Arrays.asList(scheduleDays)
								.indexOf(inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).split("_")[0]);
						if (ScheduleObject.isScheduleDayHeaderVisible()) {
							scheduleDayHeaders = ScheduleObject.getScheduleDayHeaderList();
							lesserDayIndex = Arrays.asList(scheduleDays)
									.indexOf(scheduleDayHeaders.get(0).getAttribute("value"));
							greaterDayIndex = Arrays.asList(scheduleDays).indexOf(
									scheduleDayHeaders.get(scheduleDayHeaders.size() - 1).getAttribute("value"));
						}
						int m = 0;
						while (!(ScheduleObject.isPERIOD_NAME_NAVisibles(inputs, i)) && m < 10) {
							if (desiredDayIndex > greaterDayIndex) {
								touchAction.press(point(10, (int) (dimension.getHeight() * .5)))
								.moveTo(point(0, (int) (dimension.getHeight() * -.4))).release().perform();
								m++;
							} else if (desiredDayIndex < lesserDayIndex) {
								touchAction.press(point(10, (int) (dimension.getHeight() * .5)))
								.moveTo(point(0, (int) (dimension.getHeight() * .4))).release().perform();
								m++;
							} else {
								touchAction.press(point(10, (int) (dimension.getHeight() * .5)))
								.moveTo(point(0, (int) (dimension.getHeight() * -.4))).release().perform();
								m++;
							}
						}
						if(statInfo.getJasperDeviceType().equals("EMEA"))
						{
							if (!(ScheduleObject.isPERIOD_NAME_NAVisibles(inputs, 1))) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"Failed to locate the period: "
												+ inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i));
								return flag;
							} else {
								Keyword.ReportStep_Pass(testCase,
										"Successfully deleted period time to " + inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i));
								return true;

							}
						}
						if (!(ScheduleObject.isPERIOD_NAME_NAVisibles(inputs, i))) {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Failed to locate the period: "
											+ inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i));
						} else {
							period = ScheduleObject.isSchedulePeriodsVisible(inputs, i);
						}

						String cp = inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i) + "_CoolTemperature";
						String hp = inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i) + "_HeatTemperature";
						WebElement elemTime = ScheduleObject.isScheduling_period_timeVisible(inputs, period, i);
						if (elemTime != null) {
							periodStartTimeApp = elemTime.getAttribute("value");
						}
						if (!periodStartTimeApp.equalsIgnoreCase("Tap to set")) {
							if (allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
								WebElement elemCP = testCase.getMobileDriver().findElement(By.name(cp));
								WebElement elemHP = testCase.getMobileDriver().findElement(By.name(hp));
								tempHeatSetPointApp = elemHP.getAttribute("value");
								tempCoolSetPointApp = elemCP.getAttribute("value");
							} else if (allowedModes.contains("Cool") && !allowedModes.contains("Heat")) {
								tempCoolSetPointApp = ScheduleObject.getScheduling_period_cooling_pointIOS(cp);

							} else if (!allowedModes.contains("Cool") && allowedModes.contains("Heat")) {
							}
						}

						if (inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).contains("Wake")
								|| inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).contains("1")) {
							if (statInfo.getDeviceType().equalsIgnoreCase("Blackbeard")
									|| statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")
									|| statInfo.getJasperDeviceType().equalsIgnoreCase("NA")) {
								periodStartTimeInputs = inputs.getInputValue(GlobalVariables.EVERYDAY_WAKE_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_WAKE_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_WAKE_COOL_SETPOINT);
							} else {
								periodStartTimeInputs = inputs.getInputValue(GlobalVariables.EVERYDAY_1_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_1_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_1_COOL_SETPOINT);
							}
						} else if (inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).contains("Away")
								|| inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).contains("2")) {
							if (statInfo.getDeviceType().equalsIgnoreCase("Blackbeard")
									|| statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")
									|| statInfo.getJasperDeviceType().equalsIgnoreCase("NA")) {
								periodStartTimeInputs = inputs.getInputValue(GlobalVariables.EVERYDAY_AWAY_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_AWAY_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_AWAY_COOL_SETPOINT);
							} else {
								periodStartTimeInputs = inputs.getInputValue(GlobalVariables.EVERYDAY_2_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_2_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_2_COOL_SETPOINT);
							}
						} else if (inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).contains("Home")
								|| inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).contains("3")) {
							if (statInfo.getDeviceType().equalsIgnoreCase("Blackbeard")
									|| statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")
									|| statInfo.getJasperDeviceType().equalsIgnoreCase("NA")) {
								periodStartTimeInputs = inputs.getInputValue(GlobalVariables.EVERYDAY_HOME_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_HOME_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_HOME_COOL_SETPOINT);
							} else {
								periodStartTimeInputs = inputs.getInputValue(GlobalVariables.EVERYDAY_3_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_3_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_3_COOL_SETPOINT);
							}
						} else if (inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).contains("Sleep")
								|| inputs.getInputValue(GlobalVariables.PERIOD_NAME_NA + i).contains("4")) {
							if (statInfo.getDeviceType().equalsIgnoreCase("Blackbeard")
									|| statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")
									|| statInfo.getJasperDeviceType().equalsIgnoreCase("NA")) {
								periodStartTimeInputs = inputs.getInputValue(GlobalVariables.EVERYDAY_SLEEP_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_SLEEP_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_SLEEP_COOL_SETPOINT);
							} else {
								periodStartTimeInputs = inputs.getInputValue(GlobalVariables.EVERYDAY_4_TIME);
								tempHeatSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_4_HEAT_SETPOINT);
								tempCoolSetPointFromInputs = inputs
										.getInputValue(GlobalVariables.EVERYDAY_4_COOL_SETPOINT);
							}
						}

						if (!periodStartTimeApp.equalsIgnoreCase("Tap to set")) {
							if (!periodStartTimeApp.contains("M") && !periodStartTimeApp.contains("m")) {
								Date returnTimeApp, returnTimeInputs;
								SimpleDateFormat df24 = new SimpleDateFormat("hh:mm");
								String dateStringApp = periodStartTimeApp.replaceAll("\\.", "");
								String dateStringInputs = periodStartTimeInputs.replaceAll("\\.", "");
								try {
									returnTimeApp = df24.parse(dateStringApp);
									periodStartTimeApp = df24.format(returnTimeApp);
									returnTimeInputs = df24.parse(dateStringInputs);
									periodStartTimeInputs = df24.format(returnTimeInputs);
								} catch (ParseException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
											"[ParseException] Error: " + e.getMessage());
								} catch (NumberFormatException e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
											"[NumberFormatException] Error: " + e.getMessage());
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
											"[Exception] Error: " + e.getMessage());
								}
							}
						}
					}
					if (!periodStartTimeApp.isEmpty()) {
						if (periodStartTimeApp.equalsIgnoreCase(periodStartTimeInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"Successfully edited period time to " + periodStartTimeApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Period time in app: " + periodStartTimeApp + " is not changed to expected value: "
											+ periodStartTimeInputs);
						}
					}
					if (!tempCoolSetPointApp.isEmpty()) {
						if (tempCoolSetPointApp.contains(".0")) {
							tempCoolSetPointApp = tempCoolSetPointApp.split("\\.")[0];
						}
						if (tempCoolSetPointFromInputs.contains(".0")) {
							tempCoolSetPointFromInputs = tempCoolSetPointFromInputs.split("\\.")[0];
						}
						if (tempCoolSetPointApp.equalsIgnoreCase(tempCoolSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"Successfully edited period cool point to " + tempCoolSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Period cool point in app: " + tempCoolSetPointApp
									+ " is not changed to expected value: " + tempCoolSetPointFromInputs);
						}
					}
					if (!tempHeatSetPointApp.isEmpty()) {
						if (tempHeatSetPointApp.contains(".0")) {
							tempHeatSetPointApp = tempHeatSetPointApp.split("\\.")[0];
						}
						if (tempHeatSetPointFromInputs.contains(".0")) {
							tempHeatSetPointFromInputs = tempHeatSetPointFromInputs.split("\\.")[0];
						}
						if (tempHeatSetPointApp.equalsIgnoreCase(tempHeatSetPointFromInputs)) {
							Keyword.ReportStep_Pass(testCase,
									"Successfully edited period heat point to " + tempHeatSetPointApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Period heat point in app: " + tempHeatSetPointApp
									+ " is not changed to expected value: " + tempHeatSetPointFromInputs);
						}
					}
				}
			}

		} else if (scheduleType.equalsIgnoreCase("Weekday and Weekend")) {

		}

		return flag;
	}

	public static boolean verifyPrimaryCardElements(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;

		PrimaryCard pc=new PrimaryCard(testCase);
		Dashboard db=new Dashboard(testCase);
		DeviceInformation dv=new DeviceInformation(testCase , inputs);
		SystemMode sm=new SystemMode(testCase);

		if (pc.isIndoorTempVisible()) {
			Keyword.ReportStep_Pass(testCase, "Primary Card : Indoor Temperature is displayed as "+ pc.getStatIndoorTemp());
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Primary Card : Indoor Temperature is not visible");
		}


		if(dv.getDeviceType().equalsIgnoreCase("HoneyBadger") || dv.getDeviceType().equalsIgnoreCase("Blackbeard")||dv.getDeviceType().equalsIgnoreCase("FlyCatcher") ||  dv.getDeviceType().equalsIgnoreCase("Storm")){
			if(pc.isIndoorHumidityVisible())
			{
				Keyword.ReportStep_Pass(testCase,
						"Verify Humidity : Primary card is displaying humidity value as '" +pc.getStatIndoorHumidity()+"'");
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Verify Humidity : Primary card is not displaying humidity value");
			}
		}
		else{
			if(!pc.isIndoorHumidityVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Humidity temperature: Humidity temperature won't get displayed on non HBB accounts");
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Verify Humidity : Primary card is displaying humidity value for Jasper products");
			}

		}


		if(pc.isSystemModeVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Primary Card: System mode option is displayed");

			pc.clickOnSystemMode();
			flag=flag && optikUtils.verifyAvailableSystemMode(testCase, inputs);
			if(sm.isBackButtonVisible())
			{
				sm.clickOnBackButton();
				Keyword.ReportStep_Pass(testCase, "Sytem Mode: Clicked on back button, navigated back to primary card");
			}
			else if(pc.isCrossButtonVisible()){
			   	  if(pc.ClickOnCrossButton())
			   	  Keyword.ReportStep_Pass(testCase,"Sytem Mode: Clicked on back button, navigated back to primary card");
			     }
			else if(MobileUtils.isRunningOnAndroid(testCase)){
				if(sm.isCrossButtonVisible())
				{
					testCase.getMobileDriver().findElementByXPath("//*[@name='btn close normal']").click();
					Keyword.ReportStep_Pass(testCase, "Sytem Mode: Clicked on Cross button, navigated back to primary card");
				}
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System mode: Unable to find back button", false);
			}




		}
		else{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Primary Card : Primary card is not displaying System mode");
		}


		if(pc.isSetPointValueVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Primary Card: Set point value is displayed as "+pc.getCurrentSetPointInDialer());
		}
		else{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Primary Card : Primary card is not displaying Set point value");
		}


		if(dv.getDeviceType().equalsIgnoreCase("FlyCatcher") || dv.getDeviceType().equalsIgnoreCase("Storm") )
		{
			if(pc.isPriorityTextVisible(5))
			{
				Keyword.ReportStep_Pass(testCase, "Primary Card: Priority Option visible");
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Primary Card: SPriority Option is not visible");
			}
			if(pc.isMoreTextVisible(5))
			{
				pc.clickonMoreText();
				if(pc.isScheduleVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Primary Card: Schedule icon is visible");
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Primary Card: Schedule icon is not visible");
				}
				if(pc.isVentilationOptionVisible(5))
				{
					Keyword.ReportStep_Pass(testCase, "Primary Card: Ventilation option is visible");
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Primary Card: Ventilation option is not visible");
				}
				if(pc.isHumidifyOptionVisible(5))
				{
					Keyword.ReportStep_Pass(testCase, "Primary Card: Humidify option is visible");
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Primary Card: SHumidify option is not visible");
				}
				if(pc.isDehumidifyOptionVisible(5))
				{
					Keyword.ReportStep_Pass(testCase, "Primary Card: Dehumidify option is visible");
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Primary Card: Dehumidify option is not visible");
				}

				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					testCase.getMobileDriver().navigate().back();
				}
				else
				{
					TouchAction ds= new TouchAction(testCase.getMobileDriver());
					ds.press(point(604,1142)).release().perform();
				}
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Primary Card: More option is not visible");
			}

		}
		else
		{
			if(pc.isScheduleVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Primary Card: Schedule icon is visible");
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Primary Card: Schedule icon is not visible");
			}
		}


		if(pc.isBackButtonAvailable())
		{
			pc.ClickOnBackButton();
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Primary Card: Back button not found", false);
		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(db.isWeatherIconVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Primary Card: Weather icon is visible");
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Primary Card: Weather icon is not visible");
			}
		}
		else
		{
			Keyword.ReportStep_Pass(testCase, "Primary Card: Weather icon is not display due to element identification issue for IOS platform.");
		}

		return flag;
	}


	public static boolean verifyPrimaryCardElementsEMEA(TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag = true;

		PrimaryCard pc=new PrimaryCard(testCase);
		SystemMode sm=new SystemMode(testCase);

		if(pc.isSystemModeVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Primary Card: System mode option is displayed");

			pc.clickOnSystemMode();
			flag=flag && optikUtils.verifyAvailableSystemMode(testCase, inputs);
			if(sm.isBackButtonVisible())
			{
				sm.clickOnBackButton();
				Keyword.ReportStep_Pass(testCase, "Sytem Mode: Clicked on back button, navigated back to primary card");
			}
			else if(pc.isCrossButtonVisible()){
			   	  if(pc.ClickOnCrossButton())
			   	  Keyword.ReportStep_Pass(testCase,"Sytem Mode: Clicked on back button, navigated back to primary card");
			     }
			else if(MobileUtils.isRunningOnAndroid(testCase)){
				if(sm.isCrossButtonVisible())
				{
					testCase.getMobileDriver().findElementByXPath("//*[@name='btn close normal']").click();
					Keyword.ReportStep_Pass(testCase, "Sytem Mode: Clicked on Cross button, navigated back to primary card");
				}
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System mode: Unable to find back button", false);
			}

		}
		else{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Primary Card : Primary card is not displaying System mode");
		}


		if(pc.isSetPointValueVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Primary Card: Set point value is displayed as "+pc.getCurrentSetPointInDialer());
		}
		else{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Primary Card : Primary card is not displaying Set point value");
		}


		if(pc.isScheduleVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Primary Card: Schedule icon is visible");
		}
		else{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Primary Card: Schedule icon is not visible");
		}


		if(sm.isInfoButtonVisible()){
			sm.clickOnInfoButton();
			Keyword.ReportStep_Pass(testCase, "System : Navigated to System Info");
			if(sm.isHeatOptionVisible())
			{
				Keyword.ReportStep_Pass(testCase, "System Info: Heat Option Info is disable");
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System Info: Heat Option is not visible", false);
			}
			if(sm.isOffOptionVisible())
			{
				Keyword.ReportStep_Pass(testCase, "System Info: off Option is visible");
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System Info: Off Option is not visible", false);
			}


			if(sm.isBackButtonVisible()){
				flag= flag && sm.clickOnBackButton();
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System Info: Unable to find back button", false);
			}
		}
		if(pc.isBackButtonAvailable())
		{
			flag=flag && pc.ClickOnBackButton();
		}

		return flag;
	}


	public static boolean verifyPrimaryCardElementsWLD(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;

		WLDPrimaryCard wpm=new WLDPrimaryCard(testCase);
		Dashboard db=new Dashboard(testCase);
		for(int i=0;i<=5;i++)
		{
			if(wpm.isDismissButtonVisible())
			{
				flag=flag && wpm.clickOnDismissButton();
			}
		}

		if(wpm.isTemperatureTabVisible())
		{
			Keyword.ReportStep_Pass(testCase, "WLD Primary Card: Temperature Tab is visible");

			flag=flag && wpm.ClickOnTemperatureTab();
			Keyword.ReportStep_Pass(testCase, "WLD Primary Card: Temperature is displayed as "+ wpm.getIndoorTemp());
		}

		else{
			flag=flag && false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "WLD Primary Card: Temperature Tab is not visible, warning is getting displayed", false);
		}

		if(wpm.isHumidityTabVisible())
		{
			String tempHum="";
			Keyword.ReportStep_Pass(testCase, "WLD Primary Card: Humidity Tab is visible");

			flag=flag && wpm.ClickOnHumidityTab();
			tempHum=wpm.getIndoorHumidity();

			if(tempHum.contains("%"))
			{
				Keyword.ReportStep_Pass(testCase, "WLD Primary Card: Humidity is displayed as "+ tempHum);
			}
			else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "WLD Primary Card: Humidity option is not displayed as it is automatically switching to Temperature tab", false);
			}
		}
		else
		{
			flag=flag && false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "WLD Primary Card: Humidity Tab is not visible, warning is getting displayed", false);
		}

		if(wpm.isReminingBatteryTextViewVisible())
		{
			String battery;
			Keyword.ReportStep_Pass(testCase, "WLD Primary Card: Battery status Tab is visible");

			battery = wpm.getRemainingBatteryText();
			Keyword.ReportStep_Pass(testCase, "WLD Primary Card: Battery status is displayed as "+ battery);
		}
		else
		{
			flag=flag && false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "WLD Primary Card: Battery status is not visible, warning is getting displayed", false);
		}

		/*if(wpm.isNextUpdateTextViewVisible())
		{
			String update;
			Keyword.ReportStep_Pass(testCase, "WLD Primary Card: Next Update Tab is visible");

			update=wpm.getNextUpdateText();
			Keyword.ReportStep_Pass(testCase, "WLD Primary Card: Next Update Tab is displayed as "+ update);
		}
		else
		{
			flag=flag && false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "WLD Primary Card: Next Update Tab is not visible, warning is getting displayed", false);
		}*/


		if(wpm.isBackButtonAvailable())
		{
			flag=flag && wpm.ClickOnBackButton();
		}

		if(db.isWeatherIconVisible(5))
		{
			Keyword.ReportStep_Pass(testCase, "Primary Card: Weather icon is visible");
		}
		else{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Primary Card: Weather icon is not visible");
		}

		return flag;
	}

	public static boolean verifyTemperatureUnitOnPrimaryCardWLD(TestCases testCase, TestCaseInputs inputs, String unit) {
		boolean flag = true;

		WLDPrimaryCard wpm=new WLDPrimaryCard(testCase);

		String tempUnit= wpm.getIndoorTemp();
		if(unit.equalsIgnoreCase("Celsius"))
		{
			if(tempUnit.contains("."))
			{
				Keyword.ReportStep_Pass(testCase, "Temperature unit is displayed in 'Celsius'");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Temperature unit is displayed in 'Farenheit'", false);
			}
		}
		else if(unit.equalsIgnoreCase("Farenheit"))
		{
			if(!tempUnit.contains("."))
			{
				Keyword.ReportStep_Pass(testCase, "Temperature unit is displayed in 'Farenheit'");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Temperature unit is displayed in 'Celsius'", false);
			}
		}

		return flag;
	}

	public static boolean verifyPrimaryCardElementsCamera(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;

		Dashboard db=new Dashboard(testCase);
		CameraSolutionCard csc=new CameraSolutionCard(testCase);

		if(csc.isCameraIsOffAvailable())
		{
			Keyword.ReportStep_Pass(testCase, "Primary Card: Off button for camera is displayed");

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				csc.turnOffCameraButton();
			}
			else
			{
				csc.clickCameraOffButton();
			}
		}
		else
		{
			if(csc.isCameraOnButtonVisible(12))
			{
				Keyword.ReportStep_Pass(testCase, "Primary Card: On button for camera is displayed");
			}else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Primary Card: On button for camera is not displayed", false);
			}
		}


	if(csc.isSettingIconVisible(12))
		{
			Keyword.ReportStep_Pass(testCase, "Primary Card: Setting icon for camera is displayed");
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Primary Card: Setting icon for camera is not displayed", false);
		}

		if(MobileUtils.isRunningOnAndroid(testCase)){
			if(csc.isStatNameVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Primary Card: Stat name is displayed as " + csc.getStatName());
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Primary Card: Stat name is not displayed", false);
			}

			if(csc.isLocationNameVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Primary Card: Location name is displayed as " + csc.getLocationName());
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Primary Card: Location name is not displayed", false);
			}
		}
		else{
			if(csc.isStatAndLocationNameVisibleIOS())
			{
				Keyword.ReportStep_Pass(testCase, "Primary Card: Stat name is displayed as " + csc.getStatAndLocationNameIOS());
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Primary Card: Stat name is not displayed", false);
			}

		}

		if(csc.isBackButtonVisible(10))
		{
			csc.clickOnBackButton();
		}

		if(MobileUtils.isRunningOnAndroid(testCase)){
			if(db.isWeatherIconVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Primary Card: Weather icon is visible");
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Primary Card: Weather icon is not visible");
			}
		}

		return flag;
	}

	public static boolean validateUserNameFields(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;

		MyAccountScreen mac=new MyAccountScreen(testCase);
		flag =flag && optikUtils.navigatetoGlobalDrwaerOption(testCase, "EDIT ACCOUNT");

		if(mac.isNameLabelVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Edit Account: Name label displayed");
			mac.clickOnNameLabel();
			Keyword.ReportStep_Pass(testCase, "Edit Account: click on Name label");
		}
		else
		{
			flag =false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account: Unable to find Name label ");
		}
		flag=flag && mac.validateUserNamefields(testCase, inputs);

		return flag;
	}

	public static boolean verifyAvailableSystemMode(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		List<String> allowedModes ;

		SystemMode sm=new SystemMode(testCase);
		try
		{
			allowedModes = statInfo.getAllowedModes() ;

			if (allowedModes.contains("Heat")) {

				if(sm.isHeatOptionVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Sytem mode: Heat option is visible");
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Sytem mode: Heat option is not visible", false);
				}
			}


			if (allowedModes.contains("Cool")) {

				if(sm.isCoolOptionVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Sytem mode: Cool option is visible");
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Sytem mode: Cool option is not visible", false);
				}
			}


			if (allowedModes.contains("Auto")) {

				if(sm.isAutoOptionVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Sytem mode: Auto option is visible");
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Sytem mode: Auto option is not visible", false);
				}
			}

			if (allowedModes.contains("Off"))
			{

				if(sm.isOffOptionVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Sytem mode: Off option is visible");
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Sytem mode: Off option is not visible", false);
				}
			}


		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		return flag;
	}

	public static boolean validateAlertsInActivityHistory(TestCases testCase, TestCaseInputs inputs, String alertType,boolean chkmsg) {
		boolean flag = true, alertFlag = false;
		List<WebElement>  alertTitles = null;
		ActivityHistoryScreen ah=new ActivityHistoryScreen(testCase);
		try
		{
			if (MobileUtils.isRunningOnAndroid(testCase))
			{
				if(chkmsg)
				{
					if (ah.isMessagesDisplayed())
					{
						alertTitles = ah.getMessagesList();
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Failed to locate Alert Title");
					}
				}
				else
				{
					if (ah.isMessagesDisplayed())
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Alert found i.e "+alertType);
						return false;
					} else {

						Keyword.ReportStep_Pass(testCase,"Alert not found i.e "+alertType);
						return true;
					}
				}
				if(testCase.getMobileDriver().getPageSource().toUpperCase().contains(alertType.toUpperCase()))
				{
					String alertList[] = null;
					try
					{
						alertList = getAllMessages(testCase);
					}
					catch (Exception e) {
					}



					for (int i = 0; i < alertList.length ; i++) {
						if (alertTitles.get(i).getText().contains((alertType))) {
							if (alertList[i].contains(alertType)) {
								Keyword.ReportStep_Pass(testCase, "Alert found: " + alertList[i] + "\n");
								alertFlag = true;
							}
							/*SecondaryCardSettings sc=new SecondaryCardSettings(testCase);
									sc.clickOnBackButton();*/
							break;
						}
					}
					if (alertFlag) {
						Keyword.ReportStep_Pass(testCase, "Found expected alert ");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Expected Alert for " + alertType + " not found");
					}
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Expected Alert for " + alertType + " not found");
				}
			} else {
				if(chkmsg)
				{
					if (ah.isMessagesDisplayed())
					{
						alertTitles = ah.getMessagesList();
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Failed to locate Alert Title");
					}
				}
				else
				{
					if (ah.isMessagesDisplayed())
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Alert found i.e "+alertType);
				   return false;
					} else {

						Keyword.ReportStep_Pass(testCase,"Alert not found i.e "+alertType);
						return true;
					}
				}
				if(testCase.getMobileDriver().getPageSource().toUpperCase().contains(alertType.toUpperCase()))
				{
					String alertList[] = null;
					try {
						alertList = getAllMessages(testCase);
					} catch (Exception e) {
						e.printStackTrace();
					}
					if (ah.getMessagesList()!=null)
					{
						if (ah.getMessagesList()!=null)
						{
						alertTitles = ah.getMessagesList();
						}else {
							alertTitles = ah.getMessageDescriptionList();
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Failed to locate Alert Title");
					}
					for (int i = 0; i < alertList.length ; i++) {
						if (alertList[i].contains(alertType)) {
							Keyword.ReportStep_Pass(testCase, "Alert found: " + alertList[i]+ "\n");
							alertFlag = true;
							/*SecondaryCardSettings sc=new SecondaryCardSettings(testCase);
								sc.clickOnBackButton();*/
							break;
						}
					}
					if (alertFlag) {
						Keyword.ReportStep_Pass(testCase, "Found expected alert for " + alertType);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Expected Alert for " + alertType + " not found");
					}
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Expected Alert for " + alertType + " not found");
				}
			}
		}
		catch(Exception e)
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,e.getMessage());
		}

		return flag;
	}

	public static boolean VerifyCurrentPeriodSetPointsfromApp(TestCases testCase, TestCaseInputs inputs,String verifyPeriod) {
		boolean flag = true;
		try
		{
			Schedule scheduleObject = new Schedule(testCase);
			scheduleObject.isPeriodDeleteIconVisible(60);
			String currentHeatSetPoints = "", currentCoolSetPoints = "";
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			String currentPeriod = "";
			String statetype=statInfo.getDeviceType();
			if(!statetype.contains("HoneyBadger"))
			{
				currentPeriod = statInfo.getCurrentSchedulePeriod();
			}
			else
			{
				currentPeriod=verifyPeriod;
			}
			String currentSchedule=statInfo.getCurrentRunningSchedule();
			List<String> allowedModes = statInfo.getAllowedModes() ;
			flag = flag && optikUtils.viewScheduleOnPrimaryCards(testCase, inputs);
			if(currentSchedule.equalsIgnoreCase("Geofence"))
			{
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					int size=scheduleObject.getSchedulePeriodHeatSetPoint().size();
					if (currentPeriod.toUpperCase().contains("Home".toUpperCase())) {

						currentHeatSetPoints = scheduleObject.getSchedulePeriodHeatSetPoint().get(0).getText();
						if(allowedModes.contains("Cool"))
						{
							currentCoolSetPoints= scheduleObject.getSchedulePeriodCoolSetPoint().get(0).getText();
						}
					}
					if(size==2)
					{
						if (currentPeriod.toUpperCase().contains("Away".toUpperCase())) {
							currentHeatSetPoints = scheduleObject.getSchedulePeriodHeatSetPoint().get(1).getText();
							if(allowedModes.contains("Cool"))
							{
								currentCoolSetPoints= scheduleObject.getSchedulePeriodCoolSetPoint().get(1).getText();
							}

						}
					}
					else
					{
						if (currentPeriod.toUpperCase().contains("Away".toUpperCase())) {
							currentHeatSetPoints = scheduleObject.getSchedulePeriodHeatSetPoint().get(2).getText();
							if(allowedModes.contains("Cool"))
							{
								currentCoolSetPoints= scheduleObject.getSchedulePeriodCoolSetPoint().get(2).getText();
							}
						} else if (currentPeriod.toUpperCase().contains("Sleep".toUpperCase())) {
							currentHeatSetPoints = scheduleObject.getSchedulePeriodHeatSetPoint().get(1).getText();
							if(allowedModes.contains("Cool"))
							{
								currentCoolSetPoints= scheduleObject.getSchedulePeriodCoolSetPoint().get(1).getText();
							}
						}
					}
				}
				else
				{
					if (currentPeriod.toUpperCase().contains("Away".toUpperCase())) {
						currentHeatSetPoints = scheduleObject.getAwayHeatSetpoint();
						if(allowedModes.contains("Cool"))
						{
							currentCoolSetPoints = scheduleObject.getAwayCoolSetpoint();
						}

					} else if (currentPeriod.toUpperCase().contains("Home".toUpperCase())) {
						currentHeatSetPoints = scheduleObject.getHomeHeatSetpoint();
						if(allowedModes.contains("Cool"))
						{
							currentCoolSetPoints = scheduleObject.getHomeCoolSetpoint();
						}

					} else if (currentPeriod.toUpperCase().contains("Sleep".toUpperCase())) {
						currentHeatSetPoints = scheduleObject.getSleepHeatSetpoint();

						if(allowedModes.contains("Cool"))
						{
							currentCoolSetPoints = scheduleObject.getSleepCoolSetpoint();
						}
					}
				}

			}
			else
			{
				if (currentPeriod.equalsIgnoreCase("Wake")) {
					if (scheduleObject.isWakeHeatSetPoints()) {
						currentHeatSetPoints = scheduleObject.getWakeHeatSetPoints();
						if(allowedModes.contains("Cool"))
						{
							currentCoolSetPoints = scheduleObject.getWakeCooltSetPoints();
						}
					}
				} else if (currentPeriod.equalsIgnoreCase("Away")) {
					if (scheduleObject.isAwayHeatSetPoints()) {
						currentHeatSetPoints = scheduleObject.getAwayHeatSetPoints();
						if(allowedModes.contains("Cool"))
						{
							currentCoolSetPoints = scheduleObject.getAwayCooltSetPoints();
						}
					}

				} else if (currentPeriod.equalsIgnoreCase("Home")) {

					if (scheduleObject.isHomeHeatSetPoints()) {
						currentHeatSetPoints = scheduleObject.getHomeHeatSetPoints();
						if(allowedModes.contains("Cool"))
						{
							currentCoolSetPoints = scheduleObject.getHomeCooltSetPoints();
						}

					}

				} else if (currentPeriod.equalsIgnoreCase("Sleep")) {

					if (scheduleObject.isSleepHeatSetPoints()) {
						currentHeatSetPoints = scheduleObject.getSleepHeatSetPoints();
						if(allowedModes.contains("Cool"))
						{
							currentCoolSetPoints = scheduleObject.getSleepCooltSetPoints();
						}
					}
				}
			}
			optikUtils.navigateToPrimaryCard(testCase);
			String currentDialerValue = String.valueOf(optikUtils.getCurrentSetPointInDialer(testCase));
			if(!currentDialerValue.isEmpty() && !currentPeriod.isEmpty())
			{
				if (statInfo.getThermoStatMode().equals("Heat")) {
					if (currentHeatSetPoints.replaceAll("[^.0-9]", "").contains(currentDialerValue)|| currentDialerValue.contains(currentHeatSetPoints.replaceAll("[^.0-9]", ""))) {
						Keyword.ReportStep_Pass(testCase, "Primary Card dialer Heat set point matched with current schedule "
								+ currentPeriod + "setPoints i.e " + currentHeatSetPoints);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Primary Card dialer Heat set point not matched with current schedule " + currentPeriod
								+ "setPoints i.e " + currentHeatSetPoints);
					}
				} else {
					if (currentCoolSetPoints.replaceAll("[^.0-9]", "").contains(currentDialerValue)
							|| currentDialerValue.contains(currentCoolSetPoints.replaceAll("[^.0-9]", ""))) {
						Keyword.ReportStep_Pass(testCase, "Primary Card dialer Cool set point matched with current schedule "
								+ currentPeriod + "setPoints i.e " + currentCoolSetPoints);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Primary Card dialer Cool setpoint not matched with current schedule " + currentPeriod
								+ "setPoints i.e " + currentCoolSetPoints);
					}
				}
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not able to get dialer value or CHAPI failure of HBB accounts");
			}
		}
		catch(Exception e)
		{

		}
		return flag;
	}

	public static boolean VerifyCurrentPeriodSetPoints(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		try
		{
			Schedule scheduleObject = new Schedule(testCase);
			scheduleObject.isPeriodDeleteIconVisible(60);
			String currentHeatSetPoints = "", currentCoolSetPoints = "";
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			String currentPeriod = statInfo.getCurrentSchedulePeriod();
			String currentSchedule=statInfo.getCurrentRunningSchedule();
			List<String> allowedModes = statInfo.getAllowedModes() ;
			flag = flag && optikUtils.viewScheduleOnPrimaryCards(testCase, inputs);
			OSPopUps os = new OSPopUps(testCase);
			if( MobileUtils.isRunningOnAndroid(testCase))
			{
				if(os.isIgnoreButtonVisible(3))
				{
					os.clickOnIgnoreButton();
				}
			}

			if(currentSchedule.equalsIgnoreCase("Geofence"))
			{
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					int size=scheduleObject.getSchedulePeriodHeatSetPoint().size();
					if (currentPeriod.equalsIgnoreCase("Home")) {

						currentHeatSetPoints = scheduleObject.getSchedulePeriodHeatSetPoint().get(0).getText();
						if(allowedModes.contains("Cool"))
						{
							currentCoolSetPoints= scheduleObject.getSchedulePeriodCoolSetPoint().get(0).getText();
						}
					}
					if(size==2)
					{
						if (currentPeriod.equalsIgnoreCase("Away")) {
							currentHeatSetPoints = scheduleObject.getSchedulePeriodHeatSetPoint().get(1).getText();
							if(allowedModes.contains("Cool"))
							{
								currentCoolSetPoints= scheduleObject.getSchedulePeriodCoolSetPoint().get(1).getText();
							}

						}
					}
					else
					{
						if (currentPeriod.equalsIgnoreCase("Away")) {
							currentHeatSetPoints = scheduleObject.getSchedulePeriodHeatSetPoint().get(2).getText();
							if(allowedModes.contains("Cool"))
							{
								currentCoolSetPoints= scheduleObject.getSchedulePeriodCoolSetPoint().get(2).getText();
							}
						} else if (currentPeriod.equalsIgnoreCase("Sleep")) {
							currentHeatSetPoints = scheduleObject.getSchedulePeriodHeatSetPoint().get(1).getText();
							if(allowedModes.contains("Cool"))
							{
								currentCoolSetPoints= scheduleObject.getSchedulePeriodCoolSetPoint().get(1).getText();
							}
						}
					}
				}
				else
				{
					if (currentPeriod.equalsIgnoreCase("Away")) {
						currentHeatSetPoints = scheduleObject.getAwayHeatSetpoint();
						if(allowedModes.contains("Cool"))
						{
							currentCoolSetPoints = scheduleObject.getAwayCoolSetpoint();
						}

					} else if (currentPeriod.equalsIgnoreCase("Home")) {
						currentHeatSetPoints = scheduleObject.getHomeHeatSetpoint();
						if(allowedModes.contains("Cool"))
						{
							currentCoolSetPoints = scheduleObject.getHomeCoolSetpoint();
						}

					} else if (currentPeriod.equalsIgnoreCase("Sleep")) {
						currentHeatSetPoints = scheduleObject.getSleepHeatSetpoint();

						if(allowedModes.contains("Cool"))
						{
							currentCoolSetPoints = scheduleObject.getSleepCoolSetpoint();
						}
					}
				}

			}
			else
			{if (currentPeriod.equalsIgnoreCase("Wake")) {
				if (scheduleObject.isWakeHeatSetPoints()) {
					if(statInfo.getJasperDeviceType().equalsIgnoreCase("Emea"))
					{
						currentHeatSetPoints = scheduleObject.getWakeHeatSetPointsEMEA();
					}
					else
					{
						currentHeatSetPoints = scheduleObject.getWakeHeatSetPoints();
					}

					if(allowedModes.contains("Cool"))
					{
						currentCoolSetPoints = scheduleObject.getWakeCooltSetPoints();
					}
				}
			} else if (currentPeriod.equalsIgnoreCase("Away")) {
				if (scheduleObject.isAwayHeatSetPoints()) {
					if(statInfo.getJasperDeviceType().equalsIgnoreCase("Emea"))
					{
						currentHeatSetPoints = scheduleObject.getAwayHeatSetPointsEMEA();
					}
					else
					{
						currentHeatSetPoints = scheduleObject.getAwayHeatSetPoints();
					}

					if(allowedModes.contains("Cool"))
					{
						currentCoolSetPoints = scheduleObject.getAwayCooltSetPoints();
					}
				}

			} else if (currentPeriod.equalsIgnoreCase("Home")) {

				if (scheduleObject.isHomeHeatSetPoints()) {
					if(statInfo.getJasperDeviceType().equalsIgnoreCase("Emea"))
					{
						currentHeatSetPoints = scheduleObject.getHomeHeatSetPointsEMEA();
					}
					else
					{
						currentHeatSetPoints = scheduleObject.getHomeHeatSetPoints();
					}

					if(allowedModes.contains("Cool"))
					{
						currentCoolSetPoints = scheduleObject.getHomeCooltSetPoints();
					}

				}

			} else if (currentPeriod.equalsIgnoreCase("Sleep")) {

				if (scheduleObject.isSleepHeatSetPoints()) {
					if(statInfo.getJasperDeviceType().equalsIgnoreCase("Emea"))
					{
						currentHeatSetPoints = scheduleObject.getSleepHeatSetPointsEMEA();
					}
					else
					{
						currentHeatSetPoints = scheduleObject.getSleepHeatSetPoints();
					}

					if(allowedModes.contains("Cool"))
					{
						currentCoolSetPoints = scheduleObject.getSleepCooltSetPoints();
					}
				}
			}}
			optikUtils.navigateToPrimaryCard(testCase);
			String currentDialerValue = String.valueOf(optikUtils.getCurrentSetPointInDialer(testCase));
			if(!currentDialerValue.isEmpty() && !currentPeriod.isEmpty())
			{
				if (statInfo.getThermoStatMode().equals("Heat")) {
					if (currentHeatSetPoints.replaceAll("[^.0-9]", "").contains(currentDialerValue)) {
						Keyword.ReportStep_Pass(testCase, "Primary Card dialer Heat set point matched with current schedule "
								+ currentPeriod + "setPoints i.e " + currentHeatSetPoints);
					}else if(currentDialerValue.contains(currentHeatSetPoints.replaceAll("[^.0-9]", ""))) {
						Keyword.ReportStep_Pass(testCase, "Primary Card dialer Heat set point matched with current schedule "
								+ currentPeriod + "setPoints i.e " + currentHeatSetPoints);
					}				
					else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Primary Card dialer Heat set point not matched with current schedule " + currentPeriod
								+ "setPoints i.e " + currentHeatSetPoints);
					}
				} else {
					if (currentCoolSetPoints.replaceAll("[^.0-9]", "").contains(currentDialerValue)) {
						Keyword.ReportStep_Pass(testCase, "Primary Card dialer Cool set point matched with current schedule "
								+ currentPeriod + "setPoints i.e " + currentCoolSetPoints);
					}else if(currentDialerValue.contains(currentCoolSetPoints.replaceAll("[^.0-9]", ""))) {

						Keyword.ReportStep_Pass(testCase, "Primary Card dialer Cool set point matched with current schedule "
								+ currentPeriod + "setPoints i.e " + currentCoolSetPoints);
					
					}else {
					
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Primary Card dialer Cool setpoint not matched with current schedule " + currentPeriod
								+ "setPoints i.e " + currentCoolSetPoints);
					}
				}
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not able to get dialer value or CHAPI failure of HBB accounts");
			}
		}
		catch(Exception e)
		{

		}
		return flag;
	}

	public static boolean VerifyCurrentPeriodSetPointsAfterDeletingAllCurrentDayPeriods(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		try
		{
			Schedule scheduleObject = new Schedule(testCase);
			scheduleObject.isPeriodDeleteIconVisible(60);
			String currentHeatSetPoints = "", currentCoolSetPoints = "";
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			String currentPeriod = statInfo.getCurrentSchedulePeriod();
			String currentSchedule=statInfo.getCurrentRunningSchedule();
			List<String> allowedModes = statInfo.getAllowedModes() ;
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				flag = flag && optikUtils.viewScheduleOnPrimaryCards(testCase, inputs);
			}
			String yesterday = LocalDate.now().minusDays(1).getDayOfWeek().name();

			if(currentSchedule.equalsIgnoreCase("Geofence"))
			{
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					int size=scheduleObject.getSchedulePeriodHeatSetPoint().size();
					if (currentPeriod.equalsIgnoreCase("Home")) {

						currentHeatSetPoints = scheduleObject.getSchedulePeriodHeatSetPoint().get(0).getText();
						if(allowedModes.contains("Cool"))
						{
							currentCoolSetPoints= scheduleObject.getSchedulePeriodCoolSetPoint().get(0).getText();
						}
					}
					if(size==2)
					{
						if (currentPeriod.equalsIgnoreCase("Away")) {
							currentHeatSetPoints = scheduleObject.getSchedulePeriodHeatSetPoint().get(1).getText();
							if(allowedModes.contains("Cool"))
							{
								currentCoolSetPoints= scheduleObject.getSchedulePeriodCoolSetPoint().get(1).getText();
							}

						}
					}
					else
					{
						if (currentPeriod.equalsIgnoreCase("Away")) {
							currentHeatSetPoints = scheduleObject.getSchedulePeriodHeatSetPoint().get(2).getText();
							if(allowedModes.contains("Cool"))
							{
								currentCoolSetPoints= scheduleObject.getSchedulePeriodCoolSetPoint().get(2).getText();
							}
						} else if (currentPeriod.equalsIgnoreCase("Sleep")) {
							currentHeatSetPoints = scheduleObject.getSchedulePeriodHeatSetPoint().get(1).getText();
							if(allowedModes.contains("Cool"))
							{
								currentCoolSetPoints= scheduleObject.getSchedulePeriodCoolSetPoint().get(1).getText();
							}
						}
					}
				}
				else
				{
					if (currentPeriod.equalsIgnoreCase("Away")) {
						currentHeatSetPoints = scheduleObject.getAwayHeatSetpoint();
						if(allowedModes.contains("Cool"))
						{
							currentCoolSetPoints = scheduleObject.getAwayCoolSetpoint();
						}

					} else if (currentPeriod.equalsIgnoreCase("Home")) {
						currentHeatSetPoints = scheduleObject.getHomeHeatSetpoint();
						if(allowedModes.contains("Cool"))
						{
							currentCoolSetPoints = scheduleObject.getHomeCoolSetpoint();
						}

					} else if (currentPeriod.equalsIgnoreCase("Sleep")) {
						currentHeatSetPoints = scheduleObject.getSleepHeatSetpoint();

						if(allowedModes.contains("Cool"))
						{
							currentCoolSetPoints = scheduleObject.getSleepCoolSetpoint();
						}
					}
				}

			}
			else
			{
				if(MobileUtils.isRunningOnAndroid(testCase)){
					if (currentPeriod.equalsIgnoreCase("Wake")) {
						if (scheduleObject.isWakeHeatSetPoints()) {
							if(statInfo.getJasperDeviceType().equalsIgnoreCase("Emea"))
							{
								currentHeatSetPoints = scheduleObject.getWakeHeatSetPointsEMEA();
							}
							else
							{
								currentHeatSetPoints = scheduleObject.getWakeHeatSetPoints();
							}
							if(allowedModes.contains("Cool"))
							{
								currentCoolSetPoints = scheduleObject.getWakeCooltSetPoints();
							}
						}
					} else if (currentPeriod.equalsIgnoreCase("Away")) {
						if (scheduleObject.isAwayHeatSetPoints()) {
							if(statInfo.getJasperDeviceType().equalsIgnoreCase("Emea"))
							{
								currentHeatSetPoints = scheduleObject.getAwayHeatSetPointsEMEA();
							}
							else
							{
								currentHeatSetPoints = scheduleObject.getAwayHeatSetPoints();
							}
							if(allowedModes.contains("Cool"))
							{
								currentCoolSetPoints = scheduleObject.getAwayCooltSetPoints();
							}
						}

					} else if (currentPeriod.equalsIgnoreCase("Home")) {
						if (scheduleObject.isHomeHeatSetPoints()) {
							if(statInfo.getJasperDeviceType().equalsIgnoreCase("Emea"))
							{
								currentHeatSetPoints = scheduleObject.getHomeHeatSetPointsEMEA();
							}
							else
							{
								currentHeatSetPoints = scheduleObject.getHomeHeatSetPoints();
							}
							if(allowedModes.contains("Cool"))
							{
								currentCoolSetPoints = scheduleObject.getHomeCooltSetPoints();
							}
						}

					} else if (currentPeriod.equalsIgnoreCase("Sleep")) {
						if (scheduleObject.isSleepHeatSetPoints()) {
							if(statInfo.getJasperDeviceType().equalsIgnoreCase("Emea"))
							{
								currentHeatSetPoints = scheduleObject.getSleepHeatSetPointsEMEA();
							}
							else
							{
								currentHeatSetPoints = scheduleObject.getSleepHeatSetPoints();
							}
							if(allowedModes.contains("Cool"))
							{
								currentCoolSetPoints = scheduleObject.getSleepCooltSetPoints();
							}
						}
					}

				}
				else
				{
					currentHeatSetPoints=InputVariables.YesterdayPeriodHeatSetpoint;
					currentCoolSetPoints=InputVariables.YesterdayPeriodCoolSetpoint;
				}
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				optikUtils.navigateToPrimaryCard(testCase);
			}
			String currentDialerValue = String.valueOf(optikUtils.getCurrentSetPointInDialer(testCase));
			if(!currentDialerValue.isEmpty() && !currentPeriod.isEmpty())
			{
				if (statInfo.getThermoStatMode().equals("Heat")) {
					if (currentHeatSetPoints.replaceAll("[^.0-9]", "").contains(currentDialerValue)|| currentDialerValue.contains(currentHeatSetPoints.replaceAll("[^.0-9]", ""))) {
						Keyword.ReportStep_Pass(testCase, "Primary Card dialer Heat set point matched with current schedule "
								+ currentPeriod + " setPoints i.e " + currentHeatSetPoints+" for "+ yesterday);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Primary Card dialer Heat set point not matched with current schedule " + currentPeriod
								+ " setPoints i.e " + currentHeatSetPoints+" for "+ yesterday);
					}
				} else {
					if (currentCoolSetPoints.replaceAll("[^.0-9]", "").contains(currentDialerValue)
							|| currentDialerValue.contains(currentCoolSetPoints.replaceAll("[^.0-9]", ""))) {
						Keyword.ReportStep_Pass(testCase, "Primary Card dialer Cool set point matched with current schedule "
								+ currentPeriod + " setPoints i.e " + currentCoolSetPoints+" for "+ yesterday);
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Primary Card dialer Cool setpoint not matched with current schedule " + currentPeriod
								+ " setPoints i.e " + currentCoolSetPoints+" for "+ yesterday);
					}
				}
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not able to get dialer value or CHAPI failure of HBB accounts");
			}
		}
		catch(Exception e)
		{

		}
		return flag;
	}

	public static double getCurrentSetPointInDialer(TestCases testCase) {
		try {
			PrimaryCard pc = new PrimaryCard(testCase);
			Thread.sleep(2000);
			return pc.getCurrentSetPointInDialer();
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			return -1;
		}

	}


	public static JSONArray getScheduleInformation(TestCases testCase, TestCaseInputs inputs, String userID,
			String password, String locationName) {
		JSONArray jsonArray = null;
		String getDeiveID = "";

		try (CHILUtil chUtil = new CHILUtil(inputs)) {

			if (chUtil.getConnection()) {
				long locationID = chUtil.getLocationID(locationName);

				if (locationID == -1) {
					return jsonArray;
				}

				if (chUtil.isConnected()) {

					try {
						getDeiveID = optikUtils.getStatInformation(testCase, inputs).getString("deviceID");
					} catch (Exception e) {
						Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FRAMEWORK_CONFIGURATION,
								"Get Schedule Information  : Error occurred - " + e.getMessage());
						return jsonArray = null;
					}
					String url = optikUtils.getCHILURL(testCase, inputs) + "api/locations/" + locationID + "/devices/"
							+ getDeiveID + "/Schedule";

					HttpURLConnection connection = chUtil.doGetRequest(url);

					try {

						if (connection != null) {
							BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));

							String inputLine;
							StringBuffer html = new StringBuffer();

							while (!in.ready()) {
							}

							while ((inputLine = in.readLine()) != null) {
								html.append(inputLine);
							}

							in.close();
							try {
								html.insert(0, '[').insert(html.length(), ']');
							} catch (Exception e) {
								Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FRAMEWORK_CONFIGURATION,
										"Get Schedule Information  : Error occurred - " + e.getMessage());
							}
							jsonArray = new JSONArray(html.toString().trim());

						} else {
							Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FRAMEWORK_CONFIGURATION,
									"Get Schedule Information : Location not found by name - " + locationName);
						}

					} catch (IOException e) {
						Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FRAMEWORK_CONFIGURATION,
								"Get Schedule Information  : Error occurred - " + e.getMessage());
						jsonArray = null;
					}
				}

			} else {
				Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
						"Get Schedule Information  : Unable to connect to CHAPI.");
			}

		} catch (Exception e) {

			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Get Get Schedule Information  : Unable to get information. Error occurred - " + e.getMessage());
			jsonArray = null;
		}

		return jsonArray;
	}

	// This method will make a GET call on CHIL to get all the device details of
	// the location and device specified in the inputs.
	public static JSONObject getStatInformation(TestCases testCase, TestCaseInputs inputs) {
		JSONObject jsonObject = null;

		try (CHILUtil chUtil = new CHILUtil(inputs)) {

			if (chUtil.getConnection()) {
				long locationID = chUtil.getLocationID(inputs.getInputValue("LOCATION1_NAME"));

				if (locationID == -1) {
					return jsonObject;
				}

				if (chUtil.isConnected()) {
					String chapiURL = getCHILURL(testCase, inputs);
					String url = chapiURL + "api/v3/locations/" + locationID;

					HttpURLConnection connection = chUtil.doGetRequest(url);

					try {

						if (connection != null) {

							BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));

							String inputLine;
							StringBuffer html = new StringBuffer();

							while (!in.ready()) {
							}

							while ((inputLine = in.readLine()) != null) {
								html.append(inputLine);
							}

							in.close();

							JSONObject jsonObj = new JSONObject(html.toString().trim());

							JSONArray array = (JSONArray) jsonObj.get("devices");

							JSONObject tempJSONObject = null;

							boolean elementFound = false;

							for (int counter = 0; counter < array.length(); counter++) {
								tempJSONObject = array.getJSONObject(counter);

								if (inputs.getInputValue("LOCATION1_DEVICE1_NAME")
										.equalsIgnoreCase(tempJSONObject.getString("userDefinedDeviceName"))) {

									jsonObject = array.getJSONObject(counter);
									elementFound = true;
									break;
								}
							}

							if (elementFound) {
							} else {
								Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FRAMEWORK_CONFIGURATION,
										"Get Stat Information : Stat not found by name - "
												+ inputs.getInputValue("LOCATION1_DEVICE1_NAME"));
							}
						} else {
							Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FRAMEWORK_CONFIGURATION,
									"Get Stat Information : Location not found by name - "
											+ inputs.getInputValue("LOCATION1_NAME"));
						}

					} catch (IOException e) {
						Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FRAMEWORK_CONFIGURATION,
								"Get Stat Information  : Error occurred - " + e.getMessage());
						jsonObject = null;
					}

				} else {
					Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
							"Get Stat Information  : Unable to connect to CHAPI.");
				}
			}
		} catch (Exception e) {

			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Get Stat Information  : Unable to get information for Stat - "
							+ inputs.getInputValue("LOCATION1_DEVICE1_NAME") + " at location - "
							+ inputs.getInputValue("LOCATION1_NAME") + " : Error occurred - " + e.getMessage());
			jsonObject = null;
		}

		return jsonObject;
	}



	public static boolean setAppEnvironmentForLocalization(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		try {
			String environmentToSelect = inputs.getInputValue(TestCaseInputs.APP_ENVIRONMENT);
			String ExecutionLocation = inputs.getInputValue(TestCaseInputs.EXEC_LOCATION);
			LoginScreen ls = new LoginScreen(testCase);
			SecretMenu sm = new SecretMenu(testCase);

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(environmentToSelect.equalsIgnoreCase("Production") && !(ExecutionLocation.equalsIgnoreCase("Local")))
				{
					Keyword.ReportStep_Pass(testCase, "[Set App Environment ] : Default environment is production");
					return true;
				}
				else
				{
					flag = flag && ls.longPressOnSecretMenuImage();
				}
			}
			else
			{
				flag = flag && ls.longPressOnSecretMenuImage();
				if(!sm.turnonsetAccessibilityToggleBuutonForLocal(inputs))
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to turn on setassibility");
					flag=false;
				}



				if(environmentToSelect.equalsIgnoreCase("Production") && !(ExecutionLocation.equalsIgnoreCase("Local")))
				{
					Keyword.ReportStep_Pass(testCase, "[Set App Environment ] : Default environment is production");
					//flag = flag && sm.clickOnDoneButton();
					if(sm.isOKavailable(inputs)){
						flag = flag && sm.clickOK(inputs);
					}
					flag = flag && ls.isoptikLogoVisible();
					return flag;
				}

			}


			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.minimizeApp(testCase , 5);
			}
			if (sm.isWebServerURLVisible()) {
				flag = flag && sm.clickOnWebServerURL();
				// Keeping this explicit wait because sometimes the environment selection fails
				// on ANDROID
				TimeUnit.SECONDS.sleep(1);
				// Thread.sleep(1000);
			}

			environmentToSelect = environmentToSelect.replaceAll("\\s", "");
			if (environmentToSelect.equalsIgnoreCase("ChilDas(QA)")) {
				flag = flag && sm.clickOnCHILDASQAOption();
			} else if (environmentToSelect.equalsIgnoreCase("Production")) {
				flag = flag && sm.clickOnProductionOption();
			} else if (environmentToSelect.equalsIgnoreCase("CHILStage(Azure)") || environmentToSelect.equalsIgnoreCase("Stage")) {
				flag = flag && sm.clickOnCHILStageAzureOption();
			} else if (environmentToSelect.equalsIgnoreCase("CHILInt(Azure)")) {
				flag = flag && sm.clickOnCHILIntAzureOption();
			} else if (environmentToSelect.equalsIgnoreCase("ChilDev(Dev2)")) {
				flag = flag && sm.clickOnCHILDevDev2Option();
			} else if (environmentToSelect.equalsIgnoreCase("LoadTesting")) {
				flag = flag && sm.clickOnCHILLoadTestingOption();
			} else if (environmentToSelect.equalsIgnoreCase("ChilDas(Test)")) {
				flag = flag && sm.clickOnCHILDASTestOption();
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invalid Environment");
				return false;
			}
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				if(!inputs.isInputAvailable("LANGUAGE"))
				{
					flag = flag && sm.turnonEnableFlycatcherToggleButton();
				}

				//flag = flag && sm.turnOnTitanR1IDAASOption();
				 //sm.turnoffTitanR1IDAASOption();

				sm.turnoffTitanR2IDAASOption();
				flag = flag && MobileUtils.pressBackButton(testCase);

			}else {
				if(sm.isOKavailable(inputs)){
					flag = flag && sm.clickOK(inputs);
				}

				if(!MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.minimizeApp(testCase , 5);
				}
			}
			flag = flag && ls.isoptikLogoVisible();
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Set App Environment :  Error occurred - " + e.getMessage());
			flag = false;
		}

		return flag;
	}

	public static boolean launchAndLoginToApplicationForlocal(TestCases testCase, TestCaseInputs inputs,
			boolean... closeCoachMarks) {
		boolean flag = true;
		flag = MobileUtils.launchApplication(inputs, testCase, true);

		if(inputs.isInputAvailable("LANGUAGE"))
		{
			flag = flag && optikUtils.closeAppLaunchPopupsLocal(testCase);
		}else
		{
			flag = flag && optikUtils.closeAppLaunchPopups(testCase);
		}

			flag = flag && optikUtils.setAppEnvironmentForLocalization(testCase, inputs);

		flag = flag && optikUtils.loginTooptikAppLocal(testCase, inputs);

		flag = flag && optikUtils.verifyLoginSuccessfulLocal(testCase, inputs);
		if(!MobileUtils.isRunningOnAndroid(testCase)) {
			flag = flag && optikUtils.createPasscodeAndVerify(testCase , inputs, "create");
			}
		/*
		 * if (closeCoachMarks.length > 0) { flag = flag &&
		 * optikUtils.verifyLoginSuccessfulLocal(testCase, inputs, closeCoachMarks[0]);
		 * } else { flag = flag && optikUtils.verifyLoginSuccessfulLocal(testCase,
		 * inputs); }
		 */
		return flag;
	}



	public static boolean verifyLoginSuccessfulLocal(TestCases testCase, TestCaseInputs inputs, boolean... closeCoachMarks) {
		boolean flag = true;
		OSPopUps os = new OSPopUps(testCase);
		CoachMarks cm = new CoachMarks(testCase);
		Dashboard d = new Dashboard(testCase);
		FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(testCase.getMobileDriver());
		fWait.pollingEvery(5, TimeUnit.SECONDS);
		fWait.withTimeout(30, TimeUnit.SECONDS);


			if (!MobileUtils.isRunningOnAndroid(testCase)) {
			if(os.LocationAllowOncebuttonVisible(3)) {
				os.clickLocationAllowOncebutton();
				}
			}



		try {
			Boolean isEventReceived = fWait.until(new Function<CustomDriver, Boolean>() {
				@Override
				public Boolean apply(CustomDriver driver) {

					if (!MobileUtils.isRunningOnAndroid(testCase)) {
						try {

							((CustomIOSDriver) testCase.getMobileDriver()).switchTo().alert().accept();

							if (os.isAllowButtonVisible()) {
								os.clickOnAllowButton();
							}
							if (os.isNotNowButtonVisible(1)) {
								os.clickOnNotNowButton();
								return false;
							} else if (cm.isGotitButtonForFrCAVisible(10,inputs)) {

								//if (closeCoachMarks.length == 0 && !closeCoachMarks[0]) {
								return CoachMarkUtils.closeCoachMarksLocal(testCase,inputs);
								//}

							}else{
								return false;
							}


						} catch (Exception e) {
							if (os.isNotNowButtonVisible(1)) {
								os.clickOnNotNowButton();
								return false;
							} else if (cm.isGotitButtonForFrCAVisible(10,inputs)) {

								//if (closeCoachMarks.length == 0 && !closeCoachMarks[0]) {
								return CoachMarkUtils.closeCoachMarksLocal(testCase,inputs);
								//}

							}
						}
					} else {
						if (os.isCloseButtonVisible(1)) {
							os.clickOnCloseButton();
							return false;
						}
					}
					if (!MobileUtils.isRunningOnAndroid(testCase)) {
						return d.isGlobalDrawerButtonVisible(5);
					} else {
						if (!d.isSplashScreenVisible(2) && !d.isProgressBarVisible(2)) {
							if (closeCoachMarks.length > 0 && !closeCoachMarks[0]) {
								return true;
							} else {
								return CoachMarkUtils.closeCoachMarks(testCase);
							}

						} else {
							return false;
						}
					}
				}
			});
			if (isEventReceived) {
				Keyword.ReportStep_Pass(testCase, "Successfully navigated to Optiktv flows");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Login To optik : Unable to navigate to homepage. Could not find notification icon on homepage");
			}

		} catch (TimeoutException e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Timed out while loading. Wait time : 2 minutes");
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		return flag;
	}

	public static boolean loginTooptikAppLocal(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		LoginScreen ls = new LoginScreen(testCase);
		
			ls.isClickLoginButtonFirstLocal(inputs);
		
		ls.isoptikLogoVisible(5);
		if (ls.setEmailAddressValue(inputs.getInputValue("USERID").toString())) {
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			Keyword.ReportStep_Pass(testCase,
					"Login To optik : Email Address set to - " + inputs.getInputValue("USERID"));
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Login To optik : Not able to set Email Address.");
			flag = false;
		}
		if (ls.setPasswordValue(inputs.getInputValue("PASSWORD").toString())) {
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				ls.clickonOKKey();

          if(ls.isoptikLogoVisible())
				{
					ls.clickOnoptikLogo();
				}
			}
			Keyword.ReportStep_Pass(testCase, "Login To optik : Password set to - " + inputs.getInputValue("PASSWORD"));
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Login To optik : Not able to set Password.");
			flag = false;
		}
		if (ls.isLoginButtonLocalVisible(inputs)) {
			flag = flag && ls.isClickLoginButtonLocal(inputs);
		}else{
			flag = flag && ls.isClickLoginButtonLocal(inputs);
		}
		return flag;
	}

	public static boolean ClearMsgonActivityHistory(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		ActivityHistoryScreen ah=new ActivityHistoryScreen(testCase);
		if(ah.isEditOptionDisplayed())
		{
			ah.clickOnEditOption();

			if(ah.isSlectAllDisplayed())
			{
				ah.clickOnSlectAll();

				if(ah.isDeleteOptionDisplayed())
				{
					if(ah.clickOnDeleteOption())
					{
						Keyword.ReportStep_Pass(testCase, "Successfully clear all messages on Activity History");
					}
				}
			}
		}
		else
		{

		}

		SecondaryCardSettings sc=new SecondaryCardSettings(testCase);
		if(sc.isBackButtonVisible())
		{
			sc.clickOnBackButton();
			sc.clickOnBackButton();
		}
		return flag;


	}

	public static boolean toggleGeofence(TestCases testCase, boolean On,TestCaseInputs inputs)
	{
		boolean flag = true ;
		try
		{
			Dashboard db= new Dashboard(testCase);
			SecondaryCardSettings sc= new SecondaryCardSettings(testCase);
			GeoFenceSettingsScreen geof= new GeoFenceSettingsScreen(testCase);
			String status="";
			OSPopUps os=new OSPopUps(testCase);
			if (db.clickOnGlobalDrawerButton())
			{
				if (sc.selectOptionFromSecondarySettings(SecondaryCardSettings.GEOFENCE))
				{
					
					if(On)
					{
						if(os.TurnOnLocationVisible())
					{
						os.clickTurnOnLocationbutton();
						if(os.AllowWhileUsingAppVisible())
						{
							os.clickAllowWhileUsingAppbutton();

						}
						if(os.isAllowButtonVisible())
						{
							os.clickOnAllowButton();

						}else
						{
							os.isAllowButtonClick(inputs);

						}
					}
						if(!geof.isGeofenceToggleButtonVisible()) {
							optikUtils.VerifyPasscodeScreen(testCase , inputs,true, false);	
						}
						
						status=geof.getGeofenceToggleStatus();
						if(status.equalsIgnoreCase("true")||status.equalsIgnoreCase("ON")||status.equalsIgnoreCase("1"))
						{
							Keyword.ReportStep_Pass(testCase , "Geofence location is already turned on") ;
						}
						else
						{
							geof.clickOnGeofenceToggleButton();
							if (!MobileUtils.isRunningOnAndroid(testCase)) {
							if(geof.isLocationAccessIOSSettingVisible())
							{
								geof.clickOnLocationAccessIOSSetting();
								if(geof.isLocationWhileUsingVisible())
								{
									geof.clickOnLocationWhileUsing();	
									
								}
								if(geof.isLocationAlwaysVisible())
								{
									geof.clickOnLocationAlways();
								}
								if(geof.isPreciseLocationToggleVisible())
								{
									geof.clickOnPreciseToggleLocation();
								}
								testCase.getMobileDriver().launchApp();
								if(!geof.isGeofenceToggleButtonVisible()) {
									optikUtils.VerifyPasscodeScreen(testCase , inputs,true, false);	
								}
								if(geof.isLocationAccessCloseVisible())
								{
									geof.clickOnLocationAccessClose();
								}
								geof.clickOnGeofenceToggleButton();
							}	}
							status=geof.getGeofenceToggleStatus();
							if(status.equalsIgnoreCase("true")||status.equalsIgnoreCase("ON")||status.equalsIgnoreCase("1"))
							{
								Keyword.ReportStep_Pass(testCase , "Geofence location is turned on") ;
							}
							else
							{
								Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to turn on geofence toggle") ;
								flag = false ;
							}

						}
					}
					else
					{
						if(os.isNotNowButtonVisible()){
							os.clickOnNotNowButton();	
						}
						if(status.equalsIgnoreCase("false")||status.equalsIgnoreCase("off")||status.equalsIgnoreCase("0"))
						{
							Keyword.ReportStep_Pass(testCase , "Geofence location is already turned Off") ;
						}
						else
						{
							geof.clickOnGeofenceToggleButton();

							if(geof.isOKButtonVisible())
							{
								geof.clickOKButton();
							}
								status=geof.getGeofenceToggleStatus();
								if(status.equalsIgnoreCase("false")||status.equalsIgnoreCase("off")||status.equalsIgnoreCase("0"))
								{
									Keyword.ReportStep_Pass(testCase , "Geofence location is turned off") ;
								}
								else
								{
									Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to turn Off geofence toggle") ;
									flag = false ;
								}

							
							
						}
					}

					if(geof.isBackButtonVisible())
					{
						geof.clickOnBackButton();
					}
					if(sc.isBackButtonVisible())
					{
						sc.clickOnBackButton();
					}
				}
			}
		}
		catch (Exception e)
		{
			Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Exception : toggleGeofence :" + e.getMessage()) ;
			flag = false ;
		}

		return flag ;
	}

	public static boolean toggleGeofenceAlert(TestCases testCase, boolean On,TestCaseInputs inputs)
	{
		boolean flag = true ;
		try
		{
			Dashboard db= new Dashboard(testCase);
			SecondaryCardSettings sc= new SecondaryCardSettings(testCase);
			GeoFenceSettingsScreen geof= new GeoFenceSettingsScreen(testCase);
			String status="";
			OSPopUps os=new OSPopUps(testCase);
			if (db.clickOnGlobalDrawerButton())
			{
				if (sc.selectOptionFromSecondarySettings(SecondaryCardSettings.GEOFENCE))
				{
					if(On)
					{
						if(os.TurnOnLocationVisible())
						{
							os.clickTurnOnLocationbutton();
							if(os.AllowWhileUsingAppVisible())
							{
								os.clickAllowWhileUsingAppbutton();

							}
							if(os.isAllowButtonVisible())
							{
								os.clickOnAllowButton();

							}else
							{
								os.isAllowButtonClick(inputs);

							}
							
						}
						status=geof.getGeofenceAlertToggleStatus();
						if(status.equalsIgnoreCase("true")||status.equalsIgnoreCase("ON")||status.equalsIgnoreCase("1"))
						{
							Keyword.ReportStep_Pass(testCase , "Geofence Alert is already turned on") ;
						}
						else
						{
							geof.clickOnGeofenceAlertToggleButton();
							status=geof.getGeofenceAlertToggleStatus();
							if(status.equalsIgnoreCase("true")||status.equalsIgnoreCase("ON")||status.equalsIgnoreCase("1"))
							{
								Keyword.ReportStep_Pass(testCase , "Geofence Alert is turned on") ;
							}
							else
							{
								Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to turn on geofence toggle") ;
								flag = false ;
							}

						}
					}
					else
					{

                          if(os.isNotNowButtonVisible()){
							os.clickOnNotNowButton();	
						}

						if(status.equalsIgnoreCase("false")||status.equalsIgnoreCase("off")||status.equalsIgnoreCase("0"))
						{
							Keyword.ReportStep_Pass(testCase , "Geofence Alert is already turned Off") ;
						}
						else
						{
							geof.clickOnGeofenceAlertToggleButton();

                          if(geof.isOKButtonVisible())
							{
								geof.clickOKButton();
							}
							status=geof.getGeofenceAlertToggleStatus();
							if(status.equalsIgnoreCase("false")||status.equalsIgnoreCase("off")||status.equalsIgnoreCase("0"))
							{
								Keyword.ReportStep_Pass(testCase , "Geofence Alert is turned off") ;
							}
							else
							{
								Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to turn Off geofence toggle") ;
								flag = false ;
							}
						}
					}

					if(geof.isBackButtonVisible())
					{
						geof.clickOnBackButton();
					}
					if(sc.isBackButtonVisible())
					{
						sc.clickOnBackButton();
					}
				}
			}
		}
		catch (Exception e)
		{
			Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Exception : toggleGeofence :" + e.getMessage()) ;
			flag = false ;
		}

		return flag ;
	}


	public static boolean setuserLocation(TestCases testCase, TestCaseInputs inputs, String userLocation)
	{

		boolean flag = true ;
		try
		{
			String geofenceDetails = "" ;
			double latitude = 0 ;
			double longitude = 0 ;
			String DeviceLat = "0.0" ;
			String DeviceLon = "1.0" ;
			int response = 0 ;

			if (inputs.isRealDevice() || !inputs.isRealDevice())
			{
				if (userLocation.equalsIgnoreCase("Home"))
				{
					LocationInformation statinfo = new LocationInformation(testCase , inputs) ;
					String countryname = statinfo.getCountry() ;
					geofenceDetails = statinfo.getGeofenceDetails() ;
					String[] array = geofenceDetails.split("_") ;
					latitude = Double.parseDouble(array[0]) ;
					longitude = Double.parseDouble(array[1]) ;
					try (CHILUtil chUtil = new CHILUtil(inputs))
					{
						if (inputs.isRunningOn("Perfecto"))
						{
							latitude = InputVariables.Perfecto_Latitude ;
							longitude = InputVariables.Perfecto_Longitude ;
							response = chUtil.setGeolocation(testCase , inputs.getInputValue("LOCATION1_NAME") ,
									inputs.getInputValue("USERID") , inputs.getInputValue("PASSWORD") ,
									countryname , InputVariables.Perfecto_Latitude , InputVariables.Perfecto_Longitude ,
									GlobalVariables.Geofence_DefaultRadius) ;
						}
						else if (inputs.isRunningOn("Saucelab"))
						{
							latitude = InputVariables.Saucelab_Latitude ;
							longitude = InputVariables.Saucelab_Longitude ;
							response = chUtil.setGeolocation(testCase , inputs.getInputValue("LOCATION1_NAME") ,
									inputs.getInputValue("USERID") , inputs.getInputValue("PASSWORD") ,
									countryname , InputVariables.Saucelab_Latitude , InputVariables.Saucelab_Longitude ,
									GlobalVariables.Geofence_DefaultRadius) ;
						}
						else if (inputs.isRunningOn("TestObject"))
						{
							latitude = InputVariables.TestObject_Latitude ;
							longitude = InputVariables.TestObject_Longitude ;
							response = chUtil.setGeolocation(testCase , inputs.getInputValue("LOCATION1_NAME") ,
									inputs.getInputValue("USERID") , inputs.getInputValue("PASSWORD") ,
									countryname , InputVariables.Saucelab_Latitude , InputVariables.Saucelab_Longitude ,
									GlobalVariables.Geofence_DefaultRadius) ;
						}
						else
						{
							response = chUtil.setGeolocation(testCase , inputs.getInputValue("LOCATION1_NAME") ,
									inputs.getInputValue("USERID") , inputs.getInputValue("PASSWORD") ,
									countryname , latitude , longitude , GlobalVariables.Geofence_DefaultRadius) ;
						}

						if (response == 200)
						{
							Keyword.ReportStep_Pass(testCase ,
									"[Set USer Location][Home] Successfully set the User location to latitude :"
											+ latitude + " longitude :" + longitude) ;
						}
						else
						{

							flag = false ;
							Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,
									"[Set User Location][Home] : Unable to set User location to latitude :"
											+ latitude + " longitude :" + longitude) ;

						}
					}
					catch (Exception e)
					{
						flag = false ;
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,
								"[Set User Location][Home] : Unable to set User location to latitude :" + latitude
								+ " longitude :" + longitude) ;
					}
				}
				else if (userLocation.equalsIgnoreCase("Away"))
				{
					LocationInformation statinfo = new LocationInformation(testCase , inputs) ;
					String countryname = statinfo.getCountry() ;
					geofenceDetails = statinfo.getGeofenceDetails() ;
					String[] array = geofenceDetails.split("_") ;
					latitude = Double.parseDouble(array[0]) ;
					longitude = Double.parseDouble(array[1]) ;
					try (CHILUtil chUtil = new CHILUtil(inputs))
					{
						response = chUtil.setGeolocation(testCase , inputs.getInputValue("LOCATION1_NAME") ,
								inputs.getInputValue("USERID") , inputs.getInputValue("PASSWORD") , countryname ,
								GlobalVariables.AwayLatitude , GlobalVariables.AwayLongitude ,
								GlobalVariables.Geofence_DefaultRadius) ;

						if (response == 200)
						{
							Keyword.ReportStep_Pass(testCase ,
									"[Set USer Location][Away] Successfully set the User location to latitude :"
											+ GlobalVariables.AwayLatitude + " longitude :"
											+ GlobalVariables.AwayLongitude) ;

						}
						else
						{

							flag = false ;
							Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,
									"[Set User Location][Away] : Unable to set User location to latitude :"
											+ GlobalVariables.AwayLatitude + " longitude :"
											+ GlobalVariables.AwayLongitude) ;

						}
					}
					catch (Exception e)
					{
						flag = false ;
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,
								"[Set User Location][Away] : Unable to set User location to latitude :"
										+ GlobalVariables.AwayLatitude + " longitude :"
										+ GlobalVariables.AwayLongitude) ;
					}

				}
				else if (userLocation.equalsIgnoreCase("Home for Location2"))
				{
					String ds = inputs.getInputValue("LOCATION1_NAME") ;
					inputs.setInputValue("LOCATION1_NAME" , inputs.getInputValue("LOCATION2_NAME")) ;
					LocationInformation statinfo = new LocationInformation(testCase , inputs) ;
					String countryname = statinfo.getCountry() ;
					geofenceDetails = statinfo.getGeofenceDetails() ;
					String[] array = geofenceDetails.split("_") ;
					latitude = Double.parseDouble(array[0]) ;
					longitude = Double.parseDouble(array[1]) ;
					inputs.setInputValue("LOCATION1_NAME" , ds) ;
					try (CHILUtil chUtil = new CHILUtil(inputs))
					{
						if (inputs.isRunningOn("Perfecto"))
						{
							latitude = InputVariables.Perfecto_Latitude ;
							longitude = InputVariables.Perfecto_Longitude ;
							response = chUtil.setGeolocation(testCase , inputs.getInputValue("LOCATION2_NAME") ,
									inputs.getInputValue("USERID") , inputs.getInputValue("PASSWORD") ,
									countryname , InputVariables.Perfecto_Latitude , InputVariables.Perfecto_Longitude ,
									GlobalVariables.Geofence_DefaultRadius) ;
						}
						else if (inputs.isRunningOn("Saucelab"))
						{
							latitude = InputVariables.Saucelab_Latitude ;
							longitude = InputVariables.Saucelab_Longitude ;
							response = chUtil.setGeolocation(testCase , inputs.getInputValue("LOCATION2_NAME") ,
									inputs.getInputValue("USERID") , inputs.getInputValue("PASSWORD") ,
									countryname , InputVariables.Saucelab_Latitude , InputVariables.Saucelab_Longitude ,
									GlobalVariables.Geofence_DefaultRadius) ;
						}
						else
						{
							latitude = Double.parseDouble(DeviceLat) ;
							longitude = Double.parseDouble(DeviceLon) ;
							response = chUtil.setGeolocation(testCase , inputs.getInputValue("LOCATION1_NAME") ,
									inputs.getInputValue("USERID") , inputs.getInputValue("PASSWORD") ,
									countryname , latitude , longitude , GlobalVariables.Geofence_DefaultRadius) ;
						}
						if (response == 200)
						{
							Keyword.ReportStep_Pass(testCase ,
									"[Set USer Location][Home] Successfully set the User location to latitude :"
											+ latitude + " longitude :" + longitude) ;
						}
						else
						{

							flag = false ;
							Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,
									"[Set User Location][Home] : Unable to set User location to latitude :"
											+ latitude + " longitude :" + longitude) ;
						}
					}
					catch (Exception e)
					{
						flag = false ;
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,
								"[Set User Location][Home] : Unable to set User location to latitude :" + latitude
								+ " longitude :" + longitude) ;
					}

				}
				else if (userLocation.equalsIgnoreCase("Away for Location2"))
				{
					String ds = inputs.getInputValue("LOCATION1_NAME") ;
					inputs.setInputValue("LOCATION1_NAME" , inputs.getInputValue("LOCATION2_NAME")) ;
					LocationInformation statinfo = new LocationInformation(testCase , inputs) ;
					String countryname = statinfo.getCountry() ;
					geofenceDetails = statinfo.getGeofenceDetails() ;
					String[] array = geofenceDetails.split("_") ;
					latitude = Double.parseDouble(array[0]) ;
					longitude = Double.parseDouble(array[1]) ;
					inputs.setInputValue("LOCATION1_NAME" , ds) ;
					try (CHILUtil chUtil = new CHILUtil(inputs))
					{
						response = chUtil.setGeolocation(testCase , inputs.getInputValue("LOCATION2_NAME") ,
								inputs.getInputValue("USERID") , inputs.getInputValue("PASSWORD") , countryname ,
								GlobalVariables.AwayLatitude , GlobalVariables.AwayLongitude ,
								GlobalVariables.Geofence_DefaultRadius) ;

						if (response == 200)
						{
							Keyword.ReportStep_Pass(testCase ,
									"[Set USer Location][Away] Successfully set the User location to latitude :"
											+ GlobalVariables.AwayLatitude + " longitude :"
											+ GlobalVariables.AwayLongitude) ;

						}
						else
						{

							flag = false ;
							Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,
									"[Set User Location][Away] : Unable to set User location to latitude :"
											+ GlobalVariables.AwayLatitude + " longitude :"
											+ GlobalVariables.AwayLongitude) ;
						}
					}
					catch (Exception e)
					{
						flag = false ;
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,
								"[Set User Location][Away] : Unable to set User location to latitude :"
										+ GlobalVariables.AwayLatitude + " longitude :"
										+ GlobalVariables.AwayLongitude) ;
					}

				}
				else if (userLocation.equalsIgnoreCase("In"))
				{
					LocationInformation statinfo = new LocationInformation(testCase , inputs) ;
					String countryname = statinfo.getCountry() ;
					geofenceDetails = statinfo.getGeofenceDetails() ;
					String[] array = geofenceDetails.split("_") ;
					latitude = Double.parseDouble(array[0]) ;
					longitude = Double.parseDouble(array[1]) ;
					try (CHILUtil chUtil = new CHILUtil(inputs))
					{
						if (inputs.isRunningOn("Perfecto"))
						{
							latitude = InputVariables.Perfecto_Latitude ;
							longitude = InputVariables.Perfecto_Longitude ;
							response = chUtil.setGeolocation(testCase , inputs.getInputValue("LOCATION1_NAME") ,
									inputs.getInputValue("USERID") , inputs.getInputValue("PASSWORD") ,
									countryname , 42.275816  , -71.727891 ,
									GlobalVariables.Geofence_DefaultRadius) ;
						}
						else if (inputs.isRunningOn("Saucelab"))
						{
							latitude = InputVariables.Saucelab_Latitude ;
							longitude = InputVariables.Saucelab_Longitude ;
							response = chUtil.setGeolocation(testCase , inputs.getInputValue("LOCATION1_NAME") ,
									inputs.getInputValue("USERID") , inputs.getInputValue("PASSWORD") ,
									countryname , 37.270789 , -121.735878 ,
									GlobalVariables.Geofence_DefaultRadius) ;
						}
						else if (inputs.isRunningOn("TestObject"))
						{
							latitude = InputVariables.TestObject_Latitude ;
							longitude = InputVariables.TestObject_Longitude ;
							response = chUtil.setGeolocation(testCase , inputs.getInputValue("LOCATION1_NAME") ,
									inputs.getInputValue("USERID") , inputs.getInputValue("PASSWORD") ,
									countryname , InputVariables.Saucelab_Latitude , InputVariables.Saucelab_Longitude ,
									GlobalVariables.Geofence_DefaultRadius) ;
						}
						else
						{
							response = chUtil.setGeolocation(testCase , inputs.getInputValue("LOCATION1_NAME") ,
									inputs.getInputValue("USERID") , inputs.getInputValue("PASSWORD") ,
									countryname , latitude , longitude , GlobalVariables.Geofence_DefaultRadius) ;
						}

						if (response == 200)
						{
							Keyword.ReportStep_Pass(testCase ,
									"[Set USer Location][Home] Successfully set the User location to latitude :"
											+ latitude + " longitude :" + longitude) ;
						}
						else
						{

							flag = false ;
							Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,
									"[Set User Location][Home] : Unable to set User location to latitude :"
											+ latitude + " longitude :" + longitude) ;

						}
					}
					catch (Exception e)
					{
						flag = false ;
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,
								"[Set User Location][Home] : Unable to set User location to latitude :" + latitude
								+ " longitude :" + longitude) ;
					}
				}
				else if (userLocation.equalsIgnoreCase("Out"))
				{
					LocationInformation statinfo = new LocationInformation(testCase , inputs) ;
					String countryname = statinfo.getCountry() ;
					geofenceDetails = statinfo.getGeofenceDetails() ;
					String[] array = geofenceDetails.split("_") ;
					latitude = Double.parseDouble(array[0]) ;
					longitude = Double.parseDouble(array[1]) ;
					try (CHILUtil chUtil = new CHILUtil(inputs))
					{

						if (inputs.isRunningOn("Perfecto"))
						{
							response = chUtil.setGeolocation(testCase , inputs.getInputValue("LOCATION1_NAME") ,
									inputs.getInputValue("USERID") , inputs.getInputValue("PASSWORD") , countryname ,
									42.625036,-71.291378,
									GlobalVariables.Geofence_DefaultRadius) ;
						}
						else if (inputs.isRunningOn("Saucelab"))
						{
							response = chUtil.setGeolocation(testCase , inputs.getInputValue("LOCATION1_NAME") ,
									inputs.getInputValue("USERID") , inputs.getInputValue("PASSWORD") , countryname ,
									37.273467,-121.738349 ,
									GlobalVariables.Geofence_DefaultRadius) ;
						}




						if (response == 200)
						{
							Keyword.ReportStep_Pass(testCase ,
									"[Set USer Location][Away] Successfully set the User location to latitude :"
											+ 42.624366 + " longitude :"
											+ -71.305612) ;

						}
						else
						{

							flag = false ;
							Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,
									"[Set User Location][Away] : Unable to set User location to latitude :"
											+ GlobalVariables.AwayLatitude + " longitude :"
											+ GlobalVariables.AwayLongitude) ;

						}
					}
					catch (Exception e)
					{
						flag = false ;
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,
								"[Set User Location][Away] : Unable to set User location to latitude :"
										+ GlobalVariables.AwayLatitude + " longitude :"
										+ GlobalVariables.AwayLongitude) ;
					}

				}



				// MobileUtils.minimizeApp(testCase, 5);

			}
			else
				// If it is emulator or simulator
			{

				if (userLocation.equalsIgnoreCase("Away"))
				{
					if (SetUserLocation_Emulator(testCase , inputs , GlobalVariables.AwayLatitude ,
							GlobalVariables.AwayLongitude))
					{
						Keyword.ReportStep_Pass(testCase ,
								"[Set USer Location][Away] Successfully set the User location to latitude :"
										+ GlobalVariables.AwayLatitude + " longitude :"
										+ GlobalVariables.AwayLongitude) ;

					}
					else
					{
						flag = false ;
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"[Set User Location][Away] : Unable to set User location to latitude :"+ GlobalVariables.AwayLatitude + " longitude :"+ GlobalVariables.AwayLongitude) ;

					}
				}
				else
				{
					if (SetUserLocation_Emulator(testCase , inputs , GlobalVariables.HomeLatitude ,GlobalVariables.HomeLongitude))
					{
						Keyword.ReportStep_Pass(testCase ,
								"[Set USer Location][Home] Successfully set the User location to latitude :"
										+ GlobalVariables.HomeLatitude + " longitude :"
										+ GlobalVariables.HomeLongitude) ;

					}
					else
					{
						flag = false ;
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,
								"[Set User Location][Home] : Unable to set User location to latitude :"
										+ GlobalVariables.HomeLatitude + " longitude :"
										+ GlobalVariables.HomeLongitude) ;
					}
				}
			}
		}
		catch (Exception e)
		{
			Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , e.getMessage()) ;
			flag = false ;
		}
		return flag ;
	}

	public static boolean SetUserLocation_Emulator(final TestCases testCase, TestCaseInputs inputs, double Latitude,double longitude)
	{

		boolean flag = true ;
		double altitude = 100 ;

		try
		{
			Location location = new Location(Latitude , longitude , altitude) ;
			testCase.getMobileDriver().setLocation(location) ;
			Keyword.ReportStep_Pass(testCase ,
					"Set User Location [On Emulator] : Location of User Set to  - Location Longitude : " + longitude
					+ ", Location Latitude : " + Latitude) ;

		}
		catch (Exception e)
		{
			Keyword.ReportStep_Fail_WithOut_ScreenShot(
					testCase ,
					FailType.COSMETIC_FAILURE ,
					"Set User Location [On Emulator] : Not able to set location for Emulator. Error occurred - "
							+ e.getMessage()) ;
			flag = false ;
		}

		return flag ;
	}

	public static boolean verifydemoMemberShipOption(TestCases testCase,TestCaseInputs inputs,String countryName)
	{
		boolean flag=true;

		LocationDetailsScreen lds = new LocationDetailsScreen(testCase);
		EditAddressLocation eal=new EditAddressLocation(testCase);
		ChangeCountryScreen ccs= new ChangeCountryScreen(testCase);
		SecondaryCardSettings sc = new SecondaryCardSettings(testCase);
		Dashboard db = new Dashboard(testCase);
		HashMap<String, String> loc=lds.getCountryNamefromChapi();
		inputs.setInputValue("addressName" , loc.get("addressName"));
		inputs.setInputValue("stateName" , loc.get("stateName"));
		inputs.setInputValue("cityName" , loc.get("cityName"));
		inputs.setInputValue("zipCode" , loc.get("zipCode"));
		inputs.setInputValue("originalCountry" , loc.get("countryName"));

		if(inputs.getInputValue("originalCountry").equalsIgnoreCase("United States"))
		{
			if(db.isGlobalDrawerButtonVisible())
			{
				db.clickOnGlobalDrawerButton();
			}

			if(testCase.getMobileDriver().getPageSource().contains("Membership"))
			{
				Keyword.ReportStep_Pass(testCase, "demo Membership option display for United States region.");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "demo Membership option not display for United States region.");
				flag=false;

			}
			sc.clickOnBackButton();

			navigatetoGlobalDrwaerOption(testCase , SecondaryCardSettings.LOCATIONADDRESS);

			if(lds.isEditexistingaddressVisible(10))
			{
				lds.navigateToEditAddressScreen();
			}



			if(eal.isEditAddressChangeCountryButtonVisible())
			{
				eal.clickOnEditAddressChangeCountryButton();
			}

			if(ccs.isCountrySearchTextFieldVisible()){
				ccs.SetCountrySearchTextField("Canada");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}

			if(ccs.SelectCountry("Canada"))
			{
				Keyword.ReportStep_Pass(testCase, "Click on 'Canada'country");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on 'Canada' country");
				flag=false;
			}

			if(ccs.isEULAAcceptAvailable(5))
			{
				ccs.ClickonEULAAcceptButton();
			}

			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}

			if(eal.setZipCodeAdressFieldValue("Y1A1A3"))
			{
				Keyword.ReportStep_Pass(testCase, "Zip code is set to 'Y1A1A3'");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to set zip code i.e 'Y1A1A3'");
				flag=false;
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}


			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				eal.setStreetAddressFieldValue(inputs.getInputValue("addressName"));
				eal.setCityAddressFieldValue(inputs.getInputValue("cityName"));
				eal.setStateAddressFieldValue(inputs.getInputValue("stateName"));
				//eal.setZipCodeAdressFieldValue(inputs.getInputValue("zipCode"));
			}
			if(eal.isSaveButtonVisible())
			{
				eal.clickOnSaveButton();
			}
			sc.clickOnBackButton();
			sc.clickOnBackButton();

			db.clickOnGlobalDrawerButton();

			if(testCase.getMobileDriver().getPageSource().contains("Membership"))
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "demo Membership option display for Canada region");
				flag=false;
			}
			else
			{
				Keyword.ReportStep_Pass(testCase, "demo Membership option not display for Canada region");
			}

			sc.clickOnBackButton();

			navigatetoGlobalDrwaerOption(testCase , SecondaryCardSettings.LOCATIONADDRESS);

			if(lds.isEditexistingaddressVisible(10))
			{
				lds.navigateToEditAddressScreen();
			}
			if(eal.isEditAddressChangeCountryButtonVisible())
			{
				eal.clickOnEditAddressChangeCountryButton();
			}

			if(ccs.isCountrySearchTextFieldVisible()){
				ccs.SetCountrySearchTextField(inputs.getInputValue("originalCountry"));
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}

			if(ccs.SelectCountry(inputs.getInputValue("originalCountry")))
			{
				Keyword.ReportStep_Pass(testCase, "Click on '"+inputs.getInputValue("originalCountry")+"'country");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on 'United States 'country");
				flag=false;
			}
			//			if(eal.isZipCodeAdressFieldVisible())
			//			{
			//				eal.clickOnZipCodeAdressField();
			//				eal.setZipCodeAdressFieldValue(inputs.getInputValue("OrgzipCode"));
			//				Keyword.ReportStep_Pass(testCase, "Zip code is set to '10007'");
			//			}
			//			else
			//			{
			//				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to set zip code i.e '10007'");
			//				flag=false;
			//			}
			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}

			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				eal.setStreetAddressFieldValue(inputs.getInputValue("addressName"));
				eal.setCityAddressFieldValue(inputs.getInputValue("cityName"));
				eal.setStateAddressFieldValue(inputs.getInputValue("stateName"));
				eal.setZipCodeAdressFieldValue(inputs.getInputValue("zipCode"));
			}
			else if(MobileUtils.isRunningOnAndroid(testCase))
			{
				eal.setStreetAddressFieldValue(inputs.getInputValue("addressName"));
				eal.setCityAddressFieldValue("New York");
				eal.setStateAddressFieldValue("United States");
				eal.setZipCodeAdressFieldValue("10007");
			}

			if(eal.isSaveButtonVisible())
			{
				eal.clickOnSaveButton();
			}

			sc.clickOnBackButton();
			sc.clickOnBackButton();
		}
		else
		{
			if(db.isGlobalDrawerButtonVisible())
			{
				db.clickOnGlobalDrawerButton();
			}

			if(testCase.getMobileDriver().getPageSource().contains("Membership"))
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "demo Membership option  display for "+inputs.getInputValue("originalCountry")+" region.");
				flag=false;
			}
			else
			{
				Keyword.ReportStep_Pass(testCase, "demo Membership option not display for "+inputs.getInputValue("originalCountry")+" region.");

			}
			sc.clickOnBackButton();

			navigatetoGlobalDrwaerOption(testCase , SecondaryCardSettings.LOCATIONADDRESS);

			if(lds.isEditexistingaddressVisible(10))
			{
				lds.navigateToEditAddressScreen();
			}


			if(eal.isChangeCountryButtonVisible())
			{
				eal.clickOnChangeCountryButton();
			}

			if(ccs.isCountrySearchTextFieldVisible()){
				ccs.SetCountrySearchTextField("United States");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}

			if(ccs.SelectCountry("United States"))
			{
				Keyword.ReportStep_Pass(testCase, "Click on 'United States'country");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on 'United States 'country");
				flag=false;
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}

			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				eal.setStreetAddressFieldValue(inputs.getInputValue("addressName"));
				eal.setCityAddressFieldValue(inputs.getInputValue("cityName"));
				eal.setStateAddressFieldValue(inputs.getInputValue("stateName"));
				eal.setZipCodeAdressFieldValue(inputs.getInputValue("zipCode"));
			}
			else {

				eal.setStreetAddressFieldValue(inputs.getInputValue("addressName"));
				eal.setCityAddressFieldValue("New York");
				eal.setStateAddressFieldValue("United States");
				eal.setZipCodeAdressFieldValue("10007");

			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			if(eal.isSaveButtonVisible())
			{
				eal.clickOnSaveButton();
			}
			sc.clickOnBackButton();
			sc.clickOnBackButton();

			try {
				Thread.sleep(10000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

			db.clickOnGlobalDrawerButton();

			if(testCase.getMobileDriver().getPageSource().contains("Membership"))
			{
				Keyword.ReportStep_Pass(testCase, "demo Membership option display for United States region.");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "demo Membership option not display for United States region.");
				flag=false;
			}

			sc.clickOnBackButton();

			navigatetoGlobalDrwaerOption(testCase , SecondaryCardSettings.LOCATIONADDRESS);

			if(lds.isEditexistingaddressVisible(10))
			{
				lds.navigateToEditAddressScreen();
			}
			if(eal.isChangeCountryButtonVisible())
			{
				eal.clickOnChangeCountryButton();
			}

			if(ccs.isCountrySearchTextFieldVisible()){
				ccs.SetCountrySearchTextField("Canada");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}

			if(ccs.SelectCountry("Canada"))
			{
				Keyword.ReportStep_Pass(testCase, "Click on 'Canada'country");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on 'Canada' country");
				flag=false;
			}
			if(eal.setZipCodeAdressFieldValue("Y1A1A3"))
			{
				Keyword.ReportStep_Pass(testCase, "Zip code is set to 'Y1A1A3'");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to set zip code i.e 'Y1A1A3'");
				flag=false;
			}
			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}

			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				eal.setStreetAddressFieldValue(inputs.getInputValue("addressName"));
				eal.setCityAddressFieldValue(inputs.getInputValue("cityName"));
				eal.setStateAddressFieldValue(inputs.getInputValue("stateName"));
				eal.setZipCodeAdressFieldValue(inputs.getInputValue("zipCode"));
			}else{
				eal.setStreetAddressFieldValue(inputs.getInputValue("addressName"));
				eal.setCityAddressFieldValue("ABC");
				eal.setStateAddressFieldValue("Canada");
				//eal.setZipCodeAdressFieldValue("Y1A1A3");
			}

			if(eal.isSaveButtonVisible())
			{
				eal.clickOnSaveButton();
			}

			sc.clickOnBackButton();
			sc.clickOnBackButton();
		}
		return flag;
	}





	public static boolean setIndoorHumidityAlerts(TestCases testCase, TestCaseInputs inputs,boolean SetAlerts) {
		boolean flag = true;
		int belowValue = 0, aboveValue = 0, belowValueApp = 0, aboveValueApp = 0;
		WebElement element = null;
		ManageAlertsScreen mas= new ManageAlertsScreen(testCase);
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		try
		{
			if (statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger") ||statInfo.getDeviceType().equalsIgnoreCase("Water Leak Detector") || statInfo.getDeviceType().equalsIgnoreCase("Flycatcher")|| statInfo.getDeviceType().equalsIgnoreCase("Storm")) {
				if (mas.isHumidityAlertToggleVisible(10)) {
					if (!mas.turnOnHumidityAlertToggle()) {
						flag = false;
					} else {

						if(SetAlerts)
						{
							belowValue=Integer.parseInt(inputs.getInputValue("LowValue"));
							aboveValue=Integer.parseInt(inputs.getInputValue("HighValue"));
						}
						else
						{
							Random r = new Random();
							do {
								do {
									belowValue = r.nextInt((90 - 5) + 1) + 5;
								} while (belowValue % 5 != 0);

								do {
									aboveValue = r.nextInt((95 - 10) + 1) + 10;
								} while (aboveValue % 5 != 0);

							} while (belowValue >= aboveValue);
						}

						if (MobileUtils.isRunningOnAndroid(testCase)) {

							try
							{
								MobileUtils.scrollToExactAndroid(testCase , "Alert for this range");

								/*if (mas.getHighLowTemperatureOptionHumidity(testCase).get(1).getAttribute("text").contains(String.valueOf(InputVariables.DOT))) {
									flag = false;
									Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Alert for range for humidity value in app is shown in decimal: " + mas.getHighLowTemperatureOptionHumidity(testCase).get(1).getAttribute("text"));
								} else {
									Keyword.ReportStep_Pass(testCase, "Alert for range for humidity value in app is  "+ mas.getHighLowTemperatureOptionHumidity(testCase).get(1).getAttribute("text"));
								}*/

								mas.ClickHumidityAlert();
//								MobileUtils.scrollToExactAndroid(testCase , "Below");
								/*try {
									element = testCase.getMobileDriver().scrollToExact(String.valueOf(belowValue).concat("%"));
									if (element != null) {
										element.click();
									}
								} catch (Exception e) {

								}*/
							}
							catch(Exception e)
							{

							}
							if (mas.isHumidityAlertAboveBelowVisible(10)) {
								belowValueApp = Integer.parseInt(mas.getHumidityAlertBelow().split("%")[0]);
								aboveValueApp = Integer.parseInt(mas.getHumidityAlertAbove().split("%")[0]);
								if (belowValueApp >= aboveValueApp) {
									flag = false;
									Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below value in app is shown: " + belowValueApp+ " and Above value in app is shown: " + aboveValueApp);
								} else {
									Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: "+ belowValueApp + " and Above value is shown: " + aboveValueApp);
								}

								mas.ClickHumidityAlertBelow();
								try {
									element = testCase.getMobileDriver().scrollToExact(String.valueOf(belowValue).concat("%"));
									mas.ClickOnHumidityValue(String.valueOf(belowValue));
//									SelectTempAelrtsValue(testCase ,belowValue, String.valueOf(belowValue)+"%");
//									if (element != null) {
//										element.click();
//									}
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
											"Error message: " + e.getMessage());
								}

								mas.ClickHumidityAlertAbove();
								try {

									element = testCase.getMobileDriver().scrollTo(String.valueOf(aboveValue));
									mas.ClickOnHumidityValue(String.valueOf(aboveValue));
//									SelectTempAelrtsValue(testCase ,aboveValue, String.valueOf(aboveValue)+"%");
//									if (element != null) {
//										element.click();
//									}
								} catch (Exception e) {
									flag = false;
									Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
											"Error message: " + e.getMessage());
								}

								if (mas.isHumidityAlertAboveBelowVisible(10)) {
									belowValueApp = Integer.parseInt(mas.getHumidityAlertBelow().split("%")[0]);
									aboveValueApp = Integer.parseInt(mas.getHumidityAlertAbove().split("%")[0]);
									Keyword.ReportStep_Pass(testCase, "[AfterChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
								}
								mas.ClickHumidityAlert();
								try {

									element = testCase.getMobileDriver().scrollTo(String.valueOf(aboveValue));
									mas.ClickOnHumidityValue(String.valueOf(aboveValue));
//									SelectTempAelrtsValue(testCase ,aboveValue, String.valueOf(aboveValue)+"%");
//									if (element != null) {
//										element.click();
//									}
								} catch (Exception e) {

								}
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
							}
						} else {


							int k = 0;
							while (k < 2) {
								MobileElement d=MobileUtils.getMobElement(testCase, "XPATH", "//*[contains(@value,'Indoor Humidity Alerts')]",false,false);
								testCase.getMobileDriver().swipe(d.getLocation().getX(), d.getLocation().getY(), d.getLocation().getX(), -200, 2000);
								k++;
							}
							mas.ClickHumidityAlert();
							MobileUtils.isMobElementExists("id" , "rohal" , testCase,10,false);
							if (mas.isHumidityAlertAboveBelowVisible(10)) {
								belowValueApp = Integer.parseInt(mas.getHumidityBelowValue());
								aboveValueApp = Integer.parseInt(mas.getHumidityAboveValue());
							}
							if (belowValueApp >= aboveValueApp) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below value in app is shown: " + belowValueApp	+ " and Above value in app is shown: " + aboveValueApp);
							} else {
								Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
							}
							//mas.ClickHumidityAlert();
							int i = 0;
							Point point = mas.getPointHumidityChange(1);
							Dimension dim =  mas.getDimHumidityChange(1);
							if (belowValueApp > belowValue) {

								while (!(Integer.parseInt(mas.getHumidityBelowValue().split("/")[0].replaceAll("\u00B0", " ").trim()) == belowValue)&& i < 40) {
									TouchAction tAction = new TouchAction(testCase.getMobileDriver());

									tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();

									i++;
								}
							} else {
								while (!(Integer.parseInt(mas.getHumidityBelowValue().split("/")[0].replaceAll("\u00B0", " ").trim()) == belowValue)&& i < 40) {
									TouchAction tAction = new TouchAction(testCase.getMobileDriver());
									tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();

									i++;
								}
							}
							int j = 0;
							point = mas.getPointHumidityChange(2);
							dim = mas.getDimHumidityChange(2);
							if (aboveValueApp > aboveValue) {
								while (!(Integer.parseInt(mas.getHumidityAboveValue().split("/")[0].replaceAll("\u00B0", " ").trim()) == aboveValue)&& j < 40) {
									TouchAction tAction = new TouchAction(testCase.getMobileDriver());
									tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();
									j++;
								}
							} else {
								while (!(Integer.parseInt(mas.getHumidityAboveValue().split("/")[0].replaceAll("\u00B0", " ").trim()) == aboveValue)&& j < 40) {
									TouchAction tAction = new TouchAction(testCase.getMobileDriver());
									tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();

									j++;
								}
							}

							/*
							 * try { flag = flag &&
							 * MobileUtils.setValueInPicker(testCase, fieldObjects,
							 * "IndoorBelowHumidityiOS", String.valueOf(belowValue)
							 * + "%"); flag = flag &&
							 * MobileUtils.setValueInPicker(testCase, fieldObjects,
							 * "IndoorAboveHumidityiOS", String.valueOf(aboveValue)
							 * + "%");
							 *
							 * } catch (Exception e) { flag = false;
							 * Keyword.ReportStep_Fail(testCase,
							 * FailType.FUNCTIONAL_FAILURE, "Error message: " +
							 * e.getMessage()); }
							 */
							//mas.ClickHumidityAlert();
							if (mas.isHumidityAlertAboveBelowVisible(10)) {
								belowValueApp = Integer.parseInt(mas.getHumidityBelowValue());
								aboveValueApp = Integer.parseInt(mas.getHumidityAboveValue());
								Keyword.ReportStep_Pass(testCase, "[AfterChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
							}
						}
						if ((belowValueApp >= 5 && belowValueApp <= 90) && (aboveValueApp <= 95 && aboveValueApp >= 10)) {
							Keyword.ReportStep_Pass(testCase,"Below value is set within the range 5% and 90% AND Above value is set within the range 10% and 95%");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not set within the range: Below(5%->90%) and Above(10%->95%)");
						}
					}
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "High/Low Humidity option not shown");
				}
			} else if (statInfo.getDeviceType().equalsIgnoreCase("Blackbeard") || statInfo.getDeviceType().equalsIgnoreCase("Jasper")) {
				Keyword.ReportStep_Pass(testCase, "Humidity is not supported in Jasper type");
			}
		}
		catch(Exception e)
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
		}


		return flag;

	}

	public static boolean setIndoorTemperatureAlerts(TestCases testCase, TestCaseInputs inputs,Boolean SetAlerts) {
		boolean flag = true;

		WebElement element = null;
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		ManageAlertsScreen mas= new ManageAlertsScreen(testCase);

		if (mas.isIndoorTempToggleVisible(10)) {
			if (!mas.turnOnIndoorTempToggle()) {
				flag = false;
			} else {
				Random r = new Random();
				try
				{ String units=null;
				try
				{
					units=statInfo.getThermostatUnits();
				}
				catch(Exception e)
				{
					units=mas.getThermounits(testCase);
				}
				if (units.contains(GlobalVariables.FAHRENHEIT) ||units.contains("F")) {
					int belowValue = 0, aboveValue = 0, belowValueApp = 0, aboveValueApp = 0;
					do {
						if(SetAlerts)
						{
							belowValue=50;
							aboveValue=90;
						}else {
							belowValue = r.nextInt((99 - 39) + 1) + 39;
							aboveValue = r.nextInt((99 - 40) + 1) + 40;
						}
					} while (belowValue >= aboveValue);

					if (MobileUtils.isRunningOnAndroid(testCase)) {
						mas.ClickAlertTemp();
						if (mas.isHumidityAlertAboveBelowVisible(10)) {
							belowValueApp = Integer.parseInt(mas.getTemperatureAlertBelow().split(String.valueOf(InputVariables.degree))[0]);
							aboveValueApp = Integer.parseInt(mas.getTemperatureAlertAbove().split(String.valueOf(InputVariables.degree))[0]);
							if (belowValueApp >= aboveValueApp) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below value in app is shown: " + belowValueApp+ " and Above value in app is shown: " + aboveValueApp);
							} else {
								Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: "+ belowValueApp + " and Above value is shown: " + aboveValueApp);
							}
							mas.ClickHumidityAlertBelow();
							try {
								if(!SelectTempAelrtsValue(testCase ,belowValue, String.valueOf(belowValue)+"\u00B0"+"F"))
								{
									flag = false;
								}
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error message: " + e.getMessage());
							}
							mas.ClickHumidityAlertAbove();
							try {
								if(!SelectTempAelrtsValue(testCase , aboveValue,String.valueOf(aboveValue)+"\u00B0"+"F"))
								{
									flag = false;
								}
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error message: " + e.getMessage());
							}

							if (mas.isHumidityAlertAboveBelowVisible(10)) {
								belowValueApp = Integer.parseInt(mas.getTemperatureAlertBelow().split(String.valueOf(InputVariables.degree))[0]);
								aboveValueApp = Integer.parseInt(mas.getTemperatureAlertAbove().split(String.valueOf(InputVariables.degree))[0]);
								Keyword.ReportStep_Pass(testCase, "[AfterChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
						}
					} else {

						mas.ClickAlertTemp();

						if (mas.isHumidityAlertAboveBelowVisible(10)) {
							belowValueApp = Integer.parseInt(mas.getIndoorBelowTemperatureiOS(testCase).split(",")[0].replaceAll("[^\\d.]", "").trim());
							aboveValueApp = Integer.parseInt(mas.getIndoorAboveTemperatureiOS(testCase).split(",")[0].replaceAll("[^\\d.]", "").trim());
						}
						if (belowValueApp >= aboveValueApp) {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below value in app is shown: " + belowValueApp+ " and Above value in app is shown: " + aboveValueApp);
						} else {
							Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
						}
						//mas.ClickTempAlertBelow();
						int i = 0;
						Point point = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='TemperatureChange']//XCUIElementTypePickerWheel[1]").getLocation();
						Dimension dim = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='TemperatureChange']//XCUIElementTypePickerWheel[1]").getSize();
						if (belowValueApp > belowValue) {

							while (!(Integer.parseInt(mas.getTempBelowValue().split("/")[0].replaceAll("[^\\d.]", "").trim()) == belowValue)&& i < 50) {
								TouchAction tAction = new TouchAction(testCase.getMobileDriver());
								tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();
								i++;
							}
						} else {
							while (!(Integer.parseInt(mas.getTempBelowValue().split("/")[0].replaceAll("[^\\d.]", "").trim()) == belowValue)&& i < 50) {
								TouchAction tAction = new TouchAction(testCase.getMobileDriver());
								tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();
								i++;
							}
						}
						int j = 0;
						point = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='TemperatureChange']//XCUIElementTypePickerWheel[2]").getLocation();
						dim = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='TemperatureChange']//XCUIElementTypePickerWheel[2]").getSize();
						if (aboveValueApp > aboveValue) {
							while (!(Integer.parseInt(mas.getTempAboveValue().split("/")[1].replaceAll("[^\\d.]", "").trim()) == aboveValue)&& j < 50) {

								TouchAction tAction = new TouchAction(testCase.getMobileDriver());
								tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();
								j++;
							}
						} else {
							while (!(Integer.parseInt(mas.getTempAboveValue().split("/")[1].replaceAll("[^\\d.]", "").trim()) == aboveValue)&& j < 50) {
								TouchAction tAction = new TouchAction(testCase.getMobileDriver());
								tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();
								j++;
							}
						}
						/*
						 * try { flag = flag &&
						 * MobileUtils.setValueInPicker(testCase, fieldObjects,
						 * "IndoorBelowTemperatureiOS",
						 * String.valueOf(belowValue) + "\u00B0"); flag = flag &&
						 * MobileUtils.setValueInPicker(testCase, fieldObjects,
						 * "IndoorAboveTemperatureiOS",
						 * String.valueOf(aboveValue) + "\u00B0");
						 *
						 * } catch (Exception e) { flag = false;
						 * Keyword.ReportStep_Fail(testCase,
						 * FailType.FUNCTIONAL_FAILURE, "Error message: " +
						 * e.getMessage()); }
						 */
					//as.ClickTempAlertBelow();
						if (mas.isHumidityAlertAboveBelowVisible(10)) {
							belowValueApp = Integer.parseInt(mas.getIndoorBelowTemperatureiOS(testCase).split(",")[0].replaceAll("[^\\d.]", "").trim());
							aboveValueApp = Integer.parseInt(mas.getIndoorAboveTemperatureiOS(testCase).split(",")[0].replaceAll("[^\\d.]", "").trim());
							Keyword.ReportStep_Pass(testCase, "[AfterChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
						}
						//mas.ClickTempAlertBelow();
					}
					if ((belowValueApp >= 39 && belowValueApp <= 98) && (aboveValueApp <= 99 && aboveValueApp >= 40)) {
						Keyword.ReportStep_Pass(testCase,
								"Below value is set within the range 39 and 98 AND Above value is set within the range 40 and 99");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not set within the range: Below(39->98) and Above(40->99)");
					}
				} else {
					double belowValue = 0, aboveValue = 0, belowValueApp = 0, aboveValueApp = 0;
					do {
						belowValue = (r.nextInt((365 - 40) + 1) + 40) / 10.0;
						belowValue = Math.round(belowValue * 2) / 2.0;
						aboveValue = (r.nextInt((370 - 45) + 1) + 45) / 10.0;
						aboveValue = Math.round(aboveValue * 2) / 2.0;
					} while (belowValue >= aboveValue);
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						mas.ClickAlertTemp();
						if (mas.isHumidityAlertAboveBelowVisible(10)) {
							belowValueApp = Double.parseDouble(mas.getTemperatureAlertBelow().split(String.valueOf(InputVariables.degree))[0]);
							aboveValueApp = Double.parseDouble(mas.getTemperatureAlertAbove().split(String.valueOf(InputVariables.degree))[0]);
							if (belowValueApp >= aboveValueApp) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below value in app is shown: " + belowValueApp													+ " and Above value in app is shown: " + aboveValueApp);
							} else {
								Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: "+ belowValueApp + " and Above value is shown: " + aboveValueApp);
							}
							mas.ClickTempAlertBelow();
							try {
								element = testCase.getMobileDriver().scrollTo(String.valueOf(belowValue)+"\u00B0"+"C");
								if (element == null) {
									mas.isElementVisible(String.valueOf(belowValue)+"\u00B0"+"C", 30);
									element=mas.getElementPresentOnPointer(belowValue);
								}

								if (element != null) {
									element.click();
								}
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error message: " + e.getMessage());
							}
							mas.ClickTempAlertAbove();
							try {

								element = testCase.getMobileDriver().scrollTo(String.valueOf(aboveValue)+"\u00B0"+"C");
								if (element == null) {
									mas.isElementVisible(String.valueOf(aboveValue)+"\u00B0"+"C", 30);
									element=mas.getElementPresentOnPointer(aboveValue);
								}

								if (element != null) {
									element.click();
								}
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error message: " + e.getMessage());
							}

							if (mas.isHumidityAlertAboveBelowVisible(10)) {
								belowValueApp = Double.parseDouble(mas.getTemperatureAlertBelow().split(String.valueOf(InputVariables.degree))[0]);
								aboveValueApp = Double.parseDouble(mas.getTemperatureAlertAbove().split(String.valueOf(InputVariables.degree))[0]);
								Keyword.ReportStep_Pass(testCase, "[AfterChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
						}
					} else {

						if (mas.isHumidityAlertAboveBelowVisible(10)) {
							belowValueApp = Double.parseDouble(mas.getTempBelowValue().split("/")[0].replaceAll("[^\\d.]", "").trim());
							aboveValueApp = Double.parseDouble(mas.getTempAboveValue().split("/")[1].replaceAll("[^\\d.]", "").trim());
						}
						if (belowValueApp >= aboveValueApp) {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below value in app is shown: " + belowValueApp+ " and Above value in app is shown: " + aboveValueApp);
						} else {
							Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
						}
						int i = 0;
						mas.ClickTempAlertBelow();
						Point point = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='AbnormalTemperature']//XCUIElementTypePickerWheel[1]").getLocation();
						Dimension dim = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='AbnormalTemperature']//XCUIElementTypePickerWheel[1]").getSize();
						if (belowValueApp > belowValue) {
							while (!(Double.parseDouble(mas.getTempBelowValue().split("/")[0].replaceAll("[^\\d.]", "").trim()) == belowValue)&& i < 50) {

								TouchAction tAction = new TouchAction(testCase.getMobileDriver());
								tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();
								i++;
							}
						} else {
							while (!(Double.parseDouble(mas.getTempBelowValue().split(",")[0].replaceAll("[^\\d.]", "")) == belowValue)&& i < 50) {
								TouchAction tAction = new TouchAction(testCase.getMobileDriver());
								tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();
								i++;
							}
						}
						int j = 0;
						point = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='AbnormalTemperature']//XCUIElementTypePickerWheel[2]").getLocation();
						dim = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='AbnormalTemperature']//XCUIElementTypePickerWheel[2]").getSize();
						if (aboveValueApp > aboveValue) {
							while (!(Double.parseDouble(mas.getTempAboveValue().split("/")[1].replaceAll("[^\\d.]", "").trim()) == aboveValue)&& j < 50) {
								TouchAction tAction = new TouchAction(testCase.getMobileDriver());
								tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();

								j++;
							}
						} else {
							while (!(Double.parseDouble(mas.getTempAboveValue().split("/")[1].replaceAll("[^\\d.]", "").trim()) == aboveValue)&& j < 50) {
								TouchAction tAction = new TouchAction(testCase.getMobileDriver());
								tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();
								j++;
							}
						}
						/*
						 * try { flag = flag &&
						 * MobileUtils.setValueInPicker(testCase, fieldObjects,
						 * "IndoorBelowTemperatureiOS",
						 * String.valueOf(belowValue) + "\u00B0"); flag = flag &&
						 * MobileUtils.setValueInPicker(testCase, fieldObjects,
						 * "IndoorAboveTemperatureiOS",
						 * String.valueOf(aboveValue) + "\u00B0");
						 *
						 * } catch (Exception e) { flag = false;
						 * Keyword.ReportStep_Fail(testCase,
						 * FailType.FUNCTIONAL_FAILURE, "Error message: " +
						 * e.getMessage()); }
						 */
					//	mas.ClickTempAlertBelow();
						if (mas.isHumidityAlertAboveBelowVisible(10)) {
							belowValueApp = Double.parseDouble(mas.getTempBelowValue().split("/")[0].replaceAll("[^\\d.]", "").trim());
							aboveValueApp = Double.parseDouble(mas.getTempAboveValue().split("/")[1].replaceAll("[^\\d.]", "").trim());
							Keyword.ReportStep_Pass(testCase, "[AfterChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
						}
					}
					if ((belowValueApp >= 4.0 && belowValueApp <= 36.5)&& (aboveValueApp <= 37.0 && aboveValueApp >= 4.5)) {
						Keyword.ReportStep_Pass(testCase,"Below value is set within the range 4.0 and 36.5 AND Above value is set within the range 4.5 and 37.0");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not set within the range: Below(4.0->36.5) and Above(4.5->37.0)");
					}
				}
				}
				catch (NumberFormatException e)
				{
					e.printStackTrace();
				}
				catch (Exception e)
				{
					e.printStackTrace();
				}
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "High/Low Temperature option not shown");
		}

		return flag;
	}



	public static boolean SelectTempAelrtsValue(TestCases testCase,int value,String aboveValue)
	{
		boolean flag=true,chkbelow=false;
		ManageAlertsScreen ms= new ManageAlertsScreen(testCase);

		List<WebElement> spinnerValues=ms.getBelowAboveListElement();


		int len;


		try {
			while(!chkbelow)
			{
				Thread.sleep(2000);
				int length=spinnerValues.get(0).getText().length();
				if(length>=5)
				{
					len=Integer.parseInt(spinnerValues.get(0).getText().substring(0, 3));
				}
				else
				{
					len=Integer.parseInt(spinnerValues.get(0).getText().substring(0, 2));
				}
				try
				{
					if(value>len)
					{
						for(WebElement e : spinnerValues)
						{
							try {
								if(e.getText().equals(aboveValue))
								{
									chkbelow=true;
									e.click();
									break;

								}
							} catch (Exception e2) {
								// TODO: handle exception
							}
							
						}
						if(!chkbelow)
						{
							int x=spinnerValues.get(spinnerValues.size()-1).getLocation().getX();
							int Y=spinnerValues.get(spinnerValues.size()-1).getLocation().getY();
							int xF=spinnerValues.get(0).getLocation().getX();
							int YF=spinnerValues.get(0).getLocation().getY();
							testCase.getMobileDriver().swipe(x, Y, xF, YF, 1000);
							/*try
						{
							action1.press(point(MobileUtils.getMobElements(fieldObjects, testCase, "spinnerdropdown").get(spinnerValues.size()-1)).waitAction(500).moveTo(MobileUtils.getMobElements(fieldObjects, testCase, "spinnerdropdown").get(0))).release().perform();
						}
						catch(Exception e)
						{

						}*/
						}
					}
					else
					{
						for(WebElement e : spinnerValues)
						{
							try {
								if(e.getText().equals(aboveValue))
								{
									
									chkbelow=true;
									e.click();
									break;
								}
							} catch (Exception e2) {
								
							}
							
						}
						if(!chkbelow)
						{
							try
							{
								//action1.press(point(MobileUtils.getMobElements(fieldObjects, testCase, "spinnerdropdown").get(0)).waitAction(650).moveTo(MobileUtils.getMobElements(fieldObjects, testCase, "spinnerdropdown").get(spinnerValues.size()-1)).release().perform();
								int x=spinnerValues.get(spinnerValues.size()-1).getLocation().getX();
								int Y=spinnerValues.get(spinnerValues.size()-1).getLocation().getY();
								int xF=spinnerValues.get(0).getLocation().getX();
								int YF=spinnerValues.get(0).getLocation().getY();
								testCase.getMobileDriver().swipe(xF, YF, x, Y, 1000);
								//MobileUtils.swipe(testCase, (MobileElement)spinnerValues.get(0), (MobileElement) spinnerValues.get(spinnerValues.size()-1));
							}
							catch(Exception e)
							{
								flag = false;
							}
						}
					}
				}
				catch(Exception e)
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
				}
			}
		}
		catch(TimeoutException e)
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
		}
		catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		return flag;
	}

	public static boolean VerifyWeatherScreen(TestCases testCase, TestCaseInputs inputs) {

		boolean flag=true;
		Dashboard db = new Dashboard(testCase);
		WeatherScreen wh=new WeatherScreen(testCase);

		if(db.isWeatherIconVisible(10))
		{
			db.clickOnWeatherIcon();
			try
			{
				if(wh.isForecastTitleVisible(5))
				{
					Keyword.ReportStep_Pass(testCase,"Weather: Weather Forecast Title: "+wh.getForecastTitle());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Weather: Weather Forecast Title not display properly in "+wh.getForecastTitle());
					flag= false;

				}

				if(wh.isTodayTextVisible(5))
				{
					Keyword.ReportStep_Pass(testCase,"Weather: Weather Today Title: "+wh.getTodayText());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Weather: Weather Today Title not display properly in "+wh.getTodayText());
					flag= false;

				}

				if(wh.isWeatherCurrentTemperature(5))
				{
					Keyword.ReportStep_Pass(testCase,"Weather: Weather Current Temp: "+wh.getWeatherCurrentTemperature());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Weather: Weather Current Temp not display properly in "+wh.getWeatherCurrentTemperature());
					flag= false;

				}

				if(wh.isWeatherStatusVisible(5))
				{
					Keyword.ReportStep_Pass(testCase,"Weather: Weather Status: "+wh.getWeatherStatus());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Weather: Weather Status not display properly in "+wh.getWeatherStatus());
					flag= false;

				}

				try {

					if(wh.isWeatherMaxTempVisible(5))
					{
						Keyword.ReportStep_Pass(testCase,"Weather: Weather Max Temp: "+wh.getWeatherMaxTemp());
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Weather: Weather Max Temp not display properly in "+wh.getWeatherMaxTemp());
						flag= false;

					}
				} catch (Exception e) {
				}


				try {
	if(wh.isWeatherMinTempVisible(5))
	{
		Keyword.ReportStep_Pass(testCase,"Weather: Weather Min Temp: "+wh.getWeatherMinTemp());
	}
	else
	{
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Weather: Weather Min Temp not display properly in "+wh.getWeatherMinTemp());
		flag= false;

	}
} catch (Exception e) {
}
				/*try {

					if(wh.isWeatherForecastTimeVisible())
					{
						Keyword.ReportStep_Pass(testCase,"Weather: Weather Forecast Time: "+wh.getWeatherForecastTime());
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Weather: Weather Forecast Time not display properly in "+wh.getWeatherForecastTime());
						flag= false;

					}

				} catch (Exception e) {
				}
*/

/*
				try {
					if(wh.isWeatherForecastTempVisible())
					{
						Keyword.ReportStep_Pass(testCase,"Weather: Weather Forecast Time: "+wh.getWeatherForecastTemp());
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Weather: Weather Forecast Temp not display properly in "+wh.getWeatherForecastTemp());
						flag= false;
					}

				} catch (Exception e) {
				}*/


			}
			catch (Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			}
			if(wh.isBackButtonAvailable(10))
			{
				wh.ClickonBackButton();
			}
		}

		return flag;
	}

	public static boolean setIndoorAboveBelowTemperatureAlerts(TestCases testCase, TestCaseInputs inputs,String select) {
		boolean flag = true;

		WebElement element = null;
		ManageAlertsScreen mas= new ManageAlertsScreen(testCase);
		if (mas.isIndoorTempToggleVisible(10)) {
			if (!mas.turnOnIndoorTempToggle()) {
				flag = false;
			} else {
				Random r = new Random();
				try
				{
					if (mas.getThermounits(testCase).equalsIgnoreCase(GlobalVariables.FAHRENHEIT) || mas.getThermounits(testCase).contains("F")) {
						int belowValue = 0, aboveValue = 0, belowValueApp = 0, aboveValueApp = 0;
						belowValue =40;

						aboveValue =99;
						if (MobileUtils.isRunningOnAndroid(testCase)) {
							mas.ClickAlertTemp();
							if (mas.isHumidityAlertAboveBelowVisible(20)) {
								belowValueApp = Integer.parseInt(mas.getTemperatureAlertBelow().split(String.valueOf(InputVariables.degree))[0]);
								aboveValueApp = Integer.parseInt(mas.getTemperatureAlertAbove().split(String.valueOf(InputVariables.degree))[0]);
								Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: "+ belowValueApp + " and Above value is shown: " + aboveValueApp);
								if(select.equalsIgnoreCase("Below"))
								{
									mas.ClickHumidityAlertBelow();
									try {
										if(!SelectTempAelrtsValue(testCase ,belowValue, String.valueOf(belowValue)+"\u00B0"+"F"))
										{
											flag = false;
										}
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error message: " + e.getMessage());
									}
								}
								else
								{
									mas.ClickHumidityAlertAbove();
									try {
										if(!SelectTempAelrtsValue(testCase , aboveValue,String.valueOf(aboveValue)+"\u00B0"+"F"))
										{
											flag = false;
										}
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error message: " + e.getMessage());
									}
								}

							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
							}
						} else {

							if (mas.isHumidityAlertAboveBelowVisible(10)) {
								belowValueApp = Integer.parseInt(mas.getTempBelowValue().split("/")[0].replaceAll("\u00B0", " ").trim());
								aboveValueApp = Integer.parseInt(mas.getTempAboveValue().split("/")[1].replaceAll("\u00B0", " ").trim());
							}
							if (belowValueApp >= aboveValueApp) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below value in app is shown: " + belowValueApp+ " and Above value in app is shown: " + aboveValueApp);
							} else {
								Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
							}
							mas.ClickTempAlertBelow();
							if(select.equalsIgnoreCase("Below"))
							{
								int i = 0;
								Point point=null;
								Dimension dim=null;
								if(inputs.isRunningOnSauceLabs())
								{
									point = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='AbnormalTemperature']//XCUIElementTypePickerWheel[1]").getLocation();
									dim = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='AbnormalTemperature']//XCUIElementTypePickerWheel[1]").getSize();
								}
								else
								{
									point = MobileUtils.getMobElements(testCase, "xpath", "//*[contains(@name,'of ') or contains(@value,'of ')]").get(0).getLocation();
									dim = MobileUtils.getMobElements(testCase, "xpath", "//*[contains(@name,'of ') or contains(@value,'of ')]").get(0).getSize();
								}





								if (belowValueApp > belowValue) {

									while (!(Integer.parseInt(mas.getTempBelowValue().split("/")[0].replaceAll("\u00B0", " ").trim()) == belowValue)&& i < 50) {
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();

										i++;
									}
								} else {
									while (!(Integer.parseInt(mas.getTempBelowValue().split("/")[0].replaceAll("\u00B0", " ").trim()) == belowValue)&& i < 50) {
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();
										i++;
									}
								}
							}
							else
							{
								int j = 0;
								Point point=null;
								Dimension dim=null;
								if(inputs.isRunningOnSauceLabs())
								{
									point = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='AbnormalTemperature']//XCUIElementTypePickerWheel[2]").getLocation();
									dim = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='AbnormalTemperature']//XCUIElementTypePickerWheel[2]").getSize();
								}
								else
								{
									point = MobileUtils.getMobElements(testCase, "xpath", "//*[contains(@name,'of ') or contains(@value,'of ')]").get(1).getLocation();
									dim = MobileUtils.getMobElements(testCase, "xpath", "//*[contains(@name,'of ') or contains(@value,'of ')]").get(1).getSize();
								}
								if (aboveValueApp > aboveValue) {
									while (!(Integer.parseInt(mas.getTempAboveValue().split("/")[1].replaceAll("\u00B0", " ").trim()) == aboveValue)&& j < 50) {

										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();
										j++;
									}
								} else {
									while (!(Integer.parseInt(mas.getTempAboveValue().split("/")[1].replaceAll("\u00B0", " ").trim()) == aboveValue)&& j < 50) {
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();
										j++;
									}
								}
							}
							/*
							 * try { flag = flag &&
							 * MobileUtils.setValueInPicker(testCase, fieldObjects,
							 * "IndoorBelowTemperatureiOS",
							 * String.valueOf(belowValue) + "\u00B0"); flag = flag &&
							 * MobileUtils.setValueInPicker(testCase, fieldObjects,
							 * "IndoorAboveTemperatureiOS",
							 * String.valueOf(aboveValue) + "\u00B0");
							 *
							 * } catch (Exception e) { flag = false;
							 * Keyword.ReportStep_Fail(testCase,
							 * FailType.FUNCTIONAL_FAILURE, "Error message: " +
							 * e.getMessage()); }
							 */
							mas.ClickTempAlertBelow();
							if (mas.isHumidityAlertAboveBelowVisible(10)) {
								belowValueApp = Integer.parseInt(mas.getTempBelowValue().split("/")[0].replaceAll("\u00B0", " ").trim());
								aboveValueApp = Integer.parseInt(mas.getTempAboveValue().split("/")[1].replaceAll("\u00B0", " ").trim());
								Keyword.ReportStep_Pass(testCase, "[AfterChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
							}
						}

					} else {
						double belowValue = 0, aboveValue = 0, belowValueApp = 0, aboveValueApp = 0;
						do {
							belowValue =4.0;
							aboveValue =37.0;
						} while (belowValue >= aboveValue);
						if (MobileUtils.isRunningOnAndroid(testCase)) {
							mas.ClickAlertTemp();
							if (mas.isHumidityAlertAboveBelowVisible(10)) {
								belowValueApp = Double.parseDouble(mas.getTemperatureAlertBelow().split(String.valueOf(InputVariables.degree))[0]);
								aboveValueApp = Double.parseDouble(mas.getTemperatureAlertAbove().split(String.valueOf(InputVariables.degree))[0]);
								if (belowValueApp >= aboveValueApp) {
									flag = false;
									Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below value in app is shown: " + belowValueApp													+ " and Above value in app is shown: " + aboveValueApp);
								} else {
									Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: "+ belowValueApp + " and Above value is shown: " + aboveValueApp);
								}
								if(select.contains("Below"))
								{
									mas.ClickTempAlertBelow();
									try {
										element = testCase.getMobileDriver().scrollTo(String.valueOf(belowValue)+"\u00B0"+"C");
										if (element == null) {
											mas.isElementVisible(String.valueOf(belowValue)+"\u00B0"+"C", 30);
											element=mas.getElementPresentOnPointer(belowValue);
										}
										if (element != null) {
											element.click();
										}
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error message: " + e.getMessage());
									}
								}
								else
								{
									mas.ClickTempAlertAbove();
									try {
										element = testCase.getMobileDriver().scrollTo(String.valueOf(aboveValue)+"\u00B0"+"C");
										if (element == null) {
											mas.isElementVisible(String.valueOf(aboveValue)+"\u00B0"+"C", 30);
											element=mas.getElementPresentOnPointer(aboveValue);
										}

										if (element != null) {
											element.click();
										}
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error message: " + e.getMessage());
									}
								}
								if (mas.isHumidityAlertAboveBelowVisible(10)) {
									belowValueApp = Double.parseDouble(mas.getTemperatureAlertBelow().split(String.valueOf(InputVariables.degree))[0]);
									aboveValueApp = Double.parseDouble(mas.getTemperatureAlertAbove().split(String.valueOf(InputVariables.degree))[0]);
									Keyword.ReportStep_Pass(testCase, "[AfterChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
								}
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
							}
						} else {

							if (mas.isHumidityAlertAboveBelowVisible(10)) {
								belowValueApp = Double.parseDouble(mas.getTempBelowValue().split("/")[0].replaceAll("\u00B0", " ").trim());
								aboveValueApp = Double.parseDouble(mas.getTempAboveValue().split("/")[1].replaceAll("\u00B0", " ").trim());
							}
							if (belowValueApp >= aboveValueApp) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below value in app is shown: " + belowValueApp+ " and Above value in app is shown: " + aboveValueApp);
							} else {
								Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
							}
							int i = 0;
							mas.ClickTempAlertBelow();
							if(select.contains("below"))
							{
								Point point = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='AbnormalTemperature']//XCUIElementTypePickerWheel[1]").getLocation();
								Dimension dim = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='AbnormalTemperature']//XCUIElementTypePickerWheel[1]").getSize();
								if (belowValueApp > belowValue) {
									while (!(Double.parseDouble(mas.getTempBelowValue().split("/")[0].replaceAll("\u00B0", " ").trim()) == belowValue)&& i < 50) {

										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();
										i++;
									}
								} else {
									while (!(Double.parseDouble(mas.getTempBelowValue().split("/")[0].replaceAll("\u00B0", "")) == belowValue)&& i < 50) {
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();
										i++;
									}
								}
							}
							else
							{
								int j = 0;
								Point point = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='AbnormalTemperature']//XCUIElementTypePickerWheel[2]").getLocation();
								Dimension dim = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='AbnormalTemperature']//XCUIElementTypePickerWheel[2]").getSize();
								if (aboveValueApp > aboveValue) {
									while (!(Double.parseDouble(mas.getTempAboveValue().split("/")[1].replaceAll("\u00B0", " ").trim()) == aboveValue)&& j < 50) {
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();
										j++;
									}
								} else {
									while (!(Double.parseDouble(mas.getTempAboveValue().split("/")[1].replaceAll("\u00B0", " ").trim()) == aboveValue)&& j < 50) {
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();
										j++;
									}
								}
							}
							/*
							 * try { flag = flag &&
							 * MobileUtils.setValueInPicker(testCase, fieldObjects,
							 * "IndoorBelowTemperatureiOS",
							 * String.valueOf(belowValue) + "\u00B0"); flag = flag &&
							 * MobileUtils.setValueInPicker(testCase, fieldObjects,
							 * "IndoorAboveTemperatureiOS",
							 * String.valueOf(aboveValue) + "\u00B0");
							 *
							 * } catch (Exception e) { flag = false;
							 * Keyword.ReportStep_Fail(testCase,
							 * FailType.FUNCTIONAL_FAILURE, "Error message: " +
							 * e.getMessage()); }
							 */
							mas.ClickTempAlertBelow();
							if (mas.isHumidityAlertAboveBelowVisible(10)) {
								belowValueApp = Double.parseDouble(mas.getTempBelowValue().split("/")[0].replaceAll("\u00B0", " ").trim());
								aboveValueApp = Double.parseDouble(mas.getTempAboveValue().split("/")[1].replaceAll("\u00B0", " ").trim());
								Keyword.ReportStep_Pass(testCase, "[AfterChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
							}
						}

					}
				}
				catch (NumberFormatException e)
				{
					e.printStackTrace();
				}
				catch (Exception e)
				{
					e.printStackTrace();
				}
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "High/Low Temperature option not shown");
		}

		return flag;
	}

	public static boolean VerifyDeviceNameCantEmpty(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;

		ThermostatConfigurationScreen tc = new ThermostatConfigurationScreen(testCase,inputs);
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase);
		if(tc.isDeleteThermostatOptionVisible())
		{
			String EmptyString = "";

			inputs.setInputValue(GlobalVariables.Current_StatName,inputs.getInputValue("LOCATION1_DEVICE1_NAME"));

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				tc.ClickOnThermoStatNameEdit();
				tc.setThermoStatNameEdit(EmptyString);
			}
			else
			{
				tc.isThermostatVisible(inputs,"");
				tc.ClickOnThermoStatButton(inputs,"");
				WebElement tap =tc.getThermoStatButton(inputs,"");
				tap.clear();
				tap.sendKeys(EmptyString);

			}
			Keyword.ReportStep_Pass(testCase, "Verified Device Name Successfully Set as Empty");
			if(MobileUtils.isRunningOnAndroid(testCase)){
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else{
				if(MobileUtils.isMobElementExists("name", "Return", testCase)){
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}

			if(sc.isBackButtonVisible())
			{
				sc.clickOnBackButton();
			}else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Back button is not visible");
			}

			navigateToThermostatConfiguration(testCase);

			String statname;
			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				statname=tc.getThermoStatButton(inputs,"").getAttribute("value");
			}
			else
			{
				statname=tc.getThermoStatName().getAttribute("text");
			}
			if(statname!="")
			{
				Keyword.ReportStep_Pass(testCase, "Verified Successfully Thermostat Settings: Device name is not set as empty");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Thermostat Settings: Device name is set as empty");
			}
		}
		return flag;
	}


	public static boolean CreateAccountWithalreadyexistsEmailID(TestCases testCase, TestCaseInputs inputs) {

		boolean flag=true;
		LoginScreen ls=new LoginScreen(testCase);
		CreateAccountScreen cs=new CreateAccountScreen(testCase);

		if(ls.isCreateAccountVisible())
		{
			ls.navigateToCreateAccountScreen();

			if(cs.isSelectSelectSearchVisible())
			{
				if(cs.isSelectCountryVisible())
				{
					cs.clickOnSelectCountryButton();
				}
			}

			if(cs.isFirstNameLabelVisible())
			{
				if(cs.setFirstNameValue("ABC"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}

					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Successfully Set First Name. ");
				}
				else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set First Name.");
					flag = false;
				}

			}
			if(cs.isLastNameLabelVisible())
			{
				if(cs.setLastNameValue("DEF"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  :Successfully Set Last Name.");
				}
				else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Last Name.");
					flag = false;
				}
			}
			if(cs.isEmailLabelVisible())
			{
				if (cs.setEmailAddressValue(inputs.getInputValue("USERID").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Email Address set to - " + inputs.getInputValue("USERID"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Email Address.");
					flag = false;
				}
			}


			if(cs.isPasswordLabelVisible())
			{
				if (cs.setPasswordValue(inputs.getInputValue("Password").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Password set to - " + inputs.getInputValue("Password"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Password.");
					flag = false;
				}
			}

			if(cs.isVerifyPasswordLabelVisible())
			{
				if (cs.setVerifyPasswordValue(inputs.getInputValue("Password").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Verify Password set to - " + inputs.getInputValue("Password"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Verify Password.");
					flag = false;
				}
			}

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Create");
			}
			else
			{
				try
				{
					//optikUtils.scrollToElementUsingExactAttributeValue(testCase , "label" , "Create");
					optikUtils.scrollToElementUsingAttributeSubStringValueIOS(testCase , "XPATH" , "//XCUIElementTypeButton[@label='Create']");
				}
				catch (Exception e)
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
				}
			}
			if(cs.isCreateButtonVisible())
			{
				cs.clickOnCreateButton();

			}

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.scrollToExactAndroid(testCase , "This email address has already been registered.");

			}

			if(cs.isAlreadyRegisteredEmailVisible())
			{
				Keyword.ReportStep_Pass(testCase,
						"Create Account  : Verify Already Registered Email Popup - " + cs.getAlreadyRegisteredEmailPopup());
			}

		}
		return flag;

	}

	public static boolean CreateAccountWithAlreadyExistsEmailIDLocalization(TestCases testCase, TestCaseInputs inputs)
	{boolean flag = true;

	Random rn = new Random();
	int value = rn.nextInt();
	String email = "";
	String language = testCase.getTestCaseInputs().getInputValue("LANGUAGE");
	LoginScreen ls;
	CreateAccountScreen cs;
	AddNewDeviceScreen ad;
	;
	EULAScreen es;
	if (inputs.isInputAvailable("LANGUAGE")) {
		ls = new LoginScreen(testCase, language);
		cs = new CreateAccountScreen(testCase, language);
		es = new EULAScreen(testCase, language);
		ad = new AddNewDeviceScreen(testCase);

	} else {

		ls = new LoginScreen(testCase);
		cs = new CreateAccountScreen(testCase);
		es = new EULAScreen(testCase);
		ad = new AddNewDeviceScreen(testCase);
	}

	if (ls.isCreateAccountVisible()) {
		ls.navigateToCreateAccountScreen();

		try {
			Thread.sleep(5000);
		} catch (Exception e) {

		}
		if (cs.isFirstNameIDLabelVisible()) {
			if (cs.setFirstNameIDValue("Automation")) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				} else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
				}

				Keyword.ReportStep_Pass(testCase, "Create Account  : Successfully Set First Name : Automation ");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set First Name.");
				flag = false;
			}

		}
		if (cs.isLastNameIDLabelVisible()) {
			if (cs.setLastNameIDValue("Test")) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				} else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
				}
				Keyword.ReportStep_Pass(testCase, "Create Account  :Successfully Set Last Name. : Test");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set Last Name.");
				flag = false;
			}
		}

		if (cs.isEmailIDLabelVisible()) {
			if (cs.setEmailAddressIDValue(inputs.getInputValue("USERID").toString())) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				} else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
				}
				Keyword.ReportStep_Pass(testCase, "Create Account  : Email Address set to -" + email);
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set Email Address.");
				flag = false;
			}
		}

		if (cs.isSendVerificationButtonVisible()) {
			cs.clickOnSendVerificationButton();

			if (!MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
			}

		}
		String verificationCode = fetchActivateAccountVerificationCode(testCase, email);
		if (!verificationCode.isEmpty()) {
			if (cs.isEnterCodeLabelVisible()) {

			}
			cs.clickOnVerificationCodeField();
			cs.setVerificationCodeValue(verificationCode);
         if (!MobileUtils.isRunningOnAndroid(testCase)) {

				cs.clickOnDoneKey();
			}

			cs.clickOnContinueButton();
            if (cs.isPassLabelIDASS()) {
				if (cs.setPassLabelIDASS("Password1")) {

					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase, "Create Account  : Password set to - Password1");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Password.");
					flag = false;
				}
			}

			if (cs.isConformPassLabelIDASS()) {
				if (cs.setConformPassLabelIDASS("Password1")) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						cs.clickOnDoneKey();
					}
					Keyword.ReportStep_Pass(testCase, "Create Account  : Verify Password set to - Password1");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Verify Password.");
					flag = false;
				}
			}

			if (MobileUtils.isRunningOnAndroid(testCase)) {
				// MobileUtils.scrollToExactAndroid(testCase ,
				// "Privacy Policy && EULA");
				Schedule.SwipeDown(testCase);
			} else {
				TouchAction action = new TouchAction(testCase.getMobileDriver());
				action.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000)))
						.moveTo(point(250, 250)).release().perform();

			}

			
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}

			if (MobileUtils.isRunningOnAndroid(testCase)) {
				Schedule.SwipeDown(testCase);
			} else {
				TouchAction action = new TouchAction(testCase.getMobileDriver());
				action.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000)))
						.moveTo(point(250, 250)).release().perform();
			}

			if (cs.isCreateButtonIDAASVisible()) {
				cs.clickOnCreateButtonIDAAS();
			}
			if(cs.isAlreadyRegisteredEmailVisible())
			{
				Keyword.ReportStep_Pass(testCase,
						"Create Account  : Verify Already Registered Email Popup - " + cs.getAlreadyRegisteredEmailPopup());
				flag=true;
				flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ExistingEmailError");

				/*if(!MobileUtils.isRunningOnAndroid(testCase))
				{
					cs.clickOnCloseButton();
				}*/
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Already created Account' error", false);
			}


		}

	} else {
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
				"Create Account : Enter Code field is not Visible");
		flag = false;
	}
	return flag;}

	public static boolean CreateAccountForNegativeScenarioLocalization(TestCases testCase, TestCaseInputs inputs)
	{

		boolean flag=true;
		String language=inputs.getInputValue("LANGUAGE");

		String countryname="";
		String existEmailError="" ;
		String emptyEmailError="";
		String emptyFirstNameError="";
		String create="";
		CustomDriver driver = testCase.getMobileDriver();
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
		LoginScreen ls=new LoginScreen(testCase);
		CreateAccountScreen cs=new CreateAccountScreen(testCase);

		EditAddressLocation eal=new EditAddressLocation(testCase);
		ChangeCountryScreen ccs= new ChangeCountryScreen(testCase);
		MobileUtilsLocal l=new MobileUtilsLocal();

		if(inputs.isInputAvailable("LANGUAGE"))
		{
			ls=new LoginScreen(testCase, language);
			cs=new CreateAccountScreen(testCase, language);
			ccs= new ChangeCountryScreen(testCase,language);
		}
		else
		{
			ls=new LoginScreen(testCase);
			cs=new CreateAccountScreen(testCase);
		}

		if(language.contains("English"))
		{
			existEmailError ="This email address has already been registered.";
			emptyEmailError = "You must enter a valid email address";
			emptyFirstNameError= "You must enter a first name";
			create="Create";

		}
     	      if(language.equalsIgnoreCase("English_US"))
		{
			countryname="United States";

			existEmailError ="This email address has already been registered.";
			emptyEmailError = "You must enter a valid email address";
			emptyFirstNameError= "You must enter a first name";

			create="Create";
		}
		else if(language.equalsIgnoreCase("English_UK"))
		{
			countryname="United Kingdom";

			existEmailError ="This email address has already been registered.";
			emptyEmailError = "You must enter a valid email address";
			emptyFirstNameError= "You must enter a first name";

			create="Create";
		}

		else if(language.equalsIgnoreCase("English_IR"))
		{
			countryname="Ireland";

			existEmailError ="This email address has already been registered.";
			emptyEmailError = "You must enter a valid email address";
			emptyFirstNameError= "You must enter a first name";

			create="Create";
		}else if(language.contains("German"))
		{
                    countryname="Deutschland";
			existEmailError ="Diese E-Mail-Adresse wurde bereits registrier";
			emptyEmailError ="Sie mÃ¼ssen eine gÃ¼ltige E-Mail-Adresse eingeben.";
			emptyFirstNameError= "Sie mÃ¼ssen einen Vornamen eingeben.";
			create="Erstellen";
		}

		else if (language.contains("Polish")) {
                if (MobileUtils.isRunningOnAndroid(testCase)) {
				countryname = "Polska";
			} else {
				countryname = "Polska";
			}
			create = "Utw";

		} else if (language.contains("Hungarian")) {
			create = "treho";
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				countryname = "Magyarorsz";
			} else {
				countryname = "Magyarorsz";
			}

		} else if (language.contains("Slovakian")) {
			create = "Vytvori";
		}

		else if (language.contains("Dutch")) {
			create ="Maken";
                  countryname="Nederland";
		      }


		else if(language.equalsIgnoreCase("French_CA"))
		{
			countryname="Canada";
		}
		else if(language.equalsIgnoreCase("French"))
		{
			countryname="France";
		}
		else if(language.equalsIgnoreCase("French_BE"))
		{
			countryname="Belgique";
		}
		else if(language.equalsIgnoreCase("French_SUI"))
		{
			countryname="Suisse";
		}

		else if(language.equalsIgnoreCase("Dutch_BE"))
		{
			countryname="Belgi";
		}

		else if( language.equalsIgnoreCase("German_AUS") )
		{
			countryname="sterreich";
		}
		else if( language.equalsIgnoreCase("German_SUI"))
		{
			countryname="Schweiz";
		}
		else if(language.equalsIgnoreCase("Italian") )
		{
			countryname="Italia";
                        create ="Crea";
		}
		else if(language.equalsIgnoreCase("Italian_SUI"))
		{
			countryname="Svizzera";
		}
		else if(language.equalsIgnoreCase("PortuguesePL"))
		{
			countryname="Portugal";
		}
		else if(language.equalsIgnoreCase("PortugueseBR"))
		{
			countryname="Brasil";
		}
		else if(language.equalsIgnoreCase("Spanish"))
		{
			countryname="Espa";
                       create="Crear";
			existEmailError ="Esta direcciÃ³n de correo electrÃ³nico ya estÃ¡ registrada.";
			emptyEmailError = "Debe introducir una direcciÃ³n de correo electrÃ³nico vÃ¡lida";
			emptyFirstNameError= "Debe introducir un nombre";
		}
		else if(language.equalsIgnoreCase("Spanish_US"))
		{
			countryname="Estados Unidos";

			existEmailError ="Esta dirección de correo electrónico ya está registrada.";
			emptyEmailError = "Debe introducir una direcciÃ³n de correo electrÃ³nico vÃ¡lida";
			emptyFirstNameError= "Debe introducir un nombre";
		}
		else if (language.equalsIgnoreCase("Czech")) {
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				countryname = "esk";
			} else {
				countryname = "esk";
			}

		} else if (language.equalsIgnoreCase("Slovakian")) {
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				countryname = "Slovensko";
			} else {
				countryname = "Slovakia";
			}

		}

     if(ls.isCreateAccountVisible())
		{
			ls.navigateToCreateAccountScreen();

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtilsLocal.swipeup(testCase);
				}


			if(cs.isFirstNameLabelVisible())
			{
				if(cs.setFirstNameValue("ABC"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");

					}

					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Successfully Set First Name. ");
				}
				else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set First Name.");
					flag = false;
				}

			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'First Name' field", false);
			}

			if(cs.isLastNameLabelVisible())
			{
				if(cs.setLastNameValue("DEF"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  :Successfully Set Last Name.");
				}
				else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Last Name.");
					flag = false;
				}
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Last Name' field", false);
			}

			if(cs.isEmailLabelVisible())
			{
				if (cs.setEmailAddressValue(inputs.getInputValue("USERID").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Email Address set to - " + inputs.getInputValue("USERID"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Email Address.");
					flag = false;
				}
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Email' field", false);
			}


			if(cs.isPasswordLabelVisible())
			{
				if (cs.setPasswordValue(inputs.getInputValue("Password").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Password set to - " + inputs.getInputValue("Password"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Password.");
					flag = false;
				}
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Password' field", false);
			}

			if(cs.isVerifyPasswordLabelVisible())
			{
				if (cs.setVerifyPasswordValue(inputs.getInputValue("Password").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Verify Password set to - " + inputs.getInputValue("Password"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Verify Password.");
					flag = false;
				}
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Verify Password' field", false);
			}

			if(inputs.isInputAvailable("LANGUAGE"))
			{
				if(create!=null)
				{
			if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.scrollToExactAndroid(testCase , create);
				}
				else
				{
					try
					{
						l.swipe(testCase);
						l.swipe(testCase);
					}
					catch (Exception e)
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
					}
				}
			}
				else
				{
					if(!MobileUtils.isRunningOnAndroid(testCase))
					{
                Dimension dimension = driver.manage().window().getSize();
						touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
						.release().perform();
                touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				       		.release().perform();
						MobileUtilsLocal.swipe(testCase);
						MobileUtilsLocal.swipe(testCase);
						MobileUtilsLocal.swipe(testCase);




					}else
					{
						touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

						touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

					}
				}
			}
			else
			{
				if(!MobileUtils.isRunningOnAndroid(testCase))
				{

					Dimension dimension = driver.manage().window().getSize();
					touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
					.release().perform();


					touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
					.release().perform();
					MobileUtilsLocal.swipe(testCase);
					MobileUtilsLocal.swipe(testCase);
					MobileUtilsLocal.swipe(testCase);




				}else
				{
					/*touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

					touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();
*/
					Dimension dimension = driver.manage().window().getSize();
					touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
					.release().perform();


					touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
					.release().perform();
					MobileUtilsLocal.swipe(testCase);
					MobileUtilsLocal.swipe(testCase);
				}
			}
			if(cs.isCreateButtonVisible())
			{
				cs.clickOnCreateButton();

			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Create' button", false);
			}

			if(language.contains("English"))
			{
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.scrollToExactAndroid(testCase ,existEmailError);

				}
			}
			else if(language.contains("Spanish"))
			{
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.scrollToExactAndroid(testCase ,existEmailError);

				}
			}
			else
			{
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					Dimension dimension = driver.manage().window().getSize();
					try {
						touchAction.press(point(dimension.getWidth()/2, dimension.getHeight()/2)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(dimension.getWidth()-50, dimension.getHeight()-50)).release().perform();

					} catch (Exception e) {
					}}else
					{

						//cs.isCloseButtonVisible(30);
					}

			}
			if(cs.isAlreadyRegisteredEmailVisible())
			{
				Keyword.ReportStep_Pass(testCase,
						"Create Account  : Verify Already Registered Email Popup - " + cs.getAlreadyRegisteredEmailPopup());
				flag=true;
				flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ExistingEmailError");


				 // if(!MobileUtils.isRunningOnAndroid(testCase)) { cs.clickOnCloseButton(); }

			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Already created Account' error", false);
			}

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(cs.isCancelButtonVisible())
				{
					cs.clickOnCancelButton();
				}
				else {
					if(cs.isCancelButtonTextVisible())
					{
						cs.clickOnCancelButtonText();
					}
				}
				MobileUtils.pressBackButton(testCase, "Navigated back to 'Login' screen");
			}
			else
			{
				if(cs.isCancelButtonVisible())
				{
					cs.clickOnCancelButton();
				}
				if(cs.isBackButtonVisible()){
				cs.clickOnBackButtonIOS();}
			}
		}
		else{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Create Account' button", false);
		}

		if(ls.isCreateAccountVisible())
		{
			ls.navigateToCreateAccountScreen();

			if(cs.isFirstNameLabelVisible())
			{
				cs.clearTextField("FirstName");
				if(cs.setFirstNameValue("ABC"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}

					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Successfully Set First Name. ");
				}
				else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set First Name.");
					flag = false;
				}

			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'First Name' field", false);
			}

			if(cs.isLastNameLabelVisible())
			{
				cs.clearTextField("LastName");;
				if(cs.setLastNameValue("DEF"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  :Successfully Set Last Name.");
				}
				else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Last Name.");
					flag = false;
				}
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Last Name' field", false);
			}

			if(cs.isPasswordLabelVisible())
			{
				if (cs.setPasswordValue(inputs.getInputValue("Password").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Password set to - " + inputs.getInputValue("Password"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Password.");
					flag = false;
				}
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Password' field", false);
			}
			if(!MobileUtils.isRunningOnAndroid(testCase)) {
			if(cs.isEmailLabelVisible())
			{
				cs.clearTextField("Email");

					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Email Address set to - Empty");

			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Email' field", false);
			}
			}
			if(cs.isVerifyPasswordLabelVisible())
			{
				if (cs.setVerifyPasswordValue(inputs.getInputValue("Password").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Verify Password set to - " + inputs.getInputValue("Password"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Verify Password.");
					flag = false;
				}
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Verify Password' field", false);
			}


			if(inputs.isInputAvailable("LANGUAGE"))
			{
				if(create!=null)
				{
			if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.scrollToExactAndroid(testCase , create);
				}
				else
				{
					try
					{
						l.swipe(testCase);
					}
					catch (Exception e)
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
					}
				}
			}
				else
				{
					if(!MobileUtils.isRunningOnAndroid(testCase))
					{
                Dimension dimension = driver.manage().window().getSize();
						touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
						.release().perform();
                touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				       		.release().perform();
						MobileUtilsLocal.swipe(testCase);
						MobileUtilsLocal.swipe(testCase);
						MobileUtilsLocal.swipe(testCase);




					}else
					{
						touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

						touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

					}
				}
			}
			else
			{
				if(!MobileUtils.isRunningOnAndroid(testCase))
				{

					Dimension dimension = driver.manage().window().getSize();
					touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
					.release().perform();


					touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
					.release().perform();
					MobileUtilsLocal.swipe(testCase);
					MobileUtilsLocal.swipe(testCase);
					MobileUtilsLocal.swipe(testCase);




				}else
				{
					touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

					touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

				}
			}

			if(cs.isCreateButtonVisible())
			{
				cs.clickOnCreateButton();
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Not able to find Create button");
				flag = false;
			}


			if(language.contains("English"))
			{
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.scrollToExactAndroid(testCase , emptyEmailError);

				}
			}
			else if(language.contains("Spanish"))
			{
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					if(!language.equalsIgnoreCase("Spanish_US"))
					{
					MobileUtils.scrollToExactAndroid(testCase , emptyEmailError);
					}

				}
			}
			else
			{
				if(MobileUtils.isRunningOnAndroid(testCase))
				{

					Dimension dimension = driver.manage().window().getSize();
					try {
						touchAction.press(point(dimension.getWidth()/2, dimension.getHeight()/2)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(dimension.getWidth()-50, dimension.getHeight()-50)).release().perform();

					} catch (Exception e) {
					}
				}
			}
			flag=true;
			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "EmptyEmailError");

			/*if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				cs.clickOnOkButton();
			}*/
			if(language.contains("Spanish"))
			{
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
	        cs.clickOnBackButton();
	        	if(ls.isCreateAccountVisible())
			{
				ls.navigateToCreateAccountScreen();
			}
			}
				else
				{}
			}


			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				cs.clearTextField("FirstName");
			}
			else
			{
				cs.ClickOnFirstName();
				cs.clearTextField("FirstName");


				/*
				 * cs.clickdeleteButtonVisible(5); cs.clickdeleteButtonVisible(5);
				 * cs.clickdeleteButtonVisible(5);
				 */

			}


			if(cs.isEmailLabelVisible())
			{
				if (cs.setEmailAddressValue(inputs.getInputValue("USERID").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "return");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Email Address set to - " + inputs.getInputValue("USERID"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Email Address.");
					flag = false;
				}
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Email' field", false);
			}

			if(MobileUtils.isRunningOnAndroid(testCase)){
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else{
				cs.ClickOnVerifyPassword();
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");

			}

			if(inputs.isInputAvailable("LANGUAGE"))
			{
				if(create!=null)
				{
			if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.scrollToExactAndroid(testCase , create);
				}
				else
				{
					try
					{
						l.swipe(testCase);
						//optikUtils.scrollToElementUsingExactAttributeValue(testCase , "label" , create);
					}
					catch (Exception e)
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
					}
				}
			}
				else
				{
					if(!MobileUtils.isRunningOnAndroid(testCase))
					{
                Dimension dimension = driver.manage().window().getSize();
						touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
						.release().perform();
                touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				       		.release().perform();
						MobileUtilsLocal.swipe(testCase);
						MobileUtilsLocal.swipe(testCase);
						MobileUtilsLocal.swipe(testCase);




					}else
					{
						touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

						touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

					}
				}
			}
			else
			{
				if(!MobileUtils.isRunningOnAndroid(testCase))
				{

					Dimension dimension = driver.manage().window().getSize();
					touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
					.release().perform();


					touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
					.release().perform();
					MobileUtilsLocal.swipe(testCase);
					MobileUtilsLocal.swipe(testCase);
					MobileUtilsLocal.swipe(testCase);




				}else
				{
					touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

					touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

				}
			}

			if(cs.isCreateButtonVisible())
			{
				cs.clickOnCreateButton();
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Not able to find Create button");
				flag = false;
			}



			if(MobileUtils.isRunningOnAndroid(testCase))
			{

				Dimension dimension = driver.manage().window().getSize();
				try {
					touchAction.press(point(dimension.getWidth()/2, dimension.getHeight()/2)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(dimension.getWidth()-50, dimension.getHeight()-50)).release().perform();

				} catch (Exception e) {
				}
			}

			flag=true;

			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "EmptyFirstNameError");

			/*
			 * if(!MobileUtils.isRunningOnAndroid(testCase)) { cs.clickOnOkButton(); }
			 */

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.pressBackButton(testCase, "Navigated back to 'Login' screen");
			}
			else
			{
				//cs.clickOnCancelButton();
			}
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Create Account' button", false);
		}
		return flag;

	}



	public static boolean VerifyPrimaryCardSetPoints(TestCases testCase, TestCaseInputs inputs,String Period) {

		boolean flag = true;
		Schedule scheduleObject = new Schedule(testCase);
		scheduleObject.isPeriodDeleteIconVisible(30);

		String currentHeatSetPoints = "", currentCooltSetPoints = "";

	//	MobileUtils.minimizeApp(testCase , 10);
		/*
	scheduleObject.clickOnBackButton();

	MobileUtils.minimizeApp(testCase , 10);

	if(db.isDevicePresentOnDashboard(inputs.getInputValue("LOCATION1_DEVICE1_NAME")))
	{
		if(!db.ClickOnDevicePresentOnDashboard(inputs.getInputValue("LOCATION1_DEVICE1_NAME")))
		{
			flag=false;
		}
	}*/
		FeedBackScreen FB=new FeedBackScreen(testCase);
		if(FB.isFeedbackCloseButtonVisible()) {
		FB.clickonFeedbackCloseButton();
		}

		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		String currentPeriod = statInfo.getCurrentSchedulePeriod();

		flag = flag && optikUtils.viewScheduleOnPrimaryCards(testCase, inputs);

		if(statInfo.getJasperDeviceType().equalsIgnoreCase("Emea"))
		{

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				List<WebElement>  schedule_heatsetpoints;
				schedule_heatsetpoints = scheduleObject.getSchedulePeriodHeatSetPoint();
				if (Period.contains("1")||Period.contains("Wake")) {
					currentHeatSetPoints = schedule_heatsetpoints.get(0).getText();
				} else if (Period.contains("2")||Period.contains("Away")) {
					currentHeatSetPoints = schedule_heatsetpoints.get(1).getText();
				} else if (Period.contains("3")||Period.contains("Home")) {
					currentHeatSetPoints = schedule_heatsetpoints.get(2).getText();
				} else if (Period.contains("4")||Period.contains("Sleep")) {
					currentHeatSetPoints = schedule_heatsetpoints.get(3).getText();
				}
			}
			else
			{
				if (Period.contains("1")||Period.contains("Wake")) {
					currentHeatSetPoints = scheduleObject.getEveryday1HeatSetpoint();
				} else if (Period.contains("2")||Period.contains("Away")) {
					currentHeatSetPoints = scheduleObject.getEveryday2HeatSetpoint();
				} else if (Period.contains("3")||Period.contains("Home")) {
					currentHeatSetPoints = scheduleObject.getEveryday3HeatSetpoint();
				} else if (Period.contains("4")||Period.contains("Sleep")) {
					currentHeatSetPoints = scheduleObject.getEveryday4HeatSetpoint();
				}
			}
		}
		else
		{
			if (Period.equalsIgnoreCase("Wake")) {
				if (scheduleObject.isWakeHeatSetPoints()) {
					currentHeatSetPoints = scheduleObject.getWakeHeatSetPoints();
					currentCooltSetPoints = scheduleObject.getWakeCooltSetPoints();
				}
			} else if (Period.equalsIgnoreCase("Away")) {
				if (scheduleObject.isAwayHeatSetPoints()) {
					currentHeatSetPoints = scheduleObject.getAwayHeatSetPoints();
					currentCooltSetPoints = scheduleObject.getAwayCooltSetPoints();
				}
			} else if (Period.equalsIgnoreCase("Home")) {

				if (scheduleObject.isHomeHeatSetPoints()) {
					currentHeatSetPoints = scheduleObject.getHomeHeatSetPoints();
					currentCooltSetPoints = scheduleObject.getHomeCooltSetPoints();
				}

			} else if (Period.equalsIgnoreCase("Sleep")) {

				if (scheduleObject.isSleepHeatSetPoints()) {
					currentHeatSetPoints = scheduleObject.getSleepHeatSetPoints();
					currentCooltSetPoints = scheduleObject.getSleepCooltSetPoints();
				}
			}
		}

		optikUtils.navigateToPrimaryCard(testCase);
		String currentDialerValue = "";
		if (statInfo.getThermoStatMode().equals("Heat")) {
			currentDialerValue = String.valueOf(optikUtils.getCurrentSetPointInDialer(testCase));
		 currentDialerValue = (currentDialerValue.split("\\.")[0]).trim();

			if (currentHeatSetPoints.replaceAll("[^.0-9]", "").contains(currentDialerValue) ||currentHeatSetPoints.split("\u00B0")[0].contains(currentDialerValue)
					|| currentDialerValue.contains(currentHeatSetPoints.replaceAll("[^.0-9]", ""))) {
				Keyword.ReportStep_Pass(testCase, "Primary Card dialer Heat set point matched with current schedule "
						+ currentPeriod + "setPoints i.e " + currentDialerValue);
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Primary Card dialer Heat set point not matched with current schedule " + currentPeriod
						+ "setPoints i.e " + currentDialerValue);
			}
		} else if(statInfo.getThermoStatMode().equals("Cool")){
			currentDialerValue = String.valueOf(optikUtils.getCurrentSetPointInDialer(testCase));
			currentDialerValue = (currentDialerValue.split("\\.")[0]).trim();
			if (currentCooltSetPoints.replaceAll("[^.0-9]", "").contains(currentDialerValue)
					|| currentDialerValue.contains(currentCooltSetPoints.replaceAll("[^.0-9]", ""))) {
				Keyword.ReportStep_Pass(testCase, "Primary Card dialer Cool set point matched with current schedule "
						+ currentPeriod + "setPoints i.e " + currentDialerValue);
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Primary Card dialer Cool setpoint not matched with current schedule " + currentPeriod
						+ "setPoints i.e " + currentDialerValue);
			}
		}

		return flag;

	}

	public static boolean CreateAccountWithValidEmailAddressErrorpopup(TestCases testCase, TestCaseInputs inputs) {


		boolean flag=true;
		LoginScreen ls=new LoginScreen(testCase);
		CreateAccountScreen cs=new CreateAccountScreen(testCase);

		if(ls.isCreateAccountVisible())
		{
			ls.navigateToCreateAccountScreen();

			if(cs.isSelectSelectSearchVisible())
			{
				if(cs.isSelectCountryVisible())
				{
					cs.clickOnSelectCountryButton();
				}
			}

			if(cs.isFirstNameLabelVisible())
			{
				if(cs.setFirstNameValue("ABC"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}

					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Successfully Set First Name. ");
				}
				else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set First Name.");
					flag = false;
				}

			}
			if(cs.isLastNameLabelVisible())
			{
				if(cs.setLastNameValue("DEF"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  :Successfully Set Last Name.");
				}
				else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Last Name.");
					flag = false;
				}
			}
			if(cs.isEmailLabelVisible())
			{
				if(cs.setEmailAddressValue("Email"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  :Successfully Set Email.");
				}
				else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Email.");
					flag = false;
				}
			}


			if(cs.isPasswordLabelVisible())
			{
				if (cs.setPasswordValue(inputs.getInputValue("Password").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Password set to - " + inputs.getInputValue("Password"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Password.");
					flag = false;
				}
			}

			if(cs.isVerifyPasswordLabelVisible())
			{
				if (cs.setVerifyPasswordValue(inputs.getInputValue("Password").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Verify Password set to - " + inputs.getInputValue("Password"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Verify Password.");
					flag = false;
				}
			}


			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Create");
			}
			else
			{
				try
				{
					optikUtils.scrollToElementUsingAttributeSubStringValueIOS(testCase , "label" , "Create");
//					optikUtils.scrollToElementUsingExactAttributeValue(testCase , "label" , "Create");
				}
				catch (Exception e)
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
				}
			}


			if(cs.isCreateButtonVisible())
			{
				cs.clickOnCreateButton();

				if(!MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
				}

			}

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Email");

			}

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(cs.isEmptyEmailVisible())
				{
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Verify Already Registered Email Popup - " + cs.getEmptyEmailPopup());
				}
			}else
			{
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
				if(cs.isEmptyEmailVisible())
				{
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Please Correct the Following - Please enter a valid Email Address " + cs.getEmptyEmailPopup() );
				}
			}

			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				if(cs.isOkButtonVisible())
				{
					cs.clickOnOkButton();
				}
			}


		}
		return flag;
	}


	public static boolean CreateAccountWithFirstNameErrorPopup(TestCases testCase, TestCaseInputs inputs) {

		boolean flag=true;
		CreateAccountScreen cs=new CreateAccountScreen(testCase);

		cs.ClickOnFirstName();
		WebElement tap =cs.getFirstNameButton();
		tap.clear();
		if (!MobileUtils.isRunningOnAndroid(testCase)) {
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
		}


		if(cs.isEmailLabelVisible())
		{
			if (cs.setEmailAddressValue(inputs.getInputValue("USERID").toString())) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");

					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");

					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
				}
				Keyword.ReportStep_Pass(testCase,
						"Create Account  : Email Address set to - " + inputs.getInputValue("USERID"));
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set Email Address.");
				flag = false;
			}
		}



		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.scrollToExactAndroid(testCase , "Create");
		}
		else
		{
			try
			{
				optikUtils.scrollToElementUsingAttributeSubStringValueIOS(testCase , "label" , "Create");
//				optikUtils.scrollToElementUsingExactAttributeValue(testCase , "label" , "Create");
			}
			catch (Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			}
		}
		if(cs.isCreateButtonVisible())
		{
			cs.clickOnCreateButton();
			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
			}

		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.scrollToExactAndroid(testCase , "First Name");
		}
		/*else
		{
			try
			{
				optikUtils.scrollToElementUsingAttributeSubStringValueIOS(testCase , "label" , "First Name");
			}
			catch (Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			}

		}*/

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(cs.isFirstNameErrorFieldVisible())
			{
				Keyword.ReportStep_Pass(testCase,
						"Create Account  : Verify Already Registered Email Popup - " + cs.getFirstNameErrorFieldPopup());
			}
		}else
		{
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
			if(cs.isFirstNameErrorFieldVisible())
			{
				Keyword.ReportStep_Pass(testCase,
						"Create Account  : Please Correct the Following - Enter Your full name " + cs.getFirstNameErrorFieldPopup() );
			}else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Create Account  : FirstName Error not visible " + cs.getFirstNameErrorFieldPopup());
			}}

		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			if(cs.isOkButtonVisible())
			{
				cs.clickOnOkButton();
			}
		}


		return flag;
	}

	public static boolean setTempOnPrimaryCard(TestCases testCase, TestCaseInputs inputs, Double targetTemp) {
		boolean flag=true;
		HashMap<String, String> setPoints = new HashMap<String, String>();
		String systemMode = "";
		Double maxHeat = 0.0;
		Double minHeat = 0.0;
		Double maxCool = 0.0;
		Double minCool = 0.0;
		Double maxSetPoint = 0.0;
		Double minSetPoint = 0.0;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			List<String> allowedModes = statInfo.getAllowedModes();
			setPoints = statInfo.getDeviceMaxMinSetPoints();
			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				maxHeat = Double.parseDouble(setPoints.get("MaxHeat"));
				minHeat = Double.parseDouble(setPoints.get("MinHeat"));
				maxCool = Double.parseDouble(setPoints.get("MaxCool"));
				minCool = Double.parseDouble(setPoints.get("MinCool"));
			} else if (allowedModes.contains("Heat") && !allowedModes.contains("Cool")) {
				maxHeat = Double.parseDouble(setPoints.get("MaxHeat"));
				minHeat = Double.parseDouble(setPoints.get("MinHeat"));
			} else if (!allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				maxCool = Double.parseDouble(setPoints.get("MaxCool"));
				minCool = Double.parseDouble(setPoints.get("MinCool"));
			}
			systemMode = statInfo.getThermoStatMode();
			if (systemMode.equals("Auto")) {
				systemMode = statInfo.getThermostatModeWhenAutoChangeOverActive();
			}
			if (systemMode.equals("Cool")) {
				maxSetPoint = maxCool;
				minSetPoint = minCool;
			} else if (systemMode.equals("Heat")) {
				maxSetPoint = maxHeat;
				minSetPoint = minHeat;
			}
			if (targetTemp < minSetPoint || targetTemp > maxSetPoint) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Tap Setting: Target Temp : "+ targetTemp + " is out of range" + maxSetPoint + "-" + minSetPoint);
				return false;
			} else
			{
				double Scroller,Scroller1 = 0;
				PrimaryCard pc=new PrimaryCard(testCase);
				Double currentTemp=pc.getCurrentSetPointInDialer();
				Keyword.ReportStep_Pass(testCase,"Current Temperature on Primary Card :"+ currentTemp);
				if((currentTemp==targetTemp))
				{

				}
				else
				{
					if(currentTemp>targetTemp)
					{

						Scroller=currentTemp-targetTemp;
					}
					else
					{
						Scroller=targetTemp-currentTemp;

					}

					if(statInfo.getJasperDeviceType().equalsIgnoreCase("EMEA")) {

						Scroller1=(Scroller*2)-1;
					}
					else
					{
						Scroller1=Scroller-1.0;
					}

					for(int j=0;j<=Scroller1;j++)
					{
						if(targetTemp>currentTemp)
						{
							pc.ClickOnTempIncrementButton();
							Keyword.ReportStep_Pass(testCase,"click on increment button");

						}
						else if(targetTemp<currentTemp)
						{
							pc.ClickOnTempDecrementButton();
							Keyword.ReportStep_Pass(testCase,"click on decrement button");
						}
					}
				}
			}
		}
		catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Temperature Stepper : Error occurred : " + e.getMessage());
			flag = false;
		}
		return flag;
	}

	public static boolean setTempOnPrimaryCardForDREvent(TestCases testCase, TestCaseInputs inputs, Double targetTemp) {
		boolean flag=true;
		HashMap<String, String> setPoints = new HashMap<String, String>();
		String systemMode = "";
		Double maxHeat = 0.0;
		Double minHeat = 0.0;
		Double maxCool = 0.0;
		Double minCool = 0.0;
		Double maxSetPoint = 0.0;
		Double minSetPoint = 0.0;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			List<String> allowedModes = statInfo.getAllowedModes();
			setPoints = statInfo.getDeviceMaxMinSetPoints();
			if (allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				maxHeat = Double.parseDouble(setPoints.get("MaxHeat"));
				minHeat = Double.parseDouble(setPoints.get("MinHeat"));
				maxCool = Double.parseDouble(setPoints.get("MaxCool"));
				minCool = Double.parseDouble(setPoints.get("MinCool"));
			} else if (allowedModes.contains("Heat") && !allowedModes.contains("Cool")) {
				maxHeat = Double.parseDouble(setPoints.get("MaxHeat"));
				minHeat = Double.parseDouble(setPoints.get("MinHeat"));
			} else if (!allowedModes.contains("Heat") && allowedModes.contains("Cool")) {
				maxCool = Double.parseDouble(setPoints.get("MaxCool"));
				minCool = Double.parseDouble(setPoints.get("MinCool"));
			}
			systemMode = statInfo.getThermoStatMode();
			if (systemMode.equals("Auto")) {
				systemMode = statInfo.getThermostatModeWhenAutoChangeOverActive();
			}
			if (systemMode.equals("Cool")) {
				maxSetPoint = maxCool;
				minSetPoint = minCool;
			} else if (systemMode.equals("Heat")) {
				maxSetPoint = maxHeat;
				minSetPoint = minHeat;
			}
			if (targetTemp < minSetPoint || targetTemp > maxSetPoint) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Tap Setting: Target Temp : "+ targetTemp + " is out of range" + maxSetPoint + "-" + minSetPoint);
				return false;
			} else
			{
				double Scroller,Scroller1 = 0;
				PrimaryCard pc=new PrimaryCard(testCase);
				Double currentTemp=pc.getCurrentSetPointInDialer();
				Keyword.ReportStep_Pass(testCase,"Current Temperature on Primary Card :"+ currentTemp);
				if((currentTemp==targetTemp))
				{

				}
				else
				{
					if(currentTemp>targetTemp)
					{

						Scroller=currentTemp-targetTemp;
					}
					else
					{
						Scroller=targetTemp-currentTemp;

					}

					if(statInfo.getJasperDeviceType().equalsIgnoreCase("EMEA")) {

						Scroller1=(Scroller*2)-1;
					}
					else
					{
						Scroller1=Scroller-1.0;
					}

					for(int j=0;j<=Scroller1;j++)
					{
						if(targetTemp>currentTemp)
						{
							if(pc.isTempIncrementButtonAvailable())
							pc.ClickOnTempIncrementButton();
							Keyword.ReportStep_Pass(testCase,"click on increment button");

						}
						else if(targetTemp<currentTemp)
						{
							if(pc.isTempDecrementButtonAvailable())
							pc.ClickOnTempDecrementButton();
							Keyword.ReportStep_Pass(testCase,"click on decrement button");
						}
					}
				}
			}
		}
		catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Temperature Stepper : Error occurred : " + e.getMessage());
			flag = false;
		}
		return flag;
	}

	public static boolean verifyFrequencyUpdate(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		WLDLeakDetectorSettings WLDLeakDetectorSettingsObject=new WLDLeakDetectorSettings(testCase, inputs);

		if (WLDLeakDetectorSettingsObject.isUpdateFrequencyTextVisible()) {

			if (WLDLeakDetectorSettingsObject.clickOnUpdateFrequencyTextButton()) {
				Keyword.ReportStep_Pass(testCase, "Clicked on 'Update Frequency option'");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to click on UpdateFrequency option ");
				flag = false;
			}

		} else {

			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to locate Update Frequency Text not present ");
			flag = false;

		}

		if (WLDLeakDetectorSettingsObject.isRadioUpdateDailyVisible() && WLDLeakDetectorSettingsObject.isRadioUpdateTwiceDailyVisible() && WLDLeakDetectorSettingsObject.isRadioUpdateThriceDailyVisible()) {

			Keyword.ReportStep_Pass(testCase, "All three options (Daily, TwiceDaily, ThriceDaily) are available in Update Frequency option screen");

		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Options are missing in Update Frequency option screen");
			flag = false;
		}

		if (WLDLeakDetectorSettingsObject.clickOnRadioUpdateDailyButton()) {
			Keyword.ReportStep_Pass(testCase, "Clicked on 'Daily'");

			if (WLDLeakDetectorSettingsObject.navigateToBackFromFrequencyScreen(testCase)) {

				Keyword.ReportStep_Pass(testCase, "Navitgate back from Frequency screen");
			} else {

				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to Navitgate back from Frequency screen");
				flag = false;
			}

			//swipeTo("Sound",testCase,inputs);

			if (WLDLeakDetectorSettingsObject.getUpdateFrequencyValue().toLowerCase().equalsIgnoreCase("Daily")) {
				Keyword.ReportStep_Pass(testCase, "Frequency is 'Daily' selected and same is appearing on Leak Detector Settings Page");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Frequency is 'Daily' selected and same is not appearing on Leak Detector Settings  Settings");
				flag = false;
			}
		} else {

			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to Sound is click 'Daily option on Leak Detector Settings Screen");
			flag = false;

		}

		if (WLDLeakDetectorSettingsObject.isUpdateFrequencyTextVisible()) {

			if (WLDLeakDetectorSettingsObject.clickOnUpdateFrequencyTextButton()) {
				Keyword.ReportStep_Pass(testCase, "Clicked on 'Update Frequency option'");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to click on Update Frequency option ");
				flag = false;
			}
		} else {

			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to locate Leak Detector Setting Update Frequency option Text not present ");
			flag = false;

		}

		if (WLDLeakDetectorSettingsObject.clickOnRadioUpdateTwiceDailyButton()) {
			Keyword.ReportStep_Pass(testCase, "Clicked on 'Twice Daily'");
			if (WLDLeakDetectorSettingsObject.navigateToBackFromFrequencyScreen(testCase)) {

				Keyword.ReportStep_Pass(testCase, "Navitgate back from Frequency screen");
				if(!MobileUtils.isRunningOnAndroid(testCase)) {	
					if(testCase.getMobileDriver().findElementsByXPath("//XCUIElementTypeButton[@name='OK']")!=null)	
						testCase.getMobileDriver().findElementByName("OK").click();	
					}
			} else {

				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to Navitgate back from Frequency screen");
				flag = false;
			}

			if (WLDLeakDetectorSettingsObject.getUpdateFrequencyValue().toLowerCase().equalsIgnoreCase("Twice Daily")) {
				Keyword.ReportStep_Pass(testCase, "Frequency is 'Twice Daily' selected and same is appearing on Leak Detector Settings");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Frequency is 'Twice Daily' selected and same is not appearing on Leak Detector Settings ");
				flag = false;
			}
		} else {

			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to Leack detector Settings is click 'Twice Daily Button on Frequency Screen");
			flag = false;

		}
		if (WLDLeakDetectorSettingsObject.isUpdateFrequencyTextVisible()) {

			if (WLDLeakDetectorSettingsObject.clickOnUpdateFrequencyTextButton()) {
				Keyword.ReportStep_Pass(testCase, "Clicked on 'Update Frequency option'");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to click on Update Frequency option ");
				flag = false;
			}
		} else {

			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to locate Leak Detector Setting Update Frequency option Text not present ");
			flag = false;

		}
		if (WLDLeakDetectorSettingsObject.clickOnRadioUpdateThriceDailyButton()) {
			Keyword.ReportStep_Pass(testCase, "Clicked on 'Thrice'");
			if (WLDLeakDetectorSettingsObject.navigateToBackFromFrequencyScreen(testCase)) {

				Keyword.ReportStep_Pass(testCase, "Navitgate back from Frequency screen");
				if(!MobileUtils.isRunningOnAndroid(testCase)) {	
					if(testCase.getMobileDriver().findElementsByXPath("//XCUIElementTypeButton[@name='OK']")!=null)	
						testCase.getMobileDriver().findElementByName("OK").click();	
					}
				
			} else {

				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to Navitgate back from Frequency screen");
				flag = false;
			}

			if (WLDLeakDetectorSettingsObject.getUpdateFrequencyValue().toLowerCase().equalsIgnoreCase("Three Times Daily")) {
				Keyword.ReportStep_Pass(testCase,
						"Frequency is 'Three Times Daily' selected and same is appearing on Leak Detector Settings");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Frequency is 'Three Times Daily' selected and same is  not appearing on Leak Detector Settings");
				flag = false;
			}
		} else {

			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Failed to Frequency is 'thrice'  on Frequency Screen");
			flag = false;

		}

		return flag;
	}


	public static boolean VerifyLeakDetectorConfiguration(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		WLDLeakDetectorSettings WLDLeakDetectorSettingsObjects = new WLDLeakDetectorSettings(testCase,inputs);

		if(WLDLeakDetectorSettingsObjects.isDeleteWLDButtonVisible())
		{
			String updateStat = "UpadtedStatName";

			inputs.setInputValue(GlobalVariables.Current_StatName,inputs.getInputValue("LOCATION1_DEVICE1_NAME"));

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				WLDLeakDetectorSettingsObjects.ClickOnLeakDetectorNameEdit();

				WLDLeakDetectorSettingsObjects.setLeakDetectorNameEdit(updateStat);
			}
			else
			{
				WebElement tap =WLDLeakDetectorSettingsObjects.getLeakDetectorNameButton(inputs, inputs.getInputValue("LOCATION1_DEVICE1_NAME"));
				tap.click();
				tap.clear();
				tap.sendKeys(updateStat);

			}
			Keyword.ReportStep_Pass(testCase, "Verified Successfully String is Updated as "+updateStat);
			if(MobileUtils.isRunningOnAndroid(testCase))	{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}


			if(MobileUtils.isRunningOnAndroid(testCase))
			{	WLDLeakDetectorSettingsObjects.ClickOnLeakDetectorNameEdit();

			WLDLeakDetectorSettingsObjects.setLeakDetectorNameEdit(inputs.getInputValue(GlobalVariables.Current_StatName));
			//testCase.getMobileDriver().findElement(By.id("view_thermostat_name_text")).sendKeys(inputs.getInputValue(GlobalVariables.Current_StatName));
			}
			else
			{
				WebElement tap =WLDLeakDetectorSettingsObjects.getLeakDetectorNameButton(inputs, updateStat);

				tap.click();
				tap.clear();
				tap.sendKeys(inputs.getInputValue(GlobalVariables.Current_StatName));
			}

			Keyword.ReportStep_Pass(testCase, "Verified Successfully String is Updated as "+inputs.getInputValue(GlobalVariables.Current_StatName));

		}

		if(MobileUtils.isRunningOnAndroid(testCase)){
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}
		else{
			if(MobileUtils.isMobElementExists("name", "Return", testCase)){
				MobileUtils.clickOnElement(testCase, "name", "Return");
			}
		}

		if(WLDLeakDetectorSettingsObjects.isDeleteWLDButtonVisible())
		{
			WLDLeakDetectorSettingsObjects.clickOnDeleteWLDButton();

			if(WLDLeakDetectorSettingsObjects.isLeakDetectorStatDeletePopUpVisible())
			{
				if(WLDLeakDetectorSettingsObjects.isDeleteDeviceVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Delete popUp is verified "+WLDLeakDetectorSettingsObjects.getDeleteDevice());
				}
				Keyword.ReportStep_Pass(testCase, "Delete popUp is verified "+WLDLeakDetectorSettingsObjects.getThermoStatDeletePopUp());
			}
			if(WLDLeakDetectorSettingsObjects.isCancelButtonVisible())
			    WLDLeakDetectorSettingsObjects.ClickOnCancelButton();
		}
		return flag;
	}


	public static boolean VerifyWLDFirmwareVersion(TestCases testCase) {
		boolean flag = true;
		WLDLeakDetectorSettings WLDLeakDetectorSettingsObjects=new WLDLeakDetectorSettings(testCase);

		if(WLDLeakDetectorSettingsObjects.isLeakDetectorConfigurationVisible())
		{
			Keyword.ReportStep_Pass(testCase,"Leak Detector Configuration title present on screen");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Leak Detector Configuration title not present on screen");
		}

		if(WLDLeakDetectorSettingsObjects.isFirmwareVersionTextVisible() && WLDLeakDetectorSettingsObjects.getFirmwareVersionText().toUpperCase().contains("Firmware Version".toUpperCase()))
		{
			Keyword.ReportStep_Pass(testCase,"Leak Detector Configuration for Firmware Version text is displayed");
			if(WLDLeakDetectorSettingsObjects.isFirmwareVersionVisible())
			{
				Keyword.ReportStep_Pass(testCase,"Leak Detector Configuration for Firmware Version is displayed i.e. "+ WLDLeakDetectorSettingsObjects.getFirmwareVersion());
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Leak Detector Configuration for Firmware version is not displayed");
			}
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Leak Detector Configuration for Firmware version text is not displayed");
		}

		return flag;
	}

	public static boolean verifyTemperatureUnit(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		int count =1;
		WLDLeakDetectorSettings WLDLeakDetectorSettingsObject=new WLDLeakDetectorSettings(testCase, inputs);
		try {
			do{
				if(WLDLeakDetectorSettingsObject.isTemperatureUnitTextVisible()){

					if(WLDLeakDetectorSettingsObject.getTemperatureUnitValueCelsius()){
						Keyword.ReportStep_Pass(testCase, "Current selected Temperature unit is: : Celsius");
						flag=flag && WLDLeakDetectorSettingsObject.clickOnTemperatureUnitValueFahrenheitButton();
						if(WLDLeakDetectorSettingsObject.getTemperatureUnitValueFahrenheit()){
							Keyword.ReportStep_Pass(testCase, "Temperature unit changed to : Fahrenheit " );
						}else{
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Temperature unit not changed to : Fahrenheit");
						}

					}else if(WLDLeakDetectorSettingsObject.getTemperatureUnitValueFahrenheit()){
						Keyword.ReportStep_Pass(testCase, "Current selected Temperature unit is : Fahrenheit " );
						flag=flag && WLDLeakDetectorSettingsObject.clickOnTemperatureUnitValueCelsiusButton();
						if(WLDLeakDetectorSettingsObject.getTemperatureUnitValueCelsius()){
							Keyword.ReportStep_Pass(testCase, "Temperature unit changed to : Celsius " );
						}else{
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Temperature unit not changed to : Celsius");
						}
					}else{
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Current selected Temperature unit is not displayed");
					}
				}else{

					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Leak Detector Configuration for Firmware version text is not displayed");


				}
				count++;
			}while(count<=2);

		} catch (Exception e) {
		}

		return flag;
	}


	public static boolean VerifyWeatherUnitWithoutChapi(TestCases testCase, TestCaseInputs inputs) {

		boolean flag=true;
		Dashboard db = new Dashboard(testCase);
		WeatherScreen wh=new WeatherScreen(testCase);

		if(db.isWeatherIconVisible(10))
		{
			db.clickOnWeatherIcon();
			try
			{
				if (MobileUtils.isRunningOnAndroid(testCase))
				{
					if(wh.getCurrentWeatherFr().equalsIgnoreCase("\u00B0 F"))
					{
						Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp display properly in "+wh.getCurrentWeatherFr());
						if(wh.isCelsiusButtonVisible())
						{
							wh.ClickonCelsiusButton();
							Keyword.ReportStep_Pass(testCase,"Weather: successfully click on celsius button ");
						}

					}
					else if(wh.getCurrentWeatherCe().equalsIgnoreCase("\u00B0 C"))
					{
						Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp display properly in " +wh.getCurrentWeatherCe());

						if(wh.isWeatherFrVisible())
						{
							wh.ClickonWeatherFrButton();
							Keyword.ReportStep_Pass(testCase,"Weather: successfully click on Fahrenheit button ");
						}

					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Weather: Weather Current temp unit: "+wh.getCurrentWeatherFr()+"not matches with chapi value: "+GlobalVariables.FAHRENHEIT);
						flag=false;
					}


					if(wh.getCurrentWeatherFr().equalsIgnoreCase("\u00B0 F"))
					{

						Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp display properly in " +wh.getCurrentWeatherCe());

					}
					else if(wh.getCurrentWeatherCe().equalsIgnoreCase("\u00B0 C"))
					{
						Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp display properly in "+wh.getCurrentWeatherFr());
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Weather: Weather Current temp unit: "+wh.getCurrentWeatherFr()+"not matches with chapi value: "+GlobalVariables.FAHRENHEIT);
						flag=false;
					}


				}
				else
				{
					if(wh.getCurrentWeatherFr().equalsIgnoreCase("Fahrenheit"))
					{
						Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp display properly in "+wh.getCurrentWeatherFr());
						if(wh.isCelsiusButtonVisible())
						{
							wh.ClickonCelsiusButton();
							Keyword.ReportStep_Pass(testCase,"Weather: successfully click on celsius button ");
						}
					}

					else if(wh.getCurrentWeatherFr().equalsIgnoreCase("Celsius"))
					{
						Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp display properly in "+wh.getCurrentWeatherCe());

						if(wh.isWeatherFrVisible())
						{
							wh.ClickonWeatherFrButton();
							Keyword.ReportStep_Pass(testCase,"Weather: successfully click on Fahrenheit button ");
						}

					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Weather: Weather Current temp unit: "+wh.getCurrentWeatherFr()+"not matches with chapi value: "+GlobalVariables.FAHRENHEIT);
						flag=false;
					}



					if(wh.getCurrentWeatherFr().equalsIgnoreCase("Fahrenheit"))
					{
						Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp display properly in "+wh.getCurrentWeatherCe());
					}

					else if(wh.getCurrentWeatherFr().equalsIgnoreCase("Celsius"))
					{

						Keyword.ReportStep_Pass(testCase,"Weather: Weather Current temp display properly in "+wh.getCurrentWeatherFr());


					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Weather: Weather Current temp unit: "+wh.getCurrentWeatherFr()+"not matches with chapi value: "+GlobalVariables.FAHRENHEIT);
						flag=false;
					}

				}


			}catch (Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			}

			if(wh.isBackButtonAvailable(10))
			{
				wh.ClickonBackButton();
			}
		}

		return flag;
	}

	public static boolean addSpecificUser(final TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag = true ;

		AddUserScreen aus;

		if(inputs.isInputAvailable("LANGUAGE"))
		{
			aus=new AddUserScreen(testCase, inputs.getInputValue("LANGUAGE"));
		}
		else
		{
			aus=new AddUserScreen(testCase);
		}


		flag = flag && optikUtils.VerifyPasscodeScreen(testCase , inputs,true, false);
		
		if(!aus.isSpecificUserVisible(inputs.getInputValue("INVITE_USER").toString()))
		{
			Keyword.ReportStep_Pass(testCase,"Successully verified No Users are added in location");
			if(aus.isAddUserButtonVisible())
			{

				if(inputs.isInputAvailable("LANGUAGE"))
				{
					flag=flag && optikUtils.VerifyScreenLocalization(testCase, "AddUsers");
				}

				flag= flag && aus.clickOnAddUserButton();

				if(aus.isEmailFieldVisible())
				{
					if(inputs.isInputAvailable("LANGUAGE"))
					{
						flag=flag && optikUtils.VerifyScreenLocalization(testCase, "InviteUsers");
					}

					flag=flag && aus.setEmailFieldValue(inputs.getInputValue("INVITE_USER").toString(),"Successully set the Email id i.e."+inputs.getInputValue("INVITE_USER").toString());
					Keyword.ReportStep_Pass(testCase,"Successully set the Email id i.e."+inputs.getInputValue("INVITE_USER").toString());
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else
					{if(MobileUtils.isMobElementExists("name", "Done", testCase)){
						MobileUtils.clickOnElement(testCase, "name", "Done");
					}
					else if(MobileUtils.isMobElementExists("label", "Done", testCase)){
						MobileUtils.clickOnElement(testCase, "label", "Done");
					}
					else
					{
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					}

					if(aus.isSendButtonVisible())
					{
						flag=flag && aus.clickOnSendButton();
					}
					else
					{
						flag=false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invite User: Send Button is not visible", false);
					}
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invite User: Email Field value is not visible", false);
				}

			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add User: 'Add Users Button' is not present", false);
			}
		}
		else
		{
			flag=true;
			if(inputs.isInputAvailable("LANGUAGE"))
			{
				flag=flag && optikUtils.VerifyScreenLocalization(testCase, "AddUsers");
			}
			Keyword.ReportStep_Pass(testCase, inputs.getInputValue("INVITE_USER").toString() +" has aleady been added");
		}
		return flag ;
	}

	public static boolean addAlreadyAddedUser(final TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag = true ;
		AddUserScreen aus=new AddUserScreen(testCase);

		if(inputs.isInputAvailable("LANGUAGE"))
		{
			aus=new AddUserScreen(testCase, inputs.getInputValue("LANGUAGE"));
		}
		else
		{
			aus=new AddUserScreen(testCase);
		}

		if(aus.isAddUserButtonVisible())
		{
			if(aus.isSpecificUserVisible(inputs.getInputValue("INVITE_USER")))
			{
				flag= flag && aus.clickOnAddUserButton();
				if(aus.isEmailFieldVisible())
				{
					flag=flag && aus.setEmailFieldValue(inputs.getInputValue("INVITE_USER"),"Successully set the Email id i.e."+inputs.getInputValue("INVITE_USER"));
					Keyword.ReportStep_Pass(testCase, inputs.getInputValue("INVITE_USER") +"Successully set the Email id i.e."+inputs.getInputValue("INVITE_USER"));
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else
					{
						if(MobileUtils.isMobElementExists("name", "done", testCase)){
							MobileUtils.clickOnElement(testCase, "name", "done");
						}
						if(MobileUtils.isMobElementExists("name", "Done", testCase)){
								MobileUtils.clickOnElement(testCase, "name", "Done");
							
						}
					}

					if(aus.isSendButtonVisible())
					{
						flag=flag && aus.clickOnSendButton();
					}
					else
					{
						flag=false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invite User: Send Button is not visible", false);
					}

					if(aus.isAlreadyAddedUserErrorVisible())
					{
						Keyword.ReportStep_Pass(testCase, "Invite User: The error is shown as "+inputs.getInputValue("INVITE_USER")+" has already been added");

						if(!MobileUtils.isRunningOnAndroid(testCase))
						{
							if(inputs.isInputAvailable("LANGUAGE"))
							{
								flag=flag && optikUtils.VerifyScreenLocalization(testCase, "InviteUserError");
							}
							/*if(aus.isOkErrorIOSButtonVisible())
							{
								if(inputs.isInputAvailable("LANGUAGE"))
								{
									flag=flag && optikUtils.VerifyScreenLocalization(testCase, "InviteUserError");
								}
								flag = flag && aus.clickOnOkErrorIOSButton();
							}
							else
							{
								flag=false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add User: Ok button not found", false);
							}*/
						}
						else
						{
							if(inputs.isInputAvailable("LANGUAGE"))
							{
								flag=flag && optikUtils.VerifyScreenLocalization(testCase, "InviteUserError");
							}
						}
					}
					else
					{
						flag=false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invite User: The error is not showing as "+inputs.getInputValue("INVITE_USER")+" has already been added", false);
					}
					if(aus.isBackButtonAvailable())
					{
						aus.ClickOnBackButton();
					}
					else
					{
						flag=false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invite User:Back Button is not visible", false);
					}
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invite User: Email Field value is not visible", false);
				}
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add User: "+inputs.getInputValue("INVITE_USER") +" has not been added", false);
			}
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add User Screen is not visible", false);
		}
		return flag ;
	}
	
	public static boolean addInvalidUser(final TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag = true ;
		AddUserScreen aus=new AddUserScreen(testCase);

		if(inputs.isInputAvailable("LANGUAGE"))
		{
			aus=new AddUserScreen(testCase, inputs.getInputValue("LANGUAGE"));
		}
		else
		{
			aus=new AddUserScreen(testCase);
		}

		if(aus.isAddUserButtonVisible())
		{
				flag= flag && aus.clickOnAddUserButton();
				if(aus.isEmailFieldVisible())
				{
					String email = "@grr.la";
					inputs.setInputValue("EmailAddress", email, false);
					flag=flag && aus.setEmailFieldValue(inputs.getInputValue("EmailAddress"),"Successully set the Email id i.e."+inputs.getInputValue("EmailAddress"));
					Keyword.ReportStep_Pass(testCase, email +"Successully set the Email id i.e.");
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else
					{
						if(MobileUtils.isMobElementExists("name", "done", testCase)){
							MobileUtils.clickOnElement(testCase, "name", "done");
						}
					}

					if(aus.isSendButtonVisible())
					{
						flag=flag && aus.clickOnSendButton();
					}
					else
					{
						flag=false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invite User: Send Button is not visible", false);
					}

					if(aus.isInvalidUserErrorVisible())
					{
						Keyword.ReportStep_Pass(testCase, "Invite User: The error is shown as "+inputs.getInputValue("INVITE_USER")+" has already been added");

						if(!MobileUtils.isRunningOnAndroid(testCase))
						{
							if(inputs.isInputAvailable("LANGUAGE"))
							{
								flag=flag && optikUtils.VerifyScreenLocalization(testCase, "InviteUserError");
							}
							/*if(aus.isOkErrorIOSButtonVisible())
							{
								if(inputs.isInputAvailable("LANGUAGE"))
								{
									flag=flag && optikUtils.VerifyScreenLocalization(testCase, "InviteUserError");
								}
								flag = flag && aus.clickOnOkErrorIOSButton();
							}
							else
							{
								flag=false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add User: Ok button not found", false);
							}*/
						}
						else
						{
							if(inputs.isInputAvailable("LANGUAGE"))
							{
								flag=flag && optikUtils.VerifyScreenLocalization(testCase, "InviteUserError");
							}
						}
					}
					else
					{
						flag=false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invite User: The error is not showing as "+inputs.getInputValue("INVITE_USER")+" has already been added", false);
					}
					if(aus.isBackButtonAvailable())
					{
						aus.ClickOnBackButton();
					}
					else
					{
						flag=false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invite User:Back Button is not visible", false);
					}
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invite User: Email Field value is not visible", false);
				}
	
			
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add User Screen is not visible", false);
		}
		return flag ;
	}



	public static boolean addSameLoggedInUser(final TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag = true ;
		AddUserScreen aus=new AddUserScreen(testCase);

		if(inputs.isInputAvailable("LANGUAGE"))
		{
			aus=new AddUserScreen(testCase, inputs.getInputValue("LANGUAGE"));
		}
		else
		{
			aus=new AddUserScreen(testCase);
		}

		if(aus.isAddUserButtonVisible())
		{
			flag= flag && aus.clickOnAddUserButton();
			if(aus.isEmailFieldVisible())
			{
				flag=flag && aus.setEmailFieldValue(inputs.getInputValue("USERID"),"Successully set the Email id i.e."+inputs.getInputValue("USERID"));
				Keyword.ReportStep_Pass(testCase, inputs.getInputValue("USERID") +"Successully set the Email id i.e."+inputs.getInputValue("USERID"));
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}
				else
				{
					if(MobileUtils.isMobElementExists("name", "Done", testCase)){
						MobileUtils.clickOnElement(testCase, "name", "Done");
					}
				}

				if(aus.isSendButtonVisible())
				{
					flag=flag && aus.clickOnSendButton();
				}
				else
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invite User: Send Button is not visible", false);
				}

				if(aus.isAlreadyAddedUserErrorVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Invite User: The error is shown as "+inputs.getInputValue("USERID")+" has already been added");

					if(!MobileUtils.isRunningOnAndroid(testCase))
					{
						if(aus.isOkErrorIOSButtonVisible())
						{
							if(inputs.isInputAvailable("LANGUAGE"))
							{
								flag=flag && optikUtils.VerifyScreenLocalization(testCase, "InviteUserError");
							}
							flag = flag && aus.clickOnOkErrorIOSButton();
						}
						/*else
						{
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add User: Ok button not found", false);
						}*/
					}
					else
					{
						if(inputs.isInputAvailable("LANGUAGE"))
						{
							flag=flag && optikUtils.VerifyScreenLocalization(testCase, "InviteUserError");
						}
					}
				}
				else
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invite User: The error is not showing as "+inputs.getInputValue("USERID")+" has already been added", false);
				}
				if(MobileUtils.isRunningOnAndroid(testCase))
				{if(aus.isBackButtonAvailable())
				{
					aus.ClickOnBackButton();
				}
				
				else
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invite User:Back Button is not visible", false);
				}}
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invite User: Email Field value is not visible", false);
			}
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add User Screen is not visible", false);
		}
		return flag ;
	}

	public static boolean removeSpecificUser(final TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag = true ;
		AddUserScreen aus=new AddUserScreen(testCase);
		LoginScreen ls=new LoginScreen(testCase);
		if(inputs.isInputAvailable("LANGUAGE"))
		{
			aus=new AddUserScreen(testCase, inputs.getInputValue("LANGUAGE"));
		}
		else
		{
			aus=new AddUserScreen(testCase);
		}


		if(aus.isAddUserButtonVisible())
		{
			if(aus.isSpecificUserVisible(inputs.getInputValue("INVITE_USER").toString()))
			{
				Keyword.ReportStep_Pass(testCase,"Successully verified Users are added in location");
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					//flag =flag && aus.longPressOnSpecificUser(inputs.getInputValue("INVITE_USER").toString());

					flag = flag && aus.clickOnRemoveUsersButton();
				}
				else{
					flag = flag && aus.clickOnRemoveUsersButton();
				}

				if(aus.isOkRemoveButtonVisible())
					{
						flag=flag && aus.clickOnOkRemoveButton();
						//ls.isLoginButtonVisible(15);
						Keyword.ReportStep_Pass(testCase, "Remove user:User removed" +inputs.getInputValue("INVITE_USER").toString());
					}
					else if(aus.isYesRemoveButtonVisible())
					{
						flag=flag && aus.clickOnYesRemoveButton();
						ls.isLoginButtonVisible(15);
						Keyword.ReportStep_Pass(testCase, "Remove user:User removed" +inputs.getInputValue("INVITE_USER").toString());
					}else{
						flag=false;
						if(MobileUtils.isRunningOnAndroid(testCase))
						{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Remove User:'Yes' button is not visible", false);
						}
						else{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Remove User:'Remove' button is not visible", false);
						}
					}
			}
			else
			{
				Keyword.ReportStep_Pass(testCase, inputs.getInputValue("INVITE_USER").toString() +" is not present on screen");
			}

		}
		else{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add User screen is not present", false);
		}
		return flag ;
	}

	public static boolean VerifyPopUpsEditAddress(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		String temp="";
		LocationDetailsScreen lds = new LocationDetailsScreen(testCase);
		EditAddressLocation eal=new EditAddressLocation(testCase);
		SecondaryCardSettings scs=new SecondaryCardSettings(testCase);


		flag =flag && optikUtils.navigatetoGlobalDrwaerOption(testCase, "LOCATION ADDRESS");

		flag= flag && lds.navigateToEditAddressScreen();


		if (eal.isLocationNameFieldVisible()) {
			flag= flag && eal.clickOnLocationNameField();


			if (MobileUtils.isRunningOnAndroid(testCase)) {
				if (eal.setLocationNameFieldValue("")) {
					Keyword.ReportStep_Pass(testCase, "Edit Address: Successfully set Location Address");


			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Edit Adress Screen : Not able to set Location Address.");
				flag = false;
			}
			}
			else
			{
				WebElement s=eal.getclearLocationNameFieldValue();
				s.clear();
				s.clear();
			}

			if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}
				else
				{

					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Return");
				}
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					if (eal.isDisSaveButtonVisible()) {
						
						Keyword.ReportStep_Pass(testCase, "Edit Address: Save button Disabled on Location field Empty");
						
					}
					/*else{
						flag=false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Address: Save button Enabled on Location field Empty", false);
					}*/
				}
				else
				{
					if (eal.isSaveButtonVisible_IOS()) {
						flag=false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Address: Save button Enabled on Location field Empty", false);
					}

					else
					{
						Keyword.ReportStep_Pass(testCase, "Edit Address: Save button Disabled on Location field Empty");
					}
				}



					if (eal.isLocationNameFieldVisible()) {
						flag= flag && eal.clickOnLocationNameField();


						if (eal.setLocationNameFieldValue(inputs.getInputValue("LOCATION1_NAME"))) {
							if (MobileUtils.isRunningOnAndroid(testCase)) {
								MobileUtils.hideKeyboard(testCase.getMobileDriver());
								MobileUtils.hideKeyboard(testCase.getMobileDriver());
							}else
							{
								MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Return");
							}
								temp=eal.getLocationNameFieldValue();
								if(temp.contains(inputs.getInputValue("LOCATION1_NAME"))){
									Keyword.ReportStep_Pass(testCase,
											"Edit Adress Screen : location Name Set Successfully "+temp);
								}
								else{
									Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Adress Screen : location Name not Set Successfully "+temp+"", false);
								}

						} else {
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Edit Adress Screen : Not able to set Street Address.");
							flag = false;
						}
					}
					else{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Address Screen: Not able to find ''Street Address Field'' ", false);
					}






		}
		else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Address Screen: Not able to find ''Street Address Field'' ", false);
		}



		if (eal.isStreetAddressFieldVisible()) {
			eal.clickOnStreetAddressField();
			WebElement s1=eal.getclearAddressNameFieldValue();
			s1.clear();
			s1.clear();

			if (eal.setStreetAddressFieldValue("~`|<>")) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}else
				{
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Return");
				}

					temp=eal.getStreetAddressFieldValue();
					if(!temp.contains("~`|<>")){
						Keyword.ReportStep_Pass(testCase,
								"Edit Adress Screen : Street Address field does not accepts special characters");
					}
					else{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Adress Screen : Street Address accepts the special characters", false);
					}


			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Edit Adress Screen : Not able to set Street Address.");
				flag = false;
			}
		}
		else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Address Screen: Not able to find ''Street Address Field'' ", false);
		}

		if (eal.isCityAddressFieldVisible()) {
			eal.clickOnCityAddressField();
			WebElement s1=eal.getclearCityNameFieldValue();
			s1.clear();
			s1.clear();
			if (eal.setCityAddressFieldValue("~`|<>")) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}
				else
				{
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Return");
				}

					temp=eal.getCityAddressFieldValue();
					if(!temp.contains("~`|<>")){
						Keyword.ReportStep_Pass(testCase,
								"Edit Adress Screen : City Address field does not accepts special characters");
						flag=true;
					}
					else{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Adress Screen : Street Address accepts the special characters", false);
						flag=false;
					}


			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Edit Adress Screen : Not able to set City Address.");
				flag = false;
			}
		}
		else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Address Screen: Not able to find ''City Address Field'' ", false);
			flag=false;
		}



			if (eal.isStateAddressFieldVisible()) {
				eal.clickOnStateAddressField();
				WebElement s1=eal.getclearAddressNameFieldValue();
				s1.clear();
				s1.clear();
				if (eal.setStateAddressFieldValue("~`|<>")) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else
					{
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Return");
					}
						temp=eal.getStateAddressFieldValue();
						if(!temp.contains("~`|<>")){
							Keyword.ReportStep_Pass(testCase,
									"Edit Adress Screen : State Address field does not accepts special characters");
							flag=true;
						}
						else{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Adress Screen : State Address accepts the special characters", false);
							flag=false;
						}



				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Edit Adress Screen : Not able to set State Address.");
					flag = false;
				}
			}
			else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Address Screen: Not able to find ''City Address Field'' ", false);
				flag=false;
			}



		if (eal.isZipCodeAdressFieldVisibl()) {
			flag= flag && eal.clickOnZipCodeAdressField();
			WebElement s1=eal.getclearZipCodeNameFieldValue();
			s1.clear();
			s1.clear();
			if (eal.setZipCodeAdressFieldValue("")) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
					MobileUtils.hideKeyboard(testCase.getMobileDriver());

				}
				else
				{
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Return");
				}
			}

		}
		if (MobileUtils.isRunningOnAndroid(testCase)) {
		if (eal.isSaveButtonVisible()) {
			flag = flag && eal.clickOnSaveButton();
			Keyword.ReportStep_Pass(testCase, "Edit Address: Clicked on save button");

		}
		else{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Address: Unable to find Save button", false);
		}
			if(eal.isLocationUpdateErrorVisible())
			{

				try {
					if(inputs.isInputAvailable("LANGUAGE"))
					{
						flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ErrorPopUpForZipCodePage");

					}else{
						Keyword.ReportStep_Pass(testCase, "Edit Address : 'Error Description ' "+eal.getLocationUpdateErrorDescriptionValue()+" ");
					}
				} catch (Exception e) {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Address Screen: Not able to get verify Error Description Localization '' ", false);
					flag=false;
				}


				if(eal.isLocationUpdateErrorOkButtonVisible())
				{
					eal.clickOnLocationUpdateErrorOkButton();
				}

			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Address Field: ''Location Update Error'' is not displayed for saving Location address with ''special characters''", false);
			}
		}

		else
		{

			if (eal.isSaveButtonVisible_IOS()) {
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Address: Save button Enabled on Location field Empty", false);
			}
		}
		if(eal.isEditAddressChangeCountryButtonVisible())
		{
			eal.clickOnEditAddressChangeCountryButton();

		}
				if(eal.isBackButtonVisible())
				{
					eal.clickOnBackButton();
				}
				if(eal.isYesButtonPopupVisible())
				{
					if(inputs.isInputAvailable("LANGUAGE"))
					{
						optikUtils.VerifyScreenLocalization(testCase, "ConformationPopUpForChangesPage");
					}
					eal.clickOnYesButtonPopup();
				}
				if(eal.isYesButtonPopupVisible())
				{
					eal.clickOnYesButtonPopup();
				}
				if(eal.isBackButtonVisible())
				{
					eal.clickOnBackButton();
				}
				if(eal.isYesButtonPopupVisible())
				{
					eal.clickOnYesButtonPopup();
				}
				if(eal.isBackButtonVisible())
				{
					eal.clickOnBackButton();
				}
				if(eal.isBackButtonVisible())
				{
					eal.clickOnBackButton();
				}

		return flag;
	}


	public static boolean verifyTemperatureOrHumidityFieldIncrementsForAlerts(TestCases testCase, TestCaseInputs inputs,
			String temperatureOrhumidity) {
		boolean flag = true;
		int belowValueApp = 0, aboveValueApp = 0, belowValueAppAdd = 0, aboveValueAppAdd = 0;
		Double belowValueAppCelsius = 0.0, aboveValueAppCelsius = 0.0, belowValueAppCelsiusAdd = 0.0,
				aboveValueAppCelsiusAdd = 0.0;
		String highOrlowTemperatureValue = "", highOrlowHumidityValue = "";
		ManageAlertsScreen mas=new ManageAlertsScreen(testCase);

		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		try
		{
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				if (mas.isHighLowTemperatureOrHumidityVisible(5)) {
					if (temperatureOrhumidity.equalsIgnoreCase("Indoor Temperature")) {
						highOrlowTemperatureValue = mas.getHighLowTemperatureOrHumidity(testCase).get(0).getText();
					} else if (temperatureOrhumidity.equalsIgnoreCase("Humidity")) {
						if (statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger") ||statInfo.getDeviceType().equalsIgnoreCase("Water Leak Detector")) {
							highOrlowHumidityValue = mas.getHighLowTemperatureOrHumidity(testCase).get(1).getText();
						} else if (statInfo.getDeviceType().equalsIgnoreCase("Jasper")) {
							Keyword.ReportStep_Pass(testCase, "Humidity is not supported in Jasper");
							return flag;
						}
					}

					if (temperatureOrhumidity.equalsIgnoreCase("Indoor Temperature")) {
						if (mas.getThermounits(testCase).contains("F")) {
							if (highOrlowTemperatureValue.contains("F")) {
								Keyword.ReportStep_Pass(testCase, "High/Low temperature value: " + highOrlowTemperatureValue
										+ " is in intervals of 1F");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"High/Low temperature value: " + highOrlowTemperatureValue
										+ " is not in intervals of 1F");
							}
						} else if (mas.getThermounits(testCase).contains("C")) {
							if (highOrlowTemperatureValue.contains("C")) {
								Keyword.ReportStep_Pass(testCase, "High/Low temperature value: " + highOrlowTemperatureValue
										+ " is in intervals of 0.5C");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"High/Low temperature value: " + highOrlowTemperatureValue
										+ " is not in intervals of 0.5C");
							}
						}
					} else if (temperatureOrhumidity.equalsIgnoreCase("Humidity")) {
						if (statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger") ||statInfo.getDeviceType().equalsIgnoreCase("Water Leak Detector")) {
							String tempBelow = "", tempAbove = "";
							tempBelow = highOrlowHumidityValue.split("/")[0];
							tempBelow = tempBelow.replaceAll("\\s+", "");
							tempAbove = highOrlowHumidityValue.split("/")[1];
							tempAbove = tempAbove.replaceAll("\\s+", "");

							if (Double.parseDouble(tempBelow.split("%")[0]) % 5 == 0) {
								Keyword.ReportStep_Pass(testCase, "Below humidity value: "
										+ highOrlowHumidityValue.split("/")[0] + " is in intervals of 5%");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Below humidity value: "
										+ highOrlowHumidityValue.split("/")[0] + " is not in intervals of 5%");
							}
							if (Double.parseDouble(tempAbove.split("%")[0]) % 5 == 0) {
								Keyword.ReportStep_Pass(testCase, "Above humidity value: "
										+ highOrlowHumidityValue.split("/")[1] + " is in intervals of 5%");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Above humidity value: "
										+ highOrlowHumidityValue.split("/")[1] + " is not in intervals of 5%");
							}
						} else if (statInfo.getDeviceType().equalsIgnoreCase("Jasper")) {
							Keyword.ReportStep_Pass(testCase, "Humidity is not supported in Jasper");
							return flag;
						}
					}
				}
			} else { //IOS
				if (temperatureOrhumidity.equalsIgnoreCase("Indoor Temperature")) {
					if (mas.isHighLowTemperatureOptionVisible(5)) {
						if (!mas.ClickOnHighLowTemperatureOption()) {
							flag = false;
						}
						if (mas.isIndoorBelowTemperatureiOSVisible(5)) {
							if (statInfo.getThermostatUnits().equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
								belowValueApp = Integer.parseInt(
										mas.getIndoorBelowTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0", ""));
								aboveValueApp = Integer.parseInt(
										mas.getIndoorAboveTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0", ""));
								if (belowValueApp == 39) {
									belowValueAppAdd = belowValueApp + 1;
								} else {
									belowValueAppAdd = belowValueApp - 1;
								}
								if (aboveValueApp == 40) {
									aboveValueAppAdd = aboveValueApp + 1;
								} else {
									aboveValueAppAdd = aboveValueApp - 1;
								}

								int i = 0;
								if (belowValueApp > belowValueAppAdd) {
									while (!(Integer.parseInt(
											mas.getIndoorBelowTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0",
													"")) == belowValueAppAdd)
											&& i < 50) {
										Point point =mas.getPointTemperature(1);
										Dimension dim = mas.getDimTemperature(1);
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2,
												point.getY() + dim.getHeight() / 2 - 20))).release().perform();
										i++;
									}
								} else {
									while (!(Integer.parseInt(
											mas.getIndoorBelowTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0",
													"")) == belowValueAppAdd)
											&& i < 50) {
										Point point = mas.getPointHumidityChange(1);
										Dimension dim = mas.getDimTemperature(1);
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2,
												point.getY() + dim.getHeight() / 2 + 20))).release().perform();
										i++;
									}
								}
								int j = 0;
								if (aboveValueApp > aboveValueAppAdd) {
									while (!(Integer.parseInt(
											mas.getIndoorAboveTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0",
													"")) == aboveValueAppAdd)
											&& j < 50) {
										Point point = mas.getPointTemperature(2);
										Dimension dim = mas.getDimTemperature(2);
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2,
												point.getY() + dim.getHeight() / 2 - 20))).release().perform();
										j++;
									}
								} else {
									while (!(Integer.parseInt(
											mas.getIndoorAboveTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0",
													"")) == aboveValueAppAdd)
											&& j < 50) {
										Point point = mas.getPointTemperature(2);
										Dimension dim = mas.getDimTemperature(2);
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2,
												point.getY() + dim.getHeight() / 2 + 20))).release().perform();
										j++;
									}
								}

								/*
								 * try { flag = flag &&
								 * MobileUtils.setValueInPicker(testCase,
								 * fieldObjects, "IndoorBelowTemperatureiOS",
								 * String.valueOf(belowValueAppAdd) + "\u00B0");
								 * flag = flag &&
								 * MobileUtils.setValueInPicker(testCase,
								 * fieldObjects, "IndoorAboveTemperatureiOS",
								 * String.valueOf(aboveValueAppAdd) + "\u00B0");
								 *
								 * } catch (Exception e) { flag = false;
								 * Keyword.ReportStep_Fail(testCase,
								 * FailType.FUNCTIONAL_FAILURE, "Error message: " +
								 * e.getMessage()); }
								 */

								belowValueAppAdd = Integer.parseInt(
										mas.getIndoorBelowTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0", ""));
								aboveValueAppAdd = Integer.parseInt(
										mas.getIndoorAboveTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0", ""));
								if (((belowValueApp - belowValueAppAdd) == 1 || (belowValueAppAdd - belowValueApp) == 1)
										&& ((aboveValueApp - aboveValueAppAdd) == 1
										|| (aboveValueAppAdd - aboveValueApp) == 1)) {
									Keyword.ReportStep_Pass(testCase,
											"Below && Above value are displayed as increment by 1F");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
											"Below && Above value are not displayed as increment by 1F");
								}

							} else if (statInfo.getThermostatUnits().equalsIgnoreCase(GlobalVariables.CELSIUS)) {
								belowValueAppCelsius = Double.parseDouble(
										mas.getIndoorBelowTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0", ""));
								aboveValueAppCelsius = Double.parseDouble(
										mas.getIndoorAboveTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0", ""));
								if (belowValueAppCelsius == 4.0) {
									belowValueAppCelsiusAdd = belowValueAppCelsius + 0.5;
								} else {
									belowValueAppCelsiusAdd = belowValueAppCelsius - 0.5;
								}
								if (aboveValueAppCelsius == 4.5) {
									aboveValueAppCelsiusAdd = aboveValueAppCelsius + 0.5;
								} else {
									aboveValueAppCelsiusAdd = aboveValueAppCelsius - 0.5;
								}

								int i = 0;
								if (belowValueApp > belowValueAppCelsiusAdd) {
									while (!(Double.parseDouble(mas.getIndoorBelowTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0",
											"")) == belowValueAppCelsiusAdd)
											&& i < 50) {
										Point point = mas.getPointTemperature(1);
										Dimension dim = mas.getDimTemperature(1);
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2,
												point.getY() + dim.getHeight() / 2 - 20))).release().perform();
										i++;
									}
								} else {
									while (!(Double.parseDouble(
											mas.getIndoorBelowTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0",
													"")) == belowValueAppCelsiusAdd)
											&& i < 50) {
										Point point = mas.getPointTemperature(1);
										Dimension dim = mas.getDimTemperature(1);
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2,
												point.getY() + dim.getHeight() / 2 + 20))).release().perform();
										i++;
									}
								}
								int j = 0;
								if (aboveValueApp > aboveValueAppCelsiusAdd) {
									while (!(Double.parseDouble(
											mas.getIndoorAboveTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0",
													"")) == aboveValueAppCelsiusAdd)
											&& j < 50) {
										Point point = mas.getPointTemperature(2);
										Dimension dim = mas.getDimTemperature(2);
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2,
												point.getY() + dim.getHeight() / 2 - 20))).release().perform();
										j++;
									}
								} else {
									while (!(Double.parseDouble(
											mas.getIndoorBelowTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0",
													"")) == aboveValueAppCelsiusAdd)
											&& j < 50) {
										Point point = mas.getPointTemperature(2);
										Dimension dim = mas.getDimTemperature(2);
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2,
												point.getY() + dim.getHeight() / 2 + 20))).release().perform();
										j++;
									}
								}

								/*
								 * try { flag = flag &&
								 * MobileUtils.setValueInPicker(testCase,
								 * fieldObjects, "IndoorBelowTemperatureiOS",
								 * String.valueOf(belowValueAppCelsiusAdd) +
								 * "\u00B0"); flag = flag &&
								 * MobileUtils.setValueInPicker(testCase,
								 * fieldObjects, "IndoorAboveTemperatureiOS",
								 * String.valueOf(aboveValueAppCelsiusAdd) +
								 * "\u00B0");
								 *
								 * } catch (Exception e) { flag = false;
								 * Keyword.ReportStep_Fail(testCase,
								 * FailType.FUNCTIONAL_FAILURE, "Error message: " +
								 * e.getMessage()); }
								 */
								belowValueAppCelsiusAdd = Double.parseDouble(mas.getIndoorBelowTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0", ""));
								aboveValueAppCelsiusAdd = Double.parseDouble(mas.getIndoorAboveTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0", ""));
								if (((belowValueAppCelsius - belowValueAppCelsiusAdd) == 0.5
										|| (belowValueAppCelsiusAdd - belowValueAppCelsius) == 0.5)
										&& ((aboveValueAppCelsius - aboveValueAppCelsiusAdd) == 0.5
										|| (aboveValueAppCelsiusAdd - aboveValueAppCelsius) == 0.5)) {
									Keyword.ReportStep_Pass(testCase,
											"Below && Above value are displayed as increment by 0.5C");
								} else {
									flag = false;
									Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
											"Below && Above value are not displayed as increment by 0.5C");
								}
							}
						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"HighLowTemperatureOption not present");
					}
				} else if (temperatureOrhumidity.equalsIgnoreCase("Humidity")) {
					if (statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger") ||statInfo.getDeviceType().equalsIgnoreCase("Water Leak Detector")) {
						highOrlowHumidityValue = mas.getHighLowHumidityOption(testCase);
						String tempBelow = "", tempAbove = "";
						tempBelow = highOrlowHumidityValue.split("/")[0];
						tempBelow = tempBelow.replaceAll("\\s+", "");
						tempAbove = highOrlowHumidityValue.split("/")[1];
						tempAbove = tempAbove.replaceAll("\\s+", "");

						if (Double.parseDouble(tempBelow.split("%")[0]) % 5 == 0) {
							Keyword.ReportStep_Pass(testCase, "Below humidity value: "
									+ highOrlowHumidityValue.split("/")[0] + " is in intervals of 5%");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Below humidity value: "
									+ highOrlowHumidityValue.split("/")[0] + " is not in intervals of 5%");
						}
						if (Double.parseDouble(tempAbove.split("%")[0]) % 5 == 0) {
							Keyword.ReportStep_Pass(testCase, "Above humidity value: "
									+ highOrlowHumidityValue.split("/")[1] + " is in intervals of 5%");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Above humidity value: "
									+ highOrlowHumidityValue.split("/")[1] + " is not in intervals of 5%");
						}
					} else if (statInfo.getDeviceType().equalsIgnoreCase("Jasper")) {
						Keyword.ReportStep_Pass(testCase, "Humidity is not supported in Jasper");
						return flag;
					}
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return flag;
	}


	public static boolean navigateToManageAlertsScreen(TestCases testCase) {
		boolean flag=true;
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase);
		PrimaryCard pc=new PrimaryCard(testCase);
		if(pc.isSettingIconVisible())
		{
			flag = flag && pc.clickOnSettingIcon();
		}
		else
		{
			flag=true;
		}
		sc.selectOptionFromSecondarySettings(SecondaryCardSettings.ALERTSANDNOTIFICATIONS);
		return flag;
	}


	public static boolean validateBelowAboveValuesLogicForTemperatureOrHumidity(TestCases testCase,
			TestCaseInputs inputs, String temperatureOrhumidity) {
		boolean flag = true;
		String highOrlowValue = "", belowValue = "", aboveValue = "";
		ManageAlertsScreen mas=new ManageAlertsScreen(testCase);
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		try
		{
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				if (mas.isHighLowTemperatureOrHumidityVisible(5)) {
					if (temperatureOrhumidity.equalsIgnoreCase("Indoor Temperature")) {
						highOrlowValue =mas.getHighLowTemperatureOrHumidity(testCase).get(0).getText();
						belowValue = highOrlowValue.split("/")[0];
						belowValue = belowValue.replaceAll("\\s+", "");
						aboveValue = highOrlowValue.split("/")[1];
						aboveValue = aboveValue.replaceAll("\\s+", "");
						if (mas.getThermounits(testCase).equalsIgnoreCase(GlobalVariables.FAHRENHEIT) ||mas.getThermounits(testCase).contains("F")) {
							if (Integer.parseInt(belowValue.split(String.valueOf(InputVariables.degree))[0]) < Integer
									.parseInt(aboveValue.split(String.valueOf(InputVariables.degree))[0])) {
								Keyword.ReportStep_Pass(testCase,
										"Below value of indoor temperature: " + highOrlowValue.split("/")[0]
												+ " is set to less than the Above value of indoor temperature: "
												+ highOrlowValue.split("/")[1]);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"Below value of indoor temperature: " + highOrlowValue.split("/")[0]
												+ " is not set to less than the Above value of indoor temperature: "
												+ highOrlowValue.split("/")[1]);
							}
						} else {
							if (Double.parseDouble(belowValue.split(String.valueOf(InputVariables.degree))[0]) < Double
									.parseDouble(aboveValue.split(String.valueOf(InputVariables.degree))[0])) {
								Keyword.ReportStep_Pass(testCase,
										"Below value of indoor temperature: " + highOrlowValue.split("/")[0]
												+ " is set to less than the Above value of indoor temperature: "
												+ highOrlowValue.split("/")[1]);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"Below value of indoor temperature: " + highOrlowValue.split("/")[0]
												+ " is not set to less than the Above value of indoor temperature: "
												+ highOrlowValue.split("/")[1]);
							}
						}
					} else if (temperatureOrhumidity.equalsIgnoreCase("Indoor Humidity")) {
						if (statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger") || statInfo.getDeviceType().equalsIgnoreCase("Water Leak Detector")) {
							highOrlowValue = mas.getHighLowTemperatureOrHumidity(testCase).get(1).getText();
							belowValue = highOrlowValue.split("/")[0];
							belowValue = belowValue.replaceAll("\\s+", "");
							aboveValue = highOrlowValue.split("/")[1];
							aboveValue = aboveValue.replaceAll("\\s+", "");

							if (Double.parseDouble(belowValue.split("%")[0]) < Double.parseDouble(aboveValue.split("%")[0])) {
								Keyword.ReportStep_Pass(testCase,
										"Below value of indoor temperature: " + highOrlowValue.split("/")[0]
												+ " is set to less than the Above value of humidity: "
												+ highOrlowValue.split("/")[1]);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"Below value of indoor temperature: " + highOrlowValue.split("/")[0]
												+ " is not set to less than the Above value of humidity: "
												+ highOrlowValue.split("/")[1]);
							}
						} else if (statInfo.getDeviceType().equalsIgnoreCase("Jasper")) {
							Keyword.ReportStep_Pass(testCase, "Humidity is not supported in Jasper type");
							return flag;
						}
					}
				}

			} else {
				HashMap<String, MobileObject> fieldObjects = MobileUtils.loadObjectFile(testCase, "AlertsAndNotificationsScreen");

				if (temperatureOrhumidity.equalsIgnoreCase("Indoor Temperature")) {
					if (MobileUtils.isMobElementExists(fieldObjects, testCase, "HighLowTemperatureOption", 10)) {
						highOrlowValue =  mas.getHighLowTemperatureOrHumidity(testCase).get(0).getAttribute("value");
						belowValue = highOrlowValue.split("/")[0];
						belowValue = belowValue.replaceAll("\\s+", "");
						aboveValue = highOrlowValue.split("/")[1];
						aboveValue = aboveValue.replaceAll("\\s+", "");
						if (statInfo.getThermostatUnits().equalsIgnoreCase(GlobalVariables.FAHRENHEIT)) {
							if (Integer.parseInt(belowValue.split(String.valueOf(InputVariables.degree))[0]) < Integer
									.parseInt(aboveValue.split(String.valueOf(InputVariables.degree))[0])) {
								Keyword.ReportStep_Pass(testCase,
										"Below value of indoor temperature: " + highOrlowValue.split("/")[0]
												+ " is set to less than the Above value of indoor temperature: "
												+ highOrlowValue.split("/")[1]);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"Below value of indoor temperature: " + highOrlowValue.split("/")[0]
												+ " is not set to less than the Above value of indoor temperature: "
												+ highOrlowValue.split("/")[1]);
							}
						} else {
							if (Double.parseDouble(belowValue.split(String.valueOf(InputVariables.degree))[0]) < Double
									.parseDouble(aboveValue.split(String.valueOf(InputVariables.degree))[0])) {
								Keyword.ReportStep_Pass(testCase,
										"Below value of indoor temperature: " + highOrlowValue.split("/")[0]
												+ " is set to less than the Above value of indoor temperature: "
												+ highOrlowValue.split("/")[1]);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"Below value of indoor temperature: " + highOrlowValue.split("/")[0]
												+ " is not set to less than the Above value of indoor temperature: "
												+ highOrlowValue.split("/")[1]);
							}

						}
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"HighLow Temperature is not displayed");
					}
				} else if (temperatureOrhumidity.equalsIgnoreCase("Indoor Humidity")) {
					if (statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger")  || statInfo.getDeviceType().equalsIgnoreCase("Water Leak Detector")) {
						highOrlowValue = MobileUtils.getMobElements(fieldObjects, testCase, "HighLowHumidityOption").get(0)
								.getAttribute("value");
						belowValue = highOrlowValue.split("/")[0];
						belowValue = belowValue.replaceAll("\\s+", "");
						aboveValue = highOrlowValue.split("/")[1];
						aboveValue = aboveValue.replaceAll("\\s+", "");

						if (Double.parseDouble(belowValue.split("%")[0]) < Double.parseDouble(aboveValue.split("%")[0])) {
							Keyword.ReportStep_Pass(testCase,
									"Below value of indoor temperature: " + highOrlowValue.split("/")[0]
											+ " is set to less than the Above value of humidity: "
											+ highOrlowValue.split("/")[1]);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Below value of indoor temperature: " + highOrlowValue.split("/")[0]
											+ " is not set to less than the Above value of humidity: "
											+ highOrlowValue.split("/")[1]);
						}
					} else if (statInfo.getDeviceType().equalsIgnoreCase("Jasper")) {
						Keyword.ReportStep_Pass(testCase, "Humidity is not supported in Jasper type");
						return flag;
					}
				}

			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}

		return flag;
	}

	public static boolean verifyTemperatureandhumidityPopup(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag=true;
		WLDLeakDetectorSettings wld=new WLDLeakDetectorSettings(testCase);
		if(!MobileUtils.isRunningOnAndroid(testCase)){
			if(wld.isAlertRangeUpdatedTitleAvailable()){

				Keyword.ReportStep_Pass(testCase,"Pop up Title :-"+wld.getAlertRangeUpdatedTitle());

			}else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," pop up titles not present");
				flag=false;

			}

			if(wld.isAlertRangeUpdatedDescriptionAvailable()){

				Keyword.ReportStep_Pass(testCase,"Pop up Description is Displaying..");

			}else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," pop up description not present");
				flag=false;

			}

			if(wld.isOKButtonAvailable()){

				Keyword.ReportStep_Pass(testCase,"Pop up ok button present");
				flag=flag && wld.ClickOnOKButton();

			}else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," pop up OK button not present");
				flag=false;

			}
		}else{
			Keyword.ReportStep_Pass(testCase,"For Android: Toast msg cannot be veriied through automation");
		}
		return flag;
	}

	public static boolean VerifySystemModefromStattoApp(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		try
		{
			flag = flag && DashboardUtils.selectDeviceFromDashboard(testCase,inputs.getInputValue("LOCATION1_DEVICE1_NAME"));
			flag = flag && CoachMarkUtils.closeCoachMarks(testCase);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		return flag;
	}


	public static boolean verifyFeedbackPopUp(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		FeedBackScreen FB=new FeedBackScreen(testCase);

		if(FB.isFeedbackPopUpVisible()|| FB.isFeedbackPopUpIDVisible()|| FB.isFeedbackPopUptextVisible()||FB.isFeedbackCloseButtonVisible()||FB.isFeedbackOneVisible()||FB.isFeedbackFourVisible())
		{
			Keyword.ReportStep_Pass(testCase,
					"'What do you think of demo Home app?'Feedback pop-up is displayed when launched application.");


			if (FB.isFeedbackOneVisible()
					&& FB.isFeedbackTwoVisible()
					&& FB.isFeedbackThreeVisible()
					&& FB.isFeedbackFourVisible()
					&& FB.isFeedbackFiveVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Verified 'Five' star's are present below the discreption.");
			}
			else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Unable to verify 'Five star's' below the discreption.");
				flag = false;
			}

			if (FB.isFeedbackOneVisible())
			{
				Keyword.ReportStep_Pass(testCase, "On Feedback POU-UP First Star is present");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"On Feedback POU-UP First Star is not present");
				flag = false;
			}
			if (FB.isFeedbackTwoVisible())
			{
				Keyword.ReportStep_Pass(testCase, "On Feedback POU-UP Second Star is present");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"On Feedback POU-UP Second Star is not present");
				flag = false;
			}
			if (FB.isFeedbackThreeVisible())
			{
				Keyword.ReportStep_Pass(testCase, "On Feedback POU-UP Third Star is present");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"On Feedback POU-UP Third Star is not present");
				flag = false;
			}
			if (FB.isFeedbackFourVisible())
			{
				Keyword.ReportStep_Pass(testCase, "On Feedback POU-UP Fourth Star is present");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"On Feedback POU-UP Fourth Star is not present");
				flag = false;
			}
			if (FB.isFeedbackFiveVisible())
			{
				Keyword.ReportStep_Pass(testCase, "On Feedback POU-UP Fifth Star is present");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"On Feedback POU-UP Fifth Star is not present");
				flag = false;
			}

			/*if (FB.isFeedbackCloseButtonVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Verified 'Close' button are present below the Five Star's.");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Unable to verify 'Close' button are present below the Five Star's.");
				flag = false;
			}*/

		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find Feedback Pop-Up");
			flag = false;
		}

		return flag;
	}

	public static boolean closeFeedbackPopUp(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		FeedBackScreen FB=new FeedBackScreen(testCase);

		if (FB.isFeedbackPopUpVisible()|| FB.isFeedbackPopUpIDVisible()||FB.isFeedbackPopUptextVisible())
		{
			Keyword.ReportStep_Pass(testCase, "'What do you think of the optik App ?'Feedback pop-up is displayed.");

			flag = flag && FB.clickonFeedbackCloseButton();

		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find Feedback Pop-Up");
			flag = false;
		}

		return flag;
	}

	public static boolean sendAppFeedback(TestCases testCase, TestCaseInputs inputs,String status) {
		boolean flag = true;
		FeedBackScreen FB=new FeedBackScreen(testCase);

		if (FB.isFeedbackThreeVisible())
		{
			if(FB.clickonFeedbackThree())
			{
				Keyword.ReportStep_Pass(testCase,
						"User click on 3rd Star");

			}
			if (FB.isFeedbackPageCloseVisible()
					&& FB.isFeedbackPageHeaderVisible())
			{
				Keyword.ReportStep_Pass(testCase,
						"Verified 'App feedback' screen is displayed with 'Close' or 'X' option.");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Unable to verify 'App feedback' screen is displayed with 'X' option.");
				flag = false;
			}
			if (MobileUtils.isRunningOnAndroid(testCase))
			{
				if (FB.isFeedbackPageDesc1Visible())
				{
					Keyword.ReportStep_Pass(testCase,
							"'Thanks for your Rating.' is displayed below the App Feedback header.");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"'Thanks for your Rating.' is not displayed below the App Feedback header.");
					flag = false;
				}
				if (FB.isFeedbackPageDesc2Visible())
				{
					Keyword.ReportStep_Pass(testCase,
							"'Let us know more so we can improve the optik app for you.' is displayed below the App Feedback header.");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"'Let us know more so we can improve the optik app for you.' is not displayed below the App Feedback header.");
					flag = false;
				}
			}

			String text = "T";
			if (MobileUtils.isRunningOnAndroid(testCase))
			{
				WebElement tap =FB.getfeedbacktext(inputs);
				tap.clear();
				tap.sendKeys(text);


				Keyword.ReportStep_Pass(testCase, "Able to set feedback i.e " + text);

			}

			if (MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			if (MobileUtils.isRunningOnAndroid(testCase))
			{
				FB.getSendfeedbackButtonStatus();
			}
			/*
			 * StringBuilder sb = new StringBuilder(); for (int i = 0; i < 10;
			 * i++) { sb.append(
			 * "Feedback1Feedback2Feedback3Feedback4Feedback5Feedback6Feedback7Feedback8"
			 * ); } strValue = sb.toString(); if
			 * (MobileUtils.isRunningOnAndroid(testCase)) {
			 * MobileUtils.clearTextField(fieldObjects, testCase,
			 * "feedbacktext");
			 * testCase.getMobileDriver().findElement(By.id("feedback_text")).
			 * sendKeys(strValue); String St =
			 * testCase.getMobileDriver().findElement(By.id("feedback_text")).
			 * getText(); Count = St.length(); } else { try { WebElement tap =
			 * MobileUtils.getMobElement(testCase, "XPATH", "//UIATextView");
			 * tap.clear(); } catch (Exception e) {
			 * Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
			 * e.getMessage()); flag = false; }
			 *
			 * MobileUtils.setValueToElement(testCase, "XPATH", "//UIATextView",
			 * strValue); String St = MobileUtils.getFieldValue(testCase,
			 * "XPATH", "//UIATextView"); Count = St.length(); } if
			 * (MobileUtils.isRunningOnAndroid(testCase)) {
			 * MobileUtils.hideKeyboard(testCase.getMobileDriver()); }
			 *
			 * if (Count == 500) { Keyword.ReportStep_Pass(testCase,
			 * "Verified text field accepted Maximum 500 characters."); } else {
			 * Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
			 * "Text field is not accepting 500 characters, is accepted less than 500 characters."
			 * ); flag = false; }
			 */
			String text1 = "Testingoptik123";
			if (MobileUtils.isRunningOnAndroid(testCase))
			{
				WebElement tap =FB.getfeedbacktext(inputs);
				tap.clear();
				tap.sendKeys(text1);

				Keyword.ReportStep_Pass(testCase, "Able to set feedback i.e " + text1);
			}

			if (MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}

			if(FB.isToggleButtonVisible())
			{
				if(FB.getToggleButtonStatus().equalsIgnoreCase("false")||FB.getToggleButtonStatus().equalsIgnoreCase("off")||FB.getToggleButtonStatus().equalsIgnoreCase("0"))
				{
					FB.clickOnToggleButton();
					Keyword.ReportStep_Pass(testCase, "Feedback toggle is On");
				}
				else
				{
					Keyword.ReportStep_Pass(testCase, "Feedback toggle is already in On state");
				}

			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Feedback toggle is not displayed");
				flag = false;
			}



			if (MobileUtils.isRunningOnAndroid(testCase))
			{
				if (FB.isSendfeedbackButtonVisible())
				{
					Keyword.ReportStep_Pass(testCase, "'SEND FEEDBACK' button active after input text to text box.");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Unable to find 'SEND FEEDBACK' button active after input text to the text box.");
					flag = false;
				}
				if (FB.isSendfeedbackButtonVisible())
				{
					FB.clickonSendfeedbackButton();

					Dashboard db=new Dashboard(testCase);
					if (db.isGlobalDrawerButtonVisible(5))
					{
						Keyword.ReportStep_Pass(testCase, "Successfully Screen Navigate to previous screen");

					}
					else
					{
						PrimaryCard pc=new PrimaryCard(testCase);
						if (pc.isBackButtonAvailable())
						{
							pc.ClickOnBackButton();
							Keyword.ReportStep_Pass(testCase, "Successfully Screen Navigate to previous screen");
							if (db.isGlobalDrawerButtonVisible(5))
							{
								Keyword.ReportStep_Pass(testCase, "Successfully Screen Navigate to previous screen");

							}
						}
					}

				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Unable to find 'SEND FEEDBACK' button active after input text to the text box.");
					flag = false;
				}
			}
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "unable to click on star.");
		}

		return flag;
	}

	public static boolean closeAppFeedback(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		FeedBackScreen FB=new FeedBackScreen(testCase);

		if (FB.isFeedbackFiveVisible())
		{
			if(FB.clickonFeedbackFive())
			{
				Keyword.ReportStep_Pass(testCase,
						"User click on 5th Star.");
			}


			if (FB.isThanksFeedackPopUpVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Verified description 'Thanks for your Rating'");

				if (FB.isFiveStarDiscreption2Visible())
				{
					Keyword.ReportStep_Pass(testCase,
							"'Add your feedback to Google Play Store so others know what you think.' description is displayed below header.");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"'Add your feedback to Google Play Store so others know what you think.' description is not displayed below header.");
					flag = false;
				}
				if (FB.isFeedbackCloseButtonVisible() && FB.isFeedbackContinueButtonVisible())
				{
					Keyword.ReportStep_Pass(testCase,
							"'Close' and 'Continue' is displayed below the header description.");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"'Close' and 'Continue' is not displayed below the header description.");
					flag = false;
				}
				if (FB.isFeedbackCloseButtonVisible())
				{
					FB.clickonFeedbackCloseButton();
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Unable to click on Feedback Close Button.");
					flag = false;
				}
				PrimaryCard pc=new PrimaryCard(testCase);
				if (pc.isBackButtonAvailable())
				{
					Keyword.ReportStep_Pass(testCase, "Successfully Screen Navigate to previous screen");
					navigateToPrimaryCard(testCase);
				}
				else if (FB.isNotificationsIconVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Successfully Screen Navigate to previous screen");
				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Uanble to verified discreption 'Thanks for your Rating'");
				flag = false;
			}

		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to click on 5th star");
			flag = false;
		}

		return flag;
	}

	public static boolean verifyFromTimeAPI(TestCases testCase,TestCaseInputs inputs, String fromTimeToBeVerified) {
		boolean flag = true;
		try {
			SimpleDateFormat date12Format = new SimpleDateFormat("hh:mm a");;
			SimpleDateFormat date24Format = new SimpleDateFormat("HH:mm");
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			CHILUtil cUtil = new CHILUtil(inputs);
			JSONObject obj = cUtil.getVacationTime(testCase);
			
			Date startDate = vacationDateFormat.parse(cUtil.getVacationTime(testCase).getString("vacationStart"));// Set start date
			String displayedFromTime = date24Format.format(startDate);
			String fromTime12hours = date12Format.format(vacationDateFormat.parse(fromTimeToBeVerified));
			String fromTime24hours = date24Format.format(vacationDateFormat.parse(fromTimeToBeVerified));
			System.out.println(fromTime12hours);
			
			testCase.getTestCaseInputs().setInputValue("startTime" , displayedFromTime);
			
			String displayedToTime = vacationDateFormat.parse(cUtil.getVacationTime(testCase).getString("vacationEnd")).toString();
			
			testCase.getTestCaseInputs().setInputValue("endTime" , displayedToTime);
			Keyword.ReportStep_Pass(testCase, "Verify From Time : Verifying from time is set to : "
					+ fromTime12hours + " / " + fromTime24hours);
			if (displayedFromTime.replaceAll("\\.", "").toUpperCase().contains(fromTime12hours)
					|| displayedFromTime.replaceAll("\\.", "").toUpperCase().contains(fromTime24hours)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Set Period Time : From time is set to " + displayedFromTime);
			}
			else if (fromTime12hours.contains(displayedFromTime)
					|| fromTime24hours.toUpperCase().contains(displayedFromTime)) {
				Keyword.ReportStep_Pass(testCase,
						"Verify Set Period Time : From time is set to " + displayedFromTime);
			}

			else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify Set Period Time : From time is not set to " + fromTime12hours + " / "
								+ fromTime24hours);
			}	
			
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Get Time Difference Between To and From Time : Error occurred : " + e.getMessage());
		}
		return flag;
	}
	
	public static boolean verifyFromTime(TestCases testCase, String fromTimeToBeVerified) {
		boolean flag = true;
		try {
			VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			String displayedFromTime = " ";
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				SimpleDateFormat date12Format = new SimpleDateFormat("hh:mm a");
				SimpleDateFormat date24Format = new SimpleDateFormat("HH:mm");
				String fromTime12hours = date12Format.format(vacationDateFormat.parse(fromTimeToBeVerified));
				String fromTime24hours = date24Format.format(vacationDateFormat.parse(fromTimeToBeVerified));
				displayedFromTime = vacaScreen.getVacationFromTimeAndroidValue();
				testCase.getTestCaseInputs().setInputValue("startTime" , displayedFromTime);
				String displayedToTime = vacaScreen.getVacationToTimeAndroidValue();
				testCase.getTestCaseInputs().setInputValue("endTime" , displayedToTime);
				Keyword.ReportStep_Pass(testCase, "Verify From Time : Verifying from time is set to : "
						+ fromTime12hours + " / " + fromTime24hours);
				if (displayedFromTime.replaceAll("\\.", "").toUpperCase().contains(fromTime12hours)
						|| displayedFromTime.replaceAll("\\.", "").toUpperCase().contains(fromTime24hours)) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Set Period Time : From time is set to " + displayedFromTime);
				}
				else if (fromTime12hours.contains(displayedFromTime)
						|| fromTime24hours.toUpperCase().contains(displayedFromTime)) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Set Period Time : From time is set to " + displayedFromTime);
				}

				else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Verify Set Period Time : From time is not set to " + fromTime12hours + " / "
									+ fromTime24hours);
				}
			} else {
				SimpleDateFormat date12Format = new SimpleDateFormat("EEE, MMM dd, yyyy, h:mm a");
				SimpleDateFormat date24Format = new SimpleDateFormat("EEE, MMM dd, yyyy, HH:mm");
				String fromTimeToBeVerified12Hours = date12Format
						.format(vacationDateFormat.parse(fromTimeToBeVerified));
				String fromTimeToBeVerified24Hours = date24Format
						.format(vacationDateFormat.parse(fromTimeToBeVerified));
				//	displayedFromTime = MobileUtils.getMobElements(fieldObjects, testCase, "FromAndToDates").get(0).getAttribute("value");
				displayedFromTime =vacaScreen.getVacationFromDateTimeIOSValue();
				String toDateAndTime = vacaScreen.getVacationToDateTimeIOSValue();
				testCase.getTestCaseInputs().setInputValue("startTime" , displayedFromTime);
				testCase.getTestCaseInputs().setInputValue("endTime" , toDateAndTime);
				Keyword.ReportStep_Pass(testCase, "Verify From Date : Verifying displayed from date with: "
						+ fromTimeToBeVerified12Hours + " / " + fromTimeToBeVerified24Hours);
				if (displayedFromTime.equals(fromTimeToBeVerified12Hours)
						|| displayedFromTime.equals(fromTimeToBeVerified24Hours)) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Set Period Time : From time is set to " + displayedFromTime);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Verify Set Period Time : From time is not set to " + fromTimeToBeVerified12Hours + " / "
									+ fromTimeToBeVerified24Hours);
				}
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify Set Period Time : Error occurred : " + e.getMessage());
		}
		return flag;
	}

	public static String getCurrentPSTTime(TestCases testCase) {
		String PSTTime = " ";
		try {

			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			Date date = new Date();
			vacationDateFormat.setTimeZone(TimeZone.getTimeZone("PST"));
			PSTTime = vacationDateFormat.format(date);
		} catch (Exception e) {
			PSTTime = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Convert Time to UTC Time : Error occurred : " + e.getMessage());
		}
		return PSTTime;
	}

	public static String getCurrentISTTime(TestCases testCase) {
		String ISTTime = " ";
		try {

			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			Date date = new Date();
			vacationDateFormat.setTimeZone(TimeZone.getTimeZone("IST"));
			ISTTime = vacationDateFormat.format(date);
		} catch (Exception e) {
			ISTTime = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Convert Time to UTC Time : Error occurred : " + e.getMessage());
		}
		return ISTTime;
	}

	public static String roundOffTimeToTheNearest10minutes(TestCases testCase, String time) {
		String roundOffTime = " ";
		try {
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			Calendar c = Calendar.getInstance();
			c.setTime(vacationDateFormat.parse(time));
			int minutes = c.get(Calendar.MINUTE);
			int Seconds = c.get(Calendar.SECOND);
			int mod = minutes % 10;
			int modSeconds= Seconds % 59 ;
			int diffMinutes = 10 - mod;
			int diffSeconds = 60 - modSeconds;
			c.add(Calendar.MINUTE, diffMinutes);
			if(diffMinutes==0 && diffSeconds>5) {
				c.add(Calendar.SECOND, diffSeconds);
				}else {
					c.add(Calendar.SECOND, 0);
				}
			
			roundOffTime = vacationDateFormat.format(c.getTime());
		} catch (Exception e) {
			roundOffTime = " ";
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Add days to date : Error occurred : " + e.getMessage());
		}
		return roundOffTime;
	}
	public static boolean verifyFromAndToDate(TestCases testCase, String fromDateToBeVerified,
			String toDateToBeVerified) {
		boolean flag = true;
		try {
			flag = flag && verifyFromDate(testCase, fromDateToBeVerified);
			flag = flag && verifyToDate(testCase, toDateToBeVerified);
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify To Date : Error occurred : " + e.getMessage());
		}
		return flag;
	}
	
	public static boolean verifyFromAndToDateAPI(TestCases testCase,TestCaseInputs inputs, String fromDateToBeVerified,
			String toDateToBeVerified) {
		boolean flag = true;
		
		try {
			SimpleDateFormat date12Format;
			SimpleDateFormat date24Format;
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			SimpleDateFormat displayedDateFormat = new SimpleDateFormat("EEE MMM dd, yyyy");
			String toTime = " ";
			CHILUtil cUtil = new CHILUtil(inputs);
			
			JSONObject obj = cUtil.getVacationTime(testCase);
			System.out.println("obj: "+obj);
			
			Date startDate = vacationDateFormat.parse(cUtil.getVacationTime(testCase).getString("vacationStart"));// Set start date
			Date endDate   = vacationDateFormat.parse(cUtil.getVacationTime(testCase).getString("vacationEnd"));// Set end date

			if(startDate.equals(vacationDateFormat.parse(fromDateToBeVerified))) {
				Keyword.ReportStep_Pass(testCase, "Verify From Time : From time is set to " + startDate);
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify From Time : From time is not set to " + fromDateToBeVerified);
			}
			
			if(endDate.equals(vacationDateFormat.parse(toDateToBeVerified))) {
				Keyword.ReportStep_Pass(testCase, "Verify To Time : To time is set to " + endDate);
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Verify To Time : To time is not set to " + toDateToBeVerified);
			}
			
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Get Time Difference Between To and From Time : Error occurred : " + e.getMessage());
		}
		
		return flag;
	}
	
	public static boolean verifyToTime(TestCases testCase, String toTimeToBeVerified) {
		boolean flag = true;
		try {

			VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			String displayedToTime = " ";
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				SimpleDateFormat date12Format = new SimpleDateFormat("hh:mm a");
				SimpleDateFormat date24Format = new SimpleDateFormat("HH:mm");
				String toTime12hours = date12Format.format(vacationDateFormat.parse(toTimeToBeVerified));
				String toTime24hours = date24Format.format(vacationDateFormat.parse(toTimeToBeVerified));
				displayedToTime = vacaScreen.getVacationToTimeAndroidValue();
				Keyword.ReportStep_Pass(testCase,
						"Verify To Time : Verifying to time is set to : " + toTime12hours + " / " + toTime24hours);
				if (displayedToTime.replaceAll("\\.", "").toUpperCase().contains(toTime12hours)
						|| displayedToTime.replaceAll("\\.", "").toUpperCase().contains(toTime24hours)) {
					Keyword.ReportStep_Pass(testCase, "Verify To Time : To time is set to " + displayedToTime);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Verify To Time : To time is not set to " + toTime12hours + " / " + toTime24hours);
				}
			} else {
				SimpleDateFormat date12Format = new SimpleDateFormat("EEE, MMM dd, yyyy, h:mm a");
				SimpleDateFormat date24Format = new SimpleDateFormat("EEE, MMM dd, yyyy, HH:mm");
				String toTimeToBeVerified12Hours = date12Format.format(vacationDateFormat.parse(toTimeToBeVerified));
				String toTimeToBeVerified24Hours = date24Format.format(vacationDateFormat.parse(toTimeToBeVerified));
				displayedToTime = vacaScreen.getVacationToDateTimeIOSValue();
				Keyword.ReportStep_Pass(testCase, "Verify To Time : Verifying displayed to time with: "
						+ toTimeToBeVerified12Hours + " / " + toTimeToBeVerified24Hours);
				if (displayedToTime.equals(toTimeToBeVerified12Hours)
						|| displayedToTime.equals(toTimeToBeVerified24Hours)) {
					Keyword.ReportStep_Pass(testCase, "Verify To Time : To time is set to " + displayedToTime);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Verify To Time : To time is not set to " + toTimeToBeVerified12Hours + " / "
									+ toTimeToBeVerified24Hours);
				}
			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify To Time : Error occurred : " + e.getMessage());
		}
		return flag;
	}
	public static boolean verifyFromDate(TestCases testCase, String fromDateToBeVerified) {
		boolean flag = true;
		try {
			VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				SimpleDateFormat dateFormat = new SimpleDateFormat("EEE MMM dd, yyyy");
				fromDateToBeVerified = dateFormat.format(vacationDateFormat.parse(fromDateToBeVerified));
				String fromDate = vacaScreen.getVacationFromDateAndroidValue();
				Keyword.ReportStep_Pass(testCase,
						"Verify From Date : Verifying displayed from date with: " + fromDateToBeVerified);
				if (fromDate.equals(fromDateToBeVerified)) {
					Keyword.ReportStep_Pass(testCase, "Verify From Date : Displayed from date is correct");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Verify From Date : Displayed from date is not correct. Displayed Date : " + fromDate);
				}
			} else {
				SimpleDateFormat date12Format = new SimpleDateFormat("EEE, MMM dd, yyyy, h:mm a");
				SimpleDateFormat date24Format = new SimpleDateFormat("EEE, MMM dd, yyyy, HH:mm");
				String fromDateToBeVerified12Hours = date12Format
						.format(vacationDateFormat.parse(fromDateToBeVerified));
				String fromDateToBeVerified24Hours = date24Format
						.format(vacationDateFormat.parse(fromDateToBeVerified));
				String fromDate = vacaScreen.getVacationFromDateTimeIOSValue();
				Keyword.ReportStep_Pass(testCase, "Verify From Date : Verifying displayed from date with: "
						+ fromDateToBeVerified12Hours + " / " + fromDateToBeVerified24Hours);
				if (fromDate.equals(fromDateToBeVerified12Hours) || fromDate.equals(fromDateToBeVerified24Hours)) {
					Keyword.ReportStep_Pass(testCase, "Verify From Date : Displayed from date is correct");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Verify From Date : Displayed from date is not correct. Displayed Date : " + fromDate);
				}
			}

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify From Date : Error occurred : " + e.getMessage());
		}
		return flag;
	}

	public static boolean verifyToDate(TestCases testCase, String toDateToBeVerified) {
		boolean flag = true;
		try {
			VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				SimpleDateFormat dateFormat = new SimpleDateFormat("EEE MMM dd, yyyy");
				toDateToBeVerified = dateFormat.format(vacationDateFormat.parse(toDateToBeVerified));
				String toDate = vacaScreen.getVacationToDateAndroidValue();
				Keyword.ReportStep_Pass(testCase,
						"Verify To Date : Verifying displayed to date with: " + toDateToBeVerified);
				if (toDate.equals(toDateToBeVerified)) {
					Keyword.ReportStep_Pass(testCase, "Verify To Date : Displayed to date is correct");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Verify To Date : Displayed to date is not correct. Displayed Date : " + toDate);
				}
			} else {
				SimpleDateFormat date12Format = new SimpleDateFormat("EEE, MMM dd, yyyy, h:mm a");
				SimpleDateFormat date24Format = new SimpleDateFormat("EEE, MMM dd, yyyy, HH:mm");
				String toDateToBeVerified12Hours = date12Format.format(vacationDateFormat.parse(toDateToBeVerified));
				String toDateToBeVerified24Hours = date24Format.format(vacationDateFormat.parse(toDateToBeVerified));
				String toDate = vacaScreen.getVacationToDateTimeIOSValue();
				Keyword.ReportStep_Pass(testCase, "Verify To Date : Verifying displayed to date with: "
						+ toDateToBeVerified12Hours + " / " + toDateToBeVerified24Hours);
				if (toDate.equals(toDateToBeVerified12Hours) || toDate.equals(toDateToBeVerified24Hours)) {
					Keyword.ReportStep_Pass(testCase, "Verify To Date : Displayed to date is correct");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Verify To Date : Displayed to date is not correct. Displayed Date : " + toDate);
				}
			}

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify To Date : Error occurred : " + e.getMessage());
		}
		return flag;
	}

	public static boolean setFromAndToDateAndTime(TestCases testCase, String fromDateAndTimeToBeSet,
			String toDateAndTimeToBeSet) {
		boolean flag = true;
		try {
			flag = flag && setFromDateAndTime(testCase, fromDateAndTimeToBeSet);
			flag = flag && setToDateAndTime(testCase, toDateAndTimeToBeSet);
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Set To And From Date : Error occurred : " + e.getMessage());
		}
		return flag;
	}

	public static boolean setFromAndToDateAndTimeAPI(TestCases testCase, TestCaseInputs inputs, String fromDateAndTimeToBeSet,String toDateAndTimeToBeSet) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			CHILUtil cUtil = new CHILUtil(inputs);
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			long locationID = locInfo.getLocationID();
			String deviceID = statInfo.getDeviceID();
			
			if(cUtil.getConnection()) {
				int result = cUtil.setVacationToAndFromDateTime(locationID, deviceID, fromDateAndTimeToBeSet, toDateAndTimeToBeSet);
				if (result == 200) {
					Keyword.ReportStep_Pass(testCase,"Vacation date is set From: "+fromDateAndTimeToBeSet +" and to: "+toDateAndTimeToBeSet);
				}else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Set Vacation to and from date ");
				}
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Fail to establish connection via chill : ");
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Set To And From Date : Error occurred : " + e.getMessage());
		}
		return flag;
	}
	
	public static boolean setFromDateAndTime(TestCases testCase, String fromDateAndTime) {
		boolean flag = true;
		VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);
		if (!MobileUtils.isRunningOnAndroid(testCase)) {
			try {
				vacaScreen.clickOnFromDateVacation();
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Set From Date And Time : Failed to click on from date and time");
			}
		}
		flag = flag && setFromDate(testCase, fromDateAndTime);
		flag = flag && setFromTime(testCase, fromDateAndTime);
		if (!MobileUtils.isRunningOnAndroid(testCase)) {
			try {
				vacaScreen.clickOnFromDateVacation();
				flag = flag && true;
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Set From Date And Time : Failed to click on from date and time");
			}
		}
		return flag;
	}
	public static boolean setFromDate(TestCases testCase, String fromDateToBeSet) {
		boolean flag = true;
		try {
			VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);

			Keyword.ReportStep_Pass(testCase, "Setting from date to : " + fromDateToBeSet);
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				vacaScreen.clickOnFromDatesAndroid();
				flag = flag && setDateToCalendar(testCase, fromDateToBeSet);
			} else {
				SimpleDateFormat dateFormat = new SimpleDateFormat("EEE, MMM dd");
				SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
				String dateToBeSet = dateFormat.format(vacationDateFormat.parse(fromDateToBeSet));
				String currDate=getCurrentPSTTime(testCase);
				String currDateFormat = dateFormat.format(vacationDateFormat.parse(currDate));
				if(!(currDateFormat.contains(dateToBeSet)))
				{
					flag = flag && vacaScreen.setVacationDateIOS(dateToBeSet);
				}
			}
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Set From Date : Error occurred : " + e.getMessage());
		}
		return flag;
	}

	public static boolean setToDate(TestCases testCase, String toDateToBeSet) {
		boolean flag = true;
		try {
			Keyword.ReportStep_Pass(testCase, "Setting to date to : " + toDateToBeSet);
			VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);

			if (MobileUtils.isRunningOnAndroid(testCase)) {
				vacaScreen.clickOnToDatesAndroid();
				flag = flag && setDateToCalendar(testCase, toDateToBeSet);
			} else {
				SimpleDateFormat dateFormat = new SimpleDateFormat("EEE, MMM dd");
				SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
				String dateToBeSet = dateFormat.format(vacationDateFormat.parse(toDateToBeSet));
				
				try {
					if(dateFormat.format(vacationDateFormat.parse(optikUtils.addMinutesToDate(testCase,
							optikUtils.roundOffTimeToTheNearest15minutes(testCase, optikUtils.getCurrentUTCTime(testCase)),
							60))).equals(dateToBeSet)) {
						dateToBeSet="Today";
					}
				} catch (Exception e) {
					// TODO: handle exception
				}
				System.out.println(dateToBeSet);
				flag = flag && vacaScreen.setVacationDateIOS(dateToBeSet);
			}
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Set To Date : Error occurred : " + e.getMessage());
		}
		return flag;
	}

	public static boolean setToDateAndTime(TestCases testCase, String toDateAndTime) {
		boolean flag = true;
		VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);

		if (!MobileUtils.isRunningOnAndroid(testCase)) {
			try {
				vacaScreen.clickOnToDateVacationIOS();
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Set To Date And Time : Failed to click on To date and time");
			}
		}
		flag = flag && setToDate(testCase, toDateAndTime);
		flag = flag && setToTime(testCase, toDateAndTime);
		if (!MobileUtils.isRunningOnAndroid(testCase)) {
			try {
				vacaScreen.clickOnToDateVacationIOS();
				//MobileUtils.getMobElements(fieldObjects, testCase, "ToDateVacation").get(1).click();
				flag = flag && true;
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Set To Date And Time : Failed to click on to date and time");
			}
		}
		return flag;
	}
	public static boolean setFromTime(TestCases testCase, String time) {
		boolean flag = true;
		VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);

		Keyword.ReportStep_Pass(testCase, "Set From Time : Setting from time to " + time);
		if (MobileUtils.isRunningOnAndroid(testCase)) {
			vacaScreen.clickOnFromTimeAndroid();
		}
		flag = flag && setVacationTime(testCase, time);
		return flag;
	}

	public static boolean setDateToCalendar(TestCases testCase, String date) {
		boolean flag = true;
		VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);
		if (MobileUtils.isRunningOnAndroid(testCase)) {
			try {

				WebElement displayedDate = MobileUtils.getMobElements(testCase, "xpath", "//android.view.View").get(1);
				String currentDate = displayedDate.getAttribute("content-desc");
				SimpleDateFormat dateFormat = new SimpleDateFormat("dd MMMMM yyyy");
				SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
				Date d1 = dateFormat.parse(currentDate);
				Calendar c1 = Calendar.getInstance();
				c1.setTime(d1);
				int displayedYear = c1.get(Calendar.YEAR);
				int displayedMonth = c1.get(Calendar.MONTH);
				String dateToSet = dateFormat.format(vacationDateFormat.parse(date));
				Keyword.ReportStep_Pass(testCase, "Set Date To Calendar : Setting date to " + dateToSet);
				Calendar c = Calendar.getInstance();
				c.setTime(vacationDateFormat.parse(date));
				int yearToSet = c.get(Calendar.YEAR);
				int monthToSet = c.get(Calendar.MONTH);
				WebElement ele = MobileUtils.getMobElement(testCase, "XPATH","//*[@resource-id='android:id/animator']");
				Dimension d = ele.getSize();
				Point p = ele.getLocation();
				int startx = 0;
				int starty = 0;
				int endx = 0;
				int endy = 0;
				while (yearToSet != displayedYear) {
					if (yearToSet < displayedYear) {
						startx = p.getX() + d.getWidth() / 2;
						starty = p.getY() + 10;
						endx = p.getX() + d.getWidth() / 2;
						endy = p.getY() + d.getHeight() - 20;
					} else if (yearToSet > displayedYear) {
						startx = p.getX() + d.getWidth() / 2;
						starty = p.getY() + d.getHeight() - 10;
						endx = p.getX() + d.getWidth() / 2;
						endy = p.getY() + 20;
					}
					testCase.getMobileDriver().swipe(startx, starty, endx, endy, 2000);
					displayedDate = MobileUtils.getMobElements(testCase, "xpath", "//android.view.View").get(1);
					currentDate = displayedDate.getAttribute("name");
					d1 = dateFormat.parse(currentDate);
					c1 = Calendar.getInstance();
					c1.setTime(d1);
					displayedYear = c1.get(Calendar.YEAR);
					displayedMonth = c1.get(Calendar.MONTH);
				}
				while (monthToSet != displayedMonth) {
					if (monthToSet < displayedMonth) {
						startx = p.getX() + d.getWidth() / 2;
						starty = p.getY() + 10;
						endx = p.getX() + d.getWidth() / 2;
						endy = p.getY() + d.getHeight() - 20;
					} else if (monthToSet > displayedMonth) {
						startx = p.getX() + d.getWidth() / 2;
						starty = p.getY() + d.getHeight() - 10;
						endx = p.getX() + d.getWidth() / 2;
						endy = p.getY() + 20;
					}
					testCase.getMobileDriver().swipe(startx, starty, endx, endy, 2000);
					displayedDate = MobileUtils.getMobElements(testCase, "xpath", "//android.view.View").get(1);
					currentDate = displayedDate.getAttribute("name");
					d1 = dateFormat.parse(currentDate);
					c1 = Calendar.getInstance();
					c1.setTime(d1);
					displayedMonth = c1.get(Calendar.MONTH);
				}
				try {
					WebElement dateToSelect = testCase.getMobileDriver()
							.findElement(By.xpath("//android.view.View[contains(@content-desc,'" + dateToSet + "')]"));
					dateToSelect.click();
					Keyword.ReportStep_Pass(testCase, "Set Date To Calendar : Successfully set date to " + dateToSet);
				} catch (NoSuchElementException e) {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Set Date To Calendar : Unable to find date in Calendar");
				}

				if(vacaScreen.isOkButtonVisible(5)) {
					flag = flag && vacaScreen.ClickOnOkButton();
				}
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Set Date To Calendar : Error occurred : " + e.getMessage());
			}
		}
		return flag;
	}
	public static boolean setToTime(TestCases testCase, String time) {
		boolean flag = true;
		VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);

		Keyword.ReportStep_Pass(testCase, "Set To Time : Setting to time to " + time);
		if (MobileUtils.isRunningOnAndroid(testCase)) {
			vacaScreen.clickOnToTimeDroid();
		}
		flag = flag && setVacationTime(testCase, time);
		return flag;
	}
	public static boolean setVacationTime(TestCases testCase, String time) {
		boolean flag = true;
		try {
			String time24hours = " ";
			String time12hours = " ";
			String timeToSet = " ";
			VacationSettingScreen vacaScreen= new VacationSettingScreen(testCase);

			//HashMap<String, MobileObject> fieldObjects = MobileUtils.loadObjectFile(testCase, "VacationSettings");
			SimpleDateFormat date12Format = new SimpleDateFormat("hh:mm a");
			SimpleDateFormat date24Format = new SimpleDateFormat("HH:mm");
			SimpleDateFormat vacationDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			time24hours = date24Format.format(vacationDateFormat.parse(time));
			time12hours = date12Format.format(vacationDateFormat.parse(time));
			String hours = time12hours.split(":")[0];
			String minutes = time12hours.split(":")[1].split(" ")[0];
			String ampm = time12hours.split(":")[1].split(" ")[1];
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				if (MobileUtils.isMobElementExists("id", "ampm_label", testCase, 3, false)
						|| MobileUtils.isMobElementExists("id", "am_label", testCase, 3, false)
						|| MobileUtils.isMobElementExists("id", "pm_label", testCase, 3, false)) {
					if (ampm.equalsIgnoreCase("AM")) {
						ampm = "A.M.";
					} else {
						ampm = "P.M.";
					}
					timeToSet = hours + ":" + minutes + ampm;
				} else {
					timeToSet = time24hours;
				}
				Keyword.ReportStep_Pass(testCase, "Set Vacation Time : Setting time to " + timeToSet);
				if (vacaScreen.setTimeAndroid(timeToSet))
				{
					Keyword.ReportStep_Pass(testCase,
							"Set Vacation Time : Successfully set time " + timeToSet + " to time picker");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Set Vacation Time : Failed to set time " + timeToSet + " to time picker");
				}
				flag = flag && vacaScreen.ClickOnOkButton();
			} else {
				if (MobileUtils.isMobElementExists("xpath", "//XCUIElementTypePickerWheel[4]", testCase, 3)) {
					if (ampm.equalsIgnoreCase("AM")) {
						ampm = "AM";
					} else {
						ampm = "PM";
					}
					timeToSet = hours + ":" + minutes + ampm;
					hours = String.valueOf(Integer.parseInt(hours));
					flag = flag && MobileUtils.setValueInPicker(testCase, "xpath", "//XCUIElementTypePickerWheel[2]", hours);
					flag = flag && MobileUtils.setValueInPicker(testCase, "xpath", "//XCUIElementTypePickerWheel[3]", minutes);
					flag = flag && MobileUtils.setValueInPicker(testCase, "xpath", "//XCUIElementTypePickerWheel[4]", ampm);
				} else {
					timeToSet = time24hours;
					hours = time24hours.split(":")[0];
					minutes = time24hours.split(":")[1];
					flag = flag && MobileUtils.setValueInPicker(testCase, "xpath", "//UIAPickerWheel[2]", hours);
					flag = flag && MobileUtils.setValueInPicker(testCase, "xpath", "//UIAPickerWheel[3]", minutes);
				}

			}
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Set Vacation Time : Error occurred : " + e.getMessage());
		}
		return flag;
	}
	public static boolean verifyFromAndToTime(TestCases testCase, String fromTimeToBeVerified,
			String toTimeToBeVerified) {
		boolean flag = true;
		try {
			flag = flag && verifyFromTime(testCase, fromTimeToBeVerified);
			flag = flag && verifyToTime(testCase, toTimeToBeVerified);
		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Verify From And To Time : Error occurred : " + e.getMessage());
		}
		return flag;
	}

	public static boolean verifyFilterReminderValues(TestCases testCase, boolean expectingValue) {
		boolean flag = true;

		FilterReminderScreen frs=new FilterReminderScreen(testCase);

		if (MobileUtils.isRunningOnAndroid(testCase)) {
			if (frs.isFilterReminderTextVisible()) {
				if (expectingValue) {
					if (frs.getFilterReminderToggleStatus()
							.equalsIgnoreCase("On")||frs.getFilterReminderToggleStatus()
							.equalsIgnoreCase("1")||frs.getFilterReminderToggleStatus()
							.equalsIgnoreCase("True")) {
						Keyword.ReportStep_Pass(testCase, "Alerady Filter Reminder toggle is enabled");
					} else {
						frs.enableFilterReminderToggle();
						Keyword.ReportStep_Pass(testCase, "Successfully click on Filter Reminder toggle  is enabled");
					}
					if (frs.isReplaceFilterEveryLabelVisible()) {
						Keyword.ReportStep_Pass(testCase,
								"Replace Filter Every: " + frs.getReplaceFiltervalue()
								+ " is shown");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Replace Filter Every value is not shown");
					}
					if (frs.isFilterLastReplacedLabelVisible()) {
						Keyword.ReportStep_Pass(testCase,
								"Filter Last Replaced: " + frs.getFilterLastReplacedValue()
								+ " is shown");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Filter Last Replaced value is not shown");
					}
					if (frs.isNextScheduledReminderLabelVisible()) {
						Keyword.ReportStep_Pass(testCase,
								"Next Scheduled Reminder: " + frs.getNextScheduleValue()
								+ " is shown");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Next Scheduled Reminder value is not shown");
					}

					/*if (frs.isHowDoIChangeMyFilterVisible()) {
					Keyword.ReportStep_Pass(testCase,
							frs.getHowDoIChangeMyFilterValue()+ " is shown");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"''How do I change my filter'' is not shown");
				}*/

				}
			}

		} else {
			if (frs.isFilterReminderTextVisible()) {
				if (expectingValue) {
					if (frs.getFilterReminderToggleStatus()
							.equalsIgnoreCase("true") || frs.getFilterReminderToggleStatus()
							.equalsIgnoreCase("1") ) {
						Keyword.ReportStep_Pass(testCase, "Alerady Filter Reminder toggle is enabled");
					} else {
						frs.enableFilterReminderToggle();
						Keyword.ReportStep_Pass(testCase, "Successfully click on Filter Reminder toggle  is enabled");
					}
					if (frs.isReplaceFilterEveryLabelVisible()) {
						Keyword.ReportStep_Pass(testCase,
								"Replace Filter Every: "
										+ frs.getReplaceFiltervalue()+ " is shown");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Replace Filter Every value is not shown");
					}
					if (frs.isFilterLastReplacedLabelVisible()) {
						Keyword.ReportStep_Pass(testCase,
								"Filter Last Replaced: "
										+ frs.getFilterLastReplacedValue()+ " is shown");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Filter Last Replaced value is not shown");
					}
					if (frs.isNextScheduledReminderLabelVisible()) {
						Keyword.ReportStep_Pass(testCase,
								"Next Scheduled Reminder: " + frs.getNextScheduleValue() + " is shown");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Next Scheduled Reminder value is not shown");
					}

					/*if (frs.isHowDoIChangeMyFilterVisible()) {
						Keyword.ReportStep_Pass(testCase,
								frs.getHowDoIChangeMyFilterValue()+ " is shown");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"''How do I change my filter'' is not shown");
					}
*/

					if (frs.isRecurrDetailsVisible()) {
						Keyword.ReportStep_Pass(testCase,
								frs.getRecurrDetailsValue()+ " is shown");
					}
				}
		}

		}
		return flag;
	}

	public static boolean logintooptikWithInvalidPassword(TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag=true;
		LoginScreen ls = new LoginScreen(testCase);
		if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
			flag = flag && ls.clickOnLoginButton();
		}


		if (ls.setEmailAddressValue(inputs.getInputValue("USERID").toString()))
		{
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			Keyword.ReportStep_Pass(testCase,
					"Login To optik : Email Address set to - " + inputs.getInputValue("USERID").toString());
		}
		else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Login To optik : Not able to set Email Address.");
			flag = false;
		}
		//if (ls.setPasswordValue("Balaji123"))
		if (ls.setPasswordValue(GlobalVariables.Invalid_Pwd))
		{
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				ls.clickOnoptikLogo();
			}
			Keyword.ReportStep_Pass(testCase, "Login To optik : Password set to - " + GlobalVariables.Invalid_Pwd);
		}
		else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Login To optik : Not able to set Password.");
			flag = false;
		}
		if (ls.isLoginButtonVisible()) {
			flag = flag && ls.clickOnLoginButton();
		} else {
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
		}

		if(ls.isLoginInvalidPwdErrorMsgVisible()||ls.isLoginInvalidEmailAddErrorMsgVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Unable to login. Email or password incorrect.Invalid Password Error message is displayed.");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Uanble to verify Invalid Password Error Message.");
			flag = false;
		}

		/*if (!MobileUtils.isRunningOnAndroid(testCase))
		{
			ls.clickOnOKButton();
		}*/

		return flag;
	}

	public static boolean logintooptikWithSpecialCredentials(TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag=true;
		LoginScreen ls = new LoginScreen(testCase);
		String splEmail="maat@@grr!la";
		String splPassword="$@##!*%&&";
		if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
			flag = flag && ls.clickOnLoginButton();
		}

		if (ls.setEmailAddressValue(splEmail))
		{
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			Keyword.ReportStep_Pass(testCase,
					"Login To optik : Email Address set to - " + splEmail);
		}
		else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Login To optik : Not able to set Email Address.");
			flag = false;
		}
		//if (ls.setPasswordValue("Balaji123"))
		if (ls.setPasswordValue(splPassword))
		{
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				ls.clickOnoptikLogo();
			}
			Keyword.ReportStep_Pass(testCase, "Login To optik : Password set to - " + splPassword);
		}
		else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Login To optik : Not able to set Password.");
			flag = false;
		}


		if(ls.isLoginButtonDisabled())
		{
			Keyword.ReportStep_Pass(testCase, "Unable to login. Login button is Disabled");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Uanble to verify Login Button");
			flag = false;
		}

		if(!ls.clickOnCancelButton())
		{
			flag=false;
		}

		return flag;
	}

	public static boolean logintooptikWithInvalidEmailAddress(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		LoginScreen ls = new LoginScreen(testCase);

		ls.setEmailAddressValue(" ");
		
		if (ls.setEmailAddressValue(GlobalVariables.Invalid_EmailID))
		{
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			Keyword.ReportStep_Pass(testCase,
					"Login To optik : Email Address set to - " + GlobalVariables.Invalid_EmailID);
		}
		else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Login To optik : Not able to set Email Address.");
			flag = false;
		}
		if (ls.setPasswordValue(GlobalVariables.valid_Pwd))
		{
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				ls.clickOnoptikLogo();
			}
			Keyword.ReportStep_Pass(testCase, "Login To optik : Password set to - " + GlobalVariables.valid_Pwd);
		}
		else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Login To optik : Not able to set Password.");
			flag = false;
		}
		if (ls.isLoginButtonVisible()) {
			flag = flag && ls.clickOnLoginButton();
		} else {
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
		}

		if(ls.isLoginInvalidPwdErrorMsgVisible()||ls.isLoginInvalidEmailAddErrorMsgVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Unable to login. Email or password incorrect.Invalid Email Address Error message is displayed.");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Uanble to verify Invalid Password Error Message.");
			flag = false;
		}

		/*if (!MobileUtils.isRunningOnAndroid(testCase))
		{
			ls.clickOnOKButton();
		}*/


		return flag;
	}

	public static boolean logintooptikWithvalidEmailAddresswithSpace(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		LoginScreen ls = new LoginScreen(testCase);

		ls.setEmailAddressValue(" ");
		ls.setPasswordValue(" ");
		if (ls.setEmailAddressValue(" "+inputs.getInputValue("USERID").toString())) {
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			Keyword.ReportStep_Pass(testCase,
					"Login To optik :Email Address with space set to -"+"  "+inputs.getInputValue("USERID"));
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Login To optik : Not able to set Email Address.");
			flag = false;
		}

		if (ls.setPasswordValue((inputs.getInputValue("PASSWORD").toString()))) {
		
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				ls.clickOnoptikLogo();
			}
			Keyword.ReportStep_Pass(testCase, "Login To optik : Password set to - " + GlobalVariables.valid_Pwd);
		}
		else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Login To optik : Not able to set Password.");
			flag = false;
		}
		if (ls.isLoginButtonVisible()) {
			flag = flag && ls.clickOnLoginButton();
			Keyword.ReportStep_Pass(testCase, "Sucessfully Login ");
		} else {
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
		}
		boolean closeCoachMarks = false;
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(ls.isLoginButtonDisabled())
			{
				Keyword.ReportStep_Pass(testCase, "Login Button is disabled.");
			}

			if(ls.isLoginInvalidPwdErrorMsgVisible()||ls.isLoginInvalidEmailAddErrorMsgVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Your email address or password is invalid..");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Uanble to verify Your email address or password is invalid Error Message.");
				flag = false;
			}

		}
		else
		{
			if(optikUtils.verifyLoginSuccess(testCase, inputs, closeCoachMarks))
			{
				Keyword.ReportStep_Pass(testCase, "Successfully app allows user to login.");
			}
			/*else if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				ls.clickOnOKButton();
			}*/
		}

		return flag;
	}

	
	public static boolean setVentilationTimerNegativeAPI(TestCases testCase, TestCaseInputs inputs,int valueToSet) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			CHILUtil cUtil = new CHILUtil(inputs);
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			long locationID = locInfo.getLocationID();
			String deviceID = statInfo.getDeviceID();
			
			if(cUtil.getConnection()) {
				int result = cUtil.setVentilationTimer(locationID, deviceID,valueToSet);
				if (result == 400 || result == 404) {
					Keyword.ReportStep_Pass(testCase,"Unable to set ventilation timer to: "+valueToSet);
				}else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Successfully Set ventilation timer to "+valueToSet);
				}
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Fail to establish connection via chill ");
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : ventilation " + e.getMessage());
		}
		return flag;
	}
	
	public static boolean clearActivityHistoryAPI(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			CHILUtil cUtil = new CHILUtil(inputs);
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			long locationID = locInfo.getLocationID();
			String deviceID = statInfo.getDeviceID();
			
			if(cUtil.getConnection()) {
				int result = cUtil.clearActivityHistory(locationID, deviceID);
				if (result == 200) {
					Keyword.ReportStep_Pass(testCase,"Successfully cleared Activity History");
				}else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to clear Activity History");
				}
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Fail to establish connection via chill ");
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : ventilation " + e.getMessage());
		}
		return flag;
	}
	
	public static boolean verifySetVentilationTimerNegativeAPI(TestCases testCase, TestCaseInputs inputs,int expectedValue) {
		Boolean flag = true;
		try {
			Thread.sleep(5000);
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			int ventilationTimerValue = statInfo.getCurrentVentilationTimerValue();
			
			if(ventilationTimerValue != expectedValue) {
				Keyword.ReportStep_Pass(testCase,"Verified Ventilation timer didn't set to "+expectedValue);
			}else {
				flag=false;
				
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Ventilation timer set to: "+expectedValue);
			}
			
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : ventilation " + e.getMessage());
		}
		return flag;
	}
	
	
	public static boolean verifySetVentilationTimerAPI(TestCases testCase, TestCaseInputs inputs,int expectedValue) {
		Boolean flag = true;
		try {
			Thread.sleep(5000);
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			int ventilationTimerValue = statInfo.getCurrentVentilationTimerValue();
			
			if(ventilationTimerValue == expectedValue) {
				Keyword.ReportStep_Pass(testCase,"Successfully verified ventilation timer set to: "+expectedValue);
			}else {
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Ventilation timer didn't set to "+expectedValue);
			}
			
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : ventilation " + e.getMessage());
		}
		return flag;
	}
	
	public static boolean setVentilationTimerAPI(TestCases testCase, TestCaseInputs inputs,int valueToSet) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			CHILUtil cUtil = new CHILUtil(inputs);
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			long locationID = locInfo.getLocationID();
			String deviceID = statInfo.getDeviceID();
			
			if(cUtil.getConnection()) {
				int result = cUtil.setVentilationTimer(locationID, deviceID,valueToSet);
				if (result == 200) {
					Keyword.ReportStep_Pass(testCase,"Successfully set ventilation timer to: "+valueToSet);
				}else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Set ventilation timer to "+valueToSet);
				}
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Fail to establish connection via chill : ");
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : ventilation " + e.getMessage());
		}
		return flag;
	}
	
	
	public static boolean setVentilationModeNegativeAPI(TestCases testCase, TestCaseInputs inputs,String modeToSet) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			CHILUtil cUtil = new CHILUtil(inputs);
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			long locationID = locInfo.getLocationID();
			String deviceID = statInfo.getDeviceID();
			
			if(cUtil.getConnection()) {
				int result = cUtil.setVentilationMode(locationID, deviceID,modeToSet);
				if (result == 400 || result == 404) {
					Keyword.ReportStep_Pass(testCase,"Unable set ventilation mode to: "+modeToSet);
				}else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Successfully Set ventilation mode to "+modeToSet);
				}
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Fail to establish connection via chill : ");
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : ventilation " + e.getMessage());
		}
		return flag;
	}
	
	
	public static boolean verifySetVentilationModeNegativeAPI(TestCases testCase, TestCaseInputs inputs,String expectedMode) {
		boolean flag = true;
		try {
			Thread.sleep(5000);
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			String ventilationMode = statInfo.getCurrentVentilationMode();
			
			if(!ventilationMode.equalsIgnoreCase(expectedMode)) {
				Keyword.ReportStep_Pass(testCase,"Verified ventilation mode didn't set to "+expectedMode);
			}else {
				flag=false;
				
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Ventilation mode set to: "+expectedMode);
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : ventilation " + e.getMessage());
		}
		return flag;
	}
	
	public static boolean setVacationToPermanentHoldAPI(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			CHILUtil cUtil = new CHILUtil(inputs);
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			long locationID = locInfo.getLocationID();
			String deviceID = statInfo.getDeviceID();
			
			if(cUtil.getConnection()) {
				int result = cUtil.setVacationToPermanentHold(locationID, deviceID);
				if (result == 200) {
					Keyword.ReportStep_Pass(testCase,"Successfully set Hold to Permanent hold");
				}else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Set Hold to Permanent");
				}
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Fail to establish connection via chill : ");
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : adhoc hold"+ e.getMessage());
		}
		return flag;
	}
	
	
	public static boolean setPriorityRoomToIDAPI(TestCases testCase, TestCaseInputs inputs,int roomID,String holdUntil) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			CHILUtil cUtil = new CHILUtil(inputs);
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			long locationID = locInfo.getLocationID();
			String deviceID = statInfo.getDeviceID();
			
			if(cUtil.getConnection()) {
				int result = cUtil.setPriorityRoomToID(locationID, deviceID, roomID , holdUntil);
				if (result == 200) {
					Keyword.ReportStep_Pass(testCase,"Successfully set room to"+roomID);
				}else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Set "+ roomID);
				}
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Fail to establish connection via chill : ");
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : "+ roomID + e.getMessage());
		}
		return flag;
	}
	
	public static boolean setPriorityRoomToActiveOrSelectedAPI(TestCases testCase, TestCaseInputs inputs,String roomType,String holdUntil) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			CHILUtil cUtil = new CHILUtil(inputs);
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			long locationID = locInfo.getLocationID();
			String deviceID = statInfo.getDeviceID();
			
			if(cUtil.getConnection()) {				
				int result = cUtil.setPriorityRoomToActiveOrSelected(locationID, deviceID, roomType , holdUntil);
				if (result == 200) {
					Keyword.ReportStep_Pass(testCase,"Successfully set room to"+roomType);
				}else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Set "+ roomType);
				}
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Fail to establish connection via chill : ");
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : "+ roomType + e.getMessage());
		}
		return flag;
	}
	public static boolean verifySelectedRoomsNegativeAPI(TestCases testCase, TestCaseInputs inputs,String expectedRoomID) {
		boolean flag = true;
		try {
			Thread.sleep(5000);
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			CHILUtil cUtil = new CHILUtil(inputs);
			JSONArray selectedRoomsArr = cUtil.getselectedRooms(testCase, statInfo.getDeviceID());
			
			for(int i = 0; i < selectedRoomsArr.length(); i++ ) {
				if(selectedRoomsArr.get(i).toString().equalsIgnoreCase(expectedRoomID)) {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Priority room ID set to: "+expectedRoomID);
					
					break;
				}
			}
			Keyword.ReportStep_Pass(testCase,"Verified priority room ID didn't set to "+expectedRoomID);
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : Priority " + e.getMessage());
		}
		return flag;
	}
	
	
	public static boolean moveSensorToRoomAPI(TestCases testCase, TestCaseInputs inputs, String moveToRoom,String roomType) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			CHILUtil cUtil = new CHILUtil(inputs);
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			long locationID = locInfo.getLocationID();
			String deviceID = statInfo.getDeviceID();
			
			if(cUtil.getConnection()) {
				int result = cUtil.moveSensorToRoom(locationID, deviceID, moveToRoom,roomType);
				if (result == 200) {
					Keyword.ReportStep_Pass(testCase,"Successfully moved sensor to room "+moveToRoom );
				}else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to move sensor to "+ moveToRoom );
				}
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Fail to establish connection via chill : ");
			}
			cUtil.close();
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : "+ moveToRoom + e.getMessage());
		}
		return flag;
	}
	
	public static boolean verifySetVentilationModeAPI(TestCases testCase, TestCaseInputs inputs,String expectedMode) {
		boolean flag = true;
		try {
			Thread.sleep(5000);
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			String ventilationMode = statInfo.getCurrentVentilationMode();
			
			if(ventilationMode.equalsIgnoreCase(expectedMode)) {
				Keyword.ReportStep_Pass(testCase,"Successfully verified ventilation mode set to: "+expectedMode);
			}else {
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Ventilation mode didn't set to "+expectedMode);
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : ventilation " + e.getMessage());
		}
		return flag;
	}
	
	public static boolean setVentilationModeAPI(TestCases testCase, TestCaseInputs inputs,String modeToSet) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			CHILUtil cUtil = new CHILUtil(inputs);
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			long locationID = locInfo.getLocationID();
			String deviceID = statInfo.getDeviceID();
			
			if(cUtil.getConnection()) {
				int result = cUtil.setVentilationMode(locationID, deviceID,modeToSet);
				if (result == 200) {
					Keyword.ReportStep_Pass(testCase,"Successfully set ventilation mode to: "+modeToSet);
				}else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Set ventilation mode to "+modeToSet);
				}
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Fail to establish connection via chill : ");
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : ventilation " + e.getMessage());
		}
		return flag;
	}
	
	
	public static boolean setHumidDemidifierWindowProtectoinLevelNegativeTestCaseAPI(TestCases testCase, TestCaseInputs inputs,String paramToSet,int valueToSet) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			CHILUtil cUtil = new CHILUtil(inputs);
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			long locationID = locInfo.getLocationID();
			String deviceID = statInfo.getDeviceID();
			
			if(cUtil.getConnection()) {
				int result = cUtil.setHumidDehumidWindowProtectionLevel(locationID, deviceID, paramToSet, valueToSet);
				if (result == 400 || result == 404) {
					Keyword.ReportStep_Pass(testCase,"Successfully not set "+paramToSet +" is to: "+valueToSet);
				}else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Set "+ paramToSet +" to "+valueToSet+ " successful");
				}
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Fail to establish connection via chill : ");
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : "+ paramToSet + e.getMessage());
		}
		return flag;
	}
	
	public static boolean setHumidDemidifierWindowProtectoinLevelAPI(TestCases testCase, TestCaseInputs inputs,String paramToSet,int valueToSet) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			CHILUtil cUtil = new CHILUtil(inputs);
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			long locationID = locInfo.getLocationID();
			String deviceID = statInfo.getDeviceID();
			
			if(cUtil.getConnection()) {
				int result = cUtil.setHumidDehumidWindowProtectionLevel(locationID, deviceID, paramToSet, valueToSet);
				if (result == 200) {
					Keyword.ReportStep_Pass(testCase,"Successfully set "+paramToSet +" is to: "+valueToSet);
				}else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Set "+ paramToSet +" to "+valueToSet);
				}
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Fail to establish connection via chill : ");
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : "+ paramToSet + e.getMessage());
		}
		return flag;
	}
	
	public static boolean setHumidDemidifierNegativeTestCaseAPI(TestCases testCase, TestCaseInputs inputs, Boolean paramStatus,String paramToSet,int valueToSet) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			CHILUtil cUtil = new CHILUtil(inputs);
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			long locationID = locInfo.getLocationID();
			String deviceID = statInfo.getDeviceID();
			
			if(cUtil.getConnection()) {
				int result = cUtil.setHumidDehumid(locationID, deviceID, paramToSet, paramStatus, valueToSet);
				if (result == 400 || result == 404) {
					Keyword.ReportStep_Pass(testCase,"Successfully not Set "+paramToSet +" is to: "+valueToSet);
				}else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Successfully Set "+ paramToSet +" to "+valueToSet);
				}
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Fail to establish connection via chill : ");
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : "+ paramToSet + e.getMessage());
		}
		return flag;
	}

	
	public static boolean setHumidDemidifierAPI(TestCases testCase, TestCaseInputs inputs, Boolean paramStatus,String paramToSet,int valueToSet) {
		boolean flag = true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			CHILUtil cUtil = new CHILUtil(inputs);
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			long locationID = locInfo.getLocationID();
			String deviceID = statInfo.getDeviceID();
			
			if(cUtil.getConnection()) {
				int result = cUtil.setHumidDehumid(locationID, deviceID, paramToSet, paramStatus, valueToSet);
				if (result == 200) {
					Keyword.ReportStep_Pass(testCase,"Successfully set "+paramToSet +" is to: "+valueToSet);
				}else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Set "+ paramToSet +" to "+valueToSet);
				}
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Fail to establish connection via chill : ");
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : "+ paramToSet + e.getMessage());
		}
		return flag;
	}
	
	
	public static boolean navigateToFeedback(TestCases testCase) {

		boolean flag = true;
		Dashboard db = new Dashboard(testCase);
		SecondaryCardSettings sc = new SecondaryCardSettings(testCase);
		try {
			Thread.sleep(7000);
			if(db.isGlobalDrawerButtonVisible(5))
			{
				if( db.clickOnGlobalDrawerButton())
				{

					if (MobileUtils.isRunningOnAndroid(testCase))
					{
						testCase.getMobileDriver().scrollTo("Logout") ;
					}
					else
					{
						try
						{
							if(testCase.getTestCaseInputs().isRunningOn("Perfecto"))
							{
								boolean success=false;
								Dimension dimension = testCase.getMobileDriver().manage().window().getSize();
								TouchAction action = new TouchAction(testCase.getMobileDriver());
								for (int i = 0; i < 3; ++i) {
									if (success) {
										break;
									}
									try {
										action.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.5))).release().perform();
									} catch (Exception e) {
									}
									FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(testCase.getMobileDriver());
									fWait.withTimeout(5, TimeUnit.SECONDS);
									fWait.pollingEvery(500, TimeUnit.MILLISECONDS);
									try {
										WebElement logoutElement = fWait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[(contains(@label,'Logout') or (contains(@value,'Logout')))]")));
										if (logoutElement != null) {
											success = true;
										}
									} catch (TimeoutException e) {
										// Retry again
									}
								}
							}
							else
							{
								flag =flag && optikUtils.scrollToElementUsingExactAttributeValue(testCase, "value", "Logout");
							}
						}
						catch (Exception e)
						{
							e.printStackTrace();
							flag=false;
						}
					}

					sc.selectOptionFromSecondarySettings("About the app");


					if(sc.selectOptionFromSecondarySettings("Rate the app"))
					{

						Keyword.ReportStep_Pass(testCase, "Successfully navigated to Rate MyApp screen");
					}
					else
					{
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed to find the Rate the App ");
					}

				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Failed to click the global drawer option");

				}
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed to locate global drawer option");
				flag = false;
			}
		} catch (Exception e) {

			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Exception : navigateToFeedback :" + e.getMessage());
			flag = false;
		}
		return flag;
	}
	public static boolean verifyErrorMsgOnChangePasswordScreen(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;

		MyAccountScreen ms=new MyAccountScreen(testCase);
		ChangePasswordScreen cps=new ChangePasswordScreen(testCase);

		if(ms.isChangePasswordButtonVisible(3))
		{
			ms.navigateToChangePasswordScreen();
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Unable to navigate on Change Password screen");
		}

		//Scenario 1
		if(cps.isOldPasswordTextFieldVisible())
		{
			if(cps.setOldPassword(inputs.getInputValue("PASSWORD").toString()))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set Old Password as a :"+inputs.getInputValue("PASSWORD").toString());
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Old Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isNewPasswordTextFieldVisible())
		{
			cps.clearTextField("NewPassword");
			if(cps.setNewPassword(inputs.getInputValue("PASSWORD").toString()))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set New Password as a :"+inputs.getInputValue("PASSWORD").toString());
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set New Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isVerifyNewPasswordTextFieldVisible())
		{
			cps.clearTextField("VerifyPassword");
			if(cps.setVerifyNewPassword(inputs.getInputValue("PASSWORD").toString()))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set Verify New Password as a :"+inputs.getInputValue("PASSWORD").toString());
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Verify New Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}
		if(cps.isSaveButtonVisible())
		{
			cps.clickOnSaveButton();
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Save Button");
		}



		if(cps.isVisibleNewPasswordNotSameAsOldError())
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully Verified Error i.e. Your new password cannot be the same as your current password");
			}
			else{

				Keyword.ReportStep_Pass(testCase,
						"Successfully Verified Error i.e. Your new password can't be the same as your current password");

			}
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Error i.e. Your new password canÃ¢â‚¬â„¢t be the same as your current password");
		}

		//Scenario 2
		if(cps.isOldPasswordTextFieldVisible())
		{
			cps.clearTextField("OldPassword");
			if(cps.setOldPassword(""))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set Old Password as a Empty:");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Old Password Empty");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isNewPasswordTextFieldVisible())
		{
			cps.clearTextField("NewPassword");
			if(cps.setNewPassword(inputs.getInputValue("PASSWORD").toString()+"Update"))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set New Password as a :"+inputs.getInputValue("PASSWORD").toString()+"Update");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set New Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isVerifyNewPasswordTextFieldVisible())
		{
			cps.clearTextField("VerifyPassword");
			if(cps.setVerifyNewPassword(inputs.getInputValue("PASSWORD").toString()+"Update"))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set Verify New Password as a :"+inputs.getInputValue("PASSWORD").toString()+"Update");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Verify New Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}
		if(cps.isSaveButtonVisible())
		{
			cps.clickOnSaveButton();
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Save Button");
		}


		if(cps.isVisibleMustOldPasswordErrorMsg())
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				Keyword.ReportStep_Pass(testCase,"Successfully Verified Error i.e. You must enter your password");
			}
			else{
				Keyword.ReportStep_Pass(testCase,"Successfully Verified Error i.e. Invalid Password Format");
			}
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Error i.e. You must enter your password");
		}
		//Scenario 3
		if(cps.isOldPasswordTextFieldVisible())
		{
			if(cps.setOldPassword(inputs.getInputValue("PASSWORD").toString()))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set Old Password as a :"+inputs.getInputValue("PASSWORD").toString());
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Old Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isNewPasswordTextFieldVisible())
		{
			cps.clearTextField("NewPassword");
			if(cps.setNewPassword(""))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set New Password as a : Empty ");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set New Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isVerifyNewPasswordTextFieldVisible())
		{
			cps.clearTextField("VerifyPassword");
			if(cps.setVerifyNewPassword(""))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set Verify New Password as a : Empty");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Verify New Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}
		if(cps.isSaveButtonVisible())
		{
			cps.clickOnSaveButton();
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Save Button");
		}

		if(cps.isVisibleEnterNewPasswordError())
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully Verified Error i.e. You must enter your new password");
			}
			else
			{

				Keyword.ReportStep_Pass(testCase,
						"Successfully Verified Error i.e. You must enter your new password");

				Keyword.ReportStep_Pass(testCase,
						"Successfully Verified Error i.e. Password must be at least eight characters");



			}
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Error i.e. Your new password canÃ¢â‚¬â„¢t be the same as your current password");
		}

		//Scenario 4

		if(cps.isOldPasswordTextFieldVisible())
		{
			cps.clearTextField("OldPassword");
			if(cps.setOldPassword(inputs.getInputValue("PASSWORD").toString()))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set Old Password as a i.e."+inputs.getInputValue("PASSWORD").toString());
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Old Password i.e."+inputs.getInputValue("PASSWORD").toString());
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isNewPasswordTextFieldVisible())
		{
			cps.clearTextField("NewPassword");
			if(cps.setNewPassword("Update"))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set New Password as a : Update");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set New Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isVerifyNewPasswordTextFieldVisible())
		{
			cps.clearTextField("VerifyPassword");
			if(cps.setVerifyNewPassword("Update1"))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set Verify New Password as a : Update1");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Verify New Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}
		if(cps.isSaveButtonVisible())
		{
			cps.clickOnSaveButton();
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Save Button");
		}

		if(cps.isVisiblePasswordMismatchError())
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully Verified Error i.e. Passwords don't match");
			}
			else
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully Verified Error i.e.  Invalid Password Format");
				Keyword.ReportStep_Pass(testCase,
						"Successfully Verified Error i.e. Passwords do not match");
			}
		}


		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Error i.e. Passwords do not match");
		}



		//Scenario 5
		if(cps.isOldPasswordTextFieldVisible())
		{
			cps.clearTextField("OldPassword");
			if(cps.setOldPassword(""))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set Old Password as a : Empty");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Old Password to Empty");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isNewPasswordTextFieldVisible())
		{
			cps.clearTextField("NewPassword");
			if(cps.setNewPassword(""))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set New Password as a : Empty");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set New Password to Empty");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isVerifyNewPasswordTextFieldVisible())
		{
			cps.clearTextField("VerifyPassword");
			if(cps.setVerifyNewPassword(""))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set Verify New Password as a : Empty");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Verify New Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}
		if(cps.isSaveButtonVisible())
		{
			cps.clickOnSaveButton();
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Save Button");
		}

		if(cps.isVisibleEnterPasswordError())
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully Verified Error i.e. You must enter your password ");
			}
			else
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully Verified Error i.e. Invalid Password Format");

			}
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Error i.e. you must enter your password");
		}
		if(cps.isVisibleEnterNewPasswordError())
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully Verified Error i.e. You must enter your new password ");
			}
			else
			{

				Keyword.ReportStep_Pass(testCase,
						"Successfully Verified Error i.e. You must enter your new password");
				Keyword.ReportStep_Pass(testCase,
						"Successfully Verified Error i.e. Password must be at least eight characters");

			}
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Error i.e. you must enter your new password");
		}

		//Scenario 6
		if(cps.isOldPasswordTextFieldVisible())
		{
			cps.clearTextField("OldPassword");
			if(cps.setOldPassword("Pass"))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set Old Password as a :- Pass");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Old Password i.e. Pass");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isNewPasswordTextFieldVisible())
		{
			cps.clearTextField("NewPassword");
			if(cps.setNewPassword("Password12"))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set New Password as a : Password12");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set New Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isVerifyNewPasswordTextFieldVisible())
		{
			cps.clearTextField("VerifyPassword");
			if(cps.setVerifyNewPassword("Password12"))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set Verify New Password as a : Password12");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Verify New Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}
		if(cps.isSaveButtonVisible())
		{
			cps.clickOnSaveButton();
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Save Button");
		}


		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(cps.isVisiblePasswordMinEightCharError())
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully Verified Error i.e. Invalid password format");
			}
//			else if(cps.isVisibleValidateError() != null)
//			{
//				Keyword.ReportStep_Pass(testCase,
//						"Successfully Verified Error i.e."+cps.isVisibleValidateError());
//			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Error i.e. Passwords do not match");
			}
		}
		else
		{
			if(cps.isInvalidPWFormatErrorVisible())
			{

				Keyword.ReportStep_Pass(testCase,
						"Successfully Verified Error i.e. Invalid password format");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Error i.e. Passwords do not match");
			}
		}

		if(cps.isOKbuttonVisible())
		{
			cps.clickOnOKButton();
		}
		//Scenario 7


		if(cps.isOldPasswordTextFieldVisible())
		{
			cps.clearTextField("OldPassword");
			if(cps.setOldPassword(inputs.getInputValue("PASSWORD").toString()))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set Old Password as a i.e."+inputs.getInputValue("PASSWORD").toString());
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Old Password i.e."+inputs.getInputValue("PASSWORD").toString());
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isNewPasswordTextFieldVisible())
		{
			cps.clearTextField("NewPassword");
			if(cps.setNewPassword("Update1"))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set New Password as a : Update1");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set New Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isVerifyNewPasswordTextFieldVisible())
		{
			cps.clearTextField("VerifyPassword");
			if(cps.setVerifyNewPassword("Update1"))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set Verify New Password as a : Update1");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Verify New Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}
		if(cps.isSaveButtonVisible())
		{
			cps.clickOnSaveButton();
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Save Button");
		}

		if(cps.isVisiblePasswordMinEightCharError())
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully Verified Error i.e. Invalid password format");
			}
			else
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully Verified Error i.e. Invalid password format");
			}
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Error i.e. Passwords do not match");
		}

		ms.clickOnBackButton();
		ms.clickOnBackButton();
		ms.clickOnBackButton();
		return flag;
	}

	public static boolean verifyGeofenceSettingScreenFeature(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		try
		{
			GeoFenceSettingsScreen geof= new GeoFenceSettingsScreen(testCase);
			String status="";

			if(geof.isGeofenceThisLocationLabelVisible())
			{
				Keyword.ReportStep_Pass(testCase , "Geofence This Location label is displayed") ;
			}
			else
			{
				Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to turn on geofence toggle") ;
			}

			status=geof.getGeofenceToggleStatus();

			if(status.equalsIgnoreCase("true")||status.equalsIgnoreCase("ON")||status.equalsIgnoreCase("1"))
			{
				Keyword.ReportStep_Pass(testCase , "Geofence location is already turned on") ;
			}
			else
			{
				geof.clickOnGeofenceToggleButton();
				status=geof.getGeofenceToggleStatus();
				if(status.equalsIgnoreCase("true")||status.equalsIgnoreCase("ON")||status.equalsIgnoreCase("1"))
				{
					Keyword.ReportStep_Pass(testCase , "Geofence location is turned on") ;
				}
				else
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to turn on geofence toggle") ;
				}

			}
			if(geof.isGeofenceToggleGeofenceRadiusVisible())
			{
				Keyword.ReportStep_Pass(testCase , "Geofence Radius is displayed") ;
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Geofence Radius  is not displayed") ;
			}

			status=geof.getGeofenceAlertToggleStatus();

			if(status.equalsIgnoreCase("true")||status.equalsIgnoreCase("ON")||status.equalsIgnoreCase("1"))
			{
				Keyword.ReportStep_Pass(testCase , "Geofence Alert is already turned on") ;
			}
			else
			{
				geof.clickOnGeofenceAlertToggleButton();
				status=geof.getGeofenceAlertToggleStatus();
				if(status.equalsIgnoreCase("true")||status.equalsIgnoreCase("ON")||status.equalsIgnoreCase("1"))
				{
					Keyword.ReportStep_Pass(testCase , "Geofence Alert is turned on") ;
				}
				else
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to turn on geofence toggle") ;
				}
			}

			if(geof.isGeofenceThisLocationLabelVisible())
			{
				Keyword.ReportStep_Pass(testCase , "Geofence Location Status  is verified") ;
			}
			else
			{
				Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to turn on geofence toggle") ;
			}

			if(geof.isHomeVisible())
			{
				Keyword.ReportStep_Pass(testCase , "Geofence Home Status  is verified") ;
			}
			else if(geof.isAwayVisible())
			{

				Keyword.ReportStep_Pass(testCase , "Geofence  Away Status  is verified") ;
			}


			if(geof.isGeofenceDisclaimerMSGVisible())
			{
				Keyword.ReportStep_Pass(testCase , "Geofence Disclaimer msg" +geof.getGeofenceDisclaimerMSG()+"is displayed") ;
			}

		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return flag;
	}

	public static void changeRadius(TestCases testCase, boolean doIncrease, int radiusTodrag) {
		WebElement map = null;
		if (!MobileUtils.isRunningOnAndroid(testCase)) {
			map = MobileUtils.getMobElement(testCase, "XPATH", "//XCUIElementTypeMap");
			radiusTodrag = 25;
		} else {
			map = MobileUtils.getMobElement(testCase, "XPATH", "//android.view.View");
		}

		if (map != null) {
			Dimension dimension = map.getSize();
			Point point = map.getLocation();
			int xCoordinate = (dimension.getWidth() / 4) * 3;
			int yCoordinate = point.getY() + dimension.getHeight() / 2;
			TouchAction action = new TouchAction(testCase.getMobileDriver());
			try {
				action.press(point(xCoordinate, yCoordinate)).moveTo(point(doIncrease ? radiusTodrag : -radiusTodrag, 0)).release()
				.perform();
				Thread.sleep(2000);
				if (doIncrease) {
					Keyword.ReportStep_Pass(testCase, "Changed radius increased by " + radiusTodrag);
				} else {
					Keyword.ReportStep_Pass(testCase, "Changed radius decreased by " + radiusTodrag);
				}
			} catch (Exception e) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			}
		}
	}

	public static boolean changePassword(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;

		MyAccountScreen ms=new MyAccountScreen(testCase);
		ChangePasswordScreen cps=new ChangePasswordScreen(testCase);
		LoginScreen ls=new LoginScreen(testCase);

		String newPassword=GlobalVariables.NEW_PASSWORD;
		oldPassword=(inputs.getInputValue("PASSWORD").toString());

		if(ms.isChangePasswordButtonVisible(3))
		{
			ms.navigateToChangePasswordScreen();
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Unable to navigate on Change Password screen");
		}

		if(cps.isOldPasswordTextFieldVisible())
		{
			if(cps.setOldPassword(inputs.getInputValue("PASSWORD").toString()))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set Old Password as a :"+inputs.getInputValue("PASSWORD").toString());
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Old Password");
			}

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.isKeyboardVisible(testCase, testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isNewPasswordTextFieldVisible())
		{
			cps.clearTextField("NewPassword");
			if(cps.setNewPassword(newPassword))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set New Password as a :"+newPassword);
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set New Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.isKeyboardVisible(testCase, testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isVerifyNewPasswordTextFieldVisible())
		{
			cps.clearTextField("VerifyPassword");
			if(cps.setVerifyNewPassword(newPassword))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set value in 'Verify New Password' as a :"+newPassword);
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Verify New Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.isKeyboardVisible(testCase, testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}
		if(cps.isSaveButtonVisible())
		{
			cps.clickOnSaveButton();
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Save Button");
		}

		if(ls.isCreateAccountVisible())
		{
			oldPassword=inputs.getInputValue("PASSWORD");
			inputs.setInputValue("PASSWORD", newPassword);
			Keyword.ReportStep_Pass(testCase, "Password has been successfully changed to "+newPassword);
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed to change password" , false);

			ms.clickOnBackButton();
			ms.clickOnBackButton();
			ms.clickOnBackButton();
		}
		return flag;
	}


	public static boolean resetOldPassword(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;

		MyAccountScreen ms=new MyAccountScreen(testCase);
		ChangePasswordScreen cps=new ChangePasswordScreen(testCase);
		LoginScreen ls=new LoginScreen(testCase);

		String newPassword=inputs.getInputValue("PASSWORD");

		if(ms.isChangePasswordButtonVisible(3))
		{
			ms.navigateToChangePasswordScreen();
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Unable to navigate on Change Password screen");
		}

		if(cps.isOldPasswordTextFieldVisible())
		{
			if(cps.setOldPassword(newPassword))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set Old Password as a :"+newPassword);
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Old Password");
			}

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.isKeyboardVisible(testCase, testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isNewPasswordTextFieldVisible())
		{
			cps.clearTextField("NewPassword");
			if(cps.setNewPassword(oldPassword))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set New Password as a :"+oldPassword);
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set New Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.isKeyboardVisible(testCase, testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}

		if(cps.isVerifyNewPasswordTextFieldVisible())
		{
			cps.clearTextField("VerifyPassword");
			if(cps.setVerifyNewPassword(oldPassword))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set value in 'Verify New Password' as a :"+oldPassword);
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set Verify New Password");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.isKeyboardVisible(testCase, testCase.getMobileDriver());
			}
			else
			{
				if(MobileUtils.isMobElementExists("name", "Return", testCase))
				{
					MobileUtils.clickOnElement(testCase, "name", "Return");
				}
			}
		}
		if(cps.isSaveButtonVisible())
		{
			cps.clickOnSaveButton();
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify Save Button");
		}

		if(ls.isCreateAccountVisible())
		{
			inputs.setInputValue("PASSWORD", oldPassword);
			Keyword.ReportStep_Pass(testCase, "Password has been successfully changed to "+oldPassword);
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed to change password" , false);

			ms.clickOnBackButton();
			ms.clickOnBackButton();
			ms.clickOnBackButton();
		}
		return flag;
	}

	public static boolean VerifyEulaPrivacyThroughCreateAccountLocalization(TestCases testCase,TestCaseInputs inputs)
	{
		boolean flag=true;
		String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		LoginScreen ls;
		CreateAccountScreen cas;
		ChangeCountryScreen ccs;

		if(inputs.isInputAvailable("LANGUAGE"))
		{
			ls=new LoginScreen(testCase,language);
			cas=new CreateAccountScreen(testCase,language);
			ccs= new ChangeCountryScreen(testCase,language);

		}else{

			ls=new LoginScreen(testCase);
			cas=new CreateAccountScreen(testCase);
			ccs= new ChangeCountryScreen(testCase);
		}
		EditAddressLocation eal=new EditAddressLocation(testCase);
		TouchAction action = new TouchAction(testCase.getMobileDriver());
		CustomDriver driver = testCase.getMobileDriver();
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
		MobileUtilsLocal l=new MobileUtilsLocal();
		if(ls.isCreateAccountVisible()){
			ls.navigateToCreateAccountScreen();


			flag=optikUtils.VerifyScreenLocalization(testCase, "CreateAccountAndroid");

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtilsLocal.swipeup(testCase);
				}

			String country_name=Verifycountry(testCase, inputs);
			if(country_name.equalsIgnoreCase(eal.getChangeCountryButtonFieldValue()) ||country_name.contains(eal.getChangeCountryButtonFieldValue()) || eal.getChangeCountryButtonFieldValue().contains(country_name)){
				Keyword.ReportStep_Pass(testCase, "Already Set Country");
			}else{
				flag=Setcountry(testCase, inputs);
			}


				}


		flag=EnterValidCredentialsCreateAccountScreenLocalization(testCase, inputs);

		//This code use -if TITAN R1-IDAAS button
	/*	if(cas.isSendVerificationCodeVisible(5))
		{
			cas.clickOnSendVerificationCode();
			Keyword.ReportStep_Pass(testCase, "Click on Send Verification Code");

		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on Send Verification Code");
		}
		*/


		if(!(language.equalsIgnoreCase("SOUTHAFRICA")|| language.equalsIgnoreCase("English_AUS")||language.equalsIgnoreCase("Arabic_UAE")||language.equalsIgnoreCase("French_CA")||language.equalsIgnoreCase("English_US")||language.equalsIgnoreCase("Spanish_Mexico")||language.equalsIgnoreCase("Spanish_Costarica")||language.equalsIgnoreCase("Spanish_Colombia")||language.equalsIgnoreCase("Spanish_Panama")||language.equalsIgnoreCase("Spanish_Peru")||language.equalsIgnoreCase("Spanish_Chile")||language.equalsIgnoreCase("Spanish_Argentina")||language.equalsIgnoreCase("PortugueseBR")||language.equalsIgnoreCase("English_CA")||language.equalsIgnoreCase("Estonia")||language.equalsIgnoreCase("French_Morocco")||language.equalsIgnoreCase("Malaysia")||language.equalsIgnoreCase("Singapore")||language.equalsIgnoreCase("English_NewZealand")||language.equalsIgnoreCase("Ukraine")||language.equalsIgnoreCase("Spanish_PuertoRico")
				||language.equalsIgnoreCase("Slovenian")||language.equalsIgnoreCase("Denmark")||language.equalsIgnoreCase("English_VI")||language.equalsIgnoreCase("English_VG")||language.equalsIgnoreCase("Korean")||language.equalsIgnoreCase("Chinese")||language.equalsIgnoreCase("Japanese")||language.equalsIgnoreCase("Greece")||language.equalsIgnoreCase("Sweden")||language.equalsIgnoreCase("Arabic_SaudiArabia")))
		{

			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				/*CustomDriver driver1 = testCase.getMobileDriver();

				Dimension dimension = driver1.manage().window().getSize();
				action.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				.release().perform();*/
				l.swipe(testCase);
				l.swipe(testCase);
			}else
			{
				action.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

			}


				if(language.equalsIgnoreCase("Arabic_Egypt")||language.equalsIgnoreCase("Arabic_Morocco")||language.equalsIgnoreCase("Slovenia")
						||language.equalsIgnoreCase("Arabic_SaudiArabia")||language.equalsIgnoreCase("Arabic_Tunisia")||language.equalsIgnoreCase("English_AUS")||language.equalsIgnoreCase("Kenya")||language.equalsIgnoreCase("SOUTHAFRICA")||language.equalsIgnoreCase("Turkey")||language.equalsIgnoreCase("Croatian"))
				{

					if(MobileUtils.isRunningOnAndroid(testCase))
					{
						if(cas.getGDPRToggleStatus().contains("OFF")||cas.getGDPRToggleStatus().contains("false")||cas.getGDPRToggleStatus().contains("Off")||

								cas.getGDPRToggleStatus().contains("0")||cas.getGDPRToggleStatus().contains("DESACTIVADO"))
						{
							cas.clickGDPRToggle();
						}

						flag=optikUtils.VerifyScreenLocalization(testCase, "GDPRScreen");
						if(cas.getGDPRToggleStatus().contains("ON")||cas.getGDPRToggleStatus().contains("true")||cas.getGDPRToggleStatus().contains("On")||

								cas.getGDPRToggleStatus().contains("1")||cas.getGDPRToggleStatus().contains("ACTIVADO"))
						{
							cas.clickGDPRToggle();
						}

					}

				}
				else{
			if(cas.getGDPRToggleStatus().contains("OFF")||cas.getGDPRToggleStatus().contains("false")||cas.getGDPRToggleStatus().contains("Off")||

					cas.getGDPRToggleStatus().contains("0")||cas.getGDPRToggleStatus().contains("DESACTIVADO"))
			{
				cas.clickGDPRToggle();
			}

			flag=optikUtils.VerifyScreenLocalization(testCase, "GDPRScreen");
			if(cas.getGDPRToggleStatus().contains("ON")||cas.getGDPRToggleStatus().contains("true")||cas.getGDPRToggleStatus().contains("On")||

					cas.getGDPRToggleStatus().contains("1")||cas.getGDPRToggleStatus().contains("ACTIVADO"))
			{
				cas.clickGDPRToggle();
			}


		}
		}
		Schedule.SwipeDown(testCase);
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(language.equalsIgnoreCase("English_US"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacy Policy && EULA");
			}
			else if(language.equalsIgnoreCase("English_UK") || language.equalsIgnoreCase("English_IR") || language.equalsIgnoreCase("Lithuania"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacy Policy && EULA");
			}

			else if(language.equalsIgnoreCase("French_CA"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Politique de confidentialit");
			}

			else if(language.equalsIgnoreCase("French"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "claration de confidentialit");
			}

			else if(language.equalsIgnoreCase("French_BE"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "claration de confidentiali");
			}

			else if(language.equalsIgnoreCase("French_SUI"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "claration de confidentialit");
			}

			else if(language.equalsIgnoreCase("Dutch"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacybeleid en licentieovereenkomst voor eindgebruikers (EULA)");
			}

			else if(language.equalsIgnoreCase("Dutch_BE"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacybeleid en licentieovereenkomst voor eindgebruikers (EULA)");
			}

			else if(language.equalsIgnoreCase("German") || language.equalsIgnoreCase("German_AUS") || language.equalsIgnoreCase("German_SUI"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Datenschutzrichtlinie und EULA");
			}

			else if(language.equalsIgnoreCase("Italian") || language.equalsIgnoreCase("Italian_SUI"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Informativa sulla privacy e contratto di licenza con l");
			}

			else if(language.equalsIgnoreCase("PortuguesePL"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "de Privacidade");
			}

			else if(language.equalsIgnoreCase("PortugueseBR"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "de privacidade");
			}

			else if(language.equalsIgnoreCase("Spanish"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "de privacidad y CLUF");
			}
			else if(language.equalsIgnoreCase("Spanish_Mexico")||language.equalsIgnoreCase("Spanish_Costarica")||language.equalsIgnoreCase("Spanish_Colombia")||language.equalsIgnoreCase("Spanish_Panama")||language.equalsIgnoreCase("Spanish_Peru")||language.equalsIgnoreCase("Spanish_Chile")||language.equalsIgnoreCase("Spanish_Argentina"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "de Privacidad");
			}

			else if(language.equalsIgnoreCase("Polish"))
			{

				MobileUtils.scrollToExactAndroid(testCase , "wiadczenie o");

			}
			else if(language.equalsIgnoreCase("Slovakian"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "ochrane osobn");

			}
			else if(language.equalsIgnoreCase("Hungarian"))
			{

				MobileUtils.scrollToExactAndroid(testCase , "Adelmi nyilatkozat");

			}
			else if(language.equalsIgnoreCase("Romanian"))
			{

				MobileUtils.scrollToExactAndroid(testCase , "de confiden");

			}
			else if(language.equalsIgnoreCase("Latvia"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacy Statement End-User License Agreement");
			}

			else if(language.equalsIgnoreCase("Czech"))
			{
				/*Dimension dimension = driver.manage().window().getSize();
				touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				.release().perform();

				touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				.release().perform();*/
				MobileUtils.scrollToExactAndroid(testCase , "o ochran");

			}
			else if(language.equalsIgnoreCase("Bulgarian"))
			{



			}
			else if(language.equalsIgnoreCase("Estonia"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacy Statement End-User License Agreement");
			}
			else if(language.equalsIgnoreCase("Slovenia"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacy Statement");
			}
			else
			{
				l.swipe(testCase);
				l.swipe(testCase);
				l.swipe(testCase);
				Schedule.SwipeDown(testCase);
			}


		}
		else
		{
			try
			{
				/*Dimension dimension = driver.manage().window().getSize();
				touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				.release().perform();

				touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				.release().perform();

				touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				.release().perform();*/

				l.swipe(testCase);
				l.swipe(testCase);
				l.swipe(testCase);
				Schedule.SwipeDown(testCase);


			}
			catch (Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			}
		}
		flag=optikUtils.VerifyScreenLocalization(testCase, "CreateAccountAndroid2");


		Schedule.SwipeDown(testCase);
		if(cas.isEluaPrivacyPolicyVisible())
		{
			cas.clickonEluaPrivacyPolicy();
		}
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{

		if(language.equalsIgnoreCase("Spanish_Mexico"))
		{
		MobileUtils.scrollToExactAndroid(testCase , "demo CONNECTED HOME END-USER LICENSE AGREEMENT AND PRIVACY STATEMENTEffective");
		}
		else if(language.equalsIgnoreCase("Spanish_Costarica")||language.equalsIgnoreCase("Spanish_Colombia")||language.equalsIgnoreCase("Spanish_Panama")||language.equalsIgnoreCase("Spanish_Peru")||language.equalsIgnoreCase("Spanish_Chile")||language.equalsIgnoreCase("Spanish_Argentina"))

			{
			MobileUtils.scrollToExactAndroid(testCase , "de privacidad");
		}
		else
		{

		}

		}





		//Schedule.SwipeDown(testCase);
		//ls.isoptikLogoVisible(30);

		List<String>eleList = null;
		try {
			eleList=optikUtils.read(testCase, language, "EulaVerification");
		} catch (IOException e) {
			e.printStackTrace();
		}
		if(!(optikUtils.compare(eleList, testCase)))
		{
			flag=false;
		}
		else
		{
			
			Keyword.ReportStep_Pass(testCase , "Successfully verified the screen :"+" EulaVerification") ;
		}
		
		JSONObject getEulaData=getEULA(testCase, inputs);
		
		if(getEulaData!=null) {
			try {
					if(VerifyEULAFromApi(testCase, inputs)) {
						
					Keyword.ReportStep_Pass(testCase , "Successfully verified the screen from CHAPI: EulaVerification "+getEulaData) ;
					}else {
						
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "EULA Verification using api: failed Successfully verified the screen from CHAPI: EulaVerification "+getEulaData);
						flag=false;
					}
			} catch (IOException e) {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "EULA Verification using api: failed from Chapi reposne more details:"+e.getMessage());
				flag=false;
			}
		}else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "EULA Verification using api: failed from Chapi reposne ");
			flag=false;
		}


		return flag;
	}
	
	public static boolean VerifyEULAFromApi(TestCases testCase,TestCaseInputs inputs) throws IOException {
		boolean flag=true;
		/**
		 * Creating the directory
		 */ 
		
		File file = new File("EULA");
		boolean createdDirElua= file.mkdirs();
		file = new File("EULA/OLD");
		boolean subDirOLD = file.mkdirs();
		file = new File("EULA/NEW");
	      boolean subDirNew = file.mkdirs();
	      if(createdDirElua && subDirOLD && subDirNew){
	         System.out.println("Directory created successfully");
	      }else{
	         System.out.println("Sorry couldnt create specified directory or already exist");
	      }
		
	      /*
	       * Create text in new and old as per requirement we will passed parameter as "NEW" or "OLD"
	       */
	   flag = flag && GeneratingTextEulaFromHTMLResponse(testCase, inputs, "NEW");
	      
	  //    GeneratingTextEulaFromHTMLResponse(testCase, inputs, "OLD");
	    
		  
		

	   flag = flag &&  VerifyingOldEulaAndNewEulaText(testCase, inputs);
		   
		   
	      
		return flag;
		
	}
	
	public static boolean GeneratingTextEulaFromHTMLResponse(TestCases testCase,TestCaseInputs inputs,String directory) {
		boolean flag = true;
		
		  //Converting HTML from JSON responce
	      String content = getEULA(testCase, inputs).getString("eulaText");
	      String folderName= directory;
		   String path = "EULA/"+folderName+"/"+inputs.getInputValue("LANGUAGE")+".html";
		   FileWriter fr = null;
		   BufferedWriter br = null;
	       String dataWithNewLine=content+System.getProperty("line.separator");
	       try{
	           fr = new FileWriter(path);
	           br = new BufferedWriter(fr);
	           int noOfLines = path.length();
	           for(int i = noOfLines; i>0; i--){
	               br.write(dataWithNewLine);
	           }
	       } catch (IOException e) {
	    	   e.printStackTrace();
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "EULA Verification using api: failed at writing from burffer for more details:"+e.getMessage());
				flag=false;
	       }
		   
		   
		   try {
			Files.write( Paths.get(path), content.getBytes());
		} catch (IOException e) {
			e.printStackTrace();
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "EULA Verification using api: failed at  creating html file in given path "+path+" more details:"+e.getMessage());
			flag=false;
		}
		   
		   //Converting text from HTML
		   String sourceUrlString="EULA/"+folderName+"/"+inputs.getInputValue("LANGUAGE")+".html";
	       
	        sourceUrlString="file:"+sourceUrlString;
	       Source source = null;
		try {
			source = new Source(new URL(sourceUrlString));
		} catch (IOException e) {
			e.printStackTrace();
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "EULA Verification using api: failed at  creating Source object more details:"+e.getMessage());
			flag=false;
		}
	       String renderedText=source.getRenderer().toString();
	  //     System.out.println("\nSimple rendering of the HTML document:\n");
	  //     System.out.println(renderedText);
		   
	       String path12 = "EULA/"+folderName+"/"+inputs.getInputValue("LANGUAGE")+".txt";
		   try {
			Files.write( Paths.get(path12), renderedText.getBytes());
		} catch (IOException e) {
			e.printStackTrace();
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "EULA Verification using api: failed at convert html to text for NEW eula more details:"+e.getMessage());
		
			flag=false;
		}
	return flag;
	}
	
	public static boolean VerifyingOldEulaAndNewEulaText(TestCases testCase,TestCaseInputs inputs) {
		boolean flag = true;
		
		   BufferedReader reader1 = null;
			try {
				reader1 = new BufferedReader(new FileReader("EULA/OLD/"+inputs.getInputValue("LANGUAGE")+".txt"));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "EULA Verification using api: failed at OLD eula due to FileNotFoundException more details:"+e.getMessage());
				flag=false;
			}
			     
			     BufferedReader reader2 = null;
				try {
					reader2 = new BufferedReader(new FileReader("EULA/NEW/"+inputs.getInputValue("LANGUAGE")+".txt"));
				} catch (FileNotFoundException e) {
					e.printStackTrace();
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "EULA Verification using api: failed at NEW eula due to FileNotFoundException more details:"+e.getMessage());
					flag=false;
				}
			      
			     String oldEula = null;
				try {
					oldEula = reader1.readLine();
				} catch (IOException e) {
					e.printStackTrace();
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "EULA Verification using api: failed at intial reading OLD eula"+e.getMessage());
					flag=false;
				}
			      
			     String newEula = null;
				try {
					newEula = reader2.readLine();
				} catch (IOException e) {
					e.printStackTrace();
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "EULA Verification using api: failed at intial reading NEW eula"+e.getMessage());
					flag=false;
				}
			      
			     boolean areEqual = true;
			      
			     int lineNum = 1;
			      
			     while (oldEula != null || newEula != null)
			     {
			         if(oldEula == null || newEula == null)
			         {
			             areEqual = false;
			              
			             break;
			         }
			         else if(! oldEula.equalsIgnoreCase(newEula))
			         {
			             areEqual = false;
			              
			             break;
			         }
			          
			         try {
						oldEula = reader1.readLine();
					} catch (IOException e) {
						e.printStackTrace();
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "EULA Verification using api: failed at reading OLD eula for "+oldEula +" error details"+e.getMessage());
						flag=false;
					}
			          
			         try {
						newEula = reader2.readLine();
					} catch (IOException e) {
						e.printStackTrace();
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "EULA Verification using api: failed at reading NEW eula for "+newEula +" error details"+e.getMessage());
						flag=false;
					}
			          
			         lineNum++;
			     }
			      
			     if(areEqual)
			     {
			         System.out.println("EULA Verification using api:Two files have same content.");
			         Keyword.ReportStep_Pass(testCase, "EULA Verification using api: old EULA and NEW EULA both files have same content.");
			     }
			     else
			     {
			         System.out.println("EULA Verification using api: Two EULA have different content. They differ at line "+lineNum);
			          
			         System.out.println("EULA Verification using api: oldEula has "+oldEula+" and newEula has "+newEula+" at line "+lineNum);
			         Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "EULA Verification using api: Two eula have different content. They differ at line "+lineNum+".");
			         Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Old Eula has :-"+oldEula+" and New Eula has "+newEula+" at line "+lineNum+".");
						flag=false;
			     }
			      
			     try {
					reader1.close();
					reader2.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			      
			     
			     
			     
		
		return flag;
	}
	

	public static boolean verifyZipCodeForAllCountries(TestCases testCase,TestCaseInputs inputs) {
		boolean flag = true;
		String[] countries ;
		String[] ZipCode ;

		if(inputs.getInputValue(GlobalVariables.Scenario).contains("1")){
			countries = new String[8];
			ZipCode = new String[8];
			countries[0] = "Belgium";
			ZipCode[0] = "9320";

			countries[1] = "Canada";
			ZipCode[1] = "Y1A1A3";

			countries[2] = "France";
			ZipCode[2] = "75008";

			countries[3] = "Germany";
			ZipCode[3] = "10243";

			countries[4] = "Ireland";
			ZipCode[4] = "D02 AF30";

			countries[5] = "Italy";
			ZipCode[5] = "01100";

			countries[6] = "Netherlands";
			ZipCode[6] = "1090GD";

			countries[7] = "Portugal";
			ZipCode[7] = "4000";

		}else{
			countries = new String[7];
			ZipCode = new String[7];
			countries[0] = "Puerto Rico";
			ZipCode[0] = "00907";

			countries[1] = "Spain";
			ZipCode[1] = "28100";

			countries[2] = "United Kingdom";
			ZipCode[2] = "SW1A 1AA";

			countries[3] = "United States";
			ZipCode[3] = "10001";

			countries[4] = "Estonia";
			ZipCode[4] = "28100";

			countries[5] = "Lithuania";
			ZipCode[5] = "SW1A 1AA";

			countries[6] = "Latvia";
			ZipCode[6] = "10001";

		}
		/*countries[15] = "British Virgin Islands";
			ZipCode[15] = "10001";*/

		/*countries[16] = "U.S. Outlying Islands";
			ZipCode[16] = "Belgium";

			countries[17] = "U.S. Virgin Islands";
			ZipCode[17] = "Belgium";*/

		try {

			LocationDetailsScreen lds = new LocationDetailsScreen(testCase);
			EditAddressLocation eal=new EditAddressLocation(testCase);
			ChangeCountryScreen ccs= new ChangeCountryScreen(testCase);
			SecondaryCardSettings sc = new SecondaryCardSettings(testCase);

			HashMap<String, String> loc=lds.getCountryNamefromChapi();
			inputs.setInputValue("addressName" , loc.get("addressName"));
			inputs.setInputValue("stateName" , loc.get("stateName"));
			inputs.setInputValue("cityName" , loc.get("cityName"));
			inputs.setInputValue("zipCode" , loc.get("zipCode"));
			inputs.setInputValue("originalCountry" , loc.get("countryName"));


                 navigatetoGlobalDrwaerOption(testCase , SecondaryCardSettings.LOCATIONADDRESS);

			for(int i=0;i<countries.length;i++)
			{
				if(countries[i].equalsIgnoreCase("Estonia")||countries[i].equalsIgnoreCase("Lithuania")||countries[i].equalsIgnoreCase("Latvia"))
						{
							Keyword.ReportStep_Pass(testCase, " "+countries[i]+" is not supported by the app.");
							continue;
						}
				if(lds.isEditexistingaddressVisible(10))
				{
					lds.navigateToEditAddressScreen();
				}
				if(eal.isChangeCountryButtonVisible())
				{
					eal.clickOnChangeCountryButton();
				}
				if(ccs.isCountrySearchTextFieldVisible()){
					ccs.SetCountrySearchTextField(countries[i]);
				}
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}
				else
				{
					try{
					if(testCase.getMobileDriver().findElement(By.xpath("//*[contains(@name,'Return')]"))!=null)
					{
						MobileUtils.clickOnElement(testCase, "XPATH","//*[contains(@name,'Return')]");
					}
					else if(testCase.getMobileDriver().findElement(By.xpath("//*[contains(@name,'Done')]"))!=null)
					{
						MobileUtils.clickOnElement(testCase, "XPATH","//*[contains(@name,'Done')]");
					}
					}
					catch(Exception e){

					}


				}
				if(ccs.SelectCountry(countries[i]))
				{
					Keyword.ReportStep_Pass(testCase, "Click on '"+countries[i]+"'country");
				}

				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on '"+countries[i]+"' country");
					flag=false;
				}
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					if(eal.isAcceptButtonVisible())
					eal.clickOnAcceptButton();
				}

				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}

				/*if(!MobileUtils.isRunningOnAndroid(testCase))
				{
					eal.setStreetAddressFieldValue(inputs.getInputValue("addressName"));
					eal.setCityAddressFieldValue(inputs.getInputValue("cityName"));
					eal.setStateAddressFieldValue(inputs.getInputValue("stateName"));
					eal.setZipCodeAdressFieldValue(inputs.getInputValue("zipCode"));
				}*/


				if(eal.setZipCodeAdressFieldValue(ZipCode[i]))
				{
					Keyword.ReportStep_Pass(testCase, "Zip code is set to "+ZipCode[i]);
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to set zip code i.e "+ZipCode[i]+"'");
					flag=false;
				}
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}
				else{
					try{


						//testCase.getMobileDriver().findElement(By.xpath("//*[contains(@name,'Return')]")).click();
					try {
						if(testCase.getMobileDriver().findElement(By.xpath("//*[contains(@name,'Done')]"))!=null)
						{
							MobileUtils.clickOnElement(testCase, "XPATH","//*[contains(@name,'Done')]");
						}

						else if(testCase.getMobileDriver().findElement(By.xpath("//*[contains(@name,'Return')]"))!=null){
							MobileUtils.clickOnElement(testCase, "XPATH","//*[contains(@name,'Return')]");

						}
					} catch (Exception e) {
						if(testCase.getMobileDriver().findElement(By.xpath("//*[contains(@name,'Return')]"))!=null){
							MobileUtils.clickOnElement(testCase, "XPATH","//*[contains(@name,'Return')]");

						}
					}

					}
					catch(Exception e){

					}

				}

				if(eal.isSaveButtonVisible())
				{
					eal.clickOnSaveButton();
				}
				else{
					if(MobileUtils.isRunningOnAndroid(testCase)){
						sc.clickOnBackButton();}
					else{

					}
				}

				if(lds.isEditexistingaddressVisible(10))
				{
					Keyword.ReportStep_Pass(testCase, "Successfully save zip code for "+countries[i]+" i.e "+ZipCode[i]+"");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to save zip code for "+countries[i]+" i.e "+ZipCode[i]+"");
					flag=false;
				}
			}

			if(lds.isEditexistingaddressVisible(10))
			{
				lds.navigateToEditAddressScreen();
			}
			if(eal.isChangeCountryButtonVisible())
			{
				eal.clickOnChangeCountryButton();
			}
			if(ccs.isCountrySearchTextFieldVisible()){
				ccs.SetCountrySearchTextField(inputs.getInputValue("originalCountry"));
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			if(ccs.SelectCountry(inputs.getInputValue("originalCountry")))
			{
				Keyword.ReportStep_Pass(testCase, "Click on '"+inputs.getInputValue("originalCountry")+"'country");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on '"+inputs.getInputValue("originalCountry")+"' country");
				flag=false;
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			/*if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				eal.setStreetAddressFieldValue(inputs.getInputValue("addressName"));
				eal.setCityAddressFieldValue(inputs.getInputValue("cityName"));
				eal.setStateAddressFieldValue(inputs.getInputValue("stateName"));
				eal.setZipCodeAdressFieldValue(inputs.getInputValue("zipCode"));
			}*/

			if(eal.setZipCodeAdressFieldValue(inputs.getInputValue("zipCode")))
			{
				Keyword.ReportStep_Pass(testCase, "Original Zip code is set to "+inputs.getInputValue("zipCode"));
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to set zip code i.e "+inputs.getInputValue("zipCode")+"'");
				flag=false;
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else{
				MobileUtils.clickOnElement(testCase, "XPATH","//*[contains(@name,'Done')]");
			}

			if(eal.isSaveButtonVisible())
			{
				eal.clickOnSaveButton();
			}
			sc.clickOnBackButton();
			sc.clickOnBackButton();

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Verify Country: Error occurred : " + e.getMessage());
		}
		return flag;
	}

	public static boolean setverifyHighLowwemperatureAlerts(TestCases testCase, TestCaseInputs inputs,String select) {
		boolean flag = true;
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		WebElement element = null;
		ManageAlertsScreen mas= new ManageAlertsScreen(testCase);
		if (mas.isIndoorTempToggleVisible(10)) {
			if (!mas.turnOnIndoorTempToggle()) {
				flag = false;
			} else {
				Random r = new Random();
				try
				{
					if (mas.getThermounits(testCase).equalsIgnoreCase(GlobalVariables.FAHRENHEIT) || mas.getThermounits(testCase).contains("F")) {
						int belowValue = 0, aboveValue = 0, belowValueApp = 0, aboveValueApp = 0;
						if(statInfo.getDeviceType().equalsIgnoreCase("Storm")){
							belowValue =89;

							aboveValue =51;
						}else {
							belowValue =95;

							aboveValue =40;

						}


						if (MobileUtils.isRunningOnAndroid(testCase)) {
							mas.ClickAlertTemp();
							if (mas.isHumidityAlertAboveBelowVisible(20)) {
								belowValueApp = Integer.parseInt(mas.getTemperatureAlertBelow().split(String.valueOf(InputVariables.degree))[0]);
								aboveValueApp = Integer.parseInt(mas.getTemperatureAlertAbove().split(String.valueOf(InputVariables.degree))[0]);
								Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: "+ belowValueApp + " and Above value is shown: " + aboveValueApp);
								if(select.equalsIgnoreCase("Below"))
								{
									mas.ClickHumidityAlertBelow();
									try {
										ManageAlertsScreen mg=new ManageAlertsScreen(testCase);
										//if(!mg.SelectTempAelrtsValue(testCase ,belowValue, String.valueOf(belowValue)+"\u00B0"+"F"))
										if(!SelectTempAelrtsValue(testCase ,belowValue, String.valueOf(belowValue)+"\u00B0"+"F"))
										{
											flag = false;
										}
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error message: " + e.getMessage());
									}
								}
								else
								{
									mas.ClickHumidityAlertAbove();
									try {
										if(!SelectTempAelrtsValue(testCase , aboveValue,String.valueOf(aboveValue)+"\u00B0"+"F"))
										{
											flag = false;
										}
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error message: " + e.getMessage());
									}
								}

							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
							}
						} else {

							if (mas.isHumidityAlertAboveBelowVisible(10)) {

								belowValueApp = Integer.parseInt(mas.getTempBelowValue().split("/")[0].split(String.valueOf(InputVariables.degree))[0].replaceAll("\u00B0", " ").trim());
								aboveValueApp = Integer.parseInt(mas.getTempAboveValue().split("/")[1].split(String.valueOf(InputVariables.degree))[0].replaceAll("\u00B0", " ").trim());
								//belowValueApp = Integer.parseInt(mas.getTemperatureAlertBelow().split("/")[0].replaceAll("\u00B0", " ").trim());
								//aboveValueApp = Integer.parseInt(mas.getTemperatureAlertAbove().split("/")[1].replaceAll("\u00B0", " ").trim());
							}
							if (belowValueApp >= aboveValueApp) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below value in app is shown: " + belowValueApp+ " and Above value in app is shown: " + aboveValueApp);
							} else {
								Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
							}
							mas.ClickTempAlertBelow();
							if(select.contains("Below"))
							{
								int i = 0;
								Point point=null;
								Dimension dim=null;
								if(inputs.isRunningOnSauceLabs())
								{
									point = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='TemperatureChange']//XCUIElementTypePickerWheel[1]").getLocation();
									dim = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='TemperatureChange']//XCUIElementTypePickerWheel[1]").getSize();
								}
								else
								{
									point = MobileUtils.getMobElements(testCase, "xpath", "//*[contains(@name,'of ') or contains(@value,'of ')]").get(0).getLocation();
									dim = MobileUtils.getMobElements(testCase, "xpath", "//*[contains(@name,'of ') or contains(@value,'of ')]").get(0).getSize();
								}

								if (belowValueApp > belowValue) {

									while (!(Integer.parseInt(mas.getTempBelowValue().split("/")[0].split(String.valueOf(InputVariables.degree))[0].replaceAll("\u00B0", " ").trim()) == belowValue)&& i < 50) {
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();
										i++;
									}
								} else {
									while (!(Integer.parseInt(mas.getTempBelowValue().split("/")[0].split(String.valueOf(InputVariables.degree))[0].replaceAll("\u00B0", " ").trim()) == belowValue)&& i < 50) {
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();
										i++;
									}
								}
							}
							else
							{
								int j = 0;
								Point point=null;
								Dimension dim=null;
								if(inputs.isRunningOnSauceLabs())
								{
									point = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='TemperatureChange']//XCUIElementTypePickerWheel[2]").getLocation();
									dim = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='TemperatureChange']//XCUIElementTypePickerWheel[2]").getSize();
								}
								else
								{
									point = MobileUtils.getMobElements(testCase, "xpath", "//*[contains(@name,'of ') or contains(@value,'of ')]").get(1).getLocation();
									dim = MobileUtils.getMobElements(testCase, "xpath", "//*[contains(@name,'of ') or contains(@value,'of ')]").get(1).getSize();
								}
								if (aboveValueApp > aboveValue) {
									while (!(Integer.parseInt(mas.getTempAboveValue().split("/")[1].split(String.valueOf(InputVariables.degree))[0].replaceAll("\u00B0", " ").trim()) == aboveValue)&& j < 50) {

										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();
										j++;
									}
								} else {
									while (!(Integer.parseInt(mas.getTempAboveValue().split("/")[1].split(String.valueOf(InputVariables.degree))[0].replaceAll("\u00B0", " ").trim()) == aboveValue)&& j < 50) {
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();
										j++;
									}
								}
							}
							/*
							 * try { flag = flag &&
							 * MobileUtils.setValueInPicker(testCase, fieldObjects,
							 * "IndoorBelowTemperatureiOS",
							 * String.valueOf(belowValue) + "\u00B0"); flag = flag &&
							 * MobileUtils.setValueInPicker(testCase, fieldObjects,
							 * "IndoorAboveTemperatureiOS",
							 * String.valueOf(aboveValue) + "\u00B0");
							 *
							 * } catch (Exception e) { flag = false;
							 * Keyword.ReportStep_Fail(testCase,
							 * FailType.FUNCTIONAL_FAILURE, "Error message: " +
							 * e.getMessage()); }
							 */
							mas.ClickTempAlertBelow();
							if (mas.isHumidityAlertAboveBelowVisible(10)) {
								belowValueApp = Integer.parseInt(mas.getTempBelowValue().split("/")[0].split(String.valueOf(InputVariables.degree))[0].replaceAll("\u00B0", " ").trim());
								aboveValueApp = Integer.parseInt(mas.getTempAboveValue().split("/")[1].split(String.valueOf(InputVariables.degree))[0].replaceAll("\u00B0", " ").trim());
								Keyword.ReportStep_Pass(testCase, "[AfterChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
							}
						}

					} else {
						double belowValue = 0, aboveValue = 0, belowValueApp = 0, aboveValueApp = 0;
						belowValue =35.0;
						aboveValue =4.0;
						if (MobileUtils.isRunningOnAndroid(testCase)) {
							mas.ClickAlertTemp();
							if (mas.isHumidityAlertAboveBelowVisible(10)) {
								belowValueApp = Double.parseDouble(mas.getTemperatureAlertBelow().split(String.valueOf(InputVariables.degree))[0]);
								aboveValueApp = Double.parseDouble(mas.getTemperatureAlertAbove().split(String.valueOf(InputVariables.degree))[0]);
								if (belowValueApp >= aboveValueApp) {
									flag = false;
									Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below value in app is shown: " + belowValueApp													+ " and Above value in app is shown: " + aboveValueApp);
								} else {
									Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: "+ belowValueApp + " and Above value is shown: " + aboveValueApp);
								}
								if(select.contains("Below"))
								{
									mas.ClickTempAlertBelow();
									try {
										element = testCase.getMobileDriver().scrollTo(String.valueOf(belowValue)+"\u00B0"+"C");
										if (element != null) {
											element.click();
										}
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error message: " + e.getMessage());
									}
								}
								else
								{
									mas.ClickTempAlertAbove();
									try {
										element = testCase.getMobileDriver().scrollTo(String.valueOf(aboveValue)+"\u00B0"+"C");
										if (element != null) {
											element.click();
										}
									} catch (Exception e) {
										flag = false;
										Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error message: " + e.getMessage());
									}
								}
								if (mas.isHumidityAlertAboveBelowVisible(10)) {
									belowValueApp = Double.parseDouble(mas.getTemperatureAlertBelow().split(String.valueOf(InputVariables.degree))[0]);
									aboveValueApp = Double.parseDouble(mas.getTemperatureAlertAbove().split(String.valueOf(InputVariables.degree))[0]);
									Keyword.ReportStep_Pass(testCase, "[AfterChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
								}
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
							}
						} else {

							if (mas.isHumidityAlertAboveBelowVisible(10)) {
								belowValueApp = Double.parseDouble(mas.getTempBelowValue().split("/")[0].split(String.valueOf(InputVariables.degree))[0].replaceAll("\u00B0", " ").trim());
								aboveValueApp = Double.parseDouble(mas.getTempAboveValue().split("/")[1].split(String.valueOf(InputVariables.degree))[0].replaceAll("\u00B0", " ").trim());
							}
							if (belowValueApp >= aboveValueApp) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below value in app is shown: " + belowValueApp+ " and Above value in app is shown: " + aboveValueApp);
							} else {
								Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
							}
							int i = 0;
							Point point=null;
							Dimension dim=null;
							mas.ClickTempAlertBelow();
							if(select.equalsIgnoreCase("below"))
							{
								point = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='TemperatureChange']//XCUIElementTypePickerWheel[1]").getLocation();
								dim = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='TemperatureChange']//XCUIElementTypePickerWheel[1]").getSize();



								if(inputs.isRunningOnSauceLabs())
								{
									point = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='TemperatureChange']//XCUIElementTypePickerWheel[1]").getLocation();
									dim = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='TemperatureChange']//XCUIElementTypePickerWheel[1]").getSize();
								}
								else
								{
									point = MobileUtils.getMobElements(testCase, "xpath", "//*[contains(@name,'of ') or contains(@value,'of ')]").get(0).getLocation();
									dim = MobileUtils.getMobElements(testCase, "xpath", "//*[contains(@name,'of ') or contains(@value,'of ')]").get(0).getSize();
								}
								if (belowValueApp > belowValue) {
									while (!(Double.parseDouble(mas.getTempBelowValue().split("/")[0].split(String.valueOf(InputVariables.degree))[0].replaceAll("\u00B0", " ").trim()) == belowValue)&& i < 50) {

										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();
										i++;
									}
								} else {

									while (!(Double.parseDouble(mas.getTempBelowValue().split("/")[0].split(String.valueOf(InputVariables.degree))[0].replaceAll("\u00B0", "")) == belowValue)&& i < 50) {
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();
										i++;
									}
								}
							}
							else
							{
								int j = 0;
								if(inputs.isRunningOnSauceLabs())
								{
									point = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='TemperatureChange']//XCUIElementTypePickerWheel[2]").getLocation();
									dim = MobileUtils.getMobElement(testCase, "xpath","//XCUIElementTypePicker[@name='TemperatureChange']//XCUIElementTypePickerWheel[2]").getSize();
								}
								else
								{
									point = MobileUtils.getMobElements(testCase, "xpath", "//*[contains(@name,'of ') or contains(@value,'of ')]").get(1).getLocation();
									dim = MobileUtils.getMobElements(testCase, "xpath", "//*[contains(@name,'of ') or contains(@value,'of ')]").get(1).getSize();
								}
								if (aboveValueApp > aboveValue) {
									while (!(Double.parseDouble(mas.getTempAboveValue().split("/")[1].split(String.valueOf(InputVariables.degree))[0].replaceAll("\u00B0", " ").trim()) == aboveValue)&& j < 50) {
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();
										j++;
									}
								} else {
									while (!(Double.parseDouble(mas.getTempAboveValue().split("/")[1].split(String.valueOf(InputVariables.degree))[0].replaceAll("\u00B0", " ").trim()) == aboveValue)&& j < 50) {
										TouchAction tAction = new TouchAction(testCase.getMobileDriver());
										tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();
										j++;
									}
								}
							}
							/*
							 * try { flag = flag &&
							 * MobileUtils.setValueInPicker(testCase, fieldObjects,
							 * "IndoorBelowTemperatureiOS",
							 * String.valueOf(belowValue) + "\u00B0"); flag = flag &&
							 * MobileUtils.setValueInPicker(testCase, fieldObjects,
							 * "IndoorAboveTemperatureiOS",
							 * String.valueOf(aboveValue) + "\u00B0");
							 *
							 * } catch (Exception e) { flag = false;
							 * Keyword.ReportStep_Fail(testCase,
							 * FailType.FUNCTIONAL_FAILURE, "Error message: " +
							 * e.getMessage()); }
							 */
							mas.ClickTempAlertBelow();
							if (mas.isHumidityAlertAboveBelowVisible(10)) {
								belowValueApp = Double.parseDouble(mas.getTempBelowValue().split("/")[0].split(String.valueOf(InputVariables.degree))[0].replaceAll("\u00B0", " ").trim());
								aboveValueApp = Double.parseDouble(mas.getTempAboveValue().split("/")[1].split(String.valueOf(InputVariables.degree))[0].replaceAll("\u00B0", " ").trim());
								Keyword.ReportStep_Pass(testCase, "[AfterChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
							}
						}

					}
				}
				catch (NumberFormatException e)
				{
					e.printStackTrace();
				}
				catch (Exception e)
				{
					e.printStackTrace();
				}
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "High/Low Temperature option not shown");
		}
		return flag;
	}


	public static boolean setupAndVerifyManageAlertsScreen(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		ManageAlertsScreen mas= new ManageAlertsScreen(testCase);
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		int  belowValueApp = 0, aboveValueApp = 0;
		WLDScreen ws=new WLDScreen(testCase);
		if(ws.isManageAlertButtonVisible())
		{
			ws.clickOnManageAlerts();
		}

		if( (mas.getIndoorTempToggleStatus()).equalsIgnoreCase("OFF")
				|| (mas.getIndoorTempToggleStatus()).equalsIgnoreCase("0")
				|| (mas.getIndoorTempToggleStatus()).equalsIgnoreCase("false") )
		{
			Keyword.ReportStep_Pass(testCase, "Manage Alerts Screen: Indoor Temperature Alert Toggle is Off");

			flag= flag && mas.turnOnIndoorTempToggle();
			if(statInfo.getDeviceType().contains("Storm"))
			{
				mas.ClickAlertTemp();
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
				belowValueApp = Integer.parseInt(mas.getTemperatureAlertBelow().split(String.valueOf(InputVariables.degree))[0]);
				aboveValueApp = Integer.parseInt(mas.getTemperatureAlertAbove().split(String.valueOf(InputVariables.degree))[0]);
				if(mas.getTemperatureAlertRangeValue(inputs).equalsIgnoreCase(50+"\u00b0"+"F /"+90+"\u00b0"+"F"))
				{
					Keyword.ReportStep_Pass(testCase, "Manage Alerts : Temperature Alert Range is displayed as "+50+"\u00b0"+" /"+90+"\u00b0"+"F");
				}
				else
				{
					flag= false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Manage Alerts : Temperature Alert Range is not displayed as "+belowValueApp+"\u00b0"+" /"+aboveValueApp+"\u00b0"+"F", false);
				}
				}
				else
				{
					if( (mas.getTemperatureAlertRangeValue(inputs).equalsIgnoreCase(50+"\u00b0"+"F /"+90+"\u00b0"+"F")) )
					{
						Keyword.ReportStep_Pass(testCase, "Manage Alerts : Temperature Alert Range is displayed as "+50+"\u00b0"+" /"+90+"\u00b0"+"F");
					}
					else
					{
						flag= false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Manage Alerts : Temperature Alert Range is not displayed as "+belowValueApp+"\u00b0"+" /"+aboveValueApp+"\u00b0"+"F", false);
					}
				}

				FilterReminderScreen fr=new FilterReminderScreen(testCase);
				if(fr.isBackButtonVisible())
				{
					fr.clickOnBackButton();
					fr.clickOnBackButton();
					fr.clickOnBackButton();
				}

			}
			else if(statInfo.getDeviceType().equalsIgnoreCase("Blackbeard") || statInfo.getDeviceType().equalsIgnoreCase("HoneyBadger") ||statInfo.getJasperDeviceType().contains("NA")){
				if( (mas.getTemperatureAlertRangeValue(inputs).equalsIgnoreCase(39+"\u00b0"+"F /"+99+"\u00b0"+"F")) )
				{
					Keyword.ReportStep_Pass(testCase, "Manage Alerts : Temperature Alert Range is displayed as "+39+"\u00b0"+" /"+99+"\u00b0"+"F");
				}
				else
				{
					flag= false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Manage Alerts : Temperature Alert Range is not displayed as "+belowValueApp+"\u00b0"+" /"+aboveValueApp+"\u00b0"+"F", false);
				}
			}
			else if(statInfo.getJasperDeviceType().contains("EMEA")){
				if( (mas.getTemperatureAlertRangeValue(inputs).equalsIgnoreCase("4.0"+"\u00b0"+"C /"+"37.0"+"\u00b0"+"C")) || (mas.getTemperatureAlertRangeValue(inputs).equalsIgnoreCase("4.0"+"\u00b0"+" /"+"37.0"+"\u00b0")) )
				{
					Keyword.ReportStep_Pass(testCase, "Manage Alerts : Temperature Alert Range is displayed as "+"4.0"+"\u00b0"+" /"+"37.0"+"\u00b0"+"C");
				}
				else
				{
					flag= false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Manage Alerts : Temperature Alert Range is not displayed as "+belowValueApp+"\u00b0"+" /"+aboveValueApp+"\u00b0"+"F", false);
				}
			}

		}
		else
		{
			Keyword.ReportStep_Pass(testCase, "Manage Alerts Screen: Indoor Temperature Alert Toggle is ON");
		}

		return flag;

	}


	public static boolean VerifyAlertsinActivityHistory(TestCases testCase, TestCaseInputs inputs,boolean chkmsg)
	{
		boolean flag = true;
		List<WebElement>  alertTitles = null;
		ActivityHistoryScreen ah=new ActivityHistoryScreen(testCase);
		EditAddressLocation eal=new EditAddressLocation(testCase);

		try
		{
			if(chkmsg)
			{
				if (ah.isMessagesDisplayed())
				{
					alertTitles = ah.getMessagesList();
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Failed to locate Alert Title");
				}
			}
			else
			{
				Keyword.ReportStep_Pass(testCase,"Alert not found i.e ");
				return true;
			}

			String alertList[] = null;
			try
			{
				alertList = getAllMessages(testCase);
			}
			catch (Exception e)
			{
			}

			for (int i = 0; i <alertList.length ; i++)
			{
				alertTitles.get(i).click();

				if(ah.isNotificationtimeVisible())
				{
					Keyword.ReportStep_Pass(testCase,"Notification Time Visible");
					Keyword.ReportStep_Pass(testCase,"Time display for alert " +ah.getNotificationtime()+" at Location: " +ah.getLocationAlert());

				}

				if (ah.isMessagesDisplayed())
				{
					Keyword.ReportStep_Pass(testCase,"Alert header Displayed in Proper Format i.e "+ alertList[i] +" at Location: "+ah.getLocationAlert());
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Alert header not  Displayed in Proper Format i.e"+alertTitles.get(i).getText()+"at Location: "+ah.getLocationAlert());
				}

			/*	if(ah.isMessageDescriptionDisplayed())
				{
					Keyword.ReportStep_Pass(testCase,"Alert body Displayed in Proper Format i.e "+ah.getMessageDescription()+" at Location: "+ah.getLocationAlert());

				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Alert body not Displayed in Proper Format i.e"+ah.getMessageDescription()+"at Location: "+ah.getLocationAlert());
				}

				if(eal.isBackButtonVisible())
				{
					eal.clickOnBackButton();
				}*/

			}
			/*if(ah.isNotificationtimeVisible())
			{
				Keyword.ReportStep_Pass(testCase,"Verifying Notification Time Visible in Proper sequence format :");

				List<WebElement> TimeTitles = null;
				TimeTitles=ah.getTimeTitlesList();

				for(int j=0;j<=3;j++)
				{
					Keyword.ReportStep_Pass(testCase," Time display for alert " +TimeTitles.get(j).getText()+" at Location: " +ah.getLocationAlert());
				}
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Notification Time not Displayed i.e"+ah.getNotificationtime()+"at Location: "+ah.getLocationAlert());
			}*/

			/*if(ah.isEditOptionDisplayed())
			{
				flag=flag && ah.clickOnEditOption();

				if(ah.isSlectAllDisplayed())
				{
					flag=flag && ah.clickOnSlectAll();
					Keyword.ReportStep_Pass(testCase, "Activity History: Selected all messages");

					flag=flag && ah.clickOnSlectAll();
					Keyword.ReportStep_Pass(testCase, "Activity History: Remove selection from all messages");
				}
				else
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Activity History: 'Select All' button is displayed", false);
				}

				if(ah.isCancelOptionDisplayed())
				{
					ah.clickOnCancelOption();
				}
				else
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Activity History: Cancel option is not displayed", false);
				}
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Activity History: Edit option is not displayed", false);
			}*/



		}
		catch(Exception e)
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,e.getMessage());
		}

		if(eal.isBackButtonVisible())
		{
			eal.clickOnBackButton();
			eal.clickOnBackButton();
		}

		return flag;
	}

	public static boolean VerifyOverrideschedulingTemperatureWhenStatOffline(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag = true;

		PrimaryCard pc=new PrimaryCard(testCase);
		try {
			flag = flag && DashboardUtils.selectDeviceFromDashboard(testCase,inputs.getInputValue("LOCATION1_DEVICE1_NAME"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		flag = flag && CoachMarkUtils.closeCoachMarks(testCase);
		if(!pc.isTempDecrementButtonAvailable() && !pc.isSetPointValueVisible() && !pc.isTempIncrementButtonAvailable())
		{
			Keyword.ReportStep_Pass(testCase, " Successfully Verified temperature Increment Button is not visible on primary card.");
			Keyword.ReportStep_Pass(testCase, " Successfully Verified temperature Decrement Button is not visible on primary card.");
			Keyword.ReportStep_Pass(testCase, " Successfully Verified temperature Set Point Value is not visible on primary card.");
			Keyword.ReportStep_Pass(testCase, " Successfully Verified user won't be allowed to override scheduling temperature on primary card.");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Verify user won't be allowed to override scheduling temperature on primary card.");
		}
		pc.ClickOnBackButton();
		return flag;
	}

	public static boolean VerifyThermostatOfflineOrOnlineStatusthroughchill(TestCases testCase,
			TestCaseInputs inputs, String expectedStatStatus) {

		boolean flag = true;

		if (expectedStatStatus.equalsIgnoreCase("Offline"))
		{
			DeviceInformation deviceInfo = new DeviceInformation(testCase, inputs);
			if(!deviceInfo.isStatOnline())
			{
				Keyword.ReportStep_Pass(testCase, " Verified Thermostat is in Offline status through Chill. ");
				flag= true;
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Verified Thermostat is in Online status through Chill.");
			}
		}

		return flag;
	}

	public static boolean SetUnitConfigName(TestCases testCase, TestCaseInputs inputs,String ocuname) {
		boolean flag=true;
		ThermostatSettingsScreen tss=new ThermostatSettingsScreen(testCase);
		ThermostatConfigurationScreen tc = new ThermostatConfigurationScreen(testCase,inputs);

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(tss.isOutdoorUnitConfigurationVisible()|| tss.isOutdoorUnitConfigurationNameVisible())
			{
				tss.ClickOnOutdoorUnitConfigNameEdit();

				tss.setOutdoorUnitConfigNameEdit(ocuname);
				if(MobileUtils.isRunningOnAndroid(testCase))	{
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}

				Keyword.ReportStep_Pass(testCase, "Thermostat Configuration: Thermostat Name is set as empty");

				//testCase.getMobileDriver().findElement(By.id("view_thermostat_name_text")).sendKeys(updateStat);

			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Outdoor unit Configuration: Thermostat Name field is not visible", false);
			}

			flag= flag && tc.navigateToBackFromThermostatConfig();
			flag= flag && tc.navigateToBackFromThermostatConfig();
			flag= flag && tc.navigateToBackFromThermostatConfig();

		}

		else
		{
			tss.ClickOnOutdoorUnitConfigNameEdit();

			WebElement tap =tss.getOCUNameField(inputs);
			tap.clear();
			tap.sendKeys(ocuname);

			if(MobileUtils.isMobElementExists("name", "Done", testCase)){
				MobileUtils.clickOnElement(testCase, "name", "Done");
			}

			if(MobileUtils.isMobElementExists("name", "Return", testCase)){
				MobileUtils.clickOnElement(testCase, "name", "Return");
			}
			Keyword.ReportStep_Pass(testCase, "Thermostat Configuration: Thermostat Name is set as empty");

			flag= flag && tc.navigateToBackFromThermostatConfig();
			flag= flag && tc.navigateToBackFromThermostatConfig();
			flag= flag && tc.navigateToBackFromThermostatConfig();

		}




		return flag;
	}

	public static boolean VerifyUnitConfigName(TestCases testCase, TestCaseInputs inputs,String ocuname) {
		boolean flag=true;
		ThermostatSettingsScreen tss=new ThermostatSettingsScreen(testCase);
		ThermostatConfigurationScreen tc = new ThermostatConfigurationScreen(testCase,inputs);

		String currocuname =tss.getOutdoorUnitConfigurationNameFieldValue(inputs);

		if(currocuname.equalsIgnoreCase(ocuname))
		{
			Keyword.ReportStep_Pass(testCase, " Verified Unit Configuration Name is reset to "+currocuname);
			flag= true;
			flag= flag && tc.navigateToBackFromThermostatConfig();

		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Outdoor unit Configuration: Default Name :"+ocuname+" Expected Name :"+ocuname, false);
		}
		return flag;
	}

	@SuppressWarnings("unchecked")
	public static void OpenDownloadFolder(TestCases testCase, TestCaseInputs inputs, boolean isdeleteFiles) {
		boolean flag;
		AppSettingScreen st= new AppSettingScreen(testCase);
		if (MobileUtils.isRunningOnAndroid(testCase)) {
			Activity activity = new Activity("com.android.documentsui","com.android.documentsui.DocumentsUI");
			((AndroidDriver<MobileElement>) testCase.getMobileDriver()).startActivity(activity);
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error - " + e.getMessage());
				e.printStackTrace();
			}
			List<WebElement>elem = null;
			if(isdeleteFiles)
			{
				if(!st.isDownloadedFilesAvailables())
				{
					Keyword.ReportStep_Pass(testCase, "Download folder is already empty.");
				}
				else
				{
					elem=st.getDownloadedFilesList();

					MobileUtils.longPress(testCase , elem.get(0) , 2000);
					if(st.isMoreOptionVisible())
					{
						st.clickOnMoreOption();
					}
					if(st.isDeleteButtonVisible())
					{
						st.clickOnDeleteButton();
					}
					if(st.isOKButtonVisible())
					{
						st.clickOnOKButton();
					}

					if(!st.isDownloadedFilesAvailables())
					{
						Keyword.ReportStep_Pass(testCase, "Download folder is empty.");
					}

				}


			}
			else
			{
				if(!st.isDownloadedFilesAvailables())
				{
					Keyword.ReportStep_Pass(testCase, "Download folder is empty.");
				}
				else
				{

				}
			}



		} else {


		}
	}

	public static void changeLocationSettings(TestCases testCase, TestCaseInputs inputs, String status) {
		boolean flag;
		if (MobileUtils.isRunningOnAndroid(testCase)) {
			Activity activity = new Activity("com.android.settings",
					"com.android.settings.Settings");
			((AndroidDriver<MobileElement>) testCase.getMobileDriver()).startActivity(activity);
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error - " + e.getMessage());
				e.printStackTrace();
			}
			WebElement elem = testCase.getMobileDriver().scrollTo("Location");
			elem = ((AndroidDriver<MobileElement>) testCase.getMobileDriver())
					.findElement(By.xpath("//android.widget.TextView[@text='Location']"));
			if (elem != null) {
				elem.click();
			}
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error - " + e.getMessage());
				e.printStackTrace();
			}
			elem = ((AndroidDriver<MobileElement>) testCase.getMobileDriver())
					.findElement(By.id("com.android.settings:id/switch_widget"));
			if (elem != null) {
				if (status.equalsIgnoreCase("On")) {
					if (elem.getText().equalsIgnoreCase("Off")) {
						elem.click();
						Keyword.ReportStep_Pass(testCase, "Location toggle is on");
						elem = ((AndroidDriver<MobileElement>) testCase.getMobileDriver())
								.findElement(By.xpath("//android.widget.Button[@text='AGREE']"));
						if (elem != null) {
							elem.click();
							Keyword.ReportStep_Pass(testCase, "Location services is turned on");
						}
					} else {
						Keyword.ReportStep_Pass(testCase, "Location services is already on");
					}
				} else if (status.equalsIgnoreCase("Off")) {
					if (elem.getText().equalsIgnoreCase("On")) {
						elem.click();
						inputs.setInputValue(GlobalVariables.MOBILE_LOCATION_OFF, "true");
						Keyword.ReportStep_Pass(testCase, "Location services is turned off");
					} else {
						inputs.setInputValue(GlobalVariables.MOBILE_LOCATION_OFF, "true");
						Keyword.ReportStep_Pass(testCase, "Location services is already off");
					}
				}
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Location services switch");
			}
			try {
				Thread.sleep(7000);
			} catch (InterruptedException e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error - " + e.getMessage());
				e.printStackTrace();
			}
		} else {
			boolean success = false;
			if (!MobileUtils.launchSettingsAppOnIOS(testCase)) {
				flag = false;
			} else {
				Dimension dimension = testCase.getMobileDriver().manage().window().getSize();
				TouchAction action = new TouchAction(testCase.getMobileDriver());
				for (int i = 0; i < 5; ++i) {
					if (success) {
						break;
					}
					try {
						action.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5)))
						.moveTo(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * -.2))).release().perform();

						scrollToElementUsingAttributeSubStringValueIOS(testCase, "label", "Privacy");

					}catch (Exception e) {
					}

					FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(
							testCase.getMobileDriver());
					fWait.pollingEvery(Duration.ofSeconds(5));
					fWait.withTimeout(Duration.ofSeconds(5));

					try {
						WebElement elem = fWait.until(
								ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@label='Privacy']")));
						if (elem != null) {
							elem.click();
							success = true;
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Scroll to Privacy : Privacy option not found");
						}
					} catch (TimeoutException e) {
						// Retry again
					}
				}

				if (MobileUtils.isMobElementExists("name", "Location Services", testCase, 5)) {
					if (!MobileUtils.clickOnElement(testCase, "name", "Location Services")) {
						flag = false;
					} else {
						List<WebElement> locServ = MobileUtils.getMobElements(testCase, "xpath",
								"//*[@name='Location Services']");
						WebElement toggleSwitch = null;
						toggleSwitch=locServ.get(3);
						/*for (WebElement locSer : locServ) {

								if (locSer.getAttribute("value").equalsIgnoreCase("0")
										|| locSer.getAttribute("value").equalsIgnoreCase("1")) {
									toggleSwitch = locSer;
									break;
								} else {
									toggleSwitch = null;
								}
							}*/
						if (toggleSwitch != null) {
							if (status.equalsIgnoreCase("off")) {
								if (toggleSwitch.getAttribute("value").equalsIgnoreCase("1") || toggleSwitch.getAttribute("value").equalsIgnoreCase("On")) {
									toggleSwitch.click();
									if (MobileUtils.isMobElementExists("name", "Turn Off", testCase, 5)) {
										if (!MobileUtils.clickOnElement(testCase, "name", "Turn Off")) {
											flag = false;
										} else {
											inputs.setInputValue(GlobalVariables.MOBILE_LOCATION_OFF, "true");
											Keyword.ReportStep_Pass(testCase, "Turned off Location Services");
										}
									}
								} else {
									inputs.setInputValue(GlobalVariables.MOBILE_LOCATION_OFF, "true");
									Keyword.ReportStep_Pass(testCase, "Location Services is already turned off");
								}
							} else {
								if (toggleSwitch.getAttribute("value").equalsIgnoreCase("0") || toggleSwitch.getAttribute("value").equalsIgnoreCase("Off")) {
									toggleSwitch.click();
									Keyword.ReportStep_Pass(testCase, "Turned on Location Services");
								} else {
									Keyword.ReportStep_Pass(testCase, "Location Services is already turned on");
								}
							}

							if (MobileUtils.isMobElementExists("name", "demo", testCase, 5)) {
								if (!MobileUtils.clickOnElement(testCase, "name", "demo")) {
									flag = false;
								}
							}
							if (MobileUtils.isMobElementExists("name", "Always", testCase, 5)) {
								if (!MobileUtils.clickOnElement(testCase, "name", "Always")) {
									flag = false;
								}
							}


						}
						else {
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed to locate the Location Services switch");
						}
					}
				}
				MobileUtils.closeSettingsAppOnIOS(testCase);
				LoginScreen ls = new LoginScreen(testCase);
				ls.isLoginButtonVisible(20);
				OSPopUps os = new OSPopUps(testCase);
				if(os.isAlwaysAllowButtonVisible(5))
				{
					os.clickOnAlwaysAllowButton();
				}
			}
		}
	}


	public static boolean VerifiyCreatePasscodeUsingInvalidPasscode(TestCases testCase, TestCaseInputs inputs)
	{

		boolean flag = true ;
		CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase);
		SecondaryCardSettings scs=new SecondaryCardSettings(testCase);

		if (cyPop.isCreatePasscodeScreenVisible())
		{
			if (!MobileUtils.isRunningOnAndroid(testCase))
			{
				cyPop.ClickOnFirstKeyText();
				cyPop.ClickOnFirstKeyText();
				cyPop.ClickOnFirstKeyText();
				cyPop.ClickOnFirstKeyText();

				if(cyPop.isNoRepeatedConsecutiveNumbersTextVisible()){
					Keyword.ReportStep_Pass(testCase, "Verify app displays text in red font:  '"+cyPop.getNoRepeatedConsecutiveNumbersText()+"'");
				}else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed  to Verify app displays text in red font: 'NoRepeatedConsecutiveNumbers' ");
				}

				cyPop.ClickOnFiveKeyText();
				cyPop.ClickOnSixKeyText();
				cyPop.ClickOnSevenKeyText();
				cyPop.ClickOnEightKeyText();

				if(cyPop.isNoRepeatedConsecutiveNumbersTextVisible()){
					Keyword.ReportStep_Pass(testCase, "Verify app displays text in red font: '"+cyPop.getNoRepeatedConsecutiveNumbersText()+"'");
				}else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed 	 to Verify app displays text in red font: 'NoRepeatedConsecutiveNumbers' ");
				}


				cyPop.ClickOnFourKeyText();
				cyPop.ClickOnTwoKeyText();
				cyPop.ClickOnZeroKeyText();
				cyPop.ClickOnSixKeyText();



			}
			else
			{
				try
				{
					if (cyPop.isSecurityPin1Visible())
					{
						cyPop.ClickonSecurityPin1();
					}
					if (!cyPop.setPasscodeEmulator(testCase , inputs , "1111"))
					{

					}
					Keyword.ReportStep_Pass(testCase, "Verify app displays text in red font:  'NoRepeatedConsecutiveNumbers' but in toast massege(toast massege mapping not present)");

					if (cyPop.isSecurityPin1Visible())
					{
						cyPop.ClickonSecurityPin1();
					}
					if (!cyPop.setPasscodeEmulator(testCase , inputs , "5678"))
					{

					}
					Keyword.ReportStep_Pass(testCase, "Verify app displays text in red font:  'NoRepeatedConsecutiveNumbers' but in toast massege(toast massege mapping not present)");


					if (cyPop.isSecurityPin1Visible())
					{
						cyPop.ClickonSecurityPin1();
					}
					if (!cyPop.setPasscodeEmulator(testCase , inputs , "4206"))
					{

					}


				}
				catch (Exception e)
				{
					flag = false ;
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,  e.getMessage()) ;
				}

			}
		}


		if (cyPop.isVerifyPasscodeScreenVisible())
		{


			Keyword.ReportStep_Pass(testCase, "Verify app displays text in font: '"+cyPop.getVerifyPasscodeScreenText()+"'");


			if (!MobileUtils.isRunningOnAndroid(testCase))
			{
				cyPop.ClickOnFourKeyText();
				cyPop.ClickOnFirstKeyText();
				cyPop.ClickOnZeroKeyText();
				cyPop.ClickOnSixKeyText();

				if(cyPop.isVerifyYourPasscodeScreenVisible()){
					Keyword.ReportStep_Pass(testCase, "Verify app displays text in red font:  '"+cyPop.getVerifyYourPasscodeScreenText()+"'");
				}else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed to Verify app displays text in red font: '"+cyPop.getVerifyYourPasscodeScreenText()+"' ");

				}
			}
			else
			{
				try
				{
					if (!cyPop.setPasscodeEmulator(testCase , inputs , "4106"))
					{

					}
					Keyword.ReportStep_Pass(testCase, "Verify app displays text in red font:  'invaild passcode' but in toast massege(toast massege mapping not present)");

					if (!cyPop.setPasscodeEmulator(testCase , inputs , "4206"))
					{

					}
					Keyword.ReportStep_Pass(testCase, "Verify Passcode by entering vaild passcode ,'This step only perform on android, due to reason of back funcationality perform on device, not on app.");

				}
				catch (Exception e)
				{
					flag = false ;
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , e.getMessage()) ;
				}
			}
			if (MobileUtils.isRunningOnAndroid(testCase))
			{
				if (!inputs.isRunningOnSauceLabs())
				{
					if (cyPop.isNoButtonVisible())
					{
						cyPop.ClickonNoButton();
					}
					else
					{
						if (cyPop.isRetryTextVisible())
						{
							cyPop.ClickonRetryButton();
							Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to set password.") ;
							flag = false ;
						}
						if (cyPop.isOkButonVisible())
						{
							//flag = false ;
							cyPop.ClickonOKButton();
						}
					}
				}
			}
			else
			{
				if (cyPop.isNoButtonVisible())
				{
					cyPop.ClickonNoButton();
				}
				else
				{
					if (cyPop.isRetryTextVisible())
					{
						cyPop.ClickonRetryButton();
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to set password.") ;
						flag = false ;
					}
					if (cyPop.isOkButonVisible())
					{
						//flag = false ;
						cyPop.ClickonOKButton();
					}
				}
			}

		}

		if(MobileUtils.isRunningOnAndroid(testCase)){
			int f=0;
			while(f<2)
			{
				if(scs.isBackButtonVisible()){
					scs.clickOnBackButton();
				}
				f++;
			}
		}else{
			while(scs.isBackButtonVisible()){
				scs.clickOnBackButton();
			}
		}

		return flag ;
	}


	public static boolean verifyDialerSetPointsAreBtnMaxAndMin(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		try
		{
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			HashMap<String, String> maxMinSetPoints = statInfo.getDeviceMaxMinSetPoints();
			String currentSystemMode = statInfo.getThermoStatMode();
			Double currentSetPoint = getCurrentSetPointInDialer(testCase);
			if (currentSystemMode.equalsIgnoreCase("Auto")) {
				currentSystemMode = statInfo.getThermostatModeWhenAutoChangeOverActive();
			}
			if (currentSystemMode.equalsIgnoreCase("Heat")) {
				if (currentSetPoint <= Double.parseDouble(maxMinSetPoints.get("MaxHeat"))) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Dialer Set Points Are Btn Max and Min : Dialer set points are less than or equal to max heat set points");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Verify Dialer Set Points Are Btn Max and Min : Dialer set points are greater than max heat set points");
				}
				if (currentSetPoint >= Double.parseDouble(maxMinSetPoints.get("MinHeat"))) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Dialer Set Points Are Btn Max and Min : Dialer set points are greater than or equal to min heat set points");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Verify Dialer Set Points Are Btn Max and Min : Dialer set points are less than min heat set points");
				}
			} else if (currentSystemMode.equalsIgnoreCase("Cool")) {
				if (currentSetPoint <= Double.parseDouble(maxMinSetPoints.get("MaxCool"))) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Dialer Set Points Are Btn Max and Min : Dialer set points are less than or equal to max cool set points");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Verify Dialer Set Points Are Btn Max and Min : Dialer set points are greater than max cool set points");
				}
				if (currentSetPoint >= Double.parseDouble(maxMinSetPoints.get("MinCool"))) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Dialer Set Points Are Btn Max and Min : Dialer set points are greater than or equal to min cool set points");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Verify Dialer Set Points Are Btn Max and Min : Dialer set points are less than min cool set points");
				}
			}
		}
		catch(Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,e.getMessage());
			flag = false;
		}

		return flag;
	}

	public static boolean verifyDialerAutoChangeOverLogic(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		try
		{
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			List<String> allowedModes = statInfo.getAllowedModes();
		/*
		 * if (!allowedModes.contains("Auto")) { flag = false;
		 * Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase,
		 * FailType.FUNCTIONAL_FAILURE,
		 * "Verify Dialer Auto Change Over Logic : Thermostat does not support auto mode"
		 * ); return flag; } else {
		 */
				Double heatSetPoints = 0.0;
				Double coolSetPoints = 0.0;
				String systemMode = statInfo.getThermoStatMode();
				if (systemMode.equalsIgnoreCase("Heat")) {
					heatSetPoints = getCurrentSetPointInDialer(testCase);
					flag = flag && changeSystemMode(testCase, inputs, "Cool",inputs.getInputValue("LOCATION1_DEVICE1_NAME"));
					coolSetPoints = getCurrentSetPointInDialer(testCase);
				} else if (systemMode.equalsIgnoreCase("Cool")) {
					coolSetPoints = getCurrentSetPointInDialer(testCase);
					flag = flag && changeSystemMode(testCase, inputs, "Heat",inputs.getInputValue("LOCATION1_DEVICE1_NAME"));
					heatSetPoints = getCurrentSetPointInDialer(testCase);
		} /*
			 * else if (systemMode.equalsIgnoreCase("Auto")) { flag = flag &&
			 * changeSystemMode(testCase, inputs,
			 * "Cool",inputs.getInputValue("LOCATION1_DEVICE1_NAME")); coolSetPoints =
			 * getCurrentSetPointInDialer(testCase); flag = flag &&
			 * changeSystemMode(testCase, inputs,
			 * "Heat",inputs.getInputValue("LOCATION1_DEVICE1_NAME")); heatSetPoints =
			 * getCurrentSetPointInDialer(testCase); }
			 */
				if (coolSetPoints >= heatSetPoints) {
					Keyword.ReportStep_Pass(testCase,
							"Verify Dialer Auto Change Over Logic : Dialer is following auto changeover logic");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Verify Dialer Auto Change Over Logic : Dialer is not following auto changeover logic");
				}
			//}
		}
		catch(Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,e.getMessage());
			flag = false;
		}

		return flag;
	}

	public static boolean verifydemoMemberShipOptionBasedOnMembership(TestCases testCase,TestCaseInputs inputs)
	{
		boolean flag=true;

		LocationDetailsScreen lds = new LocationDetailsScreen(testCase);
		SecondaryCardSettings sc = new SecondaryCardSettings(testCase);
		Dashboard db = new Dashboard(testCase);

          try {

		} catch (Exception e) {
			HashMap<String, String> loc=lds.getCountryNamefromChapi();

			inputs.setInputValue("originalCountry" , loc.get("countryName"));
		}

		if(db.isGlobalDrawerButtonVisible())
		{
			db.clickOnGlobalDrawerButton();
		}

		if (MobileUtils.isRunningOnAndroid(testCase))
		{
		  if(testCase.getMobileDriver().getPageSource().contains("Membership") || testCase.getMobileDriver().getPageSource().equalsIgnoreCase("Membership"))

		    {

			Keyword.ReportStep_Pass(testCase, "demo Membership option is  displayed");

			}
		}
		else
		{
			Keyword.ReportStep_Pass(testCase, "demo Membership option is not displayed");

		}

		if(sc.isBackButtonVisible())
		{
			flag= flag && sc.clickOnBackButton();
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Secondary Card: Unable to find Back buttton", false);
		}
		return flag;
	}





	public static boolean VerifyPasscodeScreenLocalization(TestCases testCase,String language,TestCaseInputs inputs, boolean validate)
	{boolean flag = true ;
	CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase,language);
	MyAccountScreen myAcc= new MyAccountScreen(testCase);
	SecondaryCardSettings scs=new SecondaryCardSettings(testCase);
	if((!MobileUtils.isRunningOnAndroid(testCase)))
	{
		if(!optikUtils.CreatePasscodeToggleButtonLocal(testCase ,language))
		{
			flag = false;
		}

	}else
	{
		if(!optikUtils.CreatePasscodeToggleButton(testCase , inputs , true))
		{
			flag = false;
		}
	}
	if (cyPop.isCreatePasscodeScreenVisible())
	{

		Keyword.ReportStep_Pass(testCase , "After setting the passcode, able to move verify passcode screen") ;

		if (validate)
		{
			if (!MobileUtils.isRunningOnAndroid(testCase))
			{
				cyPop.ClickOnFirstKeyText();
				cyPop.ClickOnFirstKeyText();
				cyPop.ClickOnFirstKeyText();
				cyPop.ClickOnFirstKeyText();
				cyPop.isDontUseTextVisible(3);

				flag=flag && optikUtils.VerifyScreenLocalization(testCase, "InvalidPasscode");
				cyPop.isDontUseTextVisible(10);

				cyPop.ClickOnFiveKeyText();
				cyPop.ClickOnSixKeyText();
				cyPop.ClickOnSevenKeyText();
				cyPop.ClickOnEightKeyText();

				flag=flag && optikUtils.VerifyScreenLocalization(testCase, "InvalidPasscode");

				cyPop.isDontUseTextVisible(10);
				cyPop.ClickOnFirstKeyText();
				cyPop.ClickOnZeroKeyText();
				cyPop.ClickOnFourKeyText();
				cyPop.ClickOnZeroKeyText();

				cyPop.isDontUseTextVisible(10);
				cyPop.ClickOnFirstKeyText();
				cyPop.ClickOnZeroKeyText();
				cyPop.ClickOnFourKeyText();
				cyPop.ClickOnSixKeyText();
				flag=flag && optikUtils.VerifyScreenLocalization(testCase, "VerifyPasscode");

				if(language.contains("English"))
				{
					cyPop.ClickOnBACKButton();
					cyPop.ClickOnBACKButton();
					cyPop.ClickOnBACKButton();
					cyPop.ClickOnBACKButton();}
				else
				{
					cyPop.ClickOnBACKButton(inputs);
					cyPop.ClickOnBACKButton(inputs);
					cyPop.ClickOnBACKButton(inputs);
					cyPop.ClickOnBACKButton(inputs);


				}

			}
			else
			{
				try
				{
					if (!cyPop.setPasscodeEmulator(testCase , inputs , "2406"))
					{
						flag = false ;
					}
				}
				catch (Exception e)
				{
					flag = false ;
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , e.getMessage()) ;
				}
			}

		}

	}
	if (cyPop.isVerifyPasscodeScreenVisible())
	{
		if (!MobileUtils.isRunningOnAndroid(testCase))
		{
			cyPop.ClickOnFourKeyText();
			cyPop.ClickOnTwoKeyText();
			cyPop.ClickOnZeroKeyText();
			cyPop.ClickOnSixKeyText();
		}
		else
		{
			try
			{
				if (!cyPop.setPasscodeEmulator(testCase , inputs , "2406"))
				{

				}
			}
			catch (Exception e)
			{
				flag = false ;
				Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , e.getMessage()) ;
			}
		}
		if (MobileUtils.isRunningOnAndroid(testCase))
		{
			if (!inputs.isRunningOnSauceLabs())
			{
				if (cyPop.isNoButtonVisible())
				{
					cyPop.ClickonNoButton();
				}
				else
				{
					if (cyPop.isRetryTextVisible())
					{
						cyPop.ClickonRetryButton();
						Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to set password.") ;
						flag = false ;
					}
					if (cyPop.isOkButonVisible())
					{
						flag = false ;
						cyPop.ClickonOKButton();
					}
					return flag ;
				}
			}
		}
		else
		{
			if (cyPop.isNoButtonVisible())
			{
				cyPop.ClickonNoButton();
			}
			else
			{
				if (cyPop.isRetryTextVisible())
				{
					cyPop.ClickonRetryButton();
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to set password.") ;
					flag = false ;
				}
				if (cyPop.isOkButonVisible())
				{
					flag = false ;
					cyPop.ClickonOKButton();
				}

			}
		}

	}

	if(myAcc.isBackButtonVisible())
	{
		myAcc.clickOnBackButton();

	}
	if(scs.isBackButtonVisible())
	{
		scs.clickOnBackButton();
	}
	return flag ;
}

	public static boolean ClickOnDontUsePasscodeLocal(TestCases testCase,TestCaseInputs inputs,String language)
	{
		boolean flag = true ;
		CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase,language);
		if (cyPop.isDontUseTextVisible())
		{
			cyPop.clickOnDontUseButton();
		}
		return flag ;
	}

	public static boolean navigatetoGlobalDrwaerOptionIOSLocalization(TestCases testCase,String language, String optionName)
	{
		boolean flag=true;

		Dashboard ds = new Dashboard(testCase,language);
		SecondaryCardSettings scs= new SecondaryCardSettings(testCase,language);
		if(ds.isGlobalDrawerButtonVisible())
		{
			ds.clickOnGlobalDrawerButton();

			switch(optionName.toUpperCase())
			{
			case "EDIT ACCOUNT":
			/*	if(language.equalsIgnoreCase("Czech"))
				{
					if (isLocalizationtextvisible(testCase, "EditAccountOption"))
					{
					  isClickOnLocalizationtext(testCase, "EditAccountOption");
					}
				}else*/
				if(scs.isEditAccountVisible())
				{
					scs.selectOptionFromSecondarySettings(SecondaryCardSettings.EDITACCOUNT);
				}
				else
				{
					if (MobileUtils.isRunningOnAndroid(testCase))
					{
						WebElement element = null ;

						element = testCase.getMobileDriver().scrollTo("Logout") ;
						if (element != null)
						{

							return scs.selectOptionFromSecondarySettings(SecondaryCardSettings.EDITACCOUNT) ;
						}
					}
					else
					{
						try
						{
							if(testCase.getTestCaseInputs().isRunningOn("Perfecto"))
							{
								boolean success=false;
								Dimension dimension = testCase.getMobileDriver().manage().window().getSize();
								TouchAction action = new TouchAction(testCase.getMobileDriver());
								for (int i = 0; i < 3; ++i) {
									if (success) {
										break;
									}
									try {
										action.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.5))).release().perform();
									} catch (Exception e) {
									}
									FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(testCase.getMobileDriver());
									fWait.pollingEvery(Duration.ofSeconds(5));
									fWait.withTimeout(Duration.ofSeconds(5));


									try {
										WebElement logoutElement = fWait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[(contains(@label,'Logout') or (contains(@value,'Logout')))]")));
										if (logoutElement != null) {
											logoutElement.click();
											success = true;
										} else {
										}
									} catch (TimeoutException e) {
										// Retry again
									}
								}
								return scs.selectOptionFromSecondarySettings(SecondaryCardSettings.EDITACCOUNT) ;
							}
							else
							{
								if (optikUtils.scrollToElementUsingExactAttributeValue(testCase, "value", "Logout")) {
									return scs.selectOptionFromSecondarySettings(SecondaryCardSettings.EDITACCOUNT) ;
								}
							}
						}
						catch (Exception e)
						{
							e.printStackTrace();
							flag=false;
						}
					}
				}
				break;

			case "ACTIVITY HISTORY":
				if(scs.isActivityHistoryOptionVisible())
				{
					scs.selectOptionFromSecondarySettings(SecondaryCardSettings.ACTIVITYHISTORY);
				}
				break;

			case "demo MEMBERSHIP":
				if(scs.isActivityHistoryOptionVisible())
				{
					scs.selectOptionFromSecondarySettings(SecondaryCardSettings.demoMEMBERSHIP);
				}
				break;


			case "LOCATION ADDRESS":
				if(scs.isLocationAddressOptionVisible())
				{
					scs.selectOptionFromSecondarySettings(SecondaryCardSettings.LOCATIONADDRESS);
				}
				break;

			case "VACATION":
				if(scs.isVacationOptionVisible())
				{
					scs.selectOptionFromSecondarySettings(SecondaryCardSettings.VACATION);
				}
				break;

			case "ADD USER":
				if(scs.isAddUserGlobalDrawerOptionVisible())
				{
					scs.selectOptionFromSecondarySettings(SecondaryCardSettings.ADDUSERS);
				}
				break;

			default:
				break;
			}
		}
		return flag;
	}

	public static boolean CreatePasscodeToggleButtonLocal(TestCases testCase, String language)
	{
		boolean flag = true ;
		MyAccountScreen myAcc= new MyAccountScreen(testCase,language);
		CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase,language);
		if (myAcc.isUsePasscodeToggleVisible(5))
			{
				if (myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("OFF")|| myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("0")|| myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("false"))
				{
					if (myAcc.clickOnUsePasscodeToggleButton())
					{
						Keyword.ReportStep_Pass(testCase , "Toggle Button is turning on state.") ;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is in off state'") ;
						flag = false ;
					}
					if (cyPop.isCreatePasscodeScreenVisible())
					{
						Keyword.ReportStep_Pass(testCase ,"Successfully switch from the 'My Account' screen to Passcode screen.") ;
						Keyword.ReportStep_Pass(testCase , "Create Passcode screen is displayed.") ;
					}
				}
				else
				{
					Keyword.ReportStep_Pass(testCase , "Aleaready Toggle Button is turning on state.") ;
					if (myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("ON")|| myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("1")|| myAcc.getUsePasscodeToggleStatus().equalsIgnoreCase("true"))
					{
						if (myAcc.clickOnUsePasscodeToggleButton())
						{
							Keyword.ReportStep_Pass(testCase , "Toggle Button is turning off state.") ;
						}
						else
						{
							Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION ,"Toggle Button is in ON state'") ;
							flag = false ;
						}
						if (cyPop.isForgetTextVisible())
						{
							Keyword.ReportStep_Pass(testCase ,"Successfully switch from the 'My Account' screen to Passcode screen.") ;
							Keyword.ReportStep_Pass(testCase , "Passcode screen is displayed to authenticate the user.") ;
						}
					}
				}
			}

		return flag ;
	}

	public static boolean verifyActivityLogClipActions(TestCases testCase,TestCaseInputs inputs)
	{
		boolean flag=true;

		ActivityLogsScreen acs= new ActivityLogsScreen(testCase);

		if(acs.isRecentClipVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Activity Log: Recent video clip is displayed");
			acs.clickOnRecentClip();

			if(acs.isClipLoadingVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Activity Log: 'Loading video clip' is displayed");
			}
			WebElement clipPlay;
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				clipPlay = testCase.getMobileDriver().findElement(By.id("video_player"));
			}
			else
			{
				clipPlay = testCase.getMobileDriver().findElement(By.xpath("//AppiumAUT/XCUIElementTypeApplication[1]/XCUIElementTypeWindow[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeCollectionView[1]/XCUIElementTypeCell[2]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeScrollView[1]/XCUIElementTypeOther[1]"));
			}
			clipPlay.click();
			Dimension dimension = clipPlay.getSize();
			org.openqa.selenium.Point point = clipPlay.getLocation();
			int width = dimension.getWidth()/2;
			int height = dimension.getHeight()/2;

			int X= point.getX()+width;
			int Y= point.getY()+height;
			testCase.getMobileDriver().tap(2 , X ,Y );
			testCase.getMobileDriver().tap(1 , X ,Y );
			clipPlay.click();
			String pageSource=testCase.getMobileDriver().getPageSource();


			if(pageSource.contains("camera_play") || pageSource.contains("Livestream"))
			{
				Keyword.ReportStep_Pass(testCase, "Activity Log: 'Camera Play button' is displayed");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Activity Log: 'Camera Play button' is not displayed", false);
			}

			if(pageSource.contains("camera_play_seekBar") || pageSource.contains("VideoClipSeekBar"))
			{
				Keyword.ReportStep_Pass(testCase, "Activity Log: 'Seek bar' is displayed");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Activity Log: 'Seek bar' is not displayed", false);
			}

			if(pageSource.contains("camera_play_endtime") || pageSource.contains("VideoClipDuration"))
			{
				Keyword.ReportStep_Pass(testCase, "Activity Log: 'Clip end time' is displayed");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Activity Log: 'Clip end time' is not displayed", false);
			}

			if(pageSource.contains("video_btn_fullscreen") || pageSource.contains("ExpandToFullscreenButton"))
			{
				Keyword.ReportStep_Pass(testCase, "Activity Log: 'Fullscreen button' is displayed");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Activity Log: 'Fullscreen button' is not displayed", false);
			}

			if(acs.isBackButtonVisible())
			{
				flag = flag && acs.clickOnBackButton();
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Activity Log: Back button not found", false);
			}
		}
		else{
			flag =false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Activity log: Video clip not found", false);
		}

		return flag;
	}

	public static boolean ScrollforSingleDayLocalization(List<String> dsd, TestCases testCase)
	{

		boolean flag = true, isScreenshotTaken = true ;
		try
		{
			MobileScreens ms = new MobileScreens(testCase) ;
			Document doc = ms.getPageSource() ; // XML
			CustomDriver driver = testCase.getMobileDriver() ;
			TouchAction action = new TouchAction(testCase.getMobileDriver());


			Dimension dimension = driver.manage().window().getSize();
			for (String temp : dsd) // Follow
			{
				if (MobileUtils.isRunningOnAndroid(testCase))
				{
					while(!ms.isElementPresent(doc , String.format("//*[contains(@content-desc,'%s') or contains(@text,'%s')]" , temp , temp)))
					{
						if (ms.isElementPresent(doc , String.format("//*[contains(@content-desc,'%s') or contains(@text,'%s')]" , temp , temp)))
						{
							String strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + temp + "') or contains(@text,'" + temp+ "')]" , false , false).getText() ;
							if (strText.isEmpty() || strText == null)
							{
								if (testCase.getTestCaseInputs().isRunningOn("TestObject"))
								{
									strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + temp + "') or contains(@text,'"+ temp + "')]" , false , false).getAttribute("contentDescription") ;
								}
								else
								{
									strText = MobileUtils.getMobElement(testCase ,"XPATH" ,"//*[contains(@content-desc,'" + temp + "') or contains(@text,'"+ temp + "')]" , false , false).getAttribute("name") ;
								}
							}
							if (isScreenshotTaken)
							{
								ReportStep_Pass_With_ScreenShot(testCase , "Expected Text displayed : "+ strText , driver) ;
								isScreenshotTaken = false ;
							}
							else
							{
								Keyword.ReportStep_Pass(testCase , "Expected Text displayed : " + strText) ;
							}
						}
						else
						{
							action.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();


						}
					}


				}
				else
				{
					while(!ms.isElementPresent(doc , String.format("//*[(@value='%s') or (@name='%s') or (@label='%s')]" , temp , temp , temp)))
					{
						if (ms.isElementPresent(doc , String.format("//*[(@value='%s') or (@name='%s') or (@label='%s')]" , temp , temp , temp)))
						{
							if (isScreenshotTaken)
							{
								ReportStep_Pass_With_ScreenShot(testCase , "Text displayed : " + temp ,driver) ;
								isScreenshotTaken = false ;
							}
							else
							{
								Keyword.ReportStep_Pass(testCase , "Text displayed : " + temp) ;
							}
						}

						else if (ms.isElementPresent(doc , String.format("//*[contains(@value,'%s') or contains(@name,'%s') or contains(@label,'%s') ]" , temp ,temp , temp)))
						{
							if (isScreenshotTaken)
							{
								ReportStep_Pass_With_ScreenShot(testCase , "Text displayed : " + temp ,driver) ;
								isScreenshotTaken = false ;
							}
							else
							{
								Keyword.ReportStep_Pass(testCase , "Text displayed : " + temp) ;
							}
						}

						else
						{
							action.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4))
							).release().perform();
						}
					}
				}
			}

		}
		catch (Exception e)
		{
			Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Error occurred : "+e.getMessage()) ;
		}
		return flag ;
	}



	public static boolean VerifyPasswordLocal(TestCases testCase, String language, TestCaseInputs inputs) {


		boolean flag=true;
		WebElement tap =null, tap1 =null,tap2 =null;
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);

		String DiffNewpwd = "Password12";
		String DiffVerifyNewpwd = "Password1";
		String pwd=inputs.getInputValue("PASSWORD").toString();

		if(sc.isChangePasswordOptionVisible(5))
		{
			sc.clickOnChangePasswordOption();
		}
		
		//------------------WithoutOldpwd-----------------------
		sc.isChangePasswordOptionVisible(5);
			 tap =sc.getTextStatusoldpwd();
			
			 
			 if(sc. isContinueButton1Visible(1)){
				sc.clickOnContinueButton1(); 
			 }
			
				
			 flag=flag && optikUtils.VerifyScreenLocalization(testCase, "WithoutOldpwd");

			//------------------VerifySameOldNewPwd-----------------------
				tap.clear();
				tap.sendKeys(pwd);
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
				if(sc. isContinueButton1Visible(1)){
					sc.clickOnContinueButton1(); 
				 }sc.isChangePasswordOptionVisible(5);
				 tap1 =sc.getTextStatusnewpwd();
				 tap2 =sc.getTextStatusverifypwd();

		//------------------withoutNewPwd-----------------------
		       	 
			tap2.clear();
			tap2.sendKeys(pwd);
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
			tap1.clear();
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
           if(sc. isContinueButton1Visible(1)){
				sc.clickOnContinueButton1(); 
			 }
			sc.isChangePasswordOptionVisible(5);
			flag=true;
			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "withoutNewPwd");
			
		 //------------------withoutNewPwd-----------------------
			tap1.clear();
			tap1.sendKeys(DiffNewpwd);
			MobileUtils.hideKeyboard(testCase.getMobileDriver());

			tap2.clear();
			tap2.sendKeys(DiffVerifyNewpwd);
			MobileUtils.hideKeyboard(testCase.getMobileDriver());

			if(sc. isContinueButton1Visible(1)){
				sc.clickOnContinueButton1(); 
			 }
			sc.isChangePasswordOptionVisible(5);
			flag=true;
			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "DiffNewAndVerify");

			if(sc. iscancelButton1Visible(1)){
				sc.clickOncancelButton1();
			}
			sc.clickOnBackButton();
		


		

		return flag;
	}

	public static boolean VerifyInvitedUser(TestCases testCase, TestCaseInputs inputs) {
		// TODO Auto-generated method stub
		boolean flag = true,verify=false ;

		try
		{
			LocationInformation de= new LocationInformation(testCase, inputs);
			long locationid=de.getLocationID();
			String countryName=de.getCountry();
			String zipCode=de.getZipCode();
			String streetAddress=de.getStreetAddress();
			inputs.setInputValue("CountryNameA", countryName, true);
			inputs.setInputValue("ZipCodeA", zipCode, true);
			inputs.setInputValue("StreetAddressA", streetAddress, true);
			String locid=String.valueOf(locationid);
			TestCaseInputs newInputs= new TestCaseInputs();
			newInputs.setInputValue("USERID", inputs.getInputValue("INVITE_USER").toString(), true);
			newInputs.setInputValue("PASSWORD", inputs.getInputValue("INVITE_PASSWORD").toString(), true);
			HashMap<String, Long> keys=null;
			newInputs.setInputValue(TestCaseInputs.APP_ENVIRONMENT, inputs.getInputValue("INVITE_APPENV").toString(), true);
			@SuppressWarnings("resource")
			CHILUtil chUtil = new CHILUtil(newInputs);
			if (chUtil.getConnection()) {
				keys=chUtil.getLocationNamesAndId();
			}
			Iterator<Entry<String, Long>> it = keys.entrySet().iterator();
			while (it.hasNext()) {
				Map.Entry pair = it.next();
				if(String.valueOf(pair.getValue()).equals(locid))
				{
					verify=true;

					Keyword.ReportStep_Pass(testCase, inputs.getInputValue("INVITE_USER").toString() +" has been Invited successfully from "+inputs.getInputValue("USERID")+" and verify through the CHIL\n Location ID : "+locid+" is successfully added in "+inputs.getInputValue("INVITE_USER").toString()+ " account");
					Keyword.ReportStep_Pass(testCase,"verified the access for invited location");
					break;
				}
			}
			if(!verify)
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invite User: Unable to Invite User");
			}
		}
		catch(Exception e)
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
		}

		return flag;
	}

	public static boolean loginTooptikAppInvalid(TestCases testCase, TestCaseInputs inputs,boolean... closeCoachMarks) {
		boolean flag = true;
		try
		{
			LoginScreen ls = new LoginScreen(testCase);
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
					flag=flag && optikUtils.VerifyScreenLocalization(testCase, "Login");
					flag = flag && ls.clickOnLoginButton();
				}
			}
			else
			{
				if (ls.isLoginButtonLocalVisible(inputs) && !ls.isEmailAddressTextFieldVisibleLocal(inputs)) {
					flag=flag && optikUtils.VerifyScreenLocalization(testCase, "Login");
					flag = flag && ls.isClickLoginButtonFirstLocal(inputs);
				}
			}
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			
			/*else
			{

					ls.clickOnoptikLogo();

			}*/
			try {
				Thread.sleep(5000);
			} catch (InterruptedException e) {
			}
			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "Login2");
			if (ls.setEmailAddressValue(inputs.getInputValue("USERID").toString())) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}
				/*else
				{

						ls.clickOnoptikLogo();

				}*/
				Keyword.ReportStep_Pass(testCase,
						"Login To optik : Email Address set to - " + inputs.getInputValue("USERID"));
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Login To optik : Not able to set Email Address.");
				flag = false;
			}
			if (ls.setPasswordValue((inputs.getInputValue("PASSWORD").toString())+"2")) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}
				/*else
				{
					ls.clickOnoptikLogo();
				}*/
				Keyword.ReportStep_Pass(testCase, "Login To optik : Invalid Password set to - " + inputs.getInputValue("PASSWORD")+"2");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Login To optik : Not able to set Password.");
				flag = false;
			}
			if (ls.isLoginButtonVisible()) {
				ls.clickOnLoginButton();
			} else {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
				ls.clickOnoptikLogo();
			}
			
			try {
				Thread.sleep(5000);
			} catch (InterruptedException e) {
			}

			if(!optikUtils.VerifyScreenLocalization(testCase, "Invalid_Login"))
			{
				Keyword.ReportStep_Fail(testCase, FailType.COSMETIC_FAILURE,
						"Login To optik : Email or Password Incorrect text is not displayed properly");
			}
			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				if(inputs.getInputValue("LANGUAGE").contains("Spanish"))
				{
					if(MobileUtils.isMobElementExists("XPATH","//*[contains(@name,'ACEPTAR')]", testCase))
					{
						MobileUtils.clickOnElement(testCase, "XPATH","//*[contains(@name,'ACEPTAR')]");

					}

				}
				/*else
				{
					ls.clickOnOKButton();
				}*/
			}



			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(ls.isCancelButtonVisible())
				{
					ls.clickOnCancelButton();
				}

				if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
					flag = flag && ls.clickOnLoginButton();
				}
			}
			else
			{
				/*ls.ClickOnLoginCancelLocal(inputs);

				if (ls.isLoginButtonLocalVisible(inputs) && !ls.isEmailAddressTextFieldVisibleLocal(inputs)) {
					flag = flag && ls.isClickLoginButtonLocal(inputs);
				}
				flag = flag && ls.isClickLoginButtonLocal(inputs);*/

				WebElement tap =ls.getEmailIdStatus(inputs);
				tap.clear();
				WebElement tap1 =ls.getPasswordStatus(inputs);
				tap1.clear();


			}

			if (ls.setEmailAddressValue("  "+inputs.getInputValue("USERID").toString())) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}
				Keyword.ReportStep_Pass(testCase,
						"Login To optik :Email Address with space set to -"+"  "+inputs.getInputValue("USERID"));
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Login To optik : Not able to set Email Address.");
				flag = false;
			}

			if (ls.setPasswordValue((inputs.getInputValue("PASSWORD").toString()))) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}
				/*else
				{
					ls.clickOnoptikLogo();
				}*/
				Keyword.ReportStep_Pass(testCase, "Login To optik : Password set to - " + inputs.getInputValue("PASSWORD"));
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Login To optik : Not able to set Password.");
				flag = false;
			}

			if (ls.isLoginButtonVisible()) {
				flag = flag && ls.clickOnLoginButton();
			} else {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
			}

			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				/*if(inputs.getInputValue("LANGUAGE").contains("English"))
				{*/
				flag=flag&optikUtils.VerifyScreenLocalization(testCase, "Invalid_Login");
				/*}else
				{

				flag = flag && optikUtils.verifyLoginSuccessfulLocal(testCase, inputs);
				if (closeCoachMarks.length > 0) {
					flag = flag && optikUtils.verifyLoginSuccessfulLocal(testCase, inputs, closeCoachMarks[0]);
				} else {
					flag = flag && optikUtils.verifyLoginSuccessfulLocal(testCase, inputs);
				}
				}*/
			}
			else
			{
				if(ls.isLoginButtonDisabled())
				{
					Keyword.ReportStep_Pass(testCase, "Login To optik : Login button is disabled and user is not able to login");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Login To optik : Login Button is enabled");
					flag = false;
				}
			}
		}
		catch(Exception e)
		{
			
		}
		
		return flag;
	}

	public static boolean verifyEditAccount(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		MyAccountScreen mas=new MyAccountScreen(testCase);

		if(mas.isNameLabelVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Edit Account: Name label displayed");
			mas.clickOnNameLabel();
			Keyword.ReportStep_Pass(testCase, "Edit Account: click on Name label");


		}
		else
		{
			flag =false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account: Unable to find Name label ");


		}
		if(mas.isFirstNameFieldLabelVisible(10))
		{
			Keyword.ReportStep_Pass(testCase, "Edit Account: First Name Field is displayed with value:"+mas.getFirstNameFieldValue());
		}
		else
		{
			flag =false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account: Unable to find First Name field", false);
		}

		if(mas.isLastNameFieldLabelVisible(10))
		{

			Keyword.ReportStep_Pass(testCase, "Edit Account: Last Name Field is displayed with value:"+mas.getLastNameFieldValue());
		}
		else
		{
			flag =false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account: Unable to find Last Name field", false);
		}
		if(mas.isBackButtonVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Name Page: back button displayed");
			mas.clickOnBackButton();
		}
		else
		{
			flag =false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Name Page: back button Not displayed ");


		}


		if(mas.isEmailAddressFieldLabelVisible(10))
		{
			Keyword.ReportStep_Pass(testCase, "Edit Account: Email Address Label is displayed with value:"+mas.getEmailAddressFieldValue());
		}
		else
		{
			flag =false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account: Unable to find Email Address Label", false);
		}

		//

		if(mas.isChangePasswordButtonVisible(10))
		{
			Keyword.ReportStep_Pass(testCase, "Edit Account: Change Password Button is displayed");
		}
		else
		{
			flag =false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account: Unable to Change Password button", false);
		}

		if(mas.isDeleteAccountButtonVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Edit Account: Delete Account button is displayed");
		}
		else
		{
			flag =false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account: Unable to find Delete Account ", false);
		}



		if(mas.isUsePasscodeLabelVisible(10))
		{
			Keyword.ReportStep_Pass(testCase, "Edit Account: Use Passcode Label is displayed");
		}
		else
		{
			flag =false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account:Use Passcode Label is not displayed", false);
		}

		if(mas.isUsePasscodeToggleVisible(10))
		{
			Keyword.ReportStep_Pass(testCase, "Edit Account: Use Passcode Toggle is displayed");

		}
		else
		{
			flag =false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account:Use Passcode Toggle is not displayed", false);
		}

		return flag;

	}

	public static boolean verifyEditAccountAppProtected(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		MyAccountScreen mas=new MyAccountScreen(testCase);
		SecondaryCardSettings scs=new SecondaryCardSettings(testCase);

		if(mas.isChangePasscodeButtonVisible(10))
		{
			Keyword.ReportStep_Pass(testCase, "Edit Account: Change Passcode Toggle is displayed");
		}
		else
		{
			flag =false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account:Change Passcode Toggle is not displayed", false);
		}

		if(mas.isChangePasscodeButtonVisible(10))
		{
			Keyword.ReportStep_Pass(testCase, "Edit Account: Change Passcode Button is displayed");

		}
		else
		{
			flag =false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account:Change Passcode Button is not displayed", false);
		}


		String status=mas.getUsePasscodeToggleStatus();

		if(status.equalsIgnoreCase("on") || status.equalsIgnoreCase("1")||status.equalsIgnoreCase("true"))
		{
			Keyword.ReportStep_Pass(testCase, "Edit Account: Use Passcode Toggle is displayed with Status:"+mas.getUsePasscodeToggleStatus());

			if(mas.isUnlockWithTouchIdLabelVisible(10))
			{
				Keyword.ReportStep_Pass(testCase, "Edit Account: Unlock With Touch Id Label is displayed");
			}

			if(mas.isUnlockWithTouchIdToggleButtonVisible(10))
			{
				Keyword.ReportStep_Pass(testCase, "Edit Account: Unlock With Touch Id Toggle Button is displayed");
			}

		}
		else
		{
			flag =false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account:Use Passcode Toggle is not displayed with On Status", false);
		}



		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);

		if(statInfo.getJasperDeviceType().contains("EMEA"))
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{

				MobileUtils.scrollToExactAndroid(testCase, "UnSubscribe");
			}else
			{

				Schedule.SwipeDown(testCase);
			}

			if(mas.isSubscribeButtonVisible(5))
			{
				Keyword.ReportStep_Pass(testCase, "Edit Account: Subscribe button is displayed.");
			}
			else
			{
				flag =false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account:Subscribe button not displayed.", false);
			}

			if(mas.isUnSubscribeButtonVisible(5))
			{
				Keyword.ReportStep_Pass(testCase, "Edit Account: UnSubscribe button is displayed.");
			}
			else
			{
				flag =false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account:UnSubscribe button not displayed.", false);
			}


		}

		if(mas.isBackButtonVisible())
		{
			if(!mas.clickOnBackButton())
			{
				flag =false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account: Unable to click on Back button", false);
			}
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account: Unable to find Back button", false);
		}


		if(scs.isBackButtonVisible())
		{
			if(!mas.clickOnBackButton())
			{
				flag =false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to click on Back button", false);
			}
		}

		return flag;
	}

	public static boolean verifyEditAccountAppUnProtected(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		MyAccountScreen mas=new MyAccountScreen(testCase);
		SecondaryCardSettings scs=new SecondaryCardSettings(testCase);
		String status=mas.getUsePasscodeToggleStatus();
		if(status.equalsIgnoreCase("off") || status.equalsIgnoreCase("0")||status.equalsIgnoreCase("false"))
		{
			Keyword.ReportStep_Pass(testCase, "Edit Account: Use Passcode Toggle is displayed with Status:"+mas.getUsePasscodeToggleStatus());
		}
		else
		{
			flag =false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account:Use Passcode Toggle is not displayed with Off Status", false);
		}

		/*
		 * if(!MobileUtils.isRunningOnAndroid(testCase)) { if(mas.isSaveButtonVisible())
		 * { Keyword.ReportStep_Pass(testCase,
		 * "Edit Account: Save button is displayed.");
		 *
		 * } else { flag =false; Keyword.ReportStep_Fail(testCase,
		 * FailType.FUNCTIONAL_FAILURE, "Edit Account:Save button not displayed.",
		 * false); } }
		 */

		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);

		if(statInfo.getJasperDeviceType().contains("EMEA"))
		{
			if(MobileUtils.isRunningOnAndroid(testCase))
			{

				MobileUtils.scrollToExactAndroid(testCase, "UnSubscribe");
			}else
			{
				Schedule.SwipeDown(testCase);
			}
			if(mas.isSubscribeButtonVisible(5))
			{
				Keyword.ReportStep_Pass(testCase, "Edit Account: Subscribe button is displayed.");
			}
			else
			{
				flag =false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account:Subscribe button not displayed.", false);
			}

			if(mas.isUnSubscribeButtonVisible(5))
			{
				Keyword.ReportStep_Pass(testCase, "Edit Account: UnSubscribe button is displayed.");
			}
			else
			{
				flag =false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account:UnSubscribe button not displayed.", false);
			}

		}


		if(mas.isBackButtonVisible())
		{
			if(!mas.clickOnBackButton())
			{
				flag =false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account: Unable to click on Back button", false);
			}
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account: Unable to find Back button", false);
		}


		if(scs.isBackButtonVisible())
		{
			if(!mas.clickOnBackButton())
			{
				flag =false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to click on Back button", false);
			}
		}
		return flag;
	}
	public static boolean VerifyRemoveInvitedUser(TestCases testCase, TestCaseInputs inputs) {
		// TODO Auto-generated method stub

		boolean flag = true, verify = true ;
		try
		{
			LocationInformation de= new LocationInformation(testCase, inputs);
			long locationid=de.getLocationID();
			String countryName=de.getCountry();
			String zipCode=de.getZipCode();
			String locid=String.valueOf(locationid);
			TestCaseInputs newInputs= new TestCaseInputs();
			newInputs.setInputValue("USERID", inputs.getInputValue("INVITE_USER").toString(), true);
			newInputs.setInputValue("PASSWORD", inputs.getInputValue("INVITE_PASSWORD").toString(), true);
			HashMap<String, Long> keys=null;
			newInputs.setInputValue(TestCaseInputs.APP_ENVIRONMENT, inputs.getInputValue("INVITE_APPENV").toString(), true);
			@SuppressWarnings("resource")
			CHILUtil chUtil = new CHILUtil(newInputs);
			if (chUtil.getConnection()) {
				keys=chUtil.getLocationNamesAndId();
			}
			Iterator<Entry<String, Long>> it = keys.entrySet().iterator();
			while (it.hasNext()) {
				Map.Entry pair = it.next();
				if(String.valueOf(pair.getValue()).equals(locid))
				{
					verify=false;
				}
			}
			if(!verify)
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invite User: Unable to Remove Invite User verified through the CHIL");
			}
			else
			{
				Keyword.ReportStep_Pass(testCase, inputs.getInputValue("INVITE_USER").toString() +" has been Remove successfully from "+inputs.getInputValue("USERID")+" and verify through the CHIL\n Location ID : "+locid+" is successfully Removed in "+inputs.getInputValue("INVITE_USER").toString()+ " account");
			}
		}
		catch(Exception e)
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
		}

		return flag;

	}

	public static boolean VerifyInvitedUserAddressSameforBoth(TestCases testCase, TestCaseInputs inputs) {
		// TODO Auto-generated method stub
		boolean flag=true;

		navigatetoGlobalDrwaerOption(testCase , SecondaryCardSettings.LOCATIONADDRESS);
		LocationDetailsScreen ld=new LocationDetailsScreen(testCase);

SecondaryCardSettings sc=new SecondaryCardSettings(testCase);

		/*if(!MobileUtils.isRunningOnAndroid(testCase))
		{
		if(sc.isEditExistingAddressButtonVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Edit Button Is Visible");
		sc.clickOnEditExistingAddressButton();
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Button is not visible");
		}

		}*/

		/*if(ld.getStreetAddressValue().contains(inputs.getInputValue("StreetAddressA")))
		{
		     Keyword.ReportStep_Pass(testCase, "Street Address of Invited user is same as invitor Street Address i.e. :"+ld.getStreetAddressValue());
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Street Address of Invited user is not same as invitor Street Address");
		}*/

		if(ld.getCountryNameValue().contains(inputs.getInputValue("CountryNameA")))
		{
			Keyword.ReportStep_Pass(testCase, "Country Name of Invited user is same as invitor country Name i.e. "+ld.getCountryNameValue());
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Country Name of Invited user is not same as invitor Country Name");
		}

		if(ld.getcityStatezipcode().contains(inputs.getInputValue("ZipCodeA")))
		{
			Keyword.ReportStep_Pass(testCase, "Zip Code of Invited user is same as invitor Zip Code i.e. "+ld.getcityStatezipcode());
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Zip Code of Invited user is not same as invitor Zip Code");
		}

		if(ld.isBackButtonVisible(5))
		{
			ld.ClickOnBackButton();
		}

		if(ld.isBackButtonVisible(5))
		{
			ld.ClickOnBackButton();
		}

		CoachMarkUtils.closeCoachMarks(testCase);

		return flag;
	}


	public static boolean VerifyInvitedUserAddressAfterRemoval(TestCases testCase, TestCaseInputs inputs) {
		// TODO Auto-generated method stub
		boolean flag=true;
		Dashboard db = new Dashboard(testCase);
		SecondaryCardSettings sc = new SecondaryCardSettings(testCase);

		//navigatetoGlobalDrwaerOption(testCase , SecondaryCardSettings.LOCATIONADDRESS);
		LocationDetailsScreen ld=new LocationDetailsScreen(testCase);

		if(!ld.getCountryNameValue().contains(inputs.getInputValue("CountryNameA")))
		{
			Keyword.ReportStep_Pass(testCase, "Country Name of Invited user is not same after removal");
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Country Name of Invited user is same as invitor Country Name after removal");
		}

		if(!ld.getcityStatezipcode().contains(inputs.getInputValue("ZipCodeA")))
		{
			Keyword.ReportStep_Pass(testCase, "Zip Code of Invited user is not same after removal");
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Zip Code of Invited user is same as invitor Zip Code after removal");
		}

		/*if(!ld.getStreetAddressValue().contains(inputs.getInputValue("StreetAddressA")))
		{
		     Keyword.ReportStep_Pass(testCase, "Street Address of of Invited user is not same after removal");
		     Keyword.ReportStep_Pass(testCase, "Successully remove the location access");
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Street Address of Invited user is  same as invitor Street Address after removal");
		}*/

		if(ld.isBackButtonVisible(2))
		{
			ld.ClickOnBackButton();
		}

		if(ld.isBackButtonVisible(2))
		{
			ld.ClickOnBackButton();
		}

		CoachMarkUtils.closeCoachMarks(testCase);

		return flag;
	}

	public static boolean continueAppFeedback(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		FeedBackScreen FB=null;
		String language = testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		if(language != null){

			FB = new FeedBackScreen(testCase);
		}
		else
		{
		FB = new FeedBackScreen(testCase, language);	}



		if (FB.isFeedbackFiveVisible()) {
			if (FB.clickonFeedbackFive()) {
				Keyword.ReportStep_Pass(testCase, "User click on 5th Star.");
			}

			if (inputs.isInputAvailable("LANGUAGE")) {
				flag = flag && optikUtils.VerifyScreenLocalization(testCase, "ratemyappscreen2");
			}

			if (FB.isFeedbackThanksCloseVisible()) {
				FB.clickonFeedbackThanksCloseButton();
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Unable to click on Feedback Close Button.");
				flag = false;
			}
			/*
			 * if(!inputs.isRealDevice() && inputs.isRunningOnSauceLabs()) {
			 * if(FB.isChromeVisible(5)) { FB.clickonChromelableButton();
			 *
			 * if(FB.isJustonceVisible()) { FB.clickonJustonceButton(); }
			 * flag=true; frs.isFilterReminderTextVisible(5); } }
			 *
			 * if(inputs.isInputAvailable("LANGUAGE")) { flag=flag &&
			 * optikUtils.VerifyScreenLocalization(testCase,
			 * "rategoogleplaypage"); }
			 *
			 *
			 *
			 * MobileUtils.pressBackButton(testCase,
			 * "Return to about the App from DLS App on the Play store");
			 */
			FilterReminderScreen frs = new FilterReminderScreen(testCase);
			frs.clickOnBackButton();
			frs.clickOnBackButton();

		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to click on 5th star");
			flag = false;
		}

		return flag;
	}

	public static boolean verifyRatemyappthroughglobaldrawerlocalization(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);
		Dashboard ds = new Dashboard(testCase,language);
		ds.clickOnGlobalDrawerButton();
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "Globaldrawer_1");
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{

			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
			touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4))).release().perform();


		}else
		{
			if(language.contains("French"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "DÃ©connexion");
			}
			else if(language.contains("Italian"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Disconnessione");
			}
			else if(language.contains("English"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Logout");
			}
			else if(language.contains("German"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Abmelden");
			}
			else if(language.contains("Spanish"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Cerrar sesi");
			}
			else if(language.contains("Dutch"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Afmelden");
			}
			else if(language.contains("PortugueseBR"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Cerrar sesi");
			}
			else if(language.equalsIgnoreCase("Polish"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Wyloguj");
			}
			else if(language.contains("PortuguesePL"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Terminar sess");
			}
			else if(language.contains("Slovakian"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Odhl�senie");
			}
			else if(language.equalsIgnoreCase("Hungarian"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Kijelentkez�s");
			}
			else if(language.equalsIgnoreCase("Czech"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Odhl�sit");
			}
		}

		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "Globaldrawer_2");
		sc.selectOptionFromSecondarySettings("About the app");
		optikUtils.VerifyScreenLocalization(testCase, "AboutTheApp");
		sc.selectOptionFromSecondarySettings("Feedback");
		optikUtils.verifyFeedbackPopUp(testCase, inputs);
		optikUtils.continueAppFeedback(testCase, inputs);
		return flag;
	}

	public static boolean VerifyCreateAccountForNegativeScenarios(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;

		LoginScreen ls=new LoginScreen(testCase);
		EditAddressLocation eal=new EditAddressLocation(testCase);
		CreateAccountScreen cas=new CreateAccountScreen(testCase);
		ChangeCountryScreen ccs= new ChangeCountryScreen(testCase);
		MobileUtilsLocal l=new MobileUtilsLocal();
		if(ls.isCreateAccountVisible()){
			ls.navigateToCreateAccountScreen();


			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtilsLocal.swipeup(testCase);
				}

			String country_name=Verifycountry(testCase, inputs);
			if(country_name.equalsIgnoreCase(eal.getChangeCountryButtonFieldValue()) ||country_name.contains(eal.getChangeCountryButtonFieldValue()) || eal.getChangeCountryButtonFieldValue().contains(country_name)){
				Keyword.ReportStep_Pass(testCase, "Already Set Country");
			}else{
				flag=Setcountry(testCase, inputs);
			}
			//Step 1

			if(cas.isFirstNameLabelVisible())
			{
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.scrollToExactAndroid(testCase , "Create");
				}
				else
				{
					try
					{
						l.swipe(testCase);
						l.swipe(testCase);

					}
					catch (Exception e)
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
					}
				}
				if(cas.isCreateButtonVisible())
				{
					cas.clickOnCreateButton();
					Keyword.ReportStep_Pass(testCase,"Successfully Tapped on 'Create' tab without entering details in any of the field");

				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "First name field is not displayed");
				flag = false;
			}

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.scrollToExactAndroid(testCase , "First Name");
				/*if(cas.isAllfieldEmptyErrorPopupvisible(testCase))
				{
					Keyword.ReportStep_Pass(testCase,
							"Verified Successfully the All field empty error popup i.e."+cas.getAllfieldEmptyErrorPopupText());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify All field empty error popup");
					flag = false;
				}
				if(cas.isOkButtonVisible())
				{
					cas.clickOnOkButton();
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
				}*/
			}



				if(cas.isFirstNameErrorFieldVisible())
				{
					Keyword.ReportStep_Pass(testCase,
							"Verified Successfully the first name error i.e. "+cas.getFirstNameErrorFieldPopup());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify first name error.");
					flag = false;
				}

				if(cas.isLastNameErrorFieldVisible())
				{
					Keyword.ReportStep_Pass(testCase,
							"Verified Successfully the Last name error i.e. "+cas.getLastNameErrorFieldPopup());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify Last name error.");
					flag = false;
				}

				if(cas.isEmptyEmailVisible())
				{
					Keyword.ReportStep_Pass(testCase,
							"Verified Successfully the Empty Email error i.e. "+cas.getEmptyEmailPopup());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify Empty Email error.");
					flag = false;
				}

				if(cas.isPasswordErrorFieldVisible())
				{
					Keyword.ReportStep_Pass(testCase,
							"Verified Successfully the Password error i.e. "+cas.getPasswordErrorFieldPopup());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify Password error.");
					flag = false;
				}



			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.scrollToExactAndroid(testCase , "First Name");

			}

			if(cas.isFirstNameLabelVisible())
			{
				Keyword.ReportStep_Pass(testCase,"Verified Successfully the Create Account pages is displayed");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify Create Account pages is displayed");
				flag = false;
			}
			//Step 2

			if(cas.isFirstNameLabelVisible())
			{

				if(cas.setFirstNameValue("ABC"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,"Successfully set value to first name field i.e. ABC");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set value to first name field");
					flag = false;
				}

				if(cas.setLastNameValue("XYZ"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "return");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,"Successfully set value to last name field i.e. XYZ");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set value to last name field");
					flag = false;
				}

				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.scrollToExactAndroid(testCase , "Create");
				}
				else
				{
					try
					{
						l.swipe(testCase);
						l.swipe(testCase);
					}
					catch (Exception e)
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
					}
				}
				if(cas.isCreateButtonVisible())
				{
					cas.clickOnCreateButton();
					Keyword.ReportStep_Pass(testCase,"Successfully Tapped on 'Create' tab with only entering details of first name and last name");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," Create Button Not visible after only first name and last name added");
				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "First name field is not displayed");
				flag = false;
			}
			/*if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				if(cas.isEmailPasswordEmptyErrorvisible(testCase))
				{
					Keyword.ReportStep_Pass(testCase,
							"Verified Successfully the Email Address and Password error popup i.e."+cas.getEmailPasswordEmptyErrorPopupText());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify Email Address and Password error popup");
					flag = false;
				}
				if(cas.isOkButtonVisible())
				{
					cas.clickOnOkButton();
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
				}
			}
			else
			{*/

				if(cas.isEmptyEmailVisible())
				{
					Keyword.ReportStep_Pass(testCase,
							"Verified Successfully the Empty Email error i.e. "+cas.getEmptyEmailPopup());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify Empty Email error.");
					flag = false;
				}

				if(cas.isPasswordErrorFieldVisible())
				{
					Keyword.ReportStep_Pass(testCase,
							"Verified Successfully the Password error i.e. "+cas.getPasswordErrorFieldPopup());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify Password error.");
					flag = false;
				}

			//}

			//Step 3

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.scrollToExactAndroid(testCase , "ABC");
			}

			if(cas.isFirstNameLabelVisible())
			{

				if(cas.setEmailAddressValue("prod1_na@grr.la"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "return");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,"Successfully set value to Email Address field i.e. prod1_na@grr.la");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set value to Email Address field");
					flag = false;
				}


				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.scrollToExactAndroid(testCase , "Create");
				}
				else
				{
					try
					{
						l.swipe(testCase);
						l.swipe(testCase);
					}
					catch (Exception e)
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
					}
				}
				if(cas.isCreateButtonVisible())
				{
					cas.clickOnCreateButton();
					Keyword.ReportStep_Pass(testCase,"Successfully Tapped on 'Create' tab with only entering details of first name, last name and valid email address");
				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "First name field is not displayed");
				flag = false;
			}
		/*	if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				if(cas.isPasswordErrorvisible(testCase))
				{
					Keyword.ReportStep_Pass(testCase,
							"Verified Successfully the Password error popup i.e."+cas.getPasswordErrorPopupText());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify Password error popup");
					flag = false;
				}
				if(cas.isOkButtonVisible())
				{
					cas.clickOnOkButton();
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
				}
			}
			else
			{*/

				if(cas.isPasswordErrorFieldVisible())
				{
					Keyword.ReportStep_Pass(testCase,
							"Verified Successfully the Password error i.e. "+cas.getPasswordErrorFieldPopup());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify Password error.");
					flag = false;
				}

			//}

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.scrollToExactAndroid(testCase , "ABC");
			}

			// Step 4

			if(cas.isFirstNameLabelVisible())
			{

				if(cas.setPasswordValue("Password1"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "return");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,"Successfully set value to Password field i.e. Password1");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set value to Password  field");
					flag = false;
				}


				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.scrollToExactAndroid(testCase , "Create");
				}
				else
				{
					try
					{
						l.swipe(testCase);
						l.swipe(testCase);
					}
					catch (Exception e)
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
					}
				}
				if(cas.isCreateButtonVisible())
				{
					cas.clickOnCreateButton();
					Keyword.ReportStep_Pass(testCase,"Successfully Tapped on 'Create' tab with only entering details of first name, last name and valid email address ,valid password in password field");
				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "First name field is not displayed");
				flag = false;
			}
		/*	if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				if(cas.isPasswordMissmatchvisible(testCase))
				{
					Keyword.ReportStep_Pass(testCase,
							"Verified Successfully the Password error popup i.e."+cas.getPasswordMissmatchPopupText());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify Password error popup");
					flag = false;
				}
				if(cas.isOkButtonVisible())
				{
					cas.clickOnOkButton();
				}
			}
			else
			{*/

				if(cas.isPasswordMissmatchvisible(testCase))
				{
					Keyword.ReportStep_Pass(testCase,
							"Verified Successfully the Password error i.e. "+cas.getPasswordMissmatchPopupText());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify Password error.");
					flag = false;
				}

			//}

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.scrollToExactAndroid(testCase , "ABC");
			}

			// step 5

			if(cas.isFirstNameLabelVisible())
			{

				WebElement tap =cas.getPassword();
				tap.clear();
				if(cas.setPasswordValue("Password123"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "return");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,"Successfully set value to Password field i.e. Password123");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set value to Password  field");
					flag = false;
				}

				if(cas.setVerifyPasswordValue("Password12"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "return");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,"Successfully set value to Password field i.e. Password12");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set value to Password  field");
					flag = false;
				}


				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.scrollToExactAndroid(testCase , "Create");
				}
				else
				{
					try
					{
						l.swipe(testCase);
						l.swipe(testCase);
					}
					catch (Exception e)
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
					}
				}
				if(cas.isCreateButtonVisible())
				{
					cas.clickOnCreateButton();
					Keyword.ReportStep_Pass(testCase,"Successfully Tapped on 'Create' tab with only entering details of first name, last name and valid email address ,wrong password in password and verify field");
				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "First name field is not displayed");
				flag = false;
			}
			/*if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				if(cas.isPasswordMissmatchvisible(testCase))
				{
					Keyword.ReportStep_Pass(testCase,
							"Verified Successfully the Password error popup after entering wrong password for both field i.e."+cas.getPasswordMissmatchPopupText());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify Password error popup");
					flag = false;
				}
				if(cas.isOkButtonVisible())
				{
					cas.clickOnOkButton();
				}
			}
			else
			{*/

				if(cas.isPasswordMissmatchvisible(testCase))
				{
					Keyword.ReportStep_Pass(testCase,
							"Verified Successfully the Password error i.e. "+cas.getPasswordMissmatchPopupText());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify Password error.");
					flag = false;
				}

			//}

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.scrollToExactAndroid(testCase , "ABC");
			}
			// step 6

			if(cas.isFirstNameLabelVisible())
			{

				cas.ClickOnFirstName();
				WebElement tap =cas.getFirstNameButton();
				tap.clear();
				if(cas.setFirstNameValue("Abcdefghijklmnopqrstuvwxyz"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "return");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,"Successfully set value to first name field i.e. Abcdefghijklmnopqrstuvwxyz");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set value to first name field");
					flag = false;
				}

				cas.ClickOnLastName();
				WebElement te=cas.getLastName();
				te.clear();
				if(cas.setLastNameValue("Abcdefghijklmnopqrstuvwxyz"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "return");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,"Successfully set value to last name field i.e. Abcdefghijklmnopqrstuvwxyz");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set value to last name field");
					flag = false;
				}

				cas.ClickOnPassword();
				WebElement t1 =cas.getPassword();
				t1.clear();
				if(cas.setPasswordValue("Password1"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "return");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,"Successfully set value to Password field i.e. Password1");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set value to Password  field");
					flag = false;
				}

				cas.ClickOnVerifyPassword();
				WebElement t2 =cas.getVerifyPassword();
				t2.clear();
				if(cas.setVerifyPasswordValue("Password1"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "return");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,"Successfully set value to Password field i.e. Password1");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to set value to Password  field");
					flag = false;
				}


				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.scrollToExactAndroid(testCase , "Create");
				}
				else
				{
					try
					{
						l.swipe(testCase);
						l.swipe(testCase);
					}
					catch (Exception e)
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
					}
				}
				if(cas.isCreateButtonVisible())
				{
					cas.clickOnCreateButton();

				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "First name field is not displayed");
				flag = false;
			}


			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Abcdefghijklmnopqrstuvwxyz");
			}
			if(cas.isAlreadyRegisteredEmailVisible())
			{
				Keyword.ReportStep_Pass(testCase,
						"Verified Successfully the Email Already Exists error popup after entering fisrt and last name more than 25 characters and valid password with existing Email address i.e"+cas.getAlreadyRegisteredEmailPopup());
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Verified Successfully the Email Already Exists error popup");
				flag = false;
			}

			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
			/*	if(cas.isCloseButtonVisible(2))
				{
					cas.clickOnCloseButton();
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "close button is not displayed");
					flag = false;
				}*/

				if(cas.isCancelButtonVisible())
				{
					cas.clickOnCancelButton();
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Cancel button is not displayed");
					flag = false;
				}

			}
			else
			{
				if(!MobileUtils.pressBackButton(testCase, "Successfully Navigate to back"))
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Navigate back");
				}
			}

		}
		return flag;
	}



	public static boolean verifyAppFeedbackThroughGlobaldrawerLocalization(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		FeedBackScreen fbs=new FeedBackScreen(testCase);
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);
		Dashboard ds = new Dashboard(testCase,language);
		ds.clickOnGlobalDrawerButton();
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{

			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
			touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4))).release().perform();


		}else
		{
			if(language.contains("French"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "DÃ©connexion");
			}
			else if(language.contains("Italian"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Disconnessione");
			}
			else if(language.contains("English"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Logout");
			}
			else if(language.contains("German"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Abmelden");
			}
			else if(language.contains("Spanish"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Cerrar sesi");
			}
			else if(language.contains("Dutch"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Afmelden");
			}
			else if(language.contains("PortugueseBR"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Cerrar sesi");
			}else if(language.contains("PortuguesePL"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Terminar sess");
			}
			else if(language.equalsIgnoreCase("Polish"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Wyloguj");

			}
			else if(language.equalsIgnoreCase("Hungarian"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Kijelentkez�s");

			}
			else if(language.equalsIgnoreCase("Slovakian"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Odhl�senie");
			}
			else if(language.equalsIgnoreCase("Czech"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Odhl�sit");
			}
			else
			{
				MobileUtils.scrollToExactAndroid(testCase , "Logout");
			}
		}

		sc.selectOptionFromSecondarySettings("About the app");
		optikUtils.VerifyScreenLocalization(testCase, "AboutTheApp");
		sc.selectOptionFromSecondarySettings("Feedback");


		optikUtils.VerifyScreenLocalization(testCase, "FeedBack");

		if(fbs.isFeedbackThreeVisible())
		{
			fbs.clickonFeedbackThree();
		}

		optikUtils.VerifyScreenLocalization(testCase, "APPFeedBack");

		String text = "Automation Test";

		if (MobileUtils.isRunningOnAndroid(testCase))
		{
			WebElement tap =fbs.getfeedbacktext(inputs);
			tap.clear();
			tap.sendKeys(text);
			MobileUtils.hideKeyboard(testCase.getMobileDriver());


			Keyword.ReportStep_Pass(testCase, "Able to set feedback i.e " + text);

		}

		if(fbs.isToggleButtonVisible())
		{
			flag=flag && fbs.clickOnToggleButton();
		}

		if(fbs.isSendfeedbackButtonVisible())
		{
			flag=flag && fbs.clickonSendfeedbackButton();
		}


		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			sc.clickOnBackButton();
			sc.clickOnBackButton();
		}

		return flag;
	}




	public static boolean VerifyChangePasswordLocal(TestCases testCase, String language, TestCaseInputs inputs) {

		boolean flag=true;
		WebElement tap =null, tap1 =null,tap2 =null;
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);

		String DiffNewpwd = "Password12";
		String DiffVerifyNewpwd = "Password1";
		String pwd=inputs.getInputValue("PASSWORD").toString();

		if(sc.isChangePasswordOptionVisible(5))
		{
			sc.clickOnChangePasswordOption();

			 tap =sc.getTextStatusoldpwd();
			 tap1 =sc.getTextStatusnewpwd();
			 tap2 =sc.getTextStatusverifypwd();


				tap.clear();
				tap.sendKeys(pwd);
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			tap1.clear();
			tap1.sendKeys(pwd);
			MobileUtils.hideKeyboard(testCase.getMobileDriver());

			tap2.clear();
			tap2.sendKeys(pwd);
			MobileUtils.hideKeyboard(testCase.getMobileDriver());

			sc.clickOnSavePasswordOption();
			sc.isChangePasswordOptionVisible(5);
			flag=true;
			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "VerifySameOldNewPwd");

			 tap =sc.getTextStatusoldpwd();
			 tap1 =sc.getTextStatusnewpwd();
			 tap2 =sc.getTextStatusverifypwd();
					try {
						tap.clear();
					} catch (Exception e) {

					}


			MobileUtils.hideKeyboard(testCase.getMobileDriver());

			sc.clickOnSavePasswordOption();
			sc.isChangePasswordOptionVisible(5);
			flag=true;
			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "WithoutOldpwd");

			 tap =sc.getTextStatusoldpwd();
			 tap1 =sc.getTextStatusnewpwd();
			 tap2 =sc.getTextStatusverifypwd();
					tap.clear();
					tap.sendKeys(pwd);
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
			tap2.clear();
			tap2.sendKeys(pwd);
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
			tap1.clear();
			MobileUtils.hideKeyboard(testCase.getMobileDriver());

			tap1.clear();
			MobileUtils.hideKeyboard(testCase.getMobileDriver());

			sc.clickOnSavePasswordOption();
			sc.isChangePasswordOptionVisible(5);
			flag=true;
			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "withoutNewPwd");

			 tap =sc.getTextStatusoldpwd();
			 tap1 =sc.getTextStatusnewpwd();
			 tap2 =sc.getTextStatusverifypwd();

			tap1.clear();
			tap1.sendKeys(DiffNewpwd);
			MobileUtils.hideKeyboard(testCase.getMobileDriver());

			tap2.clear();
			tap2.sendKeys(DiffVerifyNewpwd);
			MobileUtils.hideKeyboard(testCase.getMobileDriver());

			sc.clickOnSavePasswordOption();
			sc.isChangePasswordOptionVisible(5);
			flag=true;
			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "DiffNewAndVerify");

			sc.clickOnBackButton();
			sc.clickOnBackButton();
			sc.clickOnBackButton();


		}

		return flag;
	}




	public static boolean VerifyCreateAccountScreenLocal(TestCases testCase,TestCaseInputs inputs)
	{
		boolean flag=true;
		String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		LoginScreen ls;
		CreateAccountScreen cas;
		ChangeCountryScreen ccs;

		if(inputs.isInputAvailable("LANGUAGE"))
		{
			ls=new LoginScreen(testCase,language);
			cas=new CreateAccountScreen(testCase,language);
			ccs= new ChangeCountryScreen(testCase,language);

		}else{

			ls=new LoginScreen(testCase);
			cas=new CreateAccountScreen(testCase);
			ccs= new ChangeCountryScreen(testCase);
		}
		EditAddressLocation eal=new EditAddressLocation(testCase);
		TouchAction action = new TouchAction(testCase.getMobileDriver());
		CustomDriver driver = testCase.getMobileDriver();
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
		MobileUtilsLocal l=new MobileUtilsLocal();
		if(ls.isCreateAccountVisible()){
			ls.navigateToCreateAccountScreen();

			if(inputs.isInputAvailable("LANGUAGE"))
			{
			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "CreateAccountAndroid");

			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtilsLocal.swipeup(testCase);
				}

			String country_name=Verifycountry(testCase, inputs);
			if(country_name.equalsIgnoreCase(eal.getChangeCountryButtonFieldValue()) ||country_name.contains(eal.getChangeCountryButtonFieldValue()) || eal.getChangeCountryButtonFieldValue().contains(country_name)){
				Keyword.ReportStep_Pass(testCase, "Already Set Country");
			}else{
				flag=Setcountry(testCase, inputs);
			}


		}


		flag=flag && EnterValidCredentialsCreateAccountScreenLocalization(testCase, inputs);

		//This code use -if TITAN R1-IDAAS button
	/*	if(cas.isSendVerificationCodeVisible(5))
		{
			cas.clickOnSendVerificationCode();
			Keyword.ReportStep_Pass(testCase, "Click on Send Verification Code");

		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on Send Verification Code");
		}
		*/
		  if(inputs.isInputAvailable("LANGUAGE"))
			{

		if(!(language.equalsIgnoreCase("French_CA")||language.equalsIgnoreCase("English_US")||language.equalsIgnoreCase("Spanish_Mexico")||language.equalsIgnoreCase("Spanish_Costarica")||language.equalsIgnoreCase("Spanish_Colombia")||language.equalsIgnoreCase("Spanish_Panama")||language.equalsIgnoreCase("Spanish_Peru")||language.equalsIgnoreCase("Spanish_Chile")||language.equalsIgnoreCase("Spanish_Argentina")||language.equalsIgnoreCase("PortugueseBR")))
		{

			if(!MobileUtils.isRunningOnAndroid(testCase))
			{

				CustomDriver driver1 = testCase.getMobileDriver();

				Dimension dimension = driver1.manage().window().getSize();
				action.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				.release().perform();
				Schedule.SwipeDown(testCase);
			}else
			{
				action.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

			}

			if(cas.getGDPRToggleStatus().contains("OFF")||cas.getGDPRToggleStatus().contains("false")||cas.getGDPRToggleStatus().contains("Off")||

					cas.getGDPRToggleStatus().contains("0")||cas.getGDPRToggleStatus().contains("DESACTIVADO"))
			{
				cas.clickGDPRToggle();
			}

			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "GDPRScreen");
			if(cas.getGDPRToggleStatus().contains("ON")||cas.getGDPRToggleStatus().contains("true")||cas.getGDPRToggleStatus().contains("On")||

					cas.getGDPRToggleStatus().contains("1")||cas.getGDPRToggleStatus().contains("ACTIVADO"))
			{
				cas.clickGDPRToggle();
			}

		}}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(language.equalsIgnoreCase("English_US"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacy Policy && EULA");
			}
			else if(language.equalsIgnoreCase("English_UK") || language.equalsIgnoreCase("English_IR"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacy Policy && EULA");
			}

			else if(language.equalsIgnoreCase("French_CA"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Politique de confidentialit");
			}

			else if(language.equalsIgnoreCase("French"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "claration de confidentialit");
			}

			else if(language.equalsIgnoreCase("French_BE"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "claration de confidentialit");
			}

			else if(language.equalsIgnoreCase("French_SUI"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "claration de confidentialit");
			}

			else if(language.equalsIgnoreCase("Dutch"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacybeleid en licentieovereenkomst voor eindgebruikers (EULA)");
			}

			else if(language.equalsIgnoreCase("Dutch_BE"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Privacybeleid en licentieovereenkomst voor eindgebruikers (EULA)");
			}

			else if(language.equalsIgnoreCase("German") || language.equalsIgnoreCase("German_AUS") || language.equalsIgnoreCase("German_SUI"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Datenschutzrichtlinie und EULA");
			}

			else if(language.equalsIgnoreCase("Italian") || language.equalsIgnoreCase("Italian_SUI"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Informativa sulla privacy e contratto di licenza con l");
			}

			else if(language.equalsIgnoreCase("PortuguesePL"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "tica de Privacidade e EULA");
			}

			else if(language.equalsIgnoreCase("PortugueseBR"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "tica de privacidade e EULA");
			}

			else if(language.equalsIgnoreCase("Spanish"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "tica de privacidad y CLUF");
			}
			else if(language.equalsIgnoreCase("Spanish_Mexico")||language.equalsIgnoreCase("Spanish_Costarica")||language.equalsIgnoreCase("Spanish_Colombia")||language.equalsIgnoreCase("Spanish_Panama")||language.equalsIgnoreCase("Spanish_Peru")||language.equalsIgnoreCase("Spanish_Chile")||language.equalsIgnoreCase("Spanish_Argentina"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "de Privacidad");
			}

			else if(language.equalsIgnoreCase("Polish"))
			{

				MobileUtils.scrollToExactAndroid(testCase , "wiadczenie o");

			}
			else if(language.equalsIgnoreCase("Slovakian"))
			{
				MobileUtils.scrollToExactAndroid(testCase , "o�ochrane osobn");

			}
			else if(language.equalsIgnoreCase("Hungarian"))
			{

				MobileUtils.scrollToExactAndroid(testCase , "Adelmi nyilatkozat");

			}
			else if(language.equalsIgnoreCase("Czech"))
			{
				/*Dimension dimension = driver.manage().window().getSize();
				touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				.release().perform();

				touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				.release().perform();*/
				MobileUtils.scrollToExactAndroid(testCase , "o ochran");

			}
			else
			{

				l.swipe(testCase);
				l.swipe(testCase);
				l.swipe(testCase);
			}


		}

		else
		{
			try
			{
				Dimension dimension = driver.manage().window().getSize();
				touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				.release().perform();

				touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				.release().perform();

				touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
				.release().perform();

				l.swipe(testCase);
				l.swipe(testCase);
				Schedule.SwipeDown(testCase);


			}
			catch (Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			}
		}
		Schedule.SwipeDown(testCase);
		if(inputs.isInputAvailable("LANGUAGE"))
		{
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "CreateAccountAndroid2");
		}
		Schedule.SwipeDown(testCase);
		if(cas.isEluaPrivacyPolicyVisible())
		{
			cas.clickonEluaPrivacyPolicy();
			
			cas.isEluaPrivacyPolicyVisible(); //Wait for loading screen 
			cas.isEluaPrivacyPolicyVisible();  //wait for loading screen
		}


		if(MobileUtils.isRunningOnAndroid(testCase))
		{

		if(language.equalsIgnoreCase("Spanish_Mexico"))
		{
		MobileUtils.scrollToExactAndroid(testCase , "demo CONNECTED HOME END-USER LICENSE AGREEMENT AND PRIVACY STATEMENTEffective");
		}
		else if(language.equalsIgnoreCase("Spanish_Costarica")||language.equalsIgnoreCase("Spanish_Colombia")||language.equalsIgnoreCase("Spanish_Panama")||language.equalsIgnoreCase("Spanish_Peru")||language.equalsIgnoreCase("Spanish_Chile")||language.equalsIgnoreCase("Spanish_Argentina"))

			{
			MobileUtils.scrollToExactAndroid(testCase , "de privacidad & Acuerdo de licencia de usuario final");
		}
		else
		{

		}

		}

		
		
		if(inputs.isInputAvailable("LANGUAGE"))
		{
		List<String>eleList = null;
		try {
			eleList=optikUtils.read(testCase, language, "EulaVerification");
		} catch (IOException e) {
			e.printStackTrace();
		}
		if(!(optikUtils.compare(eleList, testCase)))
		{
			flag=false;
		}
		else
		{
			Keyword.ReportStep_Pass(testCase , "Successfully verified the screen :"+" EulaVerification") ;
		}
		}
		
		
		/*if(MobileUtils.isRunningOnAndroid(testCase))
		{
		cas.clickOnBackButton();
		}else
		{
			cas.clickOnCancelButton();
		}*/
		return flag;
	}


	public static boolean EnterValidCredentialsCreateAccountScreenLocalization(TestCases testCase,TestCaseInputs inputs)
	{
		boolean flag=true;
		String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		CreateAccountScreen cs;
	     if(inputs.isInputAvailable("LANGUAGE"))
		  {
		  cs=new CreateAccountScreen(testCase,language);

		  }else{
			cs=new CreateAccountScreen(testCase);

		}
     if(cs.isFirstNameLabelVisible())
		{
			if(cs.setFirstNameValue("ABC"))
			{
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}
				else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					/*if(cs.isDoneKeyVisible(5))
					{
						cs.clickOnDoneKey();
					}*/
				}

				Keyword.ReportStep_Pass(testCase,
						"Create Account  : Successfully Set First Name. ");
			}
			else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set First Name.");
				flag = false;
			}

		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'First Name' field", false);
		}

		if(cs.isLastNameLabelVisible())
		{
			if(cs.setLastNameValue("DEF"))
			{
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					/*if(cs.isDoneKeyVisible(5))
					{
						cs.clickOnDoneKey();
					}*/
				}
				Keyword.ReportStep_Pass(testCase,
						"Create Account  :Successfully Set Last Name.");
			}
			else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set Last Name.");
				flag = false;
			}
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Last Name' field", false);
		}

		if(cs.isEmailLabelVisible())
		{
			if (cs.setEmailAddressValue(inputs.getInputValue("USERID").toString())) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					/*if(cs.isDoneKeyVisible(5))
					{
						cs.clickOnDoneKey();
					}*/
				}
				Keyword.ReportStep_Pass(testCase,
						"Create Account  : Email Address set to - " + inputs.getInputValue("USERID"));
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set Email Address.");
				flag = false;
			}
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Email' field", false);
		}


	if(cs.isPasswordLabelVisible())
	{
		if (cs.setPasswordValue(inputs.getInputValue("Password").toString())) {
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}else {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
			}
			Keyword.ReportStep_Pass(testCase,
				"Create Account  : Password set to - " + inputs.getInputValue("Password"));
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set Password.");
				flag = false;
			}
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Password' field", false);
		}

		if(cs.isVerifyPasswordLabelVisible())
	{
			if (cs.setVerifyPasswordValue(inputs.getInputValue("Password").toString())) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
				}
				Keyword.ReportStep_Pass(testCase,
						"Create Account  : Verify Password set to - " + inputs.getInputValue("Password"));
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set Verify Password.");
				flag = false;
			}
	}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to find 'Verify Password' field", false);
		}

		return flag;
	}

	public static boolean verifyLocationAddressFeatures(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
	LocationDetailsScreen lds = new LocationDetailsScreen(testCase);
	EditAddressLocation eal=new EditAddressLocation(testCase);
	ChangeCountryScreen ccs= new ChangeCountryScreen(testCase);
	ThermostatSensorSettingScreen tss = new ThermostatSensorSettingScreen(testCase,inputs);
	MyAccountScreen mas=new MyAccountScreen(testCase);
	LocationInformation lc=new LocationInformation(testCase,inputs);
	lc.getCountry();
	lc.getZipCode();
	Keyword.ReportStep_Pass(testCase,"Get Location Information "+lc.getCountry());
	Keyword.ReportStep_Pass(testCase,"zip code is "+lc.getZipCode());
	if(eal.isBackButtonVisible())
	{
		eal.clickOnBackButton();
	}
	if(eal.isBackButtonVisible())
	{
		eal.clickOnBackButton();
	}
	return flag;
	}

	public static boolean verifyHomeAddressFeatures(TestCases testCase, TestCaseInputs inputs) {boolean flag=true;
	LocationDetailsScreen lds = new LocationDetailsScreen(testCase);
	EditAddressLocation eal=new EditAddressLocation(testCase);
	ChangeCountryScreen ccs= new ChangeCountryScreen(testCase);
	ThermostatSensorSettingScreen tss = new ThermostatSensorSettingScreen(testCase,inputs);

	LocationInformation lc=new LocationInformation(testCase,inputs);
	lc.getCountry();
	lc.getZipCode();
	Keyword.ReportStep_Pass(testCase,"Get Location Information "+lc.getCountry());
	Keyword.ReportStep_Pass(testCase,"zip code is "+lc.getZipCode());

	if(lds.isEditexistingaddressVisible(5))
	{
		lds.navigateToEditAddressScreen();
	}
	else
	{
		flag=false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to navigate on editAddress page", false);
	}
	if(eal.isLocationNameFieldVisible())
	{
		eal.getLocationNameFieldValue();
		Keyword.ReportStep_Pass(testCase,"Location Information value "+eal.getLocationNameFieldValue());
	}
	else
	{
		flag=false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Location is Not visible", false);

	}
	if(eal.isStreetAddressFieldVisible())
	{
		eal.getStreetAddressFieldValue();
        Keyword.ReportStep_Pass(testCase,"Address of street is "+eal.getLocationNameFieldValue());
		
	}
	else
	{
		flag=false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Address Not visible", false);

	}

	if(eal.isCityAddressFieldVisible())
	{
		eal.getCityAddressFieldValue();
		Keyword.ReportStep_Pass(testCase,"City is "+eal.getCityAddressFieldValue());
		

	}else
	{
		flag=false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "City is Not visible", false);
	}

	if(eal.isStateAddressFieldVisible())
	{
	    eal.getStateAddressFieldValue();
			Keyword.ReportStep_Pass(testCase,"State is "+eal.getStateAddressFieldValue());
		
	}
	else
	{
		flag=false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "State is Not visible", false);

	}
	if(eal.isZipCodeAdressFieldVisible())
	{
		eal.getZipCodeAdressFieldValue();
		
			Keyword.ReportStep_Pass(testCase,"ZIP code is "+eal.getZipCodeAdressFieldValue());
	
	}
	else
	{
		flag=false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Zip is Not visible", false);

	}

	if(!MobileUtils.isRunningOnAndroid(testCase))
	{

		if(eal.isStreetAddressFieldVisible())
		{
			WebElement s1=eal.getclearAddressNameFieldValue();
			s1.clear();
			s1.clear();
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
			s1.sendKeys("XYZ");
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}
		if(eal.isSaveButtonVisible())
		{
			Keyword.ReportStep_Pass(testCase,"Save button visible");
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "save button disable", false);
		}
		if(eal.isLocationNameFieldVisible())
		{
			WebElement s=eal.getclearLocationNameFieldValue();
			s.clear();
			s.clear();
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
			Keyword.ReportStep_Pass(testCase,"Delete Location Name");
		}
		
				if(eal.isSaveButtonVisible_IOS())
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Location name is not mandatory and once it is deleted Save button should get enable", false);
				}
				else
				{
					Keyword.ReportStep_Pass(testCase,"Location name is mandatory and once it is deleted Save button should get disabled.");
				}
			
		if(eal.isBackButtonVisible())
		{
			eal.clickOnBackButton();
		}
		if(eal.isYesButtonPopupVisible())
		{
			eal.clickOnYesButtonPopup();
		}

		if(lds.isEditexistingaddressVisible(5))
		{
			lds.navigateToEditAddressScreen();
		}

		if(eal.isStreetAddressFieldVisible())
		{
			WebElement s1=eal.getclearAddressNameFieldValue();
			s1.clear();
			s1.clear();
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
			s1.sendKeys("XYZ");
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}
		if(eal.isSaveButtonVisible())
		{
			Keyword.ReportStep_Pass(testCase,"Save button visible");
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "save button disable", false);
		}
		if(eal.isZipCodeAdressFieldVisible())
		{
			WebElement s=eal.getclearZipCodeNameFieldValue();
			s.clear();
			s.clear();
			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				//for hiding the keyboard in ISO
				MobileUtils.clickOnElement(testCase, "XPATH","//*[contains(@name,'Done')]");
				//MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
			}
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
			Keyword.ReportStep_Pass(testCase,"Delete Zip address");
		}
		
				if(eal.isSaveButtonVisible_IOS())
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Zip name is not mandatory and once it is deleted Save button should get enable", false);
				}
				else
				{
					Keyword.ReportStep_Pass(testCase,"Zip name is mandatory and once it is deleted Save button should get disabled.");
				}


		if(eal.isBackButtonVisible())
		{
			eal.clickOnBackButton();
		}
		if(eal.isYesButtonPopupVisible())
		{
			eal.clickOnYesButtonPopup();
		}
		if(lds.isEditexistingaddressVisible(5))
		{
			lds.navigateToEditAddressScreen();
		}
		if(eal.isChangeCountryButtonVisible())
		{
			eal.clickOnChangeCountryButton();

			if(ccs.isCountrySearchTextFieldVisible())
			{

				Keyword.ReportStep_Pass(testCase,"User navigated to a confirm country page and list of countries that is supported by demo home app.");
				ccs.isDisplayCountryVisible();
			}
		}
		if(eal.isBackButtonVisible())
		{
			eal.clickOnBackButton();
		}
		if(eal.isYesButtonPopupVisible())
		{
			eal.clickOnYesButtonPopup();
		}
		if(eal.isYesButtonPopupVisible())
		{
			eal.clickOnYesButtonPopup();
		}
		if(eal.isBackButtonVisible())
		{
			eal.clickOnBackButton();
		}
		if(eal.isYesButtonPopupVisible())
		{
			eal.clickOnYesButtonPopup();
		}
		if(eal.isBackButtonVisible())
		{
			eal.clickOnBackButton();
		}
		/*if(eal.isBackButtonVisible())
		{
			eal.clickOnBackButton();
		}
*/
	}
	else
	{
		if(eal.isLocationNameFieldVisible())
		{
			WebElement s=eal.getclearLocationNameFieldValue();
			s.clear();
			s.clear();
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
			if(eal.isDisSaveButtonVisible())
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Save button should not be visible");

			}
			else{

				Keyword.ReportStep_Pass(testCase,"without entering Location name Save button is disable");
			}

			String randLoc=tss.getRandomRoomName();
			eal.setLocationNameFieldValue(randLoc);

			if(eal.isSaveButtonVisible())
			{
				eal.clickOnSaveButton();
				Keyword.ReportStep_Pass(testCase,"click on save button");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on save button", false);
			}
			lds.navigateToEditAddressScreen();

			String locValue=inputs.getInputValue("LOCATION1_NAME");
			eal.setLocationNameFieldValue(locValue);
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
			if(eal.isSaveButtonVisible())
			{
				eal.clickOnSaveButton();
				Keyword.ReportStep_Pass(testCase,"click on save button");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on save button", false);
			}

		}
		lds.navigateToEditAddressScreen();
		if(eal.isZipCodeAdressFieldVisible())
		{
			WebElement s=eal.getclearZipCodeNameFieldValue();
			s.clear();
			s.clear();
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		    s.sendKeys("100");

		  if(eal.isSaveButtonVisible())
			{
				eal.clickOnSaveButton();
				Keyword.ReportStep_Pass(testCase,"click on save button");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on save button", false);
			}
			eal.getZipUpdateErrorDescriptionValue();
			Keyword.ReportStep_Pass(testCase,"Entering invalid zipcode ");
			eal.clickOnLocationUpdateErrorOkButton();
		}
		if(eal.isEditAddressChangeCountryButtonVisible())
		{
			eal.clickOnEditAddressChangeCountryButton();

			if(ccs.isCountrySearchTextFieldVisible())
			{
				Keyword.ReportStep_Pass(testCase,"User navigated to a confirm country page and list of countries that is supported by demo home app.");
			}
		}
		if(eal.isBackButtonVisible())
		{
			eal.clickOnBackButton();
		}
		if(eal.isYesButtonPopupVisible())
		{
			eal.clickOnYesButtonPopup();
		}
		if(eal.isYesButtonPopupVisible())
		{
			eal.clickOnYesButtonPopup();
		}
		if(eal.isBackButtonVisible())
		{
			eal.clickOnBackButton();
		}
		if(eal.isYesButtonPopupVisible())
		{
			eal.clickOnYesButtonPopup();
		}
		if(eal.isBackButtonVisible())
		{
			eal.clickOnBackButton();
		}
		if(eal.isBackButtonVisible())
		{
			eal.clickOnBackButton();
		}

	}

	return flag;
	}

	public static boolean VerifyForgotPwdLocalizationNegScenario(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		ForgotPasswordScreen fp = new ForgotPasswordScreen(testCase,language);
		LoginScreen ls = new LoginScreen(testCase);
		if(fp.isLoginButtonVisible())
		{
			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "Login");

			Keyword.ReportStep_Pass(testCase,"Forgot password :Login button Visible on home page.");
			fp.clickOnLoginButton();

			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
			if(ls.isoptikLogoVisible())
			{
			ls.clickOnoptikLogo();
			}
			}

			Keyword.ReportStep_Pass(testCase,"Forgot password :Successfully click on login button.");
			if(fp.isEmailVisible())
			{	String strText=fp.getEmailFieldStatus();

			if (inputs.getInputValue("LANGUAGE").contains("English"))
			{
				if(strText.contains("Email"))
				{
					Keyword.ReportStep_Pass(testCase,"Forgot password :Successfully Verified the user notices the empty Email displayed");

				}
			}
			else if (inputs.getInputValue("LANGUAGE").contains("French"))
			{
				if(strText.contains("Cou"))
				{
					Keyword.ReportStep_Pass(testCase,"Forgot password :Successfully Verified the user notices the empty Email displayed");

				}}
			else if (inputs.getInputValue("LANGUAGE").contains("Dutch")||inputs.getInputValue("LANGUAGE").contains("Portuguese")||inputs.getInputValue("LANGUAGE").contains("German")||inputs.getInputValue("LANGUAGE").contains("Czech")||inputs.getInputValue("LANGUAGE").contains("Polish")||inputs.getInputValue("LANGUAGE").contains("Hungarian")||inputs.getInputValue("LANGUAGE").contains("Slovakian"))
			{
				if(strText.contains("mail"))
				{
					Keyword.ReportStep_Pass(testCase,"Forgot password :Successfully Verified the user notices the empty Email displayed");

				}}

			else if (inputs.getInputValue("LANGUAGE").contains("Italian"))
			{
				if(strText.contains("Pos"))
				{
					Keyword.ReportStep_Pass(testCase,"Forgot password :Successfully Verified the user notices the empty Email displayed");

				}}
			else if (inputs.getInputValue("LANGUAGE").contains("Spanish"))
			{
				if(strText.contains("Corr"))
				{
					Keyword.ReportStep_Pass(testCase,"Forgot password :Successfully Verified the user notices the empty Email displayed");

				}}
			}


			if(fp.isPasswordFieldVisible())
			{

				Keyword.ReportStep_Pass(testCase,"Forgot password :Successfully Verified the user notices the empty Password Field displayed");
			}


			if(fp.isForgotpwdVisible())
			{
				Keyword.ReportStep_Pass(testCase,"Forgot password:Successfully Verified the user notices the Forgot Password displayed");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to find Forgot Password", false);
			}

			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
				if(ls.isoptikLogoVisible())
				{
				ls.clickOnoptikLogo();
				}
			}
			if(fp.isCancelVisible())
			{
				Keyword.ReportStep_Pass(testCase,"Forgot password :Successfully Verified the user notices the Cancel Button displayed");
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Forgot password: Not able to find Cancel Button", false);
			}

			flag=flag && optikUtils.VerifyScreenLocalization(testCase, "Login2");

			if(fp.isForgotpwdVisible())
			{
				fp.clickOnForgotpwdButton();

				flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ForgotPassword");

				if(fp.isEmailVisible())
				{
					String strText=fp.getEmailFieldStatus();

					if (inputs.getInputValue("LANGUAGE").contains("English"))
					{
						if(strText.contains("Email"))
						{
							Keyword.ReportStep_Pass(testCase,"Forgot password :Successfully Verified the user notices the empty Email displayed");

						}}
					else if (inputs.getInputValue("LANGUAGE").contains("French"))
					{
						if(strText.contains("Cou"))
						{
							Keyword.ReportStep_Pass(testCase,"Forgot password :Successfully Verified the user notices the empty Email displayed");

						}}

					else if (inputs.getInputValue("LANGUAGE").contains("Dutch")||inputs.getInputValue("LANGUAGE").contains("Portuguese")||inputs.getInputValue("LANGUAGE").contains("German")||inputs.getInputValue("LANGUAGE").contains("Czech")||inputs.getInputValue("LANGUAGE").contains("Polish")||inputs.getInputValue("LANGUAGE").contains("Hungarian")||inputs.getInputValue("LANGUAGE").contains("Slovakian"))
					{
						if(strText.contains("mail")||strText.contains("Mail"))
						{
							Keyword.ReportStep_Pass(testCase,"Forgot password :Successfully Verified the user notices the empty Email displayed");

						}}

					else if (inputs.getInputValue("LANGUAGE").contains("Italian"))
					{
						if(strText.contains("Pos"))
						{
							Keyword.ReportStep_Pass(testCase,"Forgot password :Successfully Verified the user notices the empty Email displayed");

						}}
					else if (inputs.getInputValue("LANGUAGE").contains("Spanish"))
					{
						if(strText.contains("Corr"))
						{
							Keyword.ReportStep_Pass(testCase,"Forgot password :Successfully Verified the user notices the empty Email displayed");

						}}

					if (ls.setEmailAddressValue(GlobalVariables.valid_EmailID_space))
					{
						if (MobileUtils.isRunningOnAndroid(testCase)) {
							MobileUtils.hideKeyboard(testCase.getMobileDriver());
						}

							else
							{

								MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
								if(ls.isoptikLogoVisible())
								{
								ls.clickOnoptikLogo();
								}
							}
						Keyword.ReportStep_Pass(testCase,
								"Forgot password : Email Address set to - " + GlobalVariables.valid_EmailID_space);
						Keyword.ReportStep_Pass(testCase,
								"Forgot password : Successfully Verified the Reset button should be greyed out" );
						flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ForgotPasswordNeg1");
					}
					else {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Forgot password : Not able to set Email Address.");
						flag = false;
					}

					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else
					{
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
						if(ls.isoptikLogoVisible())
						{
						ls.clickOnoptikLogo();
						}
					}

					if(fp.isCancelVisible())
					{
						fp.clickOnCancelButton();
						if (MobileUtils.isRunningOnAndroid(testCase)) {
							MobileUtils.hideKeyboard(testCase.getMobileDriver());
						}
						else
						{
							MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
							if(ls.isoptikLogoVisible())
							{
							ls.clickOnoptikLogo();
							}
						}
						fp.clickOnForgotpwdButton();

						if (ls.setEmailAddressValue(GlobalVariables.Invalid_EmailID))
						{
							if (MobileUtils.isRunningOnAndroid(testCase)) {
								MobileUtils.hideKeyboard(testCase.getMobileDriver());
							}
							else
							{
								MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
								if(ls.isoptikLogoVisible())
								{
								ls.clickOnoptikLogo();
								}
							}
							Keyword.ReportStep_Pass(testCase,
									"Forgot password  : Email Address set to - " + GlobalVariables.Invalid_EmailID);
							flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ForgotPasswordNeg1");
							Keyword.ReportStep_Pass(testCase,
									"Forgot password : Successfully Verified the Reset button should be greyed out" );

						}
						else {
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Forgot password : Not able to set Email Address.");
							flag = false;
						}

						if (ls.setEmailAddressValue(GlobalVariables.New_EmailID))
						{
							if (MobileUtils.isRunningOnAndroid(testCase)) {
								MobileUtils.hideKeyboard(testCase.getMobileDriver());
							}
							else
							{
								MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
								if(ls.isoptikLogoVisible())
								{
								ls.clickOnoptikLogo();
								}
							}
							Keyword.ReportStep_Pass(testCase,
									"Forgot password : Email Address set to - " + GlobalVariables.New_EmailID);
							flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ForgotPasswordNeg1");

							if(fp.isResetbuttonVisible())
							{
								fp.clickOnResetbuttonButton();

								if(fp.isErrormsgVisible())
								{
									flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ForgotPasswordNegErrormsg");
									Keyword.ReportStep_Pass(testCase,
											"Forgot password : Successfully Verified the error pop up prompting the user to contact the Technical Support team" );
								}
							}


						}
						else {
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Forgot password : Not able to set Email Address.");
							flag = false;
						}

					}
					return flag;
				}
			}


		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to find Login button", false);
		}
		return flag;
	}

	public static boolean VerifyDeleteAccountNodevice(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;

		MyAccountScreen mas=new MyAccountScreen(testCase);

		if(mas.isDeleteAccountButtonVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Edit Account: App displays 'Delete Account'");
			mas.clickOnDeleteAccountButton();

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(mas.isDeleteAccountNotifierTextVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Delete Account: Text is displayed as "+ mas.getDeleteAccountNotifierText());
					Keyword.ReportStep_Pass(testCase, "Delete Account: Text is displayed as "+ mas.getDeleteAccountText());

				}
				else
				{
					flag= false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Delete Account: Notifying Delete Account text is not visible", false);
				}
			}else
			{
				if(mas.isDeleteErrVisible(5))
				{
					Keyword.ReportStep_Pass(testCase, "Delete Account: Text is displayed as "+ mas.getDeleteErrText());
				}
				else
				{
					flag= false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Delete Account: Notifying Delete Account text is not visible", false);
				}
			}
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account: Unable to find Delete Account", false);
		}

		if(mas.isDeleteAccButtonVisible(5))
		{
			mas.clickDeleteAccButton();
		}else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "unable to click on Delete Account ", false);
		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(mas.isConfirmAccessRemovalPopupMsgVisible(4))
			{
				Keyword.ReportStep_Pass(testCase, " Error pop up: "+ mas.getRemoveAccessText());

			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "unable to get Message ", false);
			}
		}else
			{
				if(mas.isErrorDeletePopupVisible(4))
				{
					mas.getDeletePopupErrText();
				}else
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "unable to get Message ", false);
				}

			}
		if(mas.isErrorPopupOkButtonVisible()){

			mas.clickOnErrorPopupOkButton();
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "unable to click on OK ", false);
		}

		flag = flag && optikUtils.loginTooptikApp(testCase, inputs);

		if(mas.isLoginErrorVisible(4)){

			Keyword.ReportStep_Pass(testCase, "Login error : Text is displayed as "+ mas.getLoginErrText());
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "unable to Get error message ", false);
			flag=false;
		}


		return flag;

	}


	public static boolean enterCreateAccountFields(TestCases testCase, TestCaseInputs inputs) {

		boolean flag=true;
		LoginScreen ls=new LoginScreen(testCase);
		CreateAccountScreen cs=new CreateAccountScreen(testCase);

		if(ls.isCreateAccountVisible())
		{
			ls.navigateToCreateAccountScreen();

			if(cs.isSelectSelectSearchVisible())
			{
				if(cs.isSelectCountryVisible())
				{
					cs.clickOnSelectCountryButton();
				}
			}

			if(cs.isFirstNameLabelVisible())
			{
				if(cs.setFirstNameValue("ABC"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}

					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Successfully Set First Name. ");
				}
				else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set First Name.");
					flag = false;
				}

			}

			if(cs.isEmailLabelVisible())
			{
				if (cs.setEmailAddressValue(inputs.getInputValue("USERID").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Email Address set to - " + inputs.getInputValue("USERID"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Email Address.");
					flag = false;
				}
			}


			if(cs.isPasswordLabelVisible())
			{
				if (cs.setPasswordValue(inputs.getInputValue("Password").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Password set to - " + inputs.getInputValue("Password"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Password.");
					flag = false;
				}
			}

			if(cs.isVerifyPasswordLabelVisible())
			{
				if (cs.setVerifyPasswordValue(inputs.getInputValue("Password").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Verify Password set to - " + inputs.getInputValue("Password"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Verify Password.");
					flag = false;
				}
			}


		}
		return flag;

	}

	public static boolean openSetting(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		LoginScreen l=new LoginScreen(testCase);
		if (MobileUtils.isRunningOnAndroid(testCase)) {
			Activity activity = new Activity("com.android.settings",
					"com.android.settings.Settings");
			((AndroidDriver<MobileElement>) testCase.getMobileDriver()).startActivity(activity);
			Keyword.ReportStep_Pass(testCase,
					"User Opens the Mobile Settings");

			//MobileUtils.minimizeApp(testCase , 5);
			l.RunBackground(testCase,10);

			MobileUtils.hideKeyboard(testCase.getMobileDriver());

			Keyword.ReportStep_Pass(testCase,
					"User relaunches the app");
		}
		else
		{
			MobileUtils.launchSettingsAppOnIOS(testCase);
			CustomDriver driver = testCase.getMobileDriver();

			HashMap<String, String> app = new HashMap<>();
			app.put("name", "demo");

			try {
				driver.executeScript("mobile:application:open", app);
			} catch (Exception e) {
				FrameworkGlobalVariables.logger4J.logWarn("App is already open, continue with script");
			}


		}

		return flag;
	}

	public static boolean VerifyCreateAccountFields(TestCases testCase, TestCaseInputs inputs) {

		boolean flag=true;
		LoginScreen ls=new LoginScreen(testCase);
		CreateAccountScreen cs=new CreateAccountScreen(testCase);


		if(cs.isFirstNameLabelVisible())
		{

			Keyword.ReportStep_Pass(testCase,
					"Create Account  : User is on Create Account Page");

		}
		else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Account : User is not on Create Account Page");
			flag = false;
		}

		if(cs.isLastNameLabelVisible())
		{
			if(cs.setLastNameValue("DEF"))
			{
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
				}
				Keyword.ReportStep_Pass(testCase,
						"Create Account  : User is able to continue entering create account fields");
			}
			else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set Last Name.");
				flag = false;
			}
		}




		return flag;

	}

	public static boolean VerifyResendActivationEmailLocalization(TestCases testCase, TestCaseInputs inputs) {

		boolean flag=true;
		String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		CreateAccountScreen cs=new CreateAccountScreen(testCase,language);
		WLDScreen ResendScreen=new WLDScreen(testCase, language);
		Random rn = new Random();
		int value = rn.nextInt();
		 String Pass="Password1";
		 inputs.setInputValue("Password", Pass, false);
		LoginScreen ls = new LoginScreen(testCase,language);
		String email="";
		CustomDriver driver = testCase.getMobileDriver();
		Dimension dimension = driver.manage().window().getSize();
    if(ls.isCreateAccountVisible())
			{
				ls.navigateToCreateAccountScreen();
				Keyword.ReportStep_Pass(testCase,
						"Create Account  : Successfully App navigastes to   Privacy Statement/End-User License Agreement ");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to App navigastes to   Privacy Statement/End-User License Agreement  ");
				flag = false;
			}
			if(cs.isFirstNameLabelVisible())
			{
				if(cs.setFirstNameValue("ABC"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}

					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Successfully Set First Name: ABC ");
				}
				else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set First Name: ABC ");
					flag = false;
				}

			}
			if(cs.isLastNameLabelVisible())
			{
				if(cs.setLastNameValue("XYZ"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  :Successfully Set Last Name: XYZ");
				}
				else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Last Name: XYZ");
					flag = false;
				}
			}

			if(cs.isEmailLabelVisible())
			{
				email="rn"+value+"@grr.la";
				inputs.setInputValue("EmailAddress", email, false);


				if (cs.setEmailAddressValue(email)) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Email Address set to -"+email);
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Email Address -"+email);
					flag = false;
				}
			}

			if(cs.isPasswordLabelVisible())
			{

				if (cs.setPasswordValue(Pass)) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Password set to - Password1");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Password - Password1");
					flag = false;
				}
			}

			if(cs.isVerifyPasswordLabelVisible())
			{
				if (cs.setVerifyPasswordValue(Pass)) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Verify Password set to - Password1");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Verify Password - Password1");
					flag = false;
				}
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.scrollToExactAndroid(testCase , "Create");
			}
			else
			{
				testCase.getMobileDriver().swipe((int) (dimension.getWidth()* .5),  (int) (dimension.getHeight() * .5),(int) (dimension.getWidth()* .5),0);
				testCase.getMobileDriver().swipe((int) (dimension.getWidth()* .5),  (int) (dimension.getHeight() * .5),(int) (dimension.getWidth()* .5),0);
			}


			cs.clickOnCreateButton();
			MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
	     flag =flag && optikUtils.VerifyScreenLocalization(testCase, "ResendActivationEmail");


			ls.clickOnResendButton(inputs);

			Keyword.ReportStep_Pass(testCase,
					"Click on Resend Button");

			flag =flag && optikUtils.VerifyScreenLocalization(testCase, "ResendActivationPopUpMsg");




		if(MobileUtils.isRunningOnAndroid(testCase)){
			cs.clickOnBackButton();
		}else{
			/*if(inputs.getInputValue("LANGUAGE").contains("Spanish") || inputs.getInputValue("LANGUAGE").contains("French") || inputs.getInputValue("LANGUAGE").contains("German")||inputs.getInputValue("LANGUAGE").contains("Italian") || inputs.getInputValue("LANGUAGE").contains("Dutch"))
			{
				if(!ResendScreen.clickOnBackbutton(inputs))
				{
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Back button is not visible.") ;
					flag = false ;
				}
			}
			else if(inputs.getInputValue("LANGUAGE").contains("English"))
			{
				if(!ResendScreen.clickOnBackbutton(inputs))
				{
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Back button is not visible.") ;
					flag = false ;
				}
			}
*/
		}
		return flag;
	}

	public static boolean CreateAccount(TestCases testCase, TestCaseInputs inputs) {
    	boolean flag=true;
    	Random rn = new Random();
    	int value = rn.nextInt();
    	String email="",Email="";
    	LoginScreen ls=new LoginScreen(testCase);
    	CreateAccountScreen cs=new CreateAccountScreen(testCase);
    	EULAScreen es=new EULAScreen(testCase);

    	if(ls.isCreateAccountVisible())
    	{
    		ls.navigateToCreateAccountScreen();

    		if(cs.isSelectSelectSearchVisible())
    		{
    			if(cs.isSelectCountryVisible())
    			{
    				cs.clickOnSelectCountryButton();
    				Keyword.ReportStep_Pass(testCase,
    						"Successfully Clicked on Search Country ");
    			}
    			else
    			{
    				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
    						"Not able to click on Search Country");
    			}
    		}

    		if(cs.isFirstNameLabelVisible())
    		{
    			if(cs.setFirstNameValue("ABC"))
    			{
    				if (MobileUtils.isRunningOnAndroid(testCase)) {
    					MobileUtils.hideKeyboard(testCase.getMobileDriver());
    				}
    				else {
    					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
    				}

    				Keyword.ReportStep_Pass(testCase,
    						"Create Account  : Successfully Set First Name. ");
    			}
    			else {
    				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
    						"Create Account : Not able to set First Name.");
    				flag = false;
    			}

    		}
    		if(cs.isLastNameLabelVisible())
    		{
    			if(cs.setLastNameValue("XYZ"))
    			{
    				if (MobileUtils.isRunningOnAndroid(testCase)) {
    					MobileUtils.hideKeyboard(testCase.getMobileDriver());
    				}else {
    					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
    				}
    				Keyword.ReportStep_Pass(testCase,
    						"Create Account  :Successfully Set Last Name.");
    			}
    			else {
    				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
    						"Create Account : Not able to set Last Name.");
    				flag = false;
    			}
    		}

    		if(cs.isEmailLabelVisible())
    		{
    			Email="rn"+value;
    			email="rn"+value+"@grr.la";
    			inputs.setInputValue("EmailAddress", email, false);
    			if (cs.setEmailAddressValue(email)) {
    				if (MobileUtils.isRunningOnAndroid(testCase)) {
    					MobileUtils.hideKeyboard(testCase.getMobileDriver());
    				}else {
    					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
    				}
    				Keyword.ReportStep_Pass(testCase,
    						"Create Account  : Email Address set to -"+email);
    			} else {
    				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
    						"Create Account : Not able to set Email Address.");
    				flag = false;
    			}
    		}

    		if(cs.isPasswordLabelVisible())
    		{
    			if (cs.setPasswordValue("Password1")) {
    				if (MobileUtils.isRunningOnAndroid(testCase)) {
    					MobileUtils.hideKeyboard(testCase.getMobileDriver());
    				}else {
    					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
    				}
    				Keyword.ReportStep_Pass(testCase,
    						"Create Account  : Password set to - Password1");
    			} else {
    				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
    						"Create Account : Not able to set Password.");
    				flag = false;
    			}
    		}

    		if(cs.isVerifyPasswordLabelVisible())
    		{
    			if (cs.setVerifyPasswordValue("Password1")) {
    				if (MobileUtils.isRunningOnAndroid(testCase)) {
    					MobileUtils.hideKeyboard(testCase.getMobileDriver());
    				}else {
    					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
    				}
    				Keyword.ReportStep_Pass(testCase,
    						"Create Account  : Verify Password set to - Password1");
    			} else {
    				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
    						"Create Account : Not able to set Verify Password.");
    				flag = false;
    			}
    		}

    		if(MobileUtils.isRunningOnAndroid(testCase))
    		{
    			MobileUtils.scrollToExactAndroid(testCase , "Privacy Policy && EULA");
    		}
    		else
    		{
//    			TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
//    			CustomDriver driver = testCase.getMobileDriver();
//    			Dimension dimension = driver.manage().window().getSize();
//    			touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
//    			.release().perform();
//    			touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4)))
//    			.release().perform();
    			Dimension dimensions = testCase.getMobileDriver().manage().window().getSize();



    			Double screenHeightStart = dimensions.getHeight() * 0.5;
    			Double screenwidthStart= dimensions.getWidth() * 0.5;

    			int scrollStart = screenHeightStart.intValue();

    			Double screenHeightEnd = dimensions.getHeight() * 0.2;

    			int scrollEnd = screenHeightEnd.intValue();
    			int scrollStartPoint=screenwidthStart.intValue();


    			testCase.getMobileDriver().swipe(scrollStartPoint, scrollStart, scrollStartPoint,scrollEnd, 1050);
    			testCase.getMobileDriver().swipe(scrollStartPoint, scrollStart, scrollStartPoint,scrollEnd, 1050);
    			testCase.getMobileDriver().swipe(scrollStartPoint, scrollStart, scrollStartPoint,scrollEnd, 1050);
    			testCase.getMobileDriver().swipe(scrollStartPoint, scrollStart, scrollStartPoint,scrollEnd, 1050);

    		}

    		if(cs.isEluaPrivacyPolicyVisible())
    		{
    			cs.clickonEluaPrivacyPolicy();
    		}

    		if(es.isEulaAndPrivacyDesc(10))
    		{
    			Keyword.ReportStep_Pass(testCase,
    					"Create Account  : Successfully displayed the Eula screen");
    		}
    		else
    		{
    			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Create Account  : Unable to displayed the Eula screen");
    			flag=false;
    		}


    		if(MobileUtils.isRunningOnAndroid(testCase))
    		{
    			MobileUtils.pressBackButton(testCase, " ");
    		}
    		else
    		{
    			Schedule sc=new Schedule(testCase);
    			sc.clickOnBackButton();
    		}



    		if(MobileUtils.isRunningOnAndroid(testCase))
    		{
    			MobileUtils.hideKeyboard(testCase.getMobileDriver());
    		}

    		if(MobileUtils.isRunningOnAndroid(testCase))
    		{
    			MobileUtils.scrollToExactAndroid(testCase , "Create");
    		}
    		else
    		{
    			try
    			{
    				optikUtils.scrollToElementUsingExactAttributeValue(testCase , "label" , "Create");
    			}
    			catch (Exception e)
    			{
    				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
    				flag=false;
    			}
    		}


    		if(cs.isCreateButtonVisible())
    		{
    			cs.clickOnCreateButton();

    			if(!MobileUtils.isRunningOnAndroid(testCase))
    			{
    				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
    			}

    		}
    		OSPopUps os = new OSPopUps(testCase);
    		if(!MobileUtils.isRunningOnAndroid(testCase))
    		{
    			if(os.isAlwaysAllowButtonVisible(3))
    			{
    				os.clickOnAlwaysAllowButton();
    			}
    		}

    		if(cs.isResendButtonVisible())
    		{
    			Keyword.ReportStep_Pass(testCase,
    					"Create Account  : Successfully sent User Activation mail");
    		}
    		else
    		{
    			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Create Account  : Unable to sent activate mail");
    			flag=false;
    		}

    		CreateAccountGuerrila(testCase, inputs, Email);

    		if(MobileUtils.isRunningOnAndroid(testCase))
    		{
    			os.AcceptpopUp();
    			if(os.isAcceptButtonVisible(5))
    			{
    				os.clickOnAcceptButton();
    			}


    			if(os.isIgnoreButtonVisible(3))
    			{
    				os.clickOnIgnoreButton();
    			}
    			if(os.isIgnoreButtonVisible(3))
        		{
        			os.clickOnIgnoreButton();
        		}
        		if(os.isAllowButtonVisible())
        		{
        			os.clickOnAllowButton();
        		}
    			if(!MobileUtils.isMobElementExists("XPATH" , "//*[@text='Add New Device']" , testCase))
    			{
    			if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
    				flag = flag && ls.clickOnLoginButton();
    			}

    			ls.setEmailAddressValue(email);
    			if (ls.setPasswordValue("Password1")) {
    				if (MobileUtils.isRunningOnAndroid(testCase)) {
    					MobileUtils.hideKeyboard(testCase.getMobileDriver());
    				}
    				else
    				{
    					ls.clickOnoptikLogo();
    				}
    				Keyword.ReportStep_Pass(testCase, "Login To optik : Password set to - " + inputs.getInputValue("PASSWORD"));
    			} else {
    				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
    						"Login To optik : Not able to set Password.");
    				flag = false;
    			}
    			if (ls.isLoginButtonVisible()) {
    				flag = flag && ls.clickOnLoginButton();
    			} else {
    				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
    			}
    			}

    		}

    		if(!MobileUtils.isRunningOnAndroid(testCase))
    		{

    			if(os.isIgnoreButtonVisible(3))
    			{
    				os.clickOnIgnoreButton();
    			}

    			if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
    				flag = flag && ls.clickOnLoginButton();
    			}

    			ls.setEmailAddressValue(email);
    			if (ls.setPasswordValue("Password1")) {
    				if (MobileUtils.isRunningOnAndroid(testCase)) {
    					MobileUtils.hideKeyboard(testCase.getMobileDriver());
    				}
    				else
    				{
    					ls.clickOnoptikLogo();
    				}
    				Keyword.ReportStep_Pass(testCase, "Login To optik : Password set to - " + inputs.getInputValue("PASSWORD"));
    			} else {
    				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
    						"Login To optik : Not able to set Password.");
    				flag = false;
    			}
    			if (ls.isLoginButtonVisible()) {
    				flag = flag && ls.clickOnLoginButton();
    			} else {
    				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
    			}
    		}


    		if(MobileUtils.isRunningOnAndroid(testCase))
    		{
    			if(os.isAcceptButtonVisible(5))
    			{
    				os.clickOnAcceptButton();
    			}
    		}
    		if(os.isIgnoreButtonVisible(3))
    		{
    			os.clickOnIgnoreButton();
    		}
    		if(os.isAllowButtonVisible())
    		{
    			os.clickOnAllowButton();
    		}


    		if(MobileUtils.isRunningOnAndroid(testCase))
    		{

    			if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Add New Device']" , testCase))
    			{
    				Keyword.ReportStep_Pass(testCase, "Add New Device Screen displayed Successful.");
    			}
    			/*else
    			{
    				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add New Device Screen is not displayed");
    				flag=false;
    			}*/

    		}
    		else
    		{
    			do{
    				if(MobileUtils.isMobElementExists("XPATH" , "//*[@value='Add New Device']" , testCase,3))
    				{
    					break;
    				}
    			}while(!MobileUtils.isMobElementExists("XPATH" , "//*[@value='Add New Device']" , testCase,3));


    			if(MobileUtils.isMobElementExists("XPATH" , "//*[@value='Add New Device']" , testCase))
    			{
    				Keyword.ReportStep_Pass(testCase, "Add New Device Screen displayed Successful.");
    			}
    			else
    			{
    				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add New Device Screen is not displayed");
    				flag=false;
    			}
    			if(cs.isCameraDevice())
    			{
    				Keyword.ReportStep_Pass(testCase, "Devices ares showing up based on the NA countries");
    			}
    		}

    		/*if(cs.isCameraDevice())
    		{
    			cs.ClickOnCameraDevice();
    		}
    		else
    		{
    			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Create Account  : Camera device not displayed");
    			flag=false;
    		}

    		if(cs.isNextVisible())
    		{
    			cs.ClickOnNext();
    		}
    		else
    		{
    			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Create Account  : Next button not disaplyed");
    			flag=false;
    		}

    		if(cs.isHomeLocVisible())
    		{
    			cs.ClickOnHomeLoc();
    		}
    		else
    		{
    			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Create Account  : Home location not disaplyed");
    			flag=false;
    		}

    		if(cs.iszipcodeText())
    		{
    			cs.setZipcode("10007");
    		}*/
    		/*Robot robot;
    	    try {
    	        robot = new Robot();
    	        robot.keyPress(KeyEvent.VK_ENTER);
    	         robot.keyRelease(KeyEvent.VK_ENTER);
    	    } catch (AWTException e) {
    	        e.printStackTrace();
    	    }*/

    	}
    	return flag;

    }



	public static void swipe(TestCases testCase,String str)
	{
		Dimension dimensions = testCase.getMobileDriver().manage().window().getSize();


		Double screenHeightStart = dimensions.getHeight() * 0.5;

		int scrollStart = screenHeightStart.intValue();

		Double screenHeightEnd = dimensions.getHeight() * 0.2;

		int scrollEnd = screenHeightEnd.intValue();

		testCase.getMobileDriver().swipe(0, scrollStart, 0, scrollEnd, 1050);
		testCase.getMobileDriver().swipe(0, scrollStart, 0, scrollEnd, 1050);


	}

	public static boolean openBrowser(TestCases testCase, TestCaseInputs inputs,boolean verifyInvalid) {

		boolean flag=true;

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			try
			{
				Activity activity = new Activity("com.android.chrome","com.google.android.apps.chrome.Main");
				((AndroidDriver<MobileElement>) testCase.getMobileDriver()).startActivity(activity);

				Keyword.ReportStep_Pass(testCase , "Chrome browser is open.");

				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Search or type web address']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).click();

					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).sendKeys("https://www.guerrillamail.com");

					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
				else if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='data:,']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='data:,']")).click();

					testCase.getMobileDriver().findElement(By.xpath("//*[@text='data:,']")).sendKeys("https://www.guerrillamail.com");

					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
				else if(MobileUtils.isMobElementExists("id" , "com.android.chrome:id/url_bar" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.id("com.android.chrome:id/url_bar")).click();

					testCase.getMobileDriver().findElement(By.id("com.android.chrome:id/url_bar")).sendKeys("https://www.guerrillamail.com");

					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
				Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");

				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Click to Edit']")).click();
				Keyword.ReportStep_Pass(testCase , "Click email field to set the email.");
				Thread.sleep(2000);
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}

				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).clear();

				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).sendKeys(inputs.getInputValue("USERID").toString());


				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.Spinner']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='grr.la']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Set']")).click();

				Keyword.ReportStep_Pass(testCase , "Email id is set to "+inputs.getInputValue("USERID").toString());


				List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));
				int i=0;
				while (saq==null&&i<5)
				{
					Thread.sleep(10000);
					saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));
				}

				saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));

				if(verifyInvalid)
				{
					List<MobileElement> saq1 = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='2']"));
					i=saq.size();

					while(i>0)
					{

						if(saq.get(i-1).getText().contains("demohomessupport@demo.com"))
						{
							if(saq1.get(i-1).getText().contains("demo Connected Home - Reset Password"))
							{
								saq.get(i-1).click();
								break;
							}
							else
							{
								Keyword.ReportStep_Pass(testCase , "Link already visited or another mail is came i.e "+saq1.get(i-1).getText());
							}
						}
						i--;
					}
				}
				else
				{
					i=0;
					while(i<saq.size())
					{

						if(saq.get(i).getText().contains("demohomessupport@demo.com"))
						{
							Keyword.ReportStep_Pass(testCase , "Mail receive and open the mail.");
							saq.get(i).click();
							break;
						}
						i++;
					}

					swipe(testCase , "EMAIL");
					swipe(testCase , "Reset Password");

					Thread.sleep(2000);
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Reset Password']")).click();
					Keyword.ReportStep_Pass(testCase , "Click on reset password button.");
					MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);

					testCase.getMobileDriver().findElement(By.id("TxtPassword")).click();
					testCase.getMobileDriver().findElement(By.id("TxtPassword")).sendKeys(inputs.getInputValue("NEWPASSWORD"));
					Keyword.ReportStep_Pass(testCase , "Set new password i.e."+inputs.getInputValue("NEWPASSWORD"));
					testCase.getMobileDriver().findElement(By.id("TexPasswordAgain")).click();
					testCase.getMobileDriver().findElement(By.id("TexPasswordAgain")).sendKeys(inputs.getInputValue("NEWPASSWORD"));
					Keyword.ReportStep_Pass(testCase , "Confirm new password i.e."+inputs.getInputValue("NEWPASSWORD"));

					if(MobileUtils.isRunningOnAndroid(testCase))
					{
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}

					testCase.getMobileDriver().findElement(By.id("CngPwdBtn")).click();
					Keyword.ReportStep_Pass(testCase , "Click on change button and successfully change the password.");

					Thread.sleep(2000);
				}
			}
			catch(Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			}
			finally
			{
				testCase.getMobileDriver().launchApp();
			}

		}
		else
		{

			try{

				CustomDriver driver = testCase.getMobileDriver();

				HashMap<String, String> settings = new HashMap<>();
				settings.put("name", "Safari");
				try {
					driver.executeScript("mobile:application:open", settings);
				} catch (Exception e) {
					FrameworkGlobalVariables.logger4J.logWarn("Launch Setting App: App is already open.");
				}

				Keyword.ReportStep_Pass(testCase , "Safari browser is open.");


				if(MobileUtils.isMobElementExists("XPATH" , "//*[@name='URL']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).click();

					testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).sendKeys("https://www.guerrillamail.com");

					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");

				}
				Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");

				MobileUtils.isMobElementExists("id" , "xyz" , testCase,25,false);

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Click to Edit']")).click();
				Keyword.ReportStep_Pass(testCase , "Click email field to set the email.");
				try {
					Thread.sleep(2000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}


				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).click();
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).clear();

				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).sendKeys(inputs.getInputValue("USERID").toString());


				testCase.getMobileDriver().findElement(By.xpath("//*[@value='sharklasers.com']")).click();
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypePickerWheel")).sendKeys("grr.la");

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Done']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Set']")).click();

				Keyword.ReportStep_Pass(testCase , "Email id is set to "+inputs.getInputValue("USERID").toString());
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='demohomessupport@demo.com']")).click();

				Dimension dimensions = testCase.getMobileDriver().manage().window().getSize();

				TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
				touchAction.press(point(10, (int) (dimensions.getHeight() * .5)))
				.moveTo(point(0, (int) (dimensions.getHeight() * -.4))).release().perform();

				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Reset Password']")).click();
				Keyword.ReportStep_Pass(testCase , "Click on reset password button.");
				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='New Password']")).click();
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='New Password']")).sendKeys(inputs.getInputValue("NEWPASSWORD"));
				MobileUtils.hideKeyboardIOS(driver, "return");
				Keyword.ReportStep_Pass(testCase , "Set new password i.e."+inputs.getInputValue("NEWPASSWORD"));
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Re-enter Password']")).click();
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Re-enter Password']")).sendKeys(inputs.getInputValue("NEWPASSWORD"));
				Keyword.ReportStep_Pass(testCase , "Confirm new password i.e."+inputs.getInputValue("NEWPASSWORD"));
				MobileUtils.hideKeyboardIOS(driver, "return");
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Change Password']")).click();
				Keyword.ReportStep_Pass(testCase , "Click on change button and successfully change the password.");

				Thread.sleep(2000);

			}catch(Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			}
			finally
			{
				testCase.getMobileDriver().launchApp();
			}

		}
		return flag;
	}


	public static boolean resetPassword(TestCases testCase, TestCaseInputs inputs,String pass) {
		boolean flag=true;

		try
		{
			LoginScreen ls = new LoginScreen(testCase);
			if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
				flag = flag && ls.clickOnLoginButton();
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{

			}
			if(ls.isForgotPasswordButtonVisible())
			{
				ls.clickOnForgotPasswordButton();
			}

			ls.setForgotPasswordEmailAddressValue(inputs.getInputValue("USERID").toString());

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{

			}
			ls.clickonResetButton();

			MobileUtils.isMobElementExists("id" , "xyz" , testCase,40,false);

			OSPopUps os = new OSPopUps(testCase);
			if(os.isDontAllowButtonVisible())
			{
				os.clickOnDontAllowButton();
			}

			openBrowserResetPassword(testCase,inputs,false);

			if(os.isIgnoreButtonVisible(3))
			{
				os.clickOnIgnoreButton();
			}

			if (ls.isLoginButtonVisible()) {
				flag = flag && ls.clickOnLoginButton();
			}
			else if(ls.isCancelButtonVisible())
			{
				ls.clickOnCancelButton();
			}

			ls.setEmailAddressValue(inputs.getInputValue("USERID").toString());

			if(pass.equalsIgnoreCase("New password"))
			{

				if (ls.setPasswordValue(inputs.getInputValue("NEWPASSWORD").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else
					{
						ls.clickOnoptikLogo();
					}
					Keyword.ReportStep_Pass(testCase, "Login To optik : Password set to - " + inputs.getInputValue("NEWPASSWORD"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Login To optik : Not able to set Password.");
					flag = false;
				}

				if (ls.isLoginButtonVisible()) {
					flag = flag && ls.clickOnLoginButton();
				} else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
				}

				inputs.setInputValue(ChangePasswordThroughCHIL.OLD_PASSWORD, inputs.getInputValue("NEWPASSWORD").toString(), false);
				inputs.setInputValue(ChangePasswordThroughCHIL.NEW_PASSWORD, inputs.getInputValue("ORIPASSWORD").toString(), false);

				flag = flag && optikUtils.verifyLoginSuccessful(testCase, inputs);

			}
			else
			{
				if (ls.setPasswordValue(inputs.getInputValue("PASSWORD").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else
					{
						ls.clickOnoptikLogo();
					}
					Keyword.ReportStep_Pass(testCase, "Login To optik : Old Password set to - " + inputs.getInputValue("PASSWORD"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Login To optik : Not able to set Password.");
					flag = false;
				}

				if (ls.isLoginButtonVisible()) {
					flag = flag && ls.clickOnLoginButton();
				} else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
				}


				if(ls.isLoginInvalidEmailAddErrorMsgVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Verified the App not allow to the user log into the App with old password after resetting");
				}
				else
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Unable to verify the App not allow to the user log into the App with old password after resetting");
				}



			}

			inputs.setInputValue(ChangePasswordThroughCHIL.OLD_PASSWORD, "Password123", false);
			inputs.setInputValue(ChangePasswordThroughCHIL.NEW_PASSWORD, inputs.getInputValue("PASSWORD").toString(), false);

		}
		catch(Exception e)
		{

		}



		//flag = flag && optikUtils.loginTooptikApp(testCase, inputs);


		return flag;
	}



	public static boolean enterEditAccountFields(TestCases testCase, TestCaseInputs inputs) {

		MyAccountScreen mas=new MyAccountScreen(testCase);
		SecondaryCardSettings scs=new SecondaryCardSettings(testCase);
		boolean flag=true;


		if(mas.isNameLabelVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Edit Account: Name label displayed");
			mas.clickOnNameLabel();
			Keyword.ReportStep_Pass(testCase, "Edit Account: click on Name label");

				}



		if(mas.isFirstNameFieldLabelVisible(10))
		{
			Keyword.ReportStep_Pass(testCase, "Edit Account: First Name Field is displayed with value:"+mas.getFirstNameFieldValue());
		}
		else
		{
			flag =false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account: Unable to find First Name field", false);
		}

		mas.clearTextField("FirstNameField");
		if(mas.setFirstNameFieldValue("Jasper"))
		{
			Keyword.ReportStep_Pass(testCase,
					"Successfully set First name : Jasper");
		}


		return flag;

	}

	public static boolean VerifyEditAccountFields(TestCases testCase, TestCaseInputs inputs) {

		boolean flag=true;
		MyAccountScreen mas=new MyAccountScreen(testCase);
		SecondaryCardSettings scs=new SecondaryCardSettings(testCase);


		if(mas.isNameLabelVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Edit Account: Name label displayed");
			mas.clickOnNameLabel();
			Keyword.ReportStep_Pass(testCase, "Edit Account: click on Name label");

				}

		if(mas.isFirstNameFieldLabelVisible(5))
		{

			Keyword.ReportStep_Pass(testCase,
					"Edit Account  : User is on Edit Account Page");

		}
		else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Edit Account : User is not on Edit Account Page");
			flag = false;
		}

		if(mas.isLastNameFieldLabelVisible(5))
		{
			mas.clearTextField("LastNameField");
			if(mas.setLastNameFieldValue("Test"))
			{
				Keyword.ReportStep_Pass(testCase,
						"Successfully set Last name : Test");
				Keyword.ReportStep_Pass(testCase,
						"User is able to continue editing Edit Account Page");
			}
			else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Edit Account : Not able to set Last Name.");
				flag = false;
			}
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
  		{
		MobileUtils.hideKeyboard(testCase.getMobileDriver());
  		}
          else
          {
		MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
		MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
          }


		if(mas.isSaveButtonVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Save Button is Visible");
			if(mas.clickOnSaveButton())
			{
				Keyword.ReportStep_Pass(testCase, "Successfully Clicked On Save Button");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Click on Save Button");
			}

		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Save Button is not Visible");
		}

		if(mas.isBackButtonVisible())
		{
			if(mas.clickOnBackButton())
			{
				Keyword.ReportStep_Pass(testCase, "Successfully clicked on Back Button");
			}
			else
			{
				flag =false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account: Unable to click on Back button", false);
			}
		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Edit Account: Unable to find Back button", false);
		}
		if(scs.isBackButtonVisible())
		{
			if(scs.clickOnBackButton())
			{
				Keyword.ReportStep_Pass(testCase, "Successfully clicked on Back Button");
			}
			else
			{
				flag =false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Secondary Card : Unable to click on Back button", false);
			}
		}


		return flag;

	}

	public static boolean CreateAccountActivationLinkAfterFirstExcepir(TestCases testCase, TestCaseInputs inputs,boolean rebranding) {boolean flag=true;

	try
	{
		Random rn = new Random();
		int value = rn.nextInt();
		 String Pass="Password1";
		 inputs.setInputValue("Password", Pass, false);
		LoginScreen ls = new LoginScreen(testCase);
		String email="";
		CreateAccountScreen cs = new CreateAccountScreen(testCase);
		if(ls.isCreateAccountVisible())
		{
			ls.navigateToCreateAccountScreen();
			Keyword.ReportStep_Pass(testCase,
					"Create Account  : Successfully App navigastes to   Privacy Statement/End-User License Agreement ");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Account : Not able to App navigastes to   Privacy Statement/End-User License Agreement  ");
			flag = false;
		}
		if(cs.isFirstNameLabelVisible())
		{
			if(cs.setFirstNameValue("ABC"))
			{
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}
				else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
				}

				Keyword.ReportStep_Pass(testCase,
						"Create Account  : Successfully Set First Name: ABC ");
			}
			else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set First Name: ABC ");
				flag = false;
			}

		}
		if(cs.isLastNameLabelVisible())
		{
			if(cs.setLastNameValue("XYZ"))
			{
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
				}
				Keyword.ReportStep_Pass(testCase,
						"Create Account  :Successfully Set Last Name: XYZ");
			}
			else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set Last Name: XYZ");
				flag = false;
			}
		}

		if(cs.isEmailLabelVisible())
		{
			email="rn"+value+"@grr.la";
			inputs.setInputValue("EmailAddress", email, false);


			if (cs.setEmailAddressValue(email)) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
				}
				Keyword.ReportStep_Pass(testCase,
						"Create Account  : Email Address set to -"+email);
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set Email Address -"+email);
				flag = false;
			}
		}

		if(cs.isPasswordLabelVisible())
		{

			if (cs.setPasswordValue(Pass)) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
				}
				Keyword.ReportStep_Pass(testCase,
						"Create Account  : Password set to - Password1");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set Password - Password1");
				flag = false;
			}
		}

		if(cs.isVerifyPasswordLabelVisible())
		{
			if (cs.setVerifyPasswordValue(Pass)) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
				}
				Keyword.ReportStep_Pass(testCase,
						"Create Account  : Verify Password set to - Password1");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set Verify Password - Password1");
				flag = false;
			}
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.scrollToExactAndroid(testCase , "Create");
		}
		else
		{

		}


		cs.clickOnCreateButton();


		Thread.sleep(5000);
		MobileUtils.isMobElementExists("id" , "rohal" , testCase,1800,false);



		/*if(rebranding)
		{

		}
		else
		{
			if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
				flag = flag && ls.clickOnLoginButton();
			}

			ls.setEmailAddressValue(inputs.getInputValue("EmailAddress").toString());
			if (ls.setPasswordValue(inputs.getInputValue("Password").toString())) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}
				else
				{
					ls.clickOnoptikLogo();
				}
				Keyword.ReportStep_Pass(testCase, "Login To optik : Password set to - " + inputs.getInputValue("PASSWORD"));
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Login To optik : Not able to set Password.");
				flag = false;
			}
			if (ls.isLoginButtonVisible()) {
				flag = flag && ls.clickOnLoginButton();
			} else {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
			}
		}*/
if(cs.isResendButtonVisible())
{
			cs.ClickOnResendButton();

}

			MobileUtils.pressBackButton(testCase);
			MobileUtils.pressBackButton(testCase);

//		CreateAccountGuerrila(testCase, inputs, email);


			if(optikUtils.activateGrrCreateAccount(testCase,email)) {
    			Keyword.ReportStep_Pass(testCase,
    					"Create Account  : Successfully Activated "+email +" account");
    		}else {
    			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Create Account  : Unable to click on activation link");
    			flag=false;
    		}






		if(rebranding)
		{
			if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
				flag = flag && ls.clickOnLoginButton();
			}

			ls.setEmailAddressValue(inputs.getInputValue("EmailAddress").toString());
			if (ls.setPasswordValue(inputs.getInputValue("Password").toString())) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}
				else
				{
					ls.clickOnoptikLogo();
				}
				Keyword.ReportStep_Pass(testCase, "Login To optik : Password set to - " + inputs.getInputValue("PASSWORD"));
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Login To optik : Not able to set Password.");
				flag = false;
			}
			if (ls.isLoginButtonVisible()) {
				flag = flag && ls.clickOnLoginButton();
			} else {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
			}

			cs.ClickOnResendButton();

			MobileUtils.pressBackButton(testCase);
		}

		if(!rebranding)
		{
			if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
				flag = flag && ls.clickOnLoginButton();
			}

			ls.setEmailAddressValue(inputs.getInputValue("EmailAddress").toString());
			if (ls.setPasswordValue(inputs.getInputValue("Password").toString())) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}
				else
				{
					ls.clickOnoptikLogo();
				}
				Keyword.ReportStep_Pass(testCase, "Login To optik : Password set to - " + inputs.getInputValue("PASSWORD"));
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Login To optik : Not able to set Password.");
				flag = false;
			}
			if (ls.isLoginButtonVisible()) {
				flag = flag && ls.clickOnLoginButton();
			} else {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
			}

			if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Add New Device']" , testCase))
			{
				MobileUtils.pressBackButton(testCase);

				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='LOGOUT']" , testCase))
				{
					MobileUtils.clickOnElement(testCase , "XPATH" , "//*[@text='LOGOUT']");
				}

				if (ls.isLoginButtonVisible()) {
					Keyword.ReportStep_Pass(testCase, "[Logout of optik] : Logout operation Successful.");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"[Logout of optik] : Login screen verification failed.Not able to logout of the App after click on Logout option.");
					flag = false;
				}
			}
			else
			{

			}
		}

	}
	catch(Exception e)
	{

	}
	return flag;
	}



	public static boolean openBrowserCreateAccount(TestCases testCase, TestCaseInputs inputs,boolean verifyInvalid,boolean rebranding) {

		boolean flag=true;
		try
		{
			Activity activity = new Activity("com.android.chrome","com.google.android.apps.chrome.Main");
			((AndroidDriver<MobileElement>) testCase.getMobileDriver()).startActivity(activity);

			Keyword.ReportStep_Pass(testCase , "Chrome browser is open.");

			if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Search or type web address']" , testCase,10,false))
			{
				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).sendKeys("https://www.guerrillamail.com");

				List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
				for(MobileElement temp : saq)
				{
					if(temp.getText().equals("https://www.guerrillamail.com"))
					{
						temp.click();
						break;
					}
				}
			}
			else if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='data:,']" , testCase,10,false))
			{
				testCase.getMobileDriver().findElement(By.xpath("//*[@text='data:,']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='data:,']")).sendKeys("https://www.guerrillamail.com");

				List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
				for(MobileElement temp : saq)
				{
					if(temp.getText().equals("https://www.guerrillamail.com"))
					{
						temp.click();
						break;
					}
				}
			}
			else if(MobileUtils.isMobElementExists("id" , "com.android.chrome:id/url_bar" , testCase,10,false))
			{
				testCase.getMobileDriver().findElement(By.id("com.android.chrome:id/url_bar")).click();

				testCase.getMobileDriver().findElement(By.id("com.android.chrome:id/url_bar")).sendKeys("https://www.guerrillamail.com");

				List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
				for(MobileElement temp : saq)
				{
					if(temp.getText().equals("https://www.guerrillamail.com"))
					{
						temp.click();
						break;
					}
				}
			}
			Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");

			MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
			testCase.getMobileDriver().findElement(By.xpath("//*[@text='Click to Edit']")).click();
			Keyword.ReportStep_Pass(testCase , "Click email field to set the email.");
			Thread.sleep(2000);
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}

			Thread.sleep(2000);
			testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).clear();

			testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).sendKeys(inputs.getInputValue("USERID").toString());


			testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.Spinner']")).click();

			testCase.getMobileDriver().findElement(By.xpath("//*[@text='grr.la']")).click();

			testCase.getMobileDriver().findElement(By.xpath("//*[@text='Set']")).click();

			Keyword.ReportStep_Pass(testCase , "Email id is set to "+inputs.getInputValue("USERID").toString());

			//swipe(testCase , "Click to Edit");
			/*MobileElement d=MobileUtils.getMobElement(testCase, "XPATH", "//*[@text='Click to Edit']",false,false);

		if(d!=null)
		{
			testCase.getMobileDriver().swipe(d.getLocation().getX(), d.getLocation().getY(), d.getLocation().getX(), 0, 3000);
		}*/


			/*WebElement mySelectElement = testCase.getMobileDriver().findElement(By.id("gm-host-select"));

		Select dropdown= new Select(mySelectElement);

		dropdown.selectByVisibleText("grr.la");*/


			List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));
			int i=0;
			while (saq==null&&i<5)
			{
				Thread.sleep(10000);
				saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));
			}

			saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));

			if(rebranding)
			{
				i=0;
				while(i<saq.size())
				{

					if(saq.get(i).getText().contains("demohomessupport@demo.com"))
					{
						Keyword.ReportStep_Pass(testCase , "Mail receive and open the mail.");
						saq.get(i).click();
						break;
					}
					i++;
				}

				if(testCase.getMobileDriver().getPageSource().contains("Please click the button below to activate your "+optikUtils.ReadRebranding(testCase , inputs).get("NewText")+" account."))
				{
					Keyword.ReportStep_Pass(testCase , "Expected text is displayed i.e 'Please click the button below to activate your "+optikUtils.ReadRebranding(testCase , inputs).get("NewText")+" account.'");
					Keyword.ReportStep_Pass(testCase , "Rebranding of the Home App from 'demo' to 'demo Home' is done successfully.");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Rebranding of the Home App from 'demo' to 'demo Home' is not done successfully.");
					flag=false;
				}

				//Please click the button below to activate your demo Home account.
			}
			else
			{
				if(verifyInvalid)
				{
					i=saq.size();

					while(i>0)
					{

						if(saq.get(i-1).getText().contains("demohomessupport@demo.com"))
						{
							saq.get(i-1).click();
							break;
							/*else
						{
							Keyword.ReportStep_Pass(testCase , "Link already visited or another mail is came i.e "+saq1.get(i-1).getText());
						}*/
						}
						i--;
					}
				}
				else
				{
					i=0;
					while(i<saq.size())
					{

						if(saq.get(i).getText().contains("demohomessupport@demo.com"))
						{
							Keyword.ReportStep_Pass(testCase , "Mail receive and open the mail.");
							saq.get(i).click();
							break;
						}
						i++;
					}
				}

				Dimension dimensions = testCase.getMobileDriver().manage().window().getSize();



				Double screenHeightStart = dimensions.getHeight() * 0.5;

				int scrollStart = screenHeightStart.intValue();

				Double screenHeightEnd = dimensions.getHeight() * 0.2;

				int scrollEnd = screenHeightEnd.intValue();

				testCase.getMobileDriver().swipe(0, scrollStart, 0, scrollEnd+75, 1000);

				/*d=MobileUtils.getMobElement(testCase, "XPATH", "//*[@text='EMAIL']",false,false);

			if(d!=null)
			{
				testCase.getMobileDriver().swipe(d.getLocation().getX(), d.getLocation().getY(), d.getLocation().getX(), 0, 3000);
			}*/

				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Activate Account 'or @text='ACTIVATE ACCOUNT ']" , testCase,25,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Activate Account 'or @text='ACTIVATE ACCOUNT ']")).click();
				}



				Keyword.ReportStep_Pass(testCase , "Click on Activate Account button.");
				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);

				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Please check if the email is correct or if the account is already activated']" , testCase,10))
				{
					Keyword.ReportStep_Pass(testCase , "Old mail is expired.");
				}
				else
				{

				}

				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					testCase.getMobileDriver().navigate().back();
				}

				char roh= (char) 171;
				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='"+roh+" Back to inbox']" , testCase,10))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='"+roh+" Back to inbox']")).click();
				}
				else
				{

				}
				i=0;
				saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));
				while(i<saq.size())
				{

					if(saq.get(i).getText().contains("demohomessupport@demo.com"))
					{
						Keyword.ReportStep_Pass(testCase , "Mail receive and open the mail.");
						saq.get(i).click();
						break;
					}
					i++;
				}

				dimensions = testCase.getMobileDriver().manage().window().getSize();


				screenHeightStart = dimensions.getHeight() * 0.5;

				scrollStart = screenHeightStart.intValue();

				screenHeightEnd = dimensions.getHeight() * 0.2;

				scrollEnd = screenHeightEnd.intValue();

				testCase.getMobileDriver().swipe(0, scrollStart, 0, scrollEnd+50, 1000);
				/*d=MobileUtils.getMobElement(testCase, "XPATH", "//*[@text='EMAIL']",false,false);

			if(d!=null)
			{
				testCase.getMobileDriver().swipe(d.getLocation().getX(), d.getLocation().getY(), d.getLocation().getX(), 0, 3000);
			}*/

				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Activate Account ']")).click();
				Keyword.ReportStep_Pass(testCase , "Click on Activate Account button.");

				Thread.sleep(2000);
			}

		}
		catch(Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			flag=false;
		}
		finally
		{
			testCase.getMobileDriver().launchApp();
		}
		return flag;
	}

	public static boolean resendPassword(TestCases testCase, TestCaseInputs inputs,String pass) {
		boolean flag=true;

		try
		{
			LoginScreen ls = new LoginScreen(testCase);
			if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
				flag = flag && ls.clickOnLoginButton();
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{

			}
			if(ls.isForgotPasswordButtonVisible())
			{
				ls.clickOnForgotPasswordButton();
			}

			ls.setForgotPasswordEmailAddressValue(inputs.getInputValue("USERID").toString());

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{

			}
			ls.clickonResetButton();

			MobileUtils.isMobElementExists("id" , "xyz" , testCase,40,false);



			verifyResendLinkBrowser(testCase, inputs, false);
			OSPopUps os = new OSPopUps(testCase);
			if(os.isDontAllowButtonVisible())
			{
				os.clickOnDontAllowButton();
			}
			if(os.isIgnoreButtonVisible(3))
			{
				os.clickOnIgnoreButton();
			}

			if (ls.isLoginButtonVisible()) {
				flag = flag && ls.clickOnLoginButton();
			}
			else if(ls.isCancelButtonVisible())
			{
				ls.clickOnCancelButton();
			}

			ls.setEmailAddressValue(inputs.getInputValue("USERID").toString());

			if(pass.equalsIgnoreCase("resend"))
			{

				if (ls.setPasswordValue(inputs.getInputValue("NEWPASSWORD").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else
					{
						ls.clickOnoptikLogo();
					}
					Keyword.ReportStep_Pass(testCase, "Login To optik : Password set to - " + inputs.getInputValue("NEWPASSWORD"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Login To optik : Not able to set Password.");
					flag = false;
				}

				if (ls.isLoginButtonVisible()) {
					flag = flag && ls.clickOnLoginButton();
				} else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
				}

				inputs.setInputValue(ChangePasswordThroughCHIL.OLD_PASSWORD, inputs.getInputValue("NEWPASSWORD").toString(), false);
				inputs.setInputValue(ChangePasswordThroughCHIL.NEW_PASSWORD, inputs.getInputValue("ORIPASSWORD").toString(), false);

				flag = flag && optikUtils.verifyLoginSuccessful(testCase, inputs);

			}
			else
			{
				if (ls.setPasswordValue(inputs.getInputValue("PASSWORD").toString())) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else
					{
						ls.clickOnoptikLogo();
					}
					Keyword.ReportStep_Pass(testCase, "Login To optik : Old Password set to - " + inputs.getInputValue("PASSWORD"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Login To optik : Not able to set Password.");
					flag = false;
				}

				if (ls.isLoginButtonVisible()) {
					flag = flag && ls.clickOnLoginButton();
				} else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
				}


				if(ls.isLoginInvalidEmailAddErrorMsgVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Verified the App not allow to the user log into the App with old password after resetting");
				}
				else
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Unable to verify the App not allow to the user log into the App with old password after resetting");
				}



			}

			inputs.setInputValue(ChangePasswordThroughCHIL.OLD_PASSWORD, "Password123", false);
			inputs.setInputValue(ChangePasswordThroughCHIL.NEW_PASSWORD, inputs.getInputValue("PASSWORD").toString(), false);





		}
		catch(Exception e)
		{

		}



		//flag = flag && optikUtils.loginTooptikApp(testCase, inputs);


		return flag;
	}

	public static boolean verifyResendLinkBrowser(TestCases testCase, TestCaseInputs inputs,boolean verifyInvalid) {

		boolean flag=true;

		if(MobileUtils.isRunningOnAndroid(testCase))
		{

			try
			{
				Activity activity = new Activity("com.android.chrome","com.google.android.apps.chrome.Main");
				((AndroidDriver<MobileElement>) testCase.getMobileDriver()).startActivity(activity);

				Keyword.ReportStep_Pass(testCase , "Chrome browser is open.");

				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Search or type web address']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).click();

					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).sendKeys("https://www.guerrillamail.com");

					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}


				Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");

				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Click to Edit']")).click();
				Keyword.ReportStep_Pass(testCase , "Click email field to set the email.");
				Thread.sleep(2000);
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					//MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}

				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).click();
				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).clear();

				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).sendKeys(inputs.getInputValue("USERID").toString());


				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.Spinner']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='grr.la']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Set']")).click();

				Keyword.ReportStep_Pass(testCase , "Email id is set to "+inputs.getInputValue("USERID").toString());


					/*
					  Dimension dimensions =
					  testCase.getMobileDriver().manage().window().getSize();
					  testCase.getMobileDriver().swipe( (int) (dimensions.getWidth() * .5), (int)
					 (dimensions.getHeight() * .5), (int) (dimensions.getWidth() * .5), (int)
					  (dimensions.getHeight() * .3));
					 */

				List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));
				int i=0;


				while(i<saq.size())
				{

					if(saq.get(i).getText().contains("@reside"))
					{
						Keyword.ReportStep_Pass(testCase , "Mail receive and open the mail.");
						saq.get(i).click();
						break;
					}
					i++;
				}
				LoginScreen l=new LoginScreen(testCase);
				l.SwipeToResetPassword(testCase);
				ForgotPasswordScreen f=new ForgotPasswordScreen(testCase);
				l.RunBackground(testCase, 10);

				MobileUtils.hideKeyboard(testCase.getMobileDriver());

				Keyword.ReportStep_Pass(testCase,
						"User relaunches the app with the forgot password screen");

				l.clickonResetButton();
				Thread.sleep(2000);
				if(f.isResendConmsgVisible())
				{
					Keyword.ReportStep_Pass(testCase,
							"Resend confirm msg Displayed :"+f.isResendConmsgVisible());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Resend confirm msg Not Displayed");

				}
				if(f.isClosebuttonVisible())
				{
					Keyword.ReportStep_Pass(testCase,
							"close button visible ");
					f.clickCloseButton();
					Keyword.ReportStep_Pass(testCase,
							"Successfully Clicked on close Button ");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"close button not visible");

				}



			Activity activity1 = new Activity("com.android.chrome","com.google.android.apps.chrome.Main");
				((AndroidDriver<MobileElement>) testCase.getMobileDriver()).startActivity(activity1);

				Keyword.ReportStep_Pass(testCase , "Chrome browser is open.");


				try{
				testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'EMAIL')]")).click();
				}
				catch(Exception e)
				{

				}
				try{
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Back to inbox')]")).click();
					}
					catch(Exception e)
					{

					}
				Keyword.ReportStep_Pass(testCase , "Click on Back to inbox button.");
				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);

				List<MobileElement> b = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));
				int s=0;

				while(s<b.size())
				{

					if(b.get(s).getText().contains("@reside"))
					{
						Keyword.ReportStep_Pass(testCase , "Mail receive and open the mail.");
						b.get(s).click();
						break;
					}
					s++;
				}



				l.SwipeToResetPassword(testCase);

					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Reset Password']")).click();
					Keyword.ReportStep_Pass(testCase , "Click on reset password button.");
					MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
					 testCase.getMobileDriver().findElement(By.id("TxtPassword")).click();
					testCase.getMobileDriver().findElement(By.id("TxtPassword")).sendKeys(inputs.getInputValue("NEWPASSWORD"));
					Keyword.ReportStep_Pass(testCase , "Set new password i.e."+inputs.getInputValue("NEWPASSWORD"));
					testCase.getMobileDriver().findElement(By.id("TexPasswordAgain")).click();
					testCase.getMobileDriver().findElement(By.id("TexPasswordAgain")).sendKeys(inputs.getInputValue("NEWPASSWORD"));
					Keyword.ReportStep_Pass(testCase , "Confirm new password i.e."+inputs.getInputValue("NEWPASSWORD"));

					if(MobileUtils.isRunningOnAndroid(testCase))
					{
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}

					testCase.getMobileDriver().findElement(By.id("CngPwdBtn")).click();
					Keyword.ReportStep_Pass(testCase , "Click on change button and successfully change the password.");



			}
			catch(Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			}
			finally
			{
				LoginScreen l=new LoginScreen(testCase);
				l.RunBackground(testCase, 0);
			}

		}
		else
		{
			try{

				CustomDriver driver = testCase.getMobileDriver();

				HashMap<String, String> settings = new HashMap<>();
				settings.put("name", "Safari");
				try {
					driver.executeScript("mobile:application:open", settings);
				} catch (Exception e) {
					FrameworkGlobalVariables.logger4J.logWarn("Launch Setting App: App is already open.");
				}

				Keyword.ReportStep_Pass(testCase , "Safari browser is open.");



				if(MobileUtils.isMobElementExists("XPATH" , "//*[@name='URL']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).click();

					testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).sendKeys("https://www.guerrillamail.com");

					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");

				}
				Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");
				MobileUtils.isMobElementExists("id" , "xyz" , testCase,25,false);


				if(MobileUtils.isMobElementExists("XPATH", "//*[@name='Click to Edit']", testCase))
				{
					MobileUtils.clickOnElement(testCase, "XPATH", "//*[@name='Click to Edit']");
				}
				else if(MobileUtils.isMobElementExists("XPATH", "//*[@label='Click to Edit']", testCase))
				{
					MobileUtils.clickOnElement(testCase, "XPATH", "//*[@label='Click to Edit']");
				}
				else
				{
					WebElement e=testCase.getMobileDriver().findElement(By.xpath("//*[@name='@']"));
					Point p1;
					p1=e.getLocation();
					int xAxis= p1.getX();
					int yAxis=p1.getY();
					TouchAction tAction = new TouchAction(testCase.getMobileDriver());
					tAction.tap(tapOptions().withPosition(point(xAxis-50, yAxis))).release().perform();
				}

				Keyword.ReportStep_Pass(testCase , "Click email field to set the email.");
				try {
					Thread.sleep(2000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}



				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).click();
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).clear();

				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).sendKeys(inputs.getInputValue("USERID").toString());


				testCase.getMobileDriver().findElement(By.xpath("//*[@value='sharklasers.com']")).click();
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypePickerWheel")).sendKeys("grr.la");

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Done']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Set']")).click();

				Keyword.ReportStep_Pass(testCase , "Email id is set to "+inputs.getInputValue("USERID").toString());


				Thread.sleep(2000);


				if(MobileUtils.isMobElementExists("XPATH", "//*[@name='demohomessupport@demo.com']", testCase))
				{


					Keyword.ReportStep_Pass(testCase , "Reset Mail has been received");

				}
				else
				{
					Keyword.ReportStep_Pass(testCase , "Reset Mail has not been received");
				}

				Thread.sleep(2000);
				LoginScreen ls=new LoginScreen(testCase);
				CustomDriver driver2 = testCase.getMobileDriver();
				HashMap<String, String> app = new HashMap<>();
				app.put("name", "demo");

				try {
					driver2.executeScript("mobile:application:open", app);
				} catch (Exception e) {
					FrameworkGlobalVariables.logger4J.logWarn("App is already open, continue with script");
				}


				if(ls.clickOnForgotResendButton(inputs))
				{
					Keyword.ReportStep_Pass(testCase , "Clicked on Resend Button");
				}

				if(ls.isResendPopUpVisible(inputs))
				{
					Keyword.ReportStep_Pass(testCase , "Resend Popup is displayed");
				}

				if(ls.clickOnResendCloseButton(inputs))
				{
					Keyword.ReportStep_Pass(testCase , "Clicked on Resend Close Button");
				}

				HashMap<String, String> settings2 = new HashMap<>();
				settings2.put("name", "Safari");
				try {
					driver.executeScript("mobile:application:open", settings2);
				} catch (Exception e) {
					FrameworkGlobalVariables.logger4J.logWarn("Launch Setting App: App is already open.");
				}

				Keyword.ReportStep_Pass(testCase , "Safari browser is reopened with guerrilla mail page.");

				if(MobileUtils.isMobElementExists("XPATH", "//*[@name='demohomessupport@demo.com']", testCase))
				{
					Keyword.ReportStep_Pass(testCase , "Reset Mail has been received");
				}
				else
				{
					Keyword.ReportStep_Pass(testCase , "Reset Mail has not been received");
				}



			}catch(Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			}
			finally
			{
				CustomDriver driver = testCase.getMobileDriver();
				HashMap<String, String> app = new HashMap<>();
				app.put("name", "demo");

				try {
					driver.executeScript("mobile:application:open", app);
				} catch (Exception e) {
					FrameworkGlobalVariables.logger4J.logWarn("App is already open, continue with script");
				}
			}

		}
		return flag;

}

	public static HashMap<String,String> ReadRebranding(TestCases testCase, TestCaseInputs inputs)
	{

		String key = "", value = "" ;
		HashMap<String,String> elementlist = new HashMap<String,String>() ;
		try
		{

			HSSFWorkbook workbook = new HSSFWorkbook(new FileInputStream(new File("Rebranding.xls"))) ;
			HSSFSheet sheet = null;
			if(testCase.getTestCaseInputs().isInputAvailable("LANGUAGE"))
			{
				sheet = workbook.getSheet(testCase.getTestCaseInputs().getInputValue("LANGUAGE")) ;
			}
			else
			{
				sheet = workbook.getSheet("English_US") ;
			}
			Iterator<Row> rowIterator = sheet.iterator() ;
			while (rowIterator.hasNext())
			{
				Row row = rowIterator.next() ;
				Iterator<Cell> cellIterator = row.cellIterator() ;
				while (cellIterator.hasNext())
				{
					Cell cell = cellIterator.next() ;
					key = cell.getStringCellValue() ;
					cell = cellIterator.next();
					value = cell.getStringCellValue() ;
				}

				if (!(value.equalsIgnoreCase("label") || value.equalsIgnoreCase("TextChange")))
				{
					elementlist.put(key , value) ;
				}
			}

		}
		catch (Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		return elementlist ;
	}


	public static boolean verifyClipCount(TestCases testCase, TestCaseInputs inputs, String count) {

		boolean flag=true;

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			List<WebElement> timelist= MobileUtils.getMobElements(testCase , "id" , "activity_event_time_text");
			List<String> cliplist=new LinkedList<String>();

			for(WebElement temp : timelist)
			{
				if(temp.getText()!=null)
				{
					cliplist.add(temp.getText());
				}
			}

			for(int i=0;i<=58;i++)
			{
				// swipe
				Dimension dimensions = testCase.getMobileDriver().manage().window().getSize();

				/*TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
				touchAction.press(10, (int) (dimensions.getHeight() * .5))
				.moveTo(point(0, (int) (dimensions.getHeight() * -.4)).release().perform();*/
				Double screenHeightStart = dimensions.getHeight() * 0.5;

				int scrollStart = screenHeightStart.intValue();

				Double screenHeightEnd = dimensions.getHeight() * 0.2;

				int scrollEnd = screenHeightEnd.intValue();

				testCase.getMobileDriver().swipe(0, scrollStart, 0, scrollEnd, 1000);


				timelist= MobileUtils.getMobElements(testCase , "id" , "activity_event_time_text");

				for(WebElement temp : timelist)
				{
					if(temp.getText()!=null)
					{
						if(!cliplist.contains(temp.getText()))
						{
							cliplist.add(temp.getText());
						}

					}
				}
				Keyword.ReportStep_Pass(testCase , "clip count : "+cliplist.size());

			}
			if(cliplist.size()==50 || cliplist.size()<50)
			{
				Keyword.ReportStep_Pass(testCase , "Displayed with maximum 50 clips and app not saving more than 50 clips clip count is :"+cliplist.size());
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Unable to Displayed with maximum 50 clips");
				flag=false;
			}
			//Keyword.ReportStep_Pass(testCase , "Displayed with maximum 50 clips "+cliplist.size());
		}
		else
		{
			List<WebElement> timelist= MobileUtils.getMobElements(testCase , "XPATH" , "//*[contains(@name,'Time')]");
			List<String> cliplist=new LinkedList<String>();

			for(WebElement temp : timelist)
			{
				if(temp.getText()!=null)
				{
					cliplist.add(temp.getText());
				}
			}

			for(int i=0;i<=55;i++)
			{
				// swipe

				Dimension dimensions = testCase.getMobileDriver().manage().window().getSize();

				TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
				touchAction.press(point(10, (int) (dimensions.getHeight() * .5)))
				.moveTo(point(0, (int) (dimensions.getHeight() * -.4))).release().perform();
				/*Double screenHeightStart = dimensions.getHeight() * 0.5;

				int scrollStart = screenHeightStart.intValue();

				Double screenHeightEnd = dimensions.getHeight() * 0.2;

				int scrollEnd = screenHeightEnd.intValue();

				testCase.getMobileDriver().swipe(0, scrollStart, 0, scrollEnd, 1000);*/


				timelist=MobileUtils.getMobElements(testCase , "XPATH" , "//*[contains(@name,'Time')]");

				for(WebElement temp : timelist)
				{
					if(temp.getText()!=null)
					{
						if(!cliplist.contains(temp.getText()))
						{
							cliplist.add(temp.getText());
						}

					}
				}
				Keyword.ReportStep_Pass(testCase , "clip count : "+cliplist.size());
			}
			if(cliplist.size()==50|| cliplist.size()<50)
			{
				Keyword.ReportStep_Pass(testCase , "Displayed with maximum 50 clips and app not saving more than 50 clips clip count is :"+cliplist.size());
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Unable to Displayed with maximum 50 clips");
				flag=false;
			}


		}

		return flag;

	}

	public static boolean verifyDeleteAccount(TestCases testCase, TestCaseInputs inputs,String clickOption) {
		boolean flag=true;

		LoginScreen ls= new LoginScreen(testCase);
		AddNewDeviceScreen ads= new AddNewDeviceScreen(testCase);


		if(ads.isAddNewDeviceHeaderDisplayed(10))
		{
			Keyword.ReportStep_Pass(testCase , "Add New Device Screen is Displayed");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Add New Device Screen is Not Displayed");
			flag=false;
		}
		if(!ads.clickOnBackButton())
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Fail to click on Back button");
			flag=false;
		}

		if(ads.isExitdemoPopUpisDisplayed())
		{
			Keyword.ReportStep_Pass(testCase , "Exit to demo popup is Displayed");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Exit to demo popup is Not Displayed");
			flag=false;
		}

		if(ads.isLogoutOptionisDisplayed())
		{
			Keyword.ReportStep_Pass(testCase , "Logout Option is Displayed");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Logout Option is Not Displayed");
			flag=false;
		}

		if(ads.isCancelButtonOptionisDisplayed())
		{
			Keyword.ReportStep_Pass(testCase , "Cancel Option is Displayed");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Cancel Option is Not Displayed");
			flag=false;
		}
//		if(ads.isDeleteAccountOptionisDisplayed())
//		{
//			Keyword.ReportStep_Pass(testCase , "Delete Option is Displayed");
//		}
//		else
//		{
//			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Delete Option is Not Displayed");
//			flag=false;
//		}

		if(clickOption.equalsIgnoreCase("Delete"))
		{
			if(ads.isDeleteAccountOptionisDisplayed())
			{
				if(ads.clickOnDeleteAccountOption())
				{
					Keyword.ReportStep_Pass(testCase , "Successfully Clicked on Delete Account option");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Fail to click on Delete Account Option");
					flag=false;

				}

				if(ads.clickOnYesButton())
				{
					Keyword.ReportStep_Pass(testCase , "Successfully Clicked on Yes Button");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Fail to click on Yes Button");
					flag=false;

				}
				if(!MobileUtils.isRunningOnAndroid(testCase))
				{
					if(ads.isAccountDataPopUpisDisplayed())
					{
						Keyword.ReportStep_Pass(testCase , "Your Account and Data is Deleted Pop up is displayed");
						if(ads.clickOnOkButton())
						{
							Keyword.ReportStep_Pass(testCase , "Successfully Clicked on Yes Button");
						}
						else
						{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Fail to click on OK button");
							flag=false;

						}

					}
				}

			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Delete Option is Not Displayed");
				flag=false;
			}


			if(ls.isOKButtonVisible())
			{
				ls.clickOnOKButton();
			}

			inputs.setInputValue("PASSWORD","Password1",false);

			inputs.setInputValue("USERID", inputs.getInputValue("EmailAddress"), false);
			flag=flag && loginTooptikApp(testCase , inputs);

			if(ls.isLoginInvalidPwdErrorMsgVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Login To optik : Invalid Email Address.Password Incorrect Error is Displayed");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Login To optik : Invalid Login Error is not displayed ");
				flag = false;
			}
		}
		else if(clickOption.equalsIgnoreCase("Logout"))
		{
			ads.clickOnLogoutButton();
			if (ls.isLoginButtonVisible()) {
				Keyword.ReportStep_Pass(testCase, "[Logout of optik] : Logout operation Successful.");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"[Logout of optik] : Login screen verification failed.Not able to logout of the App after click on Logout option.");
				flag = false;
			}
		}
		else if(clickOption.equalsIgnoreCase("Cancel"))
		{
			ads.clickOnCancelButtonOfAddDeviceScreen();

			if(ads.isAddNewDeviceHeaderDisplayed(10))
			{
				Keyword.ReportStep_Pass(testCase , "Add New Device Screen is Displayed");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Add New Device Screen is Not Displayed");
				flag=false;
			}
		}

		return flag;
	}

	public static boolean openContractorMode(TestCases testCase, TestCaseInputs inputs, String Status) {
		boolean flag=true;
		LoginScreen ls=new LoginScreen(testCase);
		flag = flag && ls.longPressOnHomeLogo();

		if(ls.isContractorPopupVisible(5))
		{
			Keyword.ReportStep_Pass(testCase, "Contractor Mode : Contractor Pop up Visible");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Contractor Mode : Contractor Pop up is not Displayed");
			flag = false;
		}

		if(ls.isContractorPopupTextVisible(5))
		{
			Keyword.ReportStep_Pass(testCase, "Contractor Mode : Contractor Pop up description is visible");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Contractor Mode : Contractor Pop up description is not displayed");
			flag = false;
		}

		if(ls.isContractorPopupCancelVisible(5))
		{
			Keyword.ReportStep_Pass(testCase, "Contractor Mode : Contractor Pop up cancel button is visible");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Contractor Mode : Contractor Pop up cancel button is not displayed");
			flag = false;
		}

		if(ls.isContractorPopupConfirmVisible(5))
		{
			Keyword.ReportStep_Pass(testCase, "Contractor Mode : Contractor Pop up confirm button is visible");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Contractor Mode : Contractor Pop up confirm button is not displayed");
			flag = false;
		}

		if(Status.equalsIgnoreCase("Confirm"))
		{
			if(ls.clickOnContractorPopupConfirmButton(inputs))
			{
				Keyword.ReportStep_Pass(testCase, "Contractor Mode : Successfully clicked on Confirm button");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Contractor Mode : Failed to click on confirm button");
				flag = false;
			}
			if(ls.isContractorModeTextVisible(5))
			{
				Keyword.ReportStep_Pass(testCase, "Contractor Mode : Contractor mode is activated");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Contractor Mode : Contractor mode is not activated");
				flag = false;
			}

		}

		if(Status.equalsIgnoreCase("Cancel"))
		{
			if(ls.clickOnContractorPopupCancelButton(inputs))
			{
				Keyword.ReportStep_Pass(testCase, "Contractor Mode : Successfully clicked on Cancel button");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Contractor Mode : Failed to click on cancel button");
				flag = false;
			}
		}

		return flag;
	}

	public static boolean ContractorInviteToEndUser(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;

		LoginScreen ls= new LoginScreen(testCase);
		AddNewDeviceScreen ads=new AddNewDeviceScreen(testCase);
		EditAddressLocation eal=new EditAddressLocation(testCase);
		ChangeCountryScreen ccs= new ChangeCountryScreen(testCase);

		OSPopUps os = new OSPopUps(testCase);

		if( MobileUtils.isRunningOnAndroid(testCase))
		{
			if(os.isIgnoreButtonVisible(15))
			{
				os.clickOnIgnoreButton();
			}
			if(os.isAllowButtonVisible())
			{
				os.clickOnAllowButton();
			}
			if(os.isAcceptButtonVisible(5))
			{
				os.clickOnAcceptButton();
			}
			else if(inputs.isInputAvailable("LANGUAGE"))
			{
				if(os.isAllowButtonVisible(inputs))
				{
					os.isAllowButtonClick(inputs);
				}
			}
		}
		else
		{
			if(os.isIgnoreButtonVisible(15))
			{
				os.clickOnIgnoreButton();
			}
			if(os.isAllowButtonVisible())
			{
				os.clickOnAllowButton();
			}
			if(os.isAllowButtonVisible())
			{
				os.clickOnAllowButton();
			}
		}

		if(eal.isContarctChangeCountryButtonVisible())
		{
			eal.clickOnContarctChangeCountryButton();

		}try {
			Thread.sleep(4000);
		} catch (InterruptedException e1) {
			e1.printStackTrace();
		}


		String countryname="United States";

		if(ccs.isCountrySearchTextFieldVisible())
		{
			ccs.SetCountrySearchTextField(countryname);
		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}

		if(ccs.SelectCountry(countryname))
		{
			Keyword.ReportStep_Pass(testCase, "Click on "+countryname);
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on" +countryname+"country");
			flag=false;
		}
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}

		if(ads.isAddNewDeviceHeaderDisplayed(5))
		{
			Keyword.ReportStep_Pass(testCase, "Contractor Mode : Successfully displayed Add New Device Screen");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Contractor Mode : Failed to displayed Add New Device Screen");
			flag = false;

		}
		if(ads.isT5StatDisplayed())
		{
			ads.clickOnT5Stat();
			Keyword.ReportStep_Pass(testCase, "Contractor Mode : Successfully Selected T5 Wi-Fi Thermostat");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Contractor Mode : Failed to displayed T5 Wi-Fi Thermostat");
			flag = false;

		}
		if(ads.isYesButtonOptionisDisplayed())
		{
			ads.clickOnYesButton();
			ads.clickOnYesButton();

		}

		if(ads.isFirstNameFieldDisplayed())
		{
			ads.setFirstNameValue("FirstName");
		}
		else
		{

		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}
		if(ads.isLastNameFieldDisplayed())
		{
			ads.setLastNameValue("LastName");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Contractor Mode : Failed to displayed Last Name");
			flag = false;
		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}


		if(ads.isEmailIDFieldDisplayed())
		{
			ads.setEmailIDValue("rn0111@grr.la");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Contractor Mode : Failed to displayed Email field");
			flag = false;
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}
		else
		{
			if(MobileUtils.isMobElementExists("name", "Return", testCase,10,false))
			{
				MobileUtils.clickOnElement(testCase, "name", "Return");
			}
		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(ads.isSendInvitationDisplayed())
			{
				ads.clickOnSendInvitationButton();
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Contractor Mode : Failed to displayed SEND INVITAION EMAIL");
				flag = false;
			}
		}
		else
		{
			if(MobileUtils.getMobElement(testCase , "NAME" , "RightButton" , false,false)!=null)
			{
				MobileUtils.getMobElement(testCase , "NAME" , "RightButton" , false,false).click();
			}
		}
		if(ads.isOkButtonVisible())
		{
			ads.clickOnOkButton();
		}


		if(!ads.clickOnBackButton())
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Fail to click on Back button");
			flag=false;
		}
		ads.clickOnLogoutButton();
		if (ls.isLoginButtonVisible()) {
			Keyword.ReportStep_Pass(testCase, "[Logout of optik] : Logout operation Successful.");
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"[Logout of optik] : Login screen verification failed.Not able to logout of the App after click on Logout option.");
			flag = false;
		}


		inputs.setInputValue("USERID", "rn0111@grr.la");
		inputs.setInputValue("PASSWORD", "Password1");
		flag = flag && optikUtils.loginTooptikApp(testCase, inputs);
		if( MobileUtils.isRunningOnAndroid(testCase))
		{
			if(os.isIgnoreButtonVisible(5))
			{
				os.clickOnIgnoreButton();
			}
			if(os.isAllowButtonVisible())
			{
				os.clickOnAllowButton();
			}
			else if(inputs.isInputAvailable("LANGUAGE"))
			{
				if(os.isAllowButtonVisible(inputs))
				{
					os.isAllowButtonClick(inputs);
				}
			}
		}
		CoachMarkUtils.closeCoachMarks(testCase);
		if(ads.isInvitePopupHeaderDisplayed(25))
		{
			Keyword.ReportStep_Pass(testCase, "End User able to received the Invitation");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"End User unable to received the Invitation");
			flag = false;
		}

		if(ads.isContinueButtonDisplayed())
		{
			Keyword.ReportStep_Pass(testCase, "Continue button is displayed");
			ads.clickOnContinueButton();

			if(ads.isInstallationPageDisplayed())
			{
				Keyword.ReportStep_Pass(testCase, "Installation page is displayed");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Installation page is not displayed");
				flag = false;
			}
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Continue button is not displayed");
			flag = false;
		}


		return flag;
	}

	public static boolean verifyLinkImportAndLogIn(TestCases testCase, TestCaseInputs inputs, String language){
		boolean flag=true;
		TccLoginScreen tls=new TccLoginScreen
				(testCase,language);
		String TccEmail =testCase.getTestCaseInputs().getInputValue("EMAIL_ID");
		String TccPass =testCase.getTestCaseInputs().getInputValue("TCCPASSWORD");
		if(tls.isLinkImportTitleVisible()){
			Keyword.ReportStep_Pass(testCase, "Link & Import title visible");
		}
		else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Link and import title not found");
			flag = false;
		}
		TouchAction action = new TouchAction(testCase.getMobileDriver());
		action.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();
		if(tls.isEnglishTextVisible())
		{
			tls.clickOnEnglishTextButton();
		}
		
		if(tls.isEmailAddressFieldVisible(5)){
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(testCase.getMobileDriver().findElementByXPath("//*[@resource-id='Username']")!=null){
					testCase.getMobileDriver().findElementByXPath("//*[@resource-id='Username']").click();
					testCase.getMobileDriver().findElementByXPath("//*[@resource-id='Username']").sendKeys(TccEmail);
				}
			}
			
		}
		else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Email field not found");
			flag = false;
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}

		WebElement tap=tls.getPasswordField();
		if(tls.isPasswordFieldVisible(5)){

			tls.getPasswordField().click();
             if(MobileUtils.isRunningOnAndroid(testCase))
			{
				testCase.getMobileDriver().findElementByXPath("//*[@resource-id='Password']").sendKeys(TccPass);
			}
			else {
				tls.setPasswordFieldValue(TccPass);
				//tap.sendKeys(TccPass);
			}
			
		}else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Password field not found");
			flag = false;
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}
		Schedule.SwipeDown(testCase);

		if(tls.isSignInButtonVisible(5)){
			Keyword.ReportStep_Pass(testCase, "Installation page is displayed");
			tls.clickOnSignInButton();
		}else{
			try {
				testCase.getMobileDriver().findElementByXPath("//android.widget.Button[@text='SIGN IN']").click();
				Keyword.ReportStep_Pass(testCase, "Installation page is displayed");
			
			}catch(Exception e) {
				
			}
		}
		if(tls.isAcceptButtonVisible(5)){
			tls.clickOnAcceptButton();
		}else{
			try {
				testCase.getMobileDriver().findElementByXPath("//android.widget.Button[@text='I ACCEPT']").click();
			
			}catch(Exception e) {
				
			}
		}
		
		tls.clickOnStatOption();

		if(tls.isOkButtonVisible()){

			tls.clickOnOkButton();
		}else{
			try {
				testCase.getMobileDriver().findElementByXPath("//android.widget.Button[@text='OK']").click();
			
			}catch(Exception e) {
				
			}
		}
		if(tls.isConnectVisible()){

			tls.clickOnConnectButton();
		}
		MobileUtils.isMobElementExists("id" , "xyz" , testCase,40,false);
		return flag;
	}

	public static boolean verifyLinkImportAndLogInforError(TestCases testCase, TestCaseInputs inputs, String language){
		boolean flag=true;
		ThermostatSettingsScreen tss=new ThermostatSettingsScreen(testCase);
		TccLoginScreen tls=new TccLoginScreen
				(testCase,language);
		String TccEmail =testCase.getTestCaseInputs().getInputValue("EMAIL_ID");
		String TccPass =testCase.getTestCaseInputs().getInputValue("TCCPASSWORD");
		if(tls.isLinkImportTitleVisible()){
			Keyword.ReportStep_Pass(testCase, "Link & Import title visible");
		}
		else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Link and import title not found");
			flag = false;
		}
		TouchAction action = new TouchAction(testCase.getMobileDriver());
		action.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();
		if(tls.isEnglishTextVisible())
		{
			tls.clickOnEnglishTextButton();
		}
		
		if(tls.isEmailAddressFieldVisible(5)){
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(testCase.getMobileDriver().findElementByXPath("//*[@resource-id='Username']")!=null){
					testCase.getMobileDriver().findElementByXPath("//*[@resource-id='Username']").click();
					testCase.getMobileDriver().findElementByXPath("//*[@resource-id='Username']").sendKeys(TccEmail);
				}
			}
			
		}
		else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Email field not found");
			flag = false;
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}

		WebElement tap=tls.getPasswordField();
		if(tls.isPasswordFieldVisible(5)){

			tls.getPasswordField().click();
             if(MobileUtils.isRunningOnAndroid(testCase))
			{
				testCase.getMobileDriver().findElementByXPath("//*[@resource-id='Password']").sendKeys(TccPass);
			}
			else {
				tls.setPasswordFieldValue(TccPass);
				//tap.sendKeys(TccPass);
			}
			
		}else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Password field not found");
			flag = false;
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}
		Schedule.SwipeDown(testCase);

		if(tls.isSignInButtonVisible(5)){
			Keyword.ReportStep_Pass(testCase, "Installation page is displayed");
			tls.clickOnSignInButton();
		}else{
			try {
				testCase.getMobileDriver().findElementByXPath("//android.widget.Button[@text='SIGN IN']").click();
				Keyword.ReportStep_Pass(testCase, "Installation page is displayed");
			
			}catch(Exception e) {
				
			}
		}
		if(tls.isAcceptButtonVisible(5)){
			tls.clickOnAcceptButton();
		}else{
			try {
				testCase.getMobileDriver().findElementByXPath("//android.widget.Button[@text='I ACCEPT']").click();
			
			}catch(Exception e) {
				
			}
		}
		if(tls.isOkButtonVisible()){

			tls.clickOnOkButton();
		}else{
			try {
				testCase.getMobileDriver().findElementByXPath("//android.widget.Button[@text='OK']").click();
			
			}catch(Exception e) {
				
			}
		}
			if(tss.isImportFailedPopupVisible())
		{
			Keyword.ReportStep_Pass(testCase,"Successfully Verified Import Thermostat Popup.");
			tss.ClickCancelbutton();
			Keyword.ReportStep_Pass(testCase,"Successfully Clicked on Cancel Button.");
		}else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Delete Thermostat Popup does not persist ");
		}
			MobileUtils.isMobElementExists("id" , "xyz" , testCase,40,false);
		return flag;
	}


	public static boolean verifyLinkImportAndLogInforStat2(TestCases testCase, TestCaseInputs inputs,String language){
		boolean flag=true;
		TccLoginScreen tls=new TccLoginScreen(testCase,language);
		//String TccEmail =testCase.getTestCaseInputs().getInputValue("TCCUSERID");
		//String TccPass =testCase.getTestCaseInputs().getInputValue("TCCPASS");
		OSPopUps ops=new OSPopUps(testCase,language);
		if(tls.isLinkImportTitleVisible()){
			Keyword.ReportStep_Pass(testCase, "Link and Import title visible");
		}
		else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Link and import title not found");
			flag = false;
		}
		if(tls.isEnglishTextVisible())
		{
			tls.clickOnEnglishTextButton();
		}
		if(tls.isEmailAddressFieldVisible(5)){
			if(testCase.getMobileDriver().findElementByXPath("//*[contains(@content-desc,'Enter e')]")!=null){
				testCase.getMobileDriver().findElementByXPath("//*[contains(@content-desc,'Enter e')]").click();
				testCase.getMobileDriver().findElementByXPath("//*[contains(@content-desc,'Enter e')]").sendKeys("sm53@grr.la");
			}
		}
		else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Email field not found");
			flag = false;
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}


		if(tls.isPasswordFieldVisible(5)){

			tls.getPasswordField();
		}else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Password field not found");
			flag = false;
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}
		MobileUtils.scrollTo(testCase, "SIGN IN");

		if(tls.isSignInButtonVisible(5)){
			Keyword.ReportStep_Pass(testCase, "Installation page is displayed");
			tls.clickOnSignInButton();
		}
		else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sign In Button not found");
			flag = false;
		}
		if(tls.isAcceptButtonVisible(5)){
			tls.clickOnAcceptButton();
		}
		tls.clickOnStatOption();

		if(tls.isOkButtonVisible()){

			tls.clickOnOkButton();
		}
		if(tls.isConnectVisible()){

			tls.clickOnConnectButton();
		}
		MobileUtils.isMobElementExists("id" , "xyz" , testCase,30,false);
		return flag;
	}

	public static boolean removeTCCStat(TestCases testCase, TestCaseInputs inputs,String language) throws Exception{
		boolean flag=true;
		language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		TccLoginScreen tls=new TccLoginScreen(testCase,language);
		AddNewDeviceScreen ads=new AddNewDeviceScreen(testCase);
				OSPopUps os = new OSPopUps(testCase);
				flag = flag && DashboardUtils.selectDeviceFromDashboard(testCase,inputs.getInputValue("LOCATION1_DEVICE1_NAME"));
				if(inputs.isInputAvailable("LANGUAGE"))
				{
					//String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
					if(!MobileUtils.isRunningOnAndroid(testCase) && (!language.contains("English")) )
					{
						flag = flag && CoachMarkUtils.closeCoachMarksLocal(testCase,inputs);
					}else
					{
						flag = flag && CoachMarkUtils.closeCoachMarks(testCase);
					}
					flag=true;
				}else
				{
					flag = flag && CoachMarkUtils.closeCoachMarks(testCase);
				}
				PrimaryCard pc=new PrimaryCard(testCase);
				pc.clickOnCogIcon();
				if (pc.isThermostatConfigBtnVisible()) {
					pc.clickOnThermostatConfigBtn();
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Tap On Thermostat Configuration Button : Could not find Thermostat Configuration Button");
				}
				optikUtils.checkElement("DeleteStatButton", testCase);
				ThermostatSettingsScreen tss=new ThermostatSettingsScreen(testCase);
				if(tss.isDeleteStatButtonVisible())
				{
					if(tss.ClickDeleteStatButton())
					{
						if(tss.isDeleteThermoPopupVisible())
						{
							tss.ClickYESbutton();
						}
					}
				}
			   else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Successfully verify Delete Thermostat Option");
				}
				Keyword.ReportStep_Pass(testCase,"Successfully Remove Device");

		return flag;
	}

	public static boolean verifyInviteUserScreenFields(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;

		AddNewDeviceScreen ads=new AddNewDeviceScreen(testCase);

		OSPopUps os = new OSPopUps(testCase);

		if( MobileUtils.isRunningOnAndroid(testCase))
		{
			if(os.isIgnoreButtonVisible(15))
			{
				os.clickOnIgnoreButton();
			}
			if(os.isAllowButtonVisible())
			{
				os.clickOnAllowButton();
			}
			if(os.isAcceptButtonVisible(5))
			{
				os.clickOnAcceptButton();
			}
			else if(inputs.isInputAvailable("LANGUAGE"))
			{
				if(os.isAllowButtonVisible(inputs))
				{
					os.isAllowButtonClick(inputs);
				}
			}
		}
		else
		{
			if(os.isIgnoreButtonVisible(15))
			{
				os.clickOnIgnoreButton();
			}
			if(os.isAllowButtonVisible())
			{
				os.clickOnAllowButton();
			}
			if(os.isAllowButtonVisible())
			{
				os.clickOnAllowButton();
			}
		}

		if(ads.isAddNewDeviceHeaderDisplayed(5))
		{
			Keyword.ReportStep_Pass(testCase, "Contractor Mode : Successfully displayed Add New Device Screen");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Contractor Mode : Failed to displayed Add New Device Screen");
			flag = false;

		}
		if(ads.isT5StatDisplayed())
		{
			ads.clickOnT5Stat();
			Keyword.ReportStep_Pass(testCase, "Contractor Mode : Successfully Selected T5 Wi-Fi Thermostat");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Contractor Mode : Failed to displayed T5 Wi-Fi Thermostat");
			flag = false;

		}
		if(ads.clickOnYesButton())
		{
			ads.clickOnYesButton();
		}


		if(ads.isFirstNameFieldDisplayed())
		{
			ads.setFirstNameValue("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
			Keyword.ReportStep_Pass(testCase, "Contractor Mode :First Name Successfully Set: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");

		}

		if(ads.isLastNameFieldDisplayed())
		{
			ads.setLastNameValue("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
			Keyword.ReportStep_Pass(testCase, "Contractor Mode :First Name Successfully Set: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Contractor Mode : Failed to displayed Last Name");
			flag = false;
		}

		if(ads.isEmailIDFieldDisplayed())
		{
			ads.setEmailIDValue(inputs.getInputValue("USERID"));
			Keyword.ReportStep_Pass(testCase,"Contractor Mode :Email id is set to"+inputs.getInputValue("USERID"));
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Contractor Mode : Failed to displayed Email field");
			flag = false;
		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}
		else
		{
			if(MobileUtils.isMobElementExists("name", "Return", testCase))
			{
				MobileUtils.clickOnElement(testCase, "name", "Return");
			}
		}

		if(ads.isSendInvitationEnabled())
		{
			Keyword.ReportStep_Pass(testCase, "Contractor Mode : Send Invitation Button is Enabled");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Contractor Mode : Send Invitation Button is Disabled");
			flag = false;
		}

		//Scenario 2

		ads.clearTextField("FirstName");
		ads.clearTextField("LastName");
		ads.clearTextField("Email");

		if(ads.isFirstNameFieldDisplayed())
		{
			ads.setFirstNameValue("");
			Keyword.ReportStep_Pass(testCase, "Contractor Mode :First Name Successfully Set: Empty");

		}

		if(ads.isLastNameFieldDisplayed())
		{
			ads.setLastNameValue("");
			Keyword.ReportStep_Pass(testCase, "Contractor Mode :First Name Successfully Set: Empty");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Contractor Mode : Failed to displayed Last Name");
			flag = false;
		}

		if(ads.isEmailIDFieldDisplayed())
		{
			ads.setEmailIDValue(inputs.getInputValue("USERID"));
			Keyword.ReportStep_Pass(testCase,"Contractor Mode :Email id is set to"+inputs.getInputValue("USERID"));
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Contractor Mode : Failed to displayed Email field");
			flag = false;
		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}
		else
		{
			if(MobileUtils.isMobElementExists("name", "Return", testCase))
			{
				MobileUtils.clickOnElement(testCase, "name", "Return");
			}
		}

		if(!ads.isSendInvitationEnabled())
		{
			Keyword.ReportStep_Pass(testCase, "Contractor Mode : Send Invitation Button is Disabled");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Contractor Mode : Contractor Mode : Send Invitation Button is Enabled");
			flag = false;
		}

		//Scenario 3

		ads.clearTextField("FirstName");
		ads.clearTextField("LastName");
		ads.clearTextField("Email");

		if(ads.isFirstNameFieldDisplayed())
		{
			ads.setFirstNameValue("Test");
			Keyword.ReportStep_Pass(testCase, "Contractor Mode :First Name Successfully Set: Test");

		}

		if(ads.isLastNameFieldDisplayed())
		{
			ads.setLastNameValue("Automation");
			Keyword.ReportStep_Pass(testCase, "Contractor Mode :First Name Successfully Set: Automation");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Contractor Mode : Failed to displayed Last Name");
			flag = false;
		}

		if(ads.isEmailIDFieldDisplayed())
		{
			ads.setEmailIDValue("mb@grr.la");
			Keyword.ReportStep_Pass(testCase,"Contractor Mode :Email id is set : mb@grr.la.la");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Contractor Mode : Failed to displayed Email field");
			flag = false;
		}




		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}
		else
		{
			if(MobileUtils.isMobElementExists("name", "Return", testCase))
			{
				MobileUtils.clickOnElement(testCase, "name", "Return");
			}
		}

		if(!ads.isSendInvitationEnabled())
		{
			Keyword.ReportStep_Pass(testCase, "Contractor Mode : Send Invitation Button is Disabled");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Contractor Mode : Contractor Mode : Send Invitation Button is Enabled");
			flag = false;
		}

		if(!ads.clickOnBackButton())
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Fail to click on Back button");
			flag=false;
		}

		if(!ads.clickOnBackButton())
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Fail to click on Back button");
			flag=false;
		}

		if(!ads.clickOnBackButton())
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Fail to click on Back button");
			flag=false;
		}

		return flag;
	}
	public static boolean VerifyFanModeOptionSelected(TestCases testCase, TestCaseInputs inputs,String deviceToClick) {

		boolean flag=true;
		try {
			PrimaryCard pc= new PrimaryCard(testCase);
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			String statetype=statInfo.getDeviceType();
			if(statInfo.getJasperDeviceType().contains("NA")||statetype.contains("Blackbeard")||statetype.contains("HoneyBadger"))
			{

				if (pc.clickOnFanMode())
				{
					switch (deviceToClick.toUpperCase()) {
					case "ON":

						if(pc.VerifyFanModeOptionSelected("ON"))
						{
							Keyword.ReportStep_Pass(testCase,"Verify Fan mode selected to ON option");
						}
						else
						{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Verify Fan mode selected to ON option");
							flag=false;
						}
						break;
					case "AUTO":
						if(pc.VerifyFanModeOptionSelected("AUTO"))
						{
							Keyword.ReportStep_Pass(testCase,"Verify Fan mode selected to AUTO option");
						}
						else
						{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Verify Fan mode selected to AUTO option");
							flag=false;
						}
						break;
					case "CIRCULATE":
						if(pc.VerifyFanModeOptionSelected("CIRCULATE"))
						{
							Keyword.ReportStep_Pass(testCase,"Verify Fan mode selected to CIRCULATE option");
						}
						else
						{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Verify Fan mode selected to CIRCULATE option");
							flag=false;
						}
						break;


					case "MEDIUM":
						if(pc.VerifyFanModeOptionSelected("MEDIUM"))
						{
							Keyword.ReportStep_Pass(testCase,"Verify Fan mode selected to MEDIUM option");
						}
						else
						{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Verify Fan mode selected to MEDIUM option");
							flag=false;
						}
						break;

					case "LOW":
						if(pc.VerifyFanModeOptionSelected("LOW"))
						{
							Keyword.ReportStep_Pass(testCase,"Verify Fan mode selected to LOW option");
						}
						else
						{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Verify Fan mode selected to LOW option");
							flag=false;
						}

						break;

					case "HIGH":
						if(pc.VerifyFanModeOptionSelected("HIGH"))
						{
							Keyword.ReportStep_Pass(testCase,"Verify Fan mode selected to High option");
						}
						else
						{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Verify Fan mode selected to High option");
							flag=false;
						}
						break;

					default:
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Inputs not handled");
						break;
					}
				}
			}
			else
			{

			}

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Error occurred : " + e.getMessage());
		}
		return flag;

	}

	public static boolean VerifyPriorityOptionSelected(TestCases testCase, TestCaseInputs inputs,String deviceToClick) {


		boolean flag=true;
		try {

			PrimaryCard pc= new PrimaryCard(testCase);
			PriorityScreen ps= new PriorityScreen(testCase);
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			String statetype=statInfo.getDeviceType();
			if(statInfo.getJasperDeviceType().contains("NA")||statetype.contains("Blackbeard")||statetype.contains("HoneyBadger"))
			{

				if (pc.clickonPriorityText())
				{
					switch (deviceToClick.toUpperCase()) {
					case "SELECTED ROOMS":

						if(ps.VerifyPriorityOptionSelected("SELECTED ROOMS"))
						{
							Keyword.ReportStep_Pass(testCase,"Verify Priority selected to 'SELECTED ROOMS' option");
						}
						else
						{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Verify Priority selected to 'SELECTED ROOMS' option");
							flag=false;
						}
						break;
					case "ACTIVE ROOMS":
						if(ps.VerifyPriorityOptionSelected("ACTIVE ROOMS"))
						{
							Keyword.ReportStep_Pass(testCase,"Verify Priority selected to 'ACTIVE ROOMS' option");
						}
						else
						{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Verify Priority selected to 'ACTIVE ROOMS' option");
							flag=false;
						}
						break;

					default:
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Inputs not handled");
						break;
					}
				}
			}
			else
			{

			}

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Error occurred : " + e.getMessage());
		}
		return flag;

	}


	public static boolean VerifySystemModeOptionAndInfo(TestCases testCase, TestCaseInputs inputs) {

		boolean flag=true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			String statetype=statInfo.getDeviceType();
			PrimaryCard pm=new PrimaryCard(testCase);
			SystemMode sm=new SystemMode(testCase);
			if(pm.isSystemModeVisible())
			{
				flag=flag && pm.clickOnSystemMode();

				List<String> allowedModes =null;
				try
				{
					allowedModes = statInfo.getAllowedModes() ;
				}
				catch(Exception e)
				{

				}
				if(allowedModes.contains("Auto"))
				{
					if(sm.isAutoOptionVisible())
					{
						Keyword.ReportStep_Pass(testCase, "System :auto mode visible");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System : auto mode is not visible", false);
						flag=false;
					}
				}
				else
				{
					Keyword.ReportStep_Pass(testCase, "System :Does not auto mode.");
				}


				if(allowedModes.contains("Heat"))
				{
					if(sm.isHeatOptionVisible())
					{
						Keyword.ReportStep_Pass(testCase, "System :Heat mode visible");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System Info: heat mode is not visible", false);
						flag=false;
					}
				}
				else
				{
					Keyword.ReportStep_Pass(testCase, "System :Does not heat mode.");
				}


				if(allowedModes.contains("Cool"))
				{
					if(sm.isCoolOptionVisible())
					{
						Keyword.ReportStep_Pass(testCase, "System mode :cool mode visible");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System : cool mode is not visible", false);
						flag=false;
					}
				}
				else
				{
					Keyword.ReportStep_Pass(testCase, "System :Does not cool mode.");
				}



				if(sm.isOffOptionVisible())
				{
					Keyword.ReportStep_Pass(testCase, "System mode:off mode visible");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System mode: off mode is not visible", false);

				}


				if(sm.isInfoButtonVisible()){
					sm.clickOnInfoButton();
					Keyword.ReportStep_Pass(testCase, "System : Navigated to System Info");
					if(statetype.contains("FlyCatcher") || statetype.contains("Storm"))
					{
						if(allowedModes.contains("Auto"))
						{
							if(sm.isAutoOptionVisible())
							{
								Keyword.ReportStep_Pass(testCase, "System Info: Auto Option Info is disable");
							}
							else{
								flag=false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System Info: Auto Option is not visible", false);
							}
						}
						else
						{
							Keyword.ReportStep_Pass(testCase, "System :Does not auto mode.");
						}

						if(allowedModes.contains("Heat"))
						{
							if(sm.isHeatOptionVisible())
							{
								Keyword.ReportStep_Pass(testCase, "System Info: Heat Option Info is disable");
							}
							else{
								flag=false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System Info: Heat Option is not visible", false);
							}
						}
						else
						{
							Keyword.ReportStep_Pass(testCase, "System :Does not heat mode.");
						}


						if(allowedModes.contains("Cool"))
						{
							if(sm.isCoolOptionVisible())
							{
								Keyword.ReportStep_Pass(testCase, "System Info: Cool Option is visible");
							}
							else{
								flag=false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System Info: Cool Option is not visible", false);
							}
						}
						else
						{
							Keyword.ReportStep_Pass(testCase, "System :Does not cool mode.");
						}


						if(sm.isOffOptionVisible())
						{
							Keyword.ReportStep_Pass(testCase, "System Info: off Option is visible");
						}
						else{
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System Info: Off Option is not visible", false);
						}

					}
					if(sm.isBackButtonVisible()){
						flag= flag && sm.clickOnBackButton();
					}
					else{
						flag=false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System Info: Unable to find back button", false);
					}
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System Unable to find System Info button", false);
				}
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Primary card: Unable to find system button", false);
			}

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Error occurred : " + e.getMessage());
		}
		return flag;

	}

	public static boolean changefanModeOption(TestCases testCase, TestCaseInputs inputs,String type)
	{
		boolean flag=true;
		try
		{
			String mode="";
			CHILUtil cUtil = new CHILUtil(inputs);
			PrimaryCard pc= new PrimaryCard(testCase);
			CyberSecurityPopUpAndScreen cyPop= new CyberSecurityPopUpAndScreen(testCase);
			if (pc.clickOnFanMode())
			{
				CoachMarkUtils.closeCoachMarks(testCase);
				switch (type.toUpperCase()) {
				case "ON":
					pc.changeFanMode("ON");
					// added wait due to after click on option it is taking 20 sec to reflect
					cyPop.isDontUseTextVisible(25);
					if(pc.isSaveButtonAvailable())
					{
						pc.ClickOnSaveButton();
					}
					else if(pc.isBackButtonAvailable())
					{
						pc.ClickOnBackButton();
					}

					cyPop.isDontUseTextVisible(30);
					mode = cUtil.getFanModeInfo(testCase);
					if (type.equalsIgnoreCase(mode)) {
						Keyword.ReportStep_Pass(testCase,
								"Fan mode changed to " + type );
						Keyword.ReportStep_Pass(testCase,
								"Expected Mode: " + type + "Mode Getting Through Chapi:" +mode);
					} else {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Expected Mode:" + type + " is not matching with Mode Getting Through Chapi:" +mode);
					}
					break;
				case "AUTO":
					pc.changeFanMode("AUTO");
					// added wait due to after click on option it is taking 20 sec to reflect
					cyPop.isDontUseTextVisible(25);
					if(pc.isSaveButtonAvailable())
					{
						pc.ClickOnSaveButton();
					}
					else if(pc.isBackButtonAvailable())
					{
						pc.ClickOnBackButton();
					}
					cyPop.isDontUseTextVisible(30);
					mode = cUtil.getFanModeInfo(testCase);
					if (type.equalsIgnoreCase(mode)) {
						Keyword.ReportStep_Pass(testCase,
								"Fan mode changed to " + type );
						Keyword.ReportStep_Pass(testCase,
								"Expected Mode: " + type + "Mode Getting Through Chapi:" +mode);

					} else {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Expected Mode:" + type + " is not matching with Mode Getting Through Chapi:" +mode);
					}
					break;
				case "CIRCULATE":
					pc.changeFanMode("CIRCULATE");
					// added wait due to after click on option it is taking 20 sec to reflect
					cyPop.isDontUseTextVisible(25);
					if(pc.isSaveButtonAvailable())
					{
						pc.ClickOnSaveButton();
					}
					else if(pc.isBackButtonAvailable())
					{
						pc.ClickOnBackButton();
					}

					cyPop.isDontUseTextVisible(30);
					mode = cUtil.getFanModeInfo(testCase);
					if (type.equalsIgnoreCase(mode)) {
						Keyword.ReportStep_Pass(testCase,
								"Fan mode changed to " + type );
						Keyword.ReportStep_Pass(testCase,
								"Expected Mode: " + type + "Mode Getting Through Chapi:" +mode);
					} else {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Expected Mode:" + type + " is not matching with Mode Getting Through Chapi:" +mode);
					}
					break;


				case "MEDIUM":
					pc.changeFanMode("MEDIUM");
					// added wait due to after click on option it is taking 20 sec to reflect
					cyPop.isDontUseTextVisible(25);
					if(pc.isSaveButtonAvailable())
					{
						pc.ClickOnSaveButton();
					}
					else if(pc.isBackButtonAvailable())
					{
						pc.ClickOnBackButton();
					}

					cyPop.isDontUseTextVisible(30);
					mode = cUtil.getFanModeInfo(testCase);
					if (type.equalsIgnoreCase(mode)) {
						Keyword.ReportStep_Pass(testCase,
								"Fan mode changed to " + type );
						Keyword.ReportStep_Pass(testCase,
								"Expected Mode: " + type + "Mode Getting Through Chapi:" +mode);
					} else {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Expected Mode:" + type + " is not matching with Mode Getting Through Chapi:" +mode);
					}
					break;

				case "LOW":
					pc.changeFanMode("LOW");
					// added wait due to after click on option it is taking 20 sec to reflect
					cyPop.isDontUseTextVisible(25);
					if(pc.isSaveButtonAvailable())
					{
						pc.ClickOnSaveButton();
					}
					else if(pc.isBackButtonAvailable())
					{
						pc.ClickOnBackButton();
					}

					cyPop.isDontUseTextVisible(30);
					mode = cUtil.getFanModeInfo(testCase);
					if (type.equalsIgnoreCase(mode)) {
						Keyword.ReportStep_Pass(testCase,
								"Fan mode changed to " + type );
						Keyword.ReportStep_Pass(testCase,
								"Expected Mode: " + type + "Mode Getting Through Chapi:" +mode);
					} else {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Expected Mode:" + type + " is not matching with Mode Getting Through Chapi:" +mode);
					}
					break;

				case "HIGH":
					pc.changeFanMode("HIGH");
					// added wait due to after click on option it is taking 20 sec to reflect
					cyPop.isDontUseTextVisible(25);
					if(pc.isSaveButtonAvailable())
					{
						pc.ClickOnSaveButton();
					}
					else if(pc.isBackButtonAvailable())
					{
						pc.ClickOnBackButton();
					}

					cyPop.isDontUseTextVisible(30);
					mode = cUtil.getFanModeInfo(testCase);
					if (type.equalsIgnoreCase(mode)) {
						Keyword.ReportStep_Pass(testCase,
								"Fan mode changed to " + type );
						Keyword.ReportStep_Pass(testCase,
								"Expected Mode: " + type + "Mode Getting Through Chapi:" +mode);
					} else {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Expected Mode:" + type + " is not matching with Mode Getting Through Chapi:" +mode);
					}
					break;

				default:
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Inputs not handled");
					break;
				}
				cUtil.close();

			}
		}
		catch(Exception e)
		{

		}
		return flag;


	}

	public static boolean VerifyFanModeOptionAndInfo(TestCases testCase, TestCaseInputs inputs) {

		boolean flag=true;
		try {
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			String statetype=statInfo.getDeviceType();
			PrimaryCard pm=new PrimaryCard(testCase);
			FanSpeedInfo fs=new FanSpeedInfo(testCase);
			if(pm.isFanModeVisible())
			{
				flag=flag && pm.clickOnFanMode();
				flag=flag && pm.verifyAvailableFanMode(testCase, inputs);
				if(pm.isFanInfoButtonVisible()){
					pm.clickOnFanInfoButton();
					Keyword.ReportStep_Pass(testCase, "Fan : Navigated to Fan Speed Info");
					if(statetype.contains("Blackbeard"))
					{
						if(fs.isAutoOptionVisible(10))
						{
							Keyword.ReportStep_Pass(testCase, "Fan Speed Info: Auto Option is visible");
						}
						else{
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan Speed Info: Auto Option is not visible", false);
						}

						if(fs.isLowOptionVisible(10))
						{
							Keyword.ReportStep_Pass(testCase, "Fan Speed Info: Low Option is visible");
						}
						else{
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan Speed Info: Low Option is not visible", false);
						}

						if(fs.isMediumOptionVisible(10))
						{
							Keyword.ReportStep_Pass(testCase, "Fan Speed Info: Medium Option is visible");
						}
						else{
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan Speed Info: Medium Option is not visible", false);
						}

						if(fs.isHighOptionVisible(10))
						{
							Keyword.ReportStep_Pass(testCase, "Fan Speed Info: High Option is visible");
						}
						else{
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan Speed Info: High Option is not visible", false);
						}
					}
					else if(statInfo.getJasperDeviceType().contains("NA") || statetype.contains("HoneyBadger")||statInfo.getDeviceType().equals("FlyCatcher") || statInfo.getDeviceType().equals("Storm"))
					{
						if(fs.isAutoOptionVisible(10))
						{
							Keyword.ReportStep_Pass(testCase, "Fan Speed Info: Auto Option is visible");
						}
						else{
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan Speed Info: Auto Option is not visible", false);
						}

						if(fs.isOnOptionVisible(10))
						{
							Keyword.ReportStep_Pass(testCase, "Fan Speed Info: On Option is visible");
						}
						else{
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan Speed Info: On Option is not visible", false);
						}

						if(fs.isCirculateOptionVisible(10))
						{
							Keyword.ReportStep_Pass(testCase, "Fan Speed Info: Circulate Option is visible");
						}
						else{
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan Speed Info: Circulate Option is not visible", false);
						}

					}
					if(pm.isBackButtonAvailable())
					{
						pm.ClickOnBackButton();
					}
					else{
						flag=false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan Speed Info: Unable to find back button", false);
					}
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Fan: Unable to find Fan Info button", false);
				}
			}
			else{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Primary card: Unable to find Fan button", false);
			}

		} catch (Exception e) {
			flag = false;
			Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
					"Error occurred : " + e.getMessage());
		}
		return flag;

	}





	public static boolean VerifySchedulenameSpecialCharcter(TestCases testCase, TestCaseInputs inputs) {



		Schedule sc=new Schedule(testCase);
		boolean flag=true;

		//-------------------------------"USER VERIFY EMPTY STRING * * * * "
		if(sc.isAddperiodButtonVisible(5))
		{
			Keyword.ReportStep_Pass(testCase, "USER VERIFY EMPTY STRING * * * *");
			Keyword.ReportStep_Pass(testCase, "Add Period Button is visible on : schedule screen");
			if(sc.ClickOnAddperiod())
			{
				Keyword.ReportStep_Pass(testCase, "Successfully click on Add Period Button on : schedule screen");
			}else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Doesn't click on Add period Button on : schedule screen");
				flag=false;
			}
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add Period Button not visible on : schedule screen");
			flag=false;
		}


		if(sc.isperiodnametextVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Period name text header visible on : Add period screen");
			if(sc.setPeriodName(""))
			{
				Keyword.ReportStep_Pass(testCase, "successfully set period name is EMPTY  on : Add period screen");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Doesn't set period name is EMPTY  on : Add period screen");
				flag=false;
			}
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add Period name text header is not visible  on : Add period screen");
			flag=false;
		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			testCase.getMobileDriver().tap(1 , 700 ,1100);
		//	MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}
		else
		{
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{

			if(sc.isperiodnametextVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Period name text header visible on Add period screen : After passing empty string still we are on period name screen page.");
				if(sc.isBackButtonVisible()){
					sc.clickOnBackButton();
				}else{
					MobileUtils.pressBackButton(testCase);
				}
				
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add Period name text header is not visible  on : Add period screen");
				flag=false;
			}

			// Old Functiopnality Code
			 /* if(sc.isSaveButtonVisible(4)) {
				  Keyword.ReportStep_Pass(testCase,
			  "Save button is visible");

			  if(sc.ClickOnSaveButton()) {
				  Keyword.ReportStep_Pass(testCase,
			  "click  on save button");
				  } else {
					  Keyword.ReportStep_Fail(testCase,
			  FailType.FUNCTIONAL_FAILURE, " doesn't click  on save button"); flag=false; }
			  } else {

			  Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
			  " Save Button is not visible");
			  flag=false;
			  }

			if(sc.isPeriodDeleteDialogBoxMessageVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Message succussfully displayed is "+sc.getPeriodDeleteDialogBoxMessage());
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Message not display");
				flag=false;

			}
			if(sc.isOKButtonVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Ok button is visible");
				if(sc.clickOnOKButton())
				{
					Keyword.ReportStep_Pass(testCase, "Successfully click  on Ok button");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Doesn't click on Ok Button");
					flag=false;
				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Ok button not Visible");
				flag=false;
			}
			PrimaryCard pc=new PrimaryCard(testCase);
			if (pc.isMoreTextVisible(5)) {
				pc.clickonMoreText();

			}
			 if(sc.isScheduleButtonVisibleForFC(inputs, 3))
			{
				Keyword.ReportStep_Pass(testCase, "Schedule button is visible");
				if(sc.clickOnScheduleButtonForFC(inputs))
				{
					Keyword.ReportStep_Pass(testCase, "Successfully click  on Schedule Button");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Doesn't click on schedule button");
					flag=false;
				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Schedule button is not Visible");
				flag=false;
			}*/
		}
		else
		{
			if(sc.isperiodnametextVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Period name text header visible on Add period screen : After passing empty string still we are on period name screen page.");
				if(sc.isPeriodBackButtonVisible())
				{
					sc.clickOnPeriodBackButton();
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "back button not visible");
					flag=false;
				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add Period name text header is not visible  on : Add period screen");
				flag=false;
			}



		}

		//-------------------------------"USER VERIFY SPECIAL CHARACTER "
		if(sc .isAddperiodButtonVisible(5))
		{
			Keyword.ReportStep_Pass(testCase, "USER VERIFY SPECIAL CHARACTER * * * *");
			Keyword.ReportStep_Pass(testCase, "Add Period button is visible ");
			if(sc.ClickOnAddperiod())
			{
				Keyword.ReportStep_Pass(testCase, "successfully click on Add Period button is visible ");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Doesn't click  on Add period button");
				flag=false;

			}
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add Period button is not visible");
			flag=false;
		}


		if(sc.isperiodnametextVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Period name text header visible on : Add period screen");
			if(sc.setPeriodName("test@#!$'"))
			{
				if(!(sc.getaddperiodname()=="test@#!$'"))
				{
					Keyword.ReportStep_Pass(testCase, "successfully set period name is "+sc.getaddperiodname() +" on : Add period screen Special Symbol Not print");
				}
				else 	if(!(sc.getaddperiodname()=="test'"))
				{
					Keyword.ReportStep_Pass(testCase, "successfully set period name is "+sc.getaddperiodname() +" on : Add period screen Special Symbol Not print");
				}
				else
				{

					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Faild due to Special symbol add on set period name is "+sc.getaddperiodname() +"  on : Add period screen");
					flag=false;
				}


			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Doesn't set period name is "+sc.getaddperiodname() +"  on : Add period screen");
				flag=false;
			}
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add Period name text header is not visible  on : Add period screen");
			flag=false;
		}


		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			//MobileUtils.hideKeyboard(testCase.getMobileDriver());
			testCase.getMobileDriver().tap(1 , 700 ,1100);
		}
		else
		{
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
		}


		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(sc.isSaveButtonVisible(4))
			{
				Keyword.ReportStep_Pass(testCase, "Save button is visible");

				if(sc.ClickOnSaveButton())
				{
					Keyword.ReportStep_Pass(testCase, "click  on save button");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " doesn't click  on save button");
					flag=false;
				}
			}
			else
			{

				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Save Button is not visible");
				flag=false;
			}
		}

		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			if(sc.isPeriodErrorvisible())
			{
				Keyword.ReportStep_Pass(testCase, "Message succussfully displayed is "+sc.getPeriodError());
			}else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Error Message not display");
				flag=false;
			}

			if(sc.isOKButtonVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Ok button is visible");
				if(sc.clickOnOKButton())
				{
					Keyword.ReportStep_Pass(testCase, "Successfully click  on Ok button");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Doesn't click on Ok Button");
					flag=false;
				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Ok button not Visible");
				flag=false;
			}

			if(sc.isPeriodBackButtonVisible())
			{
				sc.clickOnPeriodBackButton();
			}
		}


		//-----------------------------------------	"USER VERIFY STRING LENGTH"
		if(sc.isAddperiodButtonVisible(5))
		{
			Keyword.ReportStep_Pass(testCase, "USER VERIFY STRING LENGTH * * * *");
			Keyword.ReportStep_Pass(testCase, "Add Period button is visible ");
			if(sc.ClickOnAddperiod())
			{
				Keyword.ReportStep_Pass(testCase, "successfully click on Add Period button is visible ");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Doesn't click  on Add period button");
				flag=false;

			}
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add Period button is not visible");
			flag=false;
		}


		if(sc.isperiodnametextVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Period name text header visible on : Add period screen");
			if(sc.setPeriodName("gggggggggggggggggggggggggggggggggggg"))
			{
				Keyword.ReportStep_Pass(testCase, "successfully set period name is "+ sc.getaddperiodname() +" on : Add period screen");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Doesn't set period name is "+ sc.getaddperiodname() + " on : Add period screen");
				flag=false;
			}
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add Period name text header is not visible  on : Add period screen");
			flag=false;
		}


		/*if(MobileUtils.isRunningOnAndroid(testCase))
		{*/
			if(sc.getaddperiodname().length()==15)
			{
				Keyword.ReportStep_Pass(testCase, "user enter only 15 character");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "User Enter more than 30");
				flag=false;
			}

		/*}
		else
		{
			if(sc.getaddperiodname().length()==15)
			{
				Keyword.ReportStep_Pass(testCase, "user enter only 15 character");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "User Enter more than 15");
				flag=false;
			}

		}
*/
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
		//	MobileUtils.hideKeyboard(testCase.getMobileDriver());
			testCase.getMobileDriver().tap(1 , 700 ,1100);
		}
		else
		{
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
		}



		if(sc.isSaveButtonVisible(4))
		{
			Keyword.ReportStep_Pass(testCase, "Save button is visible");

			if(sc.ClickOnSaveButton())
			{
				Keyword.ReportStep_Pass(testCase, "click  on save button");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " doesn't click  on save button");
				flag=false;
			}
		}
		else
		{

			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Save Button is not visible");
			flag=false;
		}


		/*if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(sc.isPeriodErrorvisible())
			{
				Keyword.ReportStep_Pass(testCase, "Message succussfully displayed is "+sc.getPeriodError());
			}else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Error Message not display");
				flag=false;
			}

			if(sc.isOKButtonVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Ok button is visible");
				if(sc.clickOnOKButton())
				{
					Keyword.ReportStep_Pass(testCase, "Successfully click  on Ok button");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Doesn't click on Ok Button");
					flag=false;
				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Ok button not Visible");
				flag=false;
			}

		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(sc.isScheduleButtonVisibleForFC(inputs, 3))
			{
				Keyword.ReportStep_Pass(testCase, "Schedule button is visible");
				if(sc.clickOnScheduleButtonForFC(inputs))
				{
					Keyword.ReportStep_Pass(testCase, "Successfully click  on Schedule Button");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Doesn't click on schedule button");
					flag=false;
				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Schedule button is not Visible");
				flag=false;
			}
		}*/
		/*if(!MobileUtils.isRunningOnAndroid(testCase))
	{

		if(sc.isPeriodBackButtonVisible())

		{
			Keyword.ReportStep_Pass(testCase, "back button is visible ");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "back button not visible");
			flag=false;
		 }

			if(sc.clickOnPeriodBackButton())
			{
			Keyword.ReportStep_Pass(testCase, "Successfully click  on Back Button ");
		    }
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Doesn't click  on Back Button");
				flag=false;
			}
	}
		 */

		//-----------------------------------------	"USER VERIFY VALID NAME"
		if(sc.isAddperiodButtonVisible(5))
		{
			Keyword.ReportStep_Pass(testCase, "USER VERIFY VALID NAME * * * *");
			Keyword.ReportStep_Pass(testCase, "Add Period button is visible ");
			if(sc.ClickOnAddperiod())
			{
				Keyword.ReportStep_Pass(testCase, "successfully click on Add Period button is visible ");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Doesn't click  on Add period button");
				flag=false;

			}
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add Period button is not visible");
			flag=false;
		}


		if(sc.isperiodnametextVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Period name text header visible on : Add period screen");
			if(sc.setPeriodName("Custom1"))
			{
				Keyword.ReportStep_Pass(testCase, "successfully set period name is " + sc.getaddperiodname() + " on : Add period screen");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Doesn't set period name is "+ sc.getaddperiodname() + " on : Add period screen");
				flag=false;
			}
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add Period name text header is not visible  on : Add period screen");
			flag=false;
		}



		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			//MobileUtils.hideKeyboard(testCase.getMobileDriver());
			testCase.getMobileDriver().tap(1 , 700 ,1100);
		}
		else
		{
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
		}



		if(sc.isSaveButtonVisible(4))
		{
			Keyword.ReportStep_Pass(testCase, "Save button is visible");

			if(sc.ClickOnSaveButton())
			{
				Keyword.ReportStep_Pass(testCase, "click  on save button");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " doesn't click  on save button");
				flag=false;
			}
		}
		else
		{

			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Save Button is not visible");
			flag=false;
		}

		/*if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(sc.isPeriodErrorvisible())
			{
				Keyword.ReportStep_Pass(testCase, "Message succussfully displayed is "+sc.getPeriodError());
			}else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Error Message not display");
				flag=false;
			}

			if(sc.isOKButtonVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Ok button is visible");
				if(sc.clickOnOKButton())
				{
					Keyword.ReportStep_Pass(testCase, "Successfully click  on Ok button");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Doesn't click on Ok Button");
					flag=false;
				}
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, " Ok button not Visible");
				flag=false;
			}

		}

*/
		if(sc.isPeriodBackButtonVisible())

		{
			Keyword.ReportStep_Pass(testCase, "back button is visible ");
			sc.clickOnPeriodBackButton();
			
		}if(sc.isBackButtonVisible())
       {
			sc.clickOnBackButton();
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "back button not visible");
			flag=false;
		}

		return flag;
	}




	public static boolean navigateToThermostatSensorSettingScreen(TestCases testCase) {
		boolean flag=true;

		ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);
		if(ts.isDeviceAndSensorsVisible())
		{
			Keyword.ReportStep_Pass(testCase,"THERMOSTAT SETTINGS: Thermostat Device and Sensors is shown on Thermostat Settings screen");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT SETTINGS :Thermostat Device and Sensors is not shown on Thermostat Settings screen");
		}

		if(ts.isDeviceAndSensorsVisible())
		{
			if(ts.navigateToIndoorAirSensors())
			{
				Keyword.ReportStep_Pass(testCase,"THERMOSTAT SETTINGS: Successfully navigate to Indoor AirSensor screen");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT SETTINGS: Unable to navigate Thermostat Configuration screen");
			}
		}

		return flag;
	}

	public static boolean VerifySensorSettingScreen(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		ThermostatSensorSettingScreen tss = new ThermostatSensorSettingScreen(testCase,inputs);



		if(tss.isIndoorAirSensorVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Verified Successfully navigated to Indoor Air Sensor screen");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT SETTINGS: Unable to navigate Indoor Air Sensor screen");

		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			int size= tss.getAvailableSensorSize();

			List<WebElement> sensornames= tss.getSensorNames();
			List<WebElement> sensortemp=tss.getAllSensorTemperature();
			List<WebElement> sensorhumidity=tss.getAllSensorHumidity();


			for(int i=0;i<size;i++)
			{
				if(sensornames.get(i)!=null)
				{
					if(MobileUtils.isRunningOnAndroid(testCase))
					{
						Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Name : "+sensornames.get(i).getText()+" is displayed");
					}
					else
					{
						Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor : "+sensornames.get(i).getAttribute("value")+" is displayed");
					}

					if(sensortemp.get(i)!=null)
					{

						if(MobileUtils.isRunningOnAndroid(testCase))
						{
							Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Temperature : "+sensortemp.get(i).getText()+" is displayed");
						}
						else
						{
							Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Temperature : "+sensortemp.get(i).getAttribute("value")+" is displayed");
						}

					}
					else
					{
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Indoor Air Sensor: Unable to get sensor temperature");
					}

					if(sensorhumidity.get(i)!=null)
					{

						if(MobileUtils.isRunningOnAndroid(testCase))
						{
							Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Humidity : "+sensorhumidity.get(i).getText()+" is displayed");
						}
						else
						{
							Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Humidity : "+sensorhumidity.get(i).getAttribute("value")+" is displayed");
						}

					}
					else
					{
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Indoor Air Sensor: Unable to get sensor humidity");
					}

				}

			}

			if(size!=0)
			{
				sensornames.get(0).click();
				Keyword.ReportStep_Pass(testCase, " Sensor Settings : Clicked on 1st sensor");
			}
			else
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: No Sensor is displayed");
			}


		}

		else
		{

			for(int i=0;i<5;i++)
			{
				if(tss.getIOSSensorsName(i).equalsIgnoreCase("empty"))
				{
					Keyword.ReportStep_Pass(testCase, " Sensor Settings :"+i+" is displayed");

					break;
				}
				else
				{
					Keyword.ReportStep_Pass(testCase, " Sensor Settings Temperature and Humidity: "+tss.getIOSSensorsTempHumidity(i)+" is displayed");
					Keyword.ReportStep_Pass(testCase, " Sensor Settings :"+tss.getIOSSensorsName(i)+" Sensor added");
				}



			}

			if(tss.ClickOnSensor(0))
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Clicked on 1st Sensor");
			}
			else
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: No Sensor is displayed");
			}


		}


		if(tss.isSensorsSettingsVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Verified Successfully navigated to Sensor Setting screen");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Failed to navigate to sensor settings page");
		}

		if(tss.isSensorsHeaderVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Sensor name"+tss.getSensorsHeaderName());
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Sensor name is not displayed");
		}

		if(tss.isSensorTemperatureLabelVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Sensor Temperature Label is displayed");

			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Sensor Temperature value "+tss.getSensorTemperature()+"is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Sensor Temperature Label is not displayed");
		}

		if(tss.isSensorHumidityLabelVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Sensor Humidity Label is displayed");

			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Sensor Humidity value "+tss.getSensorHumidity()+"is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Sensor Humidity Label is not displayed");
		}


		if(tss.isDeviceInfoHeaderVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Device Information Header is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Device Information Header is  not displayed");
		}

		if(tss.isDeviceBatteryLabelVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Battery Label is Displayed");
			if(tss.isDeviceBatteryLevelVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Battery level is Displayed");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Device Battery Level is  not displayed");
			}
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Device Battery Label is  not displayed");
		}

		if(tss.isDeviceSignalStrengthLabelVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Signal Strength Label is Displayed");
			if(tss.isDeviceSignalStrengthLevelVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Signal Strength level is Displayed");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Signal Strength Level is  not displayed");
			}
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Device Signal Strength Label is  not displayed");
		}

		if(tss.isDeviceModelLabelVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Model number"+tss.getDeviceModelInfo()+" is Displayed");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Device Model Info is  not displayed");
		}

		if(tss.isDeviceFirmwarVersionVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Firmware version "+tss.getDeviceFirmwarVersionInfo()+" is Displayed");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Device Firmware version is not displayed");
		}

		if(tss.isDeviceSettingHeaderVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Device Setting Header is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Device Settings Header is  not displayed");
		}


		//flag= flag && tss.scrollToUseMotionDetection();


		if(tss.isUseMotionDetectionLabelVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Use Motion Detection  is displayed");
		}
		else
		{
			flag= flag && tss.scrollToUseMotionDetection();
			if(tss.isUseMotionDetectionLabelVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Use Motion Detection  is displayed");
			}
			else
			{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Use Motion Detection Label is  not displayed");
			}
		}

		if(tss.getUseMotionDetectionToggle().equalsIgnoreCase("true") ||tss.getUseMotionDetectionToggle().equalsIgnoreCase("1")||tss.getUseMotionDetectionToggle().equalsIgnoreCase("ON"))
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Use Motion Detection toggle is in ON state");
		}
		else
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Use Motion Detection toggle is in OFF state");
		}

		if(tss.isMotionDetectionDescriptionVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Use Motion Detection Description :"+tss.getMotionDetectionDescription()+" is displayed");
		}

		return flag;
	}


	public static boolean verifyManageAlertsScreen(TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag=true;
		ManageAlertsScreen mas= new ManageAlertsScreen(testCase);
		String getIndoorToggleStatus=mas.getIndoorTempToggleStatus();
		String getHuminityToggleStatus=mas.getHumidityTempToggleStatus();
		try
		{
		if( getIndoorToggleStatus.equalsIgnoreCase("OFF")|| getIndoorToggleStatus.equalsIgnoreCase("0")|| getIndoorToggleStatus.equalsIgnoreCase("false") )
		{
			Keyword.ReportStep_Pass(testCase, "Manage Alerts Screen: Indoor Temperature Alert Toggle is Off");
		}
		else
		{
			Keyword.ReportStep_Pass(testCase, "Manage Alerts Screen: Indoor Temperature Alert Toggle is ON");
		}

		if ( getHuminityToggleStatus.equalsIgnoreCase("OFF")|| getHuminityToggleStatus.equalsIgnoreCase("0")|| getHuminityToggleStatus.equalsIgnoreCase("false") )
		{
			Keyword.ReportStep_Pass(testCase, "Manage Alerts Screen: Indoor Humidity Alert Toggle is Off");
		}
		else
		{
			Keyword.ReportStep_Pass(testCase, "Manage Alerts Screen: Indoor Humidity Alert Toggle is ON");
		}
		} catch(Exception e)
		{
			flag =false;
		}
		return flag;



	}

	public static boolean VerifyDeviceandSensors(TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag=true;
		ThermostatSensorSettingScreen tss = new ThermostatSensorSettingScreen(testCase,inputs);
		ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);
		if(ts.isDeviceAndSensorsVisible())
		{
			if(ts.ClickDeviceAndSensor())
			{
				Keyword.ReportStep_Pass(testCase, "device and sensor visible");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "device and sensor is not visible", false);
			}
		}

		if(tss.isIndoorAirSensorVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Verified Successfully navigated to Indoor Air Sensor screen");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT SETTINGS: Unable to navigate Indoor Air Sensor screen");

		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			int size= tss.getAvailableSensorSize();

			List<WebElement> sensornames= tss.getSensorNames();
			List<WebElement> sensortemp=tss.getAllSensorTemperature();
			List<WebElement> sensorhumidity=tss.getAllSensorHumidity();


			for(int i=0;i<size;i++)
			{
				if(sensornames.get(i)!=null)
				{
					if(MobileUtils.isRunningOnAndroid(testCase))
					{
						Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Name : "+sensornames.get(i).getText()+" is displayed");
					}
					else
					{
						Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor : "+sensornames.get(i).getAttribute("value")+" is displayed");
					}

					if(sensortemp.get(i)!=null)
					{

						if(MobileUtils.isRunningOnAndroid(testCase))
						{
							Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Temperature : "+sensortemp.get(i).getText()+" is displayed");
						}
						else
						{
							Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Temperature : "+sensortemp.get(i).getAttribute("value")+" is displayed");
						}

					}
					else
					{
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Indoor Air Sensor: Unable to get sensor temperature");
					}

					if(sensorhumidity.get(i)!=null)
					{

						if(MobileUtils.isRunningOnAndroid(testCase))
						{
							Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Humidity : "+sensorhumidity.get(i).getText()+" is displayed");
						}
						else
						{
							Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Humidity : "+sensorhumidity.get(i).getAttribute("value")+" is displayed");
						}

					}
					else
					{
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Indoor Air Sensor: Unable to get sensor humidity");
					}

				}

			}
		}
		else
		{
			for(int i=0;i<5;i++)
			{
				if(tss.getIOSSensorsName(i).equalsIgnoreCase("empty"))
				{
					Keyword.ReportStep_Pass(testCase, " Sensor Settings :"+i+" is displayed");

					break;
				}
				else
				{
					Keyword.ReportStep_Pass(testCase, " Sensor Settings Temperature and Humidity: "+tss.getIOSSensorsTempHumidity(i)+" is displayed");
					Keyword.ReportStep_Pass(testCase, " Sensor Settings :"+tss.getIOSSensorsName(i)+" Sensor added");
				}
			}
		}

		return flag;
	}

	public static boolean VerifyAppScreenFlycatcher(TestCases testCase,String language,TestCaseInputs inputs) {

		boolean flag=true;
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
		Dashboard ds = new Dashboard(testCase,language);

		optikUtils.verifyGlobaldrawerOptionScreen(testCase,language);

		sc.selectOptionFromSecondarySettings("Geofence");
		optikUtils.verifyGeofenceScreen(testCase,language,inputs);

		sc.selectOptionFromSecondarySettings("Vacation");
		sc.areSecondaryCardSettingsVisible(5);
		optikUtils.verifyVacationScreen(testCase,language,inputs);


		/*if((language.contains("French_CA"))&& !MobileUtils.isRunningOnAndroid(testCase))
	{

	}else
	{
		sc.selectOptionFromSecondarySettings("Activity History");
		optikUtils.verifyActivityHistoryScreen(testCase,language,inputs);
	}*/
		if((language.contains("French_CA"))&& !MobileUtils.isRunningOnAndroid(testCase))
		{
			sc.selectOptionFromSecondarySettings("Add Users");
			optikUtils.verifyAddUsersScreen(testCase,language,inputs);

			sc.selectOptionFromSecondarySettings("Location Address");
			optikUtils.verifyLocationAddressScreen(testCase,language,inputs);
		}else if(language.contains("English_US"))
		{
			sc.selectOptionFromSecondarySettings("Add Users");
			optikUtils.verifyAddUsersScreen(testCase,language,inputs);

			sc.selectOptionFromSecondarySettings("Location Address");
			optikUtils.verifyLocationAddressScreen(testCase,language,inputs);
		}else if(language.equalsIgnoreCase("Spanish_US"))
		{
			sc.selectOptionFromSecondarySettings("Location Address");
			optikUtils.verifyLocationAddressScreen(testCase,language,inputs);
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(language.contains("French"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "DÃƒÆ’Ã‚Â©connexion");
			}
			else if(language.contains("English"))
			{
				MobileUtils.scrollToExactAndroid(testCase, "Logout");
			}else
			{
				touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

			}
		}else
		{
			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			touchAction.press(point(10, (int) (dimension.getHeight() * .5))).moveTo(point(0, (int) (dimension.getHeight() * -.4))).release().perform();

		}
		if(!language.equalsIgnoreCase("Spanish_US"))
		{sc.selectOptionFromSecondarySettings("Edit Account");
		optikUtils.verifyEditAccountScreen(testCase,language,inputs);
		}


		sc.selectOptionFromSecondarySettings("About the app");

		optikUtils.verifyAboutTheAppScreen(testCase,language,inputs);

		/*if(MobileUtils.isRunningOnAndroid(testCase))
	{
		sc.clickOnBackButton();

	}else
	{
		if(language.contains("French")||language.contains("French_BE")||language.contains("German")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian")||language.contains("Polish")||language.contains("Slovakian")||language.contains("Hungarian")||language.contains("Czech"))
		{sc.clickOnBackForLocal(inputs);
		}else
		{
			sc.clickOnBackButton();
		}

	}*/

		optikUtils.verifyThermostatSettingsScreen(testCase,language,inputs);

		optikUtils.verifyPrimarycardScreen(testCase,language,inputs);

		return flag;
	}

	public static boolean verifyPrimarycardScreen(TestCases testCase, String language,TestCaseInputs inputs) {
		boolean flag=true;
		PrimaryCard pc=new PrimaryCard(testCase,language);
		SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);


		pc.clickOnSystemMode();

	optikUtils.VerifyScreenLocalization(testCase, "SystemModeScreen");

		if(pc.isSystemInfoButtonvisible())
		{
			pc.clickSystemInfoButton();
		}
		 optikUtils.VerifyScreenLocalization(testCase, "SystemModeInfoScreen");

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			sc.clickOnBackButton();
			sc.clickOnBackButton();

		}else
		{
			if(language.contains("French")||language.contains("French_BE")||language.contains("German")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian")||language.contains("Polish")||language.contains("Slovakian")||language.contains("Hungarian")||language.contains("Czech"))
			{sc.clickOnBackForLocal(inputs);
			sc.clickOnBackForLocal(inputs);
			}else
			{
				sc.clickOnBackButton();
				sc.clickOnBackButton();
			}
		}
		if(pc.isFanModeVisible())
		{
			pc.clickOnFanMode();
		}


		 optikUtils.VerifyScreenLocalization(testCase, "FanModeScreen");

		if(pc.isInfoButtonvisible())
		{
			pc.clickOnInfoButton();
		}

		 optikUtils.VerifyScreenLocalization(testCase, "FanModeInfoScreen");
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			sc.clickOnBackButton();
			sc.clickOnBackButton();

		}else
		{
			if(language.contains("French")||language.contains("French_BE")||language.contains("German")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian")||language.contains("Polish")||language.contains("Slovakian")||language.contains("Hungarian")||language.contains("Czech"))
			{sc.clickOnBackForLocal(inputs);
			sc.clickOnBackForLocal(inputs);
			}else
			{
				sc.clickOnBackButton();
				sc.clickOnBackButton();
			}
		}
		if(pc.isPriorityTextVisible(15))
		{
			pc.clickonPriorityText();
		}
		else
		{
			pc.isPriorityLocalVisible();
		}

		optikUtils.VerifyScreenLocalization(testCase, "PriorityScreen");

		if(pc.isInfoButtonvisible())
		{
			pc.clickPriorityInfo();
		}

		optikUtils.VerifyScreenLocalization(testCase, "PriorityScreenInfo");


		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			sc.clickOnBackButton();
			sc.clickOnBackButton();

		}else
		{
			if(language.contains("French")||language.contains("French_BE")||language.contains("German")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian")||language.contains("Polish")||language.contains("Slovakian")||language.contains("Hungarian")||language.contains("Czech"))
			{sc.clickOnBackForLocal(inputs);
			sc.clickOnBackForLocal(inputs);
			}else
			{
				sc.clickOnBackButton();
				sc.clickOnBackButton();
			}
		}


		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			sc.clickOnBackButton();

		}else
		{
			if(language.contains("French")||language.contains("French_BE")||language.contains("German")||language.contains("Spanish")||language.contains("Dutch")||language.contains("Portuguese")||language.contains("Italian")||language.contains("Polish")||language.contains("Slovakian")||language.contains("Hungarian")||language.contains("Czech"))
			{
				sc.clickOnBackForLocal(inputs);
			}else
			{
				sc.clickOnBackButton();
			}
		}

		return flag;

	}



	public static boolean VerifyHumidificationOptions(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		//flag = flag && optikUtils.verifyLoginSuccessful(testCase, inputs);
		PrimaryCard pc = new PrimaryCard(testCase);

		/*     if(MobileUtils.isMobElementExists("XPATH", "//*[contains(@text,'MORE')]", testCase))
			{
		     MobileUtils.clickOnElement(testCase, "XPATH", "//*[contains(@text,'MORE')]");
			}else if(MobileUtils.isMobElementExists("XPATH", "//*[@text='MORE']", testCase))
			{
			     MobileUtils.clickOnElement(testCase, "XPATH", "//*[@text='MORE']");

			}*/

		if (pc.isMoreTextVisible(5)) {
			pc.clickonMoreText();

			if (pc.isScheduleVisible()) {
				Keyword.ReportStep_Pass(testCase, "Primary Card: Schedule icon is visible");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Primary Card: Schedule icon is not visible");
			}
			if (pc.isVentilationOptionVisible(5)) {

				Keyword.ReportStep_Pass(testCase, "Primary Card: Ventilation option is visible");
			}
			else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Primary Card: Ventilation option is not visible");
			}

			if (pc.isDehumidifyOptionVisible(5)) {
				Keyword.ReportStep_Pass(testCase, "Primary Card: Dehumidify option is visible");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Primary Card: Dehumidify option is not visible");
			}
			if (pc.isHumidifyOptionVisible(5)) {
				Keyword.ReportStep_Pass(testCase, "Primary Card: Humidify option is visible");
				if (pc.clickonHumidifyOption()) {
					Keyword.ReportStep_Pass(testCase, "Primary Card: click on humidify option");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Primary Card: doesnt click on humidify option");
				}

				if(pc.isHunidificationDisableTaptoUnableVisible())
				{
					pc.clickOnOptionButton();
					if(pc.clickOnEnableHunidification())
					{

						Keyword.ReportStep_Pass(testCase, "option page:click on Enable humidification");

					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"option page:Doesnt click on Enable humidification");
					}

				}
				if (pc.isBackButtonAvailable()) {
					Keyword.ReportStep_Pass(testCase, "Humidification page: back button is visible");
				}
				else if(pc.isCrossButtonVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Humidification page: back button is visible");	
				}else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Humidification page: back button is not visible");
				}

				if (pc.isOptionButtonvisible()) {

					Keyword.ReportStep_Pass(testCase, "Humidification page:Option button is visible");
					pc.clickOnOptionButton();
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Humidification page: option button is not visible");
				}

				if (pc.isSetWindowProtectionvisible()) {

					Keyword.ReportStep_Pass(testCase, "option page:set window protection is visible");

				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"option page:set window protection is not visible");
				}

				if (pc.isCancelButtonVisible()) {

					Keyword.ReportStep_Pass(testCase, "option page:cancel button is visible");

				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"option page:cancel button is not visible");
				}

				if (pc.isDisableHunidificationvisible()) {
					pc.clickOnDisableHumidification();
					Keyword.ReportStep_Pass(testCase, "option page:Disable humidification is visible");

				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"option page:disable humidification is not visible");
				}
				if (pc.isHunidificationDisableTaptoUnableVisible()) {
					Keyword.ReportStep_Pass(testCase, "option page: Hunidification Disable Tap to Unable  massage is display");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "option page:Hunidification Disable Tap to Unable  massage is display not display");
				}

			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Primary Card: Humidify option is not visible");
			}


			if (MobileUtils.isRunningOnAndroid(testCase)) {
				testCase.getMobileDriver().navigate().back();
			} else {
				/*TouchAction ds = new TouchAction(testCase.getMobileDriver());
			ds.press(604, 1142)).release().perform();*/
				pc.ClickOnBackButton();

			}




			if (pc.isMoreTextVisible(5))
			{
				pc.clickonMoreText();
				pc.clickonHumidifyOption();
				if (pc.isHunidificationDisableTaptoUnableVisible()) {
					Keyword.ReportStep_Pass(testCase, "Verify humidification disable is display");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify humidification is disable");
				}
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					testCase.getMobileDriver().navigate().back();
				} else {
					/*TouchAction ds = new TouchAction(testCase.getMobileDriver());
			ds.press(point(604, 1142)).release().perform();*/
					pc.ClickOnBackButton();

				}

			}

		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Primary Card: More option is not visible");

		}
		return flag;
	}


	public static boolean navigateToFirstSensorSettingScreen(TestCases testCase,TestCaseInputs inputs) {
		boolean flag = true;

		ThermostatSensorSettingScreen tss = new ThermostatSensorSettingScreen(testCase,inputs);



		if(tss.isIndoorAirSensorVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Verified Successfully navigated to Indoor Air Sensor screen");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT SETTINGS: Unable to navigate Indoor Air Sensor screen");

		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			int size= tss.getAvailableSensorSize();

			List<WebElement> sensornames= tss.getSensorNames();
			List<WebElement> sensortemp=tss.getAllSensorTemperature();
			List<WebElement> sensorhumidity=tss.getAllSensorHumidity();


			for(int i=0;i<size;i++)
			{
				if(sensornames.get(i)!=null)
				{
					if(MobileUtils.isRunningOnAndroid(testCase))
					{
						Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Name : "+sensornames.get(i).getText()+" is displayed");
					}
					else
					{
						Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor : "+sensornames.get(i).getAttribute("value")+" is displayed");
					}

					if(sensortemp.get(i)!=null)
					{

						if(MobileUtils.isRunningOnAndroid(testCase))
						{
							Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Temperature : "+sensortemp.get(i).getText()+" is displayed");
						}
						else
						{
							Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Temperature : "+sensortemp.get(i).getAttribute("value")+" is displayed");
						}

					}
					else
					{
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Indoor Air Sensor: Unable to get sensor temperature");
					}

					if(sensorhumidity.get(i)!=null)
					{

						if(MobileUtils.isRunningOnAndroid(testCase))
						{
							Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Humidity : "+sensorhumidity.get(i).getText()+" is displayed");
						}
						else
						{
							Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Humidity : "+sensorhumidity.get(i).getAttribute("value")+" is displayed");
						}

					}
					else
					{
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Indoor Air Sensor: Unable to get sensor humidity");
					}

				}

			}

			if(size!=0)
			{
				sensornames.get(0).click();
				Keyword.ReportStep_Pass(testCase, " Sensor Settings : Clicked on 1st sensor");
			}
			else
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: No Sensor is displayed");
			}
		}
		else
		{
			for(int i=0;i<5;i++)
			{
				if(tss.getIOSSensorsName(i).equalsIgnoreCase("empty"))
				{
					Keyword.ReportStep_Pass(testCase, " Sensor Settings :"+i+" is displayed");

					break;
				}
				else
				{
					Keyword.ReportStep_Pass(testCase, " Sensor Settings Temperature and Humidity: "+tss.getIOSSensorsTempHumidity(i)+" is displayed");
					Keyword.ReportStep_Pass(testCase, " Sensor Settings :"+tss.getIOSSensorsName(i)+" Sensor added");
				}
			}

			if(tss.ClickOnSensor(0))
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Clicked on 1st Sensor");
			}
			else
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: No Sensor is displayed");
			}
		}
		if(tss.isSensorsSettingsVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Verified Successfully navigated to Sensor Setting screen");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Failed to navigate to sensor settings page");
		}

		return flag;
	}

	public static boolean VerifySensorSettingOptionScreen(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		ThermostatSensorSettingScreen tss = new ThermostatSensorSettingScreen(testCase,inputs);
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		String statetype=statInfo.getDeviceType();

		if(tss.isOptionButtonVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Sensor Option Button is displayed");
			if(!tss.ClickOnOptionButton())
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to clickon option button");
			}

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"sensor Setting: Sensor Option Button is not visible");
		}

		if(tss.isDeleteSensorOptionVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Delete Sensor option is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Delete sensor option is not displayed");
		}

		if(tss.isIdentifySensorOptionVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Identify Sensor option is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Identify sensor option is not displayed");
		}

		if(tss.isMoveToDifferentRoomOptionVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Move to Diffent Room option is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Move to Diffent Room option is not displayed");
		}

		if(tss.isCancelOptionVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Cancel option is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Cancel option is not displayed");
		}

		if(tss.ClickOnCancelOption())
		{

		Keyword.ReportStep_Pass(testCase, "Sensor Setting: Successfully clicked on cancel");
		if(tss.isSensorsSettingsVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Successfully navigated to sensor setting screen");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to navigate to  Sensor setting screen");
		}
		}
		else
	   {
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Click on cancel failed");
	   }

		if(tss.isOptionButtonVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Sensor Option Button is displayed");
			if(!tss.ClickOnOptionButton())
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to clickon option button");
			}

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"sensor Setting: Sensor Option Button is not visible");
		}


		if(tss.ClickOnIdentifySensorOption())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Successfully clicked on Identify Sensor option");

			if(tss.isIdentifySensorScreenVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Successfully navigated to Identify sensor screen");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to navigate to Identify Sensor screen");
			}

			if(tss.isSensorBlinkingDisplayed())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Bling Sensor Description: "+tss.getSensorBlinkingText());
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Blinking Sensor desription is not displayed");
			}

			if(tss.isDoneButtonVisible())
			{
				if(!tss.ClickOnDoneButton()){
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Failed to Click on Done button");

				}
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Done button is not visible");
			}


			if(tss.isSensorsSettingsVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Successfully navigated to sensor setting screen");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to navigate to  Sensor setting screen");
			}

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to click on Identify Sensor option");
		}

		if(tss.isOptionButtonVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Sensor Option Button is displayed");
			if(!tss.ClickOnOptionButton())
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to clickon option button");
			}

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"sensor Setting: Sensor Option Button is not visible");
		}

		if(tss.ClickOnMoveToDifferentRoomOption())
		{
			if(statInfo.getDeviceType().equals("FlyCatcher"))
			{

			if(tss.isRoomTypeScreenVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Successfully navigated to Room Type Screen");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to navigate to Room Type Screen");
			}

			if(tss.isRoomTypedDescriptionDisplayed())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Room Type Desription is displayed");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Room type description is not displayed");
			}

			if(tss.isBedroomOptionVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Bedroom option is displayed");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Bedroom option is not displayed");
			}

			if(tss.isLivingSpaceOptionVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Living Space option is displayed");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Living Space option is not displayed");
			}

			if(tss.isOtherOptionVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Living Space option is displayed");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Living Space option is not displayed");
			}
			}
			else
			{
				if(tss.isSelectRoomVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Sensor Setting: Successfully navigated to Select Room Type Screen");
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to navigate to Select Room Type Screen");
				}

			}
			if(tss.isBackButtonVisible())
			{
				tss.ClickOnBackButton();
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Back button is not displayed");
			}

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to click on Move to Different Room option");
		}


		return flag;
	}

	public static boolean VerifyCameraDeviceWithUSRegion(TestCases testCase) {
		Boolean flag=true;
		LocationDetailsScreen Lds=new LocationDetailsScreen(testCase);
		if(Lds.isCountryNameVisible(5))
		{
			HashMap<String, String> CountryName=Lds.getCountryNamefromChapi();
			//United States
			if(CountryName.equals(CountryName))
			{
				Keyword.ReportStep_Pass(testCase ,"user have a camera device in US location.") ;
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"user have a camera device with 	Non US location.");
			}
		}
		return flag;
	}
	public static boolean VerifyResetPasswordThroughGuerrilla(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		String email=testCase.getTestCaseInputs().getInputValue("USERID");
		LoginScreen ls=new LoginScreen(testCase,language);
		if (MobileUtils.isRunningOnAndroid(testCase)) {
		if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
			flag = flag && ls.clickOnLoginButton();
		}	}else{
			if(ls.isLoginButtonLocalVisible(inputs))
			{
				ls.isClickLoginButtonFirstLocal(inputs);
			}
		}

		if (ls.setEmailAddressValue(inputs.getInputValue("USERID").toString())) {
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			Keyword.ReportStep_Pass(testCase,
					"Login To optik : Email Address set to - " + inputs.getInputValue("USERID"));
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Login To optik : Not able to set Email Address.");
			flag = false;
		}

		if (ls.setPasswordValue(GlobalVariables.Invalid_Pwd)){
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				ls.clickOnoptikLogo();
			}
			Keyword.ReportStep_Pass(testCase, "Login To optik : Password set to - " + GlobalVariables.Invalid_Pwd);
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Login To optik : Not able to set Password.");
			flag = false;
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			ls.clickOnLoginButton();
		}else{
			ls.isClickLoginButtonLocal(inputs);
		}

		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			ls.clickOnOkButton();
		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			ls.clickOnForgotPasswordButton();

		}else
		{


			if(language.contains("English_US")||language.contains("English_UK")||language.contains("English_IR"))
			{
				ls.clickOnForgotPasswordButton();
			}
			else
			{
				ls.ClickOnForgotPasswordLocal(inputs);
			}
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
		if(ls.isResetButtonVisible())
		{
			ls.clickonResetButton();
		}
		}else{

			ls.clickOnResendButton(inputs)	;

		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			try
			{
				Activity activity = new Activity("com.android.chrome","com.google.android.apps.chrome.Main");
				((AndroidDriver<MobileElement>) testCase.getMobileDriver()).startActivity(activity);

				Keyword.ReportStep_Pass(testCase , "Chrome browser is open.");

				if(inputs.getInputValue("LANGUAGE").contains("English"))
				{

					if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Search or type web address']" , testCase,10,false))
					{
						testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).click();
						testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).sendKeys("https://www.guerrillamail.com");
						List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
						for(MobileElement temp : saq)
						{
							if(temp.getText().equals("https://www.guerrillamail.com"))
							{
								temp.click();
								break;
							}
						}
					}
				}else if(inputs.getInputValue("LANGUAGE").contains("French")){
					if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Recherchez ou saisissez une adresse Web']" , testCase,10,false))
					{
						testCase.getMobileDriver().findElement(By.xpath("//*[@text='Recherchez ou saisissez une adresse Web']")).click();
						testCase.getMobileDriver().findElement(By.xpath("//*[@text='Recherchez ou saisissez une adresse Web']")).sendKeys("https://www.guerrillamail.com");
						List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
						for(MobileElement temp : saq)
						{
							if(temp.getText().equals("https://www.guerrillamail.com"))
							{
								temp.click();
								break;
							}
						}
					}

				}

				else if(inputs.getInputValue("LANGUAGE").contains("Slovakian")){
					if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Zadajte dopyt alebo')]" , testCase,10,false))
					{
						testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Zadajte dopyt alebo')]")).click();
						testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Zadajte dopyt alebo')]")).sendKeys("https://www.guerrillamail.com");
						List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
						for(MobileElement temp : saq)
						{
							if(temp.getText().equals("https://www.guerrillamail.com"))
							{
								temp.click();
								break;
							}
						}
					}

				}

				          else if(inputs.getInputValue("LANGUAGE").contains("Dutch")){
				      	   if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Zoek of typ een webadres']" , testCase,10,false))
								{
									testCase.getMobileDriver().findElement(By.xpath("//*[@text='Zoek of typ een webadres']")).click();
									testCase.getMobileDriver().findElement(By.xpath("//*[@text='Zoek of typ een webadres']")).sendKeys("https://www.guerrillamail.com");
									List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
									for(MobileElement temp : saq)
									{
										if(temp.getText().equals("https://www.guerrillamail.com"))
										{
											temp.click();
											break;
										}
									}
								}
				          }

				          else if(inputs.getInputValue("LANGUAGE").contains("Polish")){
				        	   if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Wyszukaj lub wpisz adres internetowy')]" , testCase,10,false))
								{
									testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Wyszukaj lub wpisz adres internetowy')]")).click();
									testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Wyszukaj lub wpisz adres internetowy')]")).sendKeys("https://www.guerrillamail.com");
									List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
									for(MobileElement temp : saq)
									{
										if(temp.getText().equals("https://www.guerrillamail.com"))
										{
											temp.click();
											break;
										}
									}
								}
				         }

				         else if(inputs.getInputValue("LANGUAGE").contains("Hungarian")){
				        	   if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Keressen')]" , testCase,10,false))
								{
									testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Keressen')]")).click();
									testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Keressen')]")).sendKeys("https://www.guerrillamail.com");
									List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
									for(MobileElement temp : saq)
									{
										if(temp.getText().equals("https://www.guerrillamail.com"))
										{
											temp.click();
											break;
										}
									}
								}
				         }





		                  else if(inputs.getInputValue("LANGUAGE").contains("Czech")){
							if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Zadejte dotaz nebo webovou adresu']" , testCase,10,false))
							{
								testCase.getMobileDriver().findElement(By.xpath("//*[@text='Zadejte dotaz nebo webovou adresu']")).click();
								testCase.getMobileDriver().findElement(By.xpath("//*[@text='Zadejte dotaz nebo webovou adresu']")).sendKeys("https://www.guerrillamail.com");
								List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
								for(MobileElement temp : saq)
								{
									if(temp.getText().equals("https://www.guerrillamail.com"))
									{
										temp.click();
										break;
									}
								}
							}

						}

		                  else if(inputs.getInputValue("LANGUAGE").contains("German")){
 				        	   if(MobileUtils.isMobElementExists("XPATH" ,"//*[contains(@text,'Suchbegriff')]", testCase,10,false))
 								{
 									testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Suchbegriff')]")).click();
 									testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Suchbegriff')]")).sendKeys("https://www.guerrillamail.com");
 									List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
 									for(MobileElement temp : saq)
 									{
 										if(temp.getText().equals("https://www.guerrillamail.com"))
 										{
 											temp.click();
 											break;
 									}
 									}
 								}
		                  }

 									else if(inputs.getInputValue("LANGUAGE").contains("Italian")){
 						        	   if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Cerca o digita un indirizzo web']" , testCase,10,false))
 										{
 											testCase.getMobileDriver().findElement(By.xpath("//*[@text='Cerca o digita un indirizzo web']")).click();
 											testCase.getMobileDriver().findElement(By.xpath("//*[@text='Cerca o digita un indirizzo web']")).sendKeys("https://www.guerrillamail.com");
 											List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
 											for(MobileElement temp : saq)
 											{
 												if(temp.getText().equals("https://www.guerrillamail.com"))
 												{
 													temp.click();
 													break;
 												}
 											}

 								}
 						        	   }



				//          else if(inputs.getInputValue("LANGUAGE").contains("Dutch")){
				//        	   if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Zoek of typ een webadres']" , testCase,10,false))
				//				{
				//					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Zoek of typ een webadres']")).click();
				//					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Zoek of typ een webadres']")).sendKeys("https://www.guerrillamail.com");
				//					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
				//					for(MobileElement temp : saq)
				//					{
				//						if(temp.getText().equals("https://www.guerrillamail.com"))
				//						{
				//							temp.click();
				//							break;
				//						}
				//					}
				//				}
				//           }
				//           else if(inputs.getInputValue("LANGUAGE").contains("German")){
				//        	   if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Suchbegriff oder Webadresse eingeb']" , testCase,10,false))
				//				{
				//					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Suchbegriff oder Webadresse eingeb']")).click();
				//					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Suchbegriff oder Webadresse eingeb']")).sendKeys("https://www.guerrillamail.com");
				//					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
				//					for(MobileElement temp : saq)
				//					{
				//						if(temp.getText().equals("https://www.guerrillamail.com"))
				//						{
				//							temp.click();
				//							break;
				//						}
				//					}
				//				}else if(inputs.getInputValue("LANGUAGE").contains("Italian")){
				//		        	   if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Suchbegriff oder Webadresse eingeb']" , testCase,10,false))
				//						{
				//							testCase.getMobileDriver().findElement(By.xpath("//*[@text='Suchbegriff oder Webadresse eingeb']")).click();
				//							testCase.getMobileDriver().findElement(By.xpath("//*[@text='Suchbegriff oder Webadresse eingeb']")).sendKeys("https://www.guerrillamail.com");
				//							List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
				//							for(MobileElement temp : saq)
				//							{
				//								if(temp.getText().equals("https://www.guerrillamail.com"))
				//								{
				//									temp.click();
				//									break;
				//								}
				//							}
				//						//
				//				}}
		         else if(inputs.getInputValue("LANGUAGE").contains("Portuguese")){
       	   if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Pesquisar ou digitar')]" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Pesquisar ou digitar')]")).click();
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Pesquisar ou digitar')]")).sendKeys("https://www.guerrillamail.com");
					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}

       	   else if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Pesquisar ou escrever')]" , testCase,10,false)){
       		   testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Pesquisar ou escrever')]")).click();
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Pesquisar ou escrever')]")).sendKeys("https://www.guerrillamail.com");
					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
       	   }
		        }
		         else if(inputs.getInputValue("LANGUAGE").contains("Spanish")){
		        	   if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Busca o escribe una')]" , testCase,10,false))
						{
							testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Busca o escribe una')]")).click();
							testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Busca o escribe una')]")).sendKeys("https://www.guerrillamail.com");
							List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
							for(MobileElement temp : saq)
							{
								if(temp.getText().equals("https://www.guerrillamail.com"))
								{
									temp.click();
									break;
								}
							}
						}
		         }




				Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");
				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
				Thread.sleep(5000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Click to Edit']")).click();
				Thread.sleep(5000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).click();
				Thread.sleep(5000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).clear();
				Thread.sleep(5000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).click();
				Thread.sleep(5000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).sendKeys(email);

				Thread.sleep(5000);
				/*testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.Spinner']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='grr.la']")).click();*/

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Set']")).click();

				List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));

				Dimension dimensions =
						  testCase.getMobileDriver().manage().window().getSize();
						  testCase.getMobileDriver().swipe( (int) (dimensions.getWidth() * .5), (int)
						  (dimensions.getHeight() * .5), (int) (dimensions.getWidth() * .5), (int)
						  (dimensions.getHeight() * .4));


				int i=0;
				while (saq==null&&i<5)
				{
					Thread.sleep(1000);
					saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View']"));
				}
				i=0;
				Thread.sleep(2000);
				while(i<=saq.size())
				{

					if(saq.get(i).getText().contains("@reside"))
					{
						saq.get(i).click();
						break;
					}
					i++;
				}

				//swipe(testCase,"EMAIL");
				swipescreen(testCase);

				Thread.sleep(2000);
				//MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);


				if(inputs.getInputValue("LANGUAGE").contains("English"))
				{
					if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Reset Password' or @text='RESET PASSWORD']" , testCase,25,false))
					{
						testCase.getMobileDriver().findElement(By.xpath("//*[@text='Reset Password' or @text='RESET PASSWORD ']")).click();
						Keyword.ReportStep_Pass(testCase , "Click on Reset Password button.");
					}
				}else if(inputs.getInputValue("LANGUAGE").contains("French"))
					{

					try {
					List<WebElement> timeList = MobileUtils.getMobElements(testCase,"XPATH", "//*[contains(@text,'initialiser') and @clickable='true']" );
					if (timeList != null)
					{
					timeList.get(0).click();
						}
					else
					{
						testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'initialiser')")).click();
					}

					} catch (Exception e) {
					}


					//return false;
					}else if(inputs.getInputValue("LANGUAGE").contains("Dutch")){
						if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Wachtwoord Resetten']" , testCase,25,false))
						{
							testCase.getMobileDriver().findElement(By.xpath("//*[@text='Wachtwoord Resetten']")).click();
							Keyword.ReportStep_Pass(testCase , "Click on Reset Password button.");
						}
					}
					else if(inputs.getInputValue("LANGUAGE").contains("Portuguese"))
				{
				List<WebElement> timeList;
				try {
					if(inputs.getInputValue("LANGUAGE").equalsIgnoreCase("PortugueseBR"))
							{
						 timeList = MobileUtils.getMobElements(testCase,"XPATH", "//*[contains(@text,'Redefinir Senha') and @clickable='true']" );
							}
					else
					{
			         timeList = MobileUtils.getMobElements(testCase,"XPATH", "//*[contains(@text,'Repor Palavra') and @clickable='true']" );
				   }
				if (timeList != null)
				{
				timeList.get(0).click();
				}
				else
				{
				testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Repor Palavra')")).click();
				}

				} catch (Exception e) {
				}
				}
			else if(inputs.getInputValue("LANGUAGE").contains("Spanish"))
				{
					if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Restablecer Contrase')and @clickable='true']" , testCase,25,false))
					{
						testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Restablecer Contrase')and @clickable='true']")).click();
						Keyword.ReportStep_Pass(testCase , "Click on Reset Password button.");
					}
				}

			else if(inputs.getInputValue("LANGUAGE").contains("Czech"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Resetovat Heslo')and @clickable='true']" , testCase,25,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Resetovat Heslo')and @clickable='true']")).click();
					Keyword.ReportStep_Pass(testCase , "Click on Reset Password button.");
				}
			}

			else if(inputs.getInputValue("LANGUAGE").contains("Polish"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Resetuj')and @clickable='true']" , testCase,25,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Resetuj')and @clickable='true']")).click();
					Keyword.ReportStep_Pass(testCase , "Click on Reset Password button.");
				}
			}
			else if(inputs.getInputValue("LANGUAGE").contains("Slovakian"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Obnovi')and @clickable='true']" , testCase,25,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Obnovi')and @clickable='true']")).click();
					Keyword.ReportStep_Pass(testCase , "Click on Reset Password button.");
				}
			}


			else if(inputs.getInputValue("LANGUAGE").contains("Hungarian"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Kennwort')and @clickable='true']" , testCase,25,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Kennwort')and @clickable='true']")).click();
					Keyword.ReportStep_Pass(testCase , "Click on Reset Password button.");
				}
			}
			else if(inputs.getInputValue("LANGUAGE").contains("German"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Kennwort')and @clickable='true']" , testCase,25,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Kennwort')and @clickable='true']")).click();
					Keyword.ReportStep_Pass(testCase , "Click on Reset Password button.");
				}
			}




				// enter new pwd && confirm pwd blank
				if(ls.isNewResetVisible())
				{
					ls.clickNewResetpwdField();
					ls.getresetnewtext(inputs).sendKeys("Password1");

					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					if(ls.isChangePwdBttnVisible())
					{
						ls.clickChangePwdButton();
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
				}

				flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ResetPwdScreen1");


				//newReset blank && enter confirm pwd
				if(ls.isConfirmResetVisible())
				{
					ls.clickNewResetpwdField();
					ls.getresetnewtext(inputs).clear();
					ls.clickConfirmResetpwdField();
					ls.getresetconfirmtext(inputs).sendKeys("Password1");
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					if(ls.isChangePwdBttnVisible())
					{
						ls.clickChangePwdButton();
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
				}

				flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ResetPwdScreen2");

				///both fields blank
				if(ls.isConfirmResetVisible())
				{
					ls.clickConfirmResetpwdField();
					ls.getresetconfirmtext(inputs).clear();
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					if(ls.isChangePwdBttnVisible())
					{
						ls.clickChangePwdButton();
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
				}

				flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ResetPwdScreen3");

				//enter diff pwd in both fields
				if(ls.isConfirmResetVisible())
				{
					ls.clickNewResetpwdField();
					ls.getresetnewtext(inputs).sendKeys("Password1");
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
					ls.clickConfirmResetpwdField();
					ls.getresetconfirmtext(inputs).sendKeys("Password12");
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
					if(ls.isChangePwdBttnVisible())
					{
						ls.clickChangePwdButton();
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
				}
				flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ResetPwdScreen4");

				//enter invalid pwd format
				if(ls.isConfirmResetVisible())
				{
					ls.clickNewResetpwdField();
					ls.getresetnewtext(inputs).clear();
					ls.getresetnewtext(inputs).sendKeys("passw");
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
					ls.clickConfirmResetpwdField();
					ls.getresetconfirmtext(inputs).clear();
					ls.getresetconfirmtext(inputs).sendKeys("passwordghg");
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
					if(ls.isChangePwdBttnVisible())
					{
						ls.clickChangePwdButton();
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
				}
				flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ResetPwdScreen5");

			}
			catch(Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			}
			//			finally
			//			{
			//				//testCase.getMobileDriver().launchApp();
			//				MobileUtils.minimizeApp(testCase, 10);
			//			}
		}
		else
		{
			try{

				CustomDriver driver = testCase.getMobileDriver();

				HashMap<String, String> settings = new HashMap<>();
				settings.put("name", "Safari");
				try {
					driver.executeScript("mobile:application:open", settings);
				} catch (Exception e) {
					FrameworkGlobalVariables.logger4J.logWarn("Launch Setting App: App is already open.");
				}

				Keyword.ReportStep_Pass(testCase , "Safari browser is open.");

				if(MobileUtils.isMobElementExists("XPATH" , "//*[@name='URL']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).click();

					testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).sendKeys("https://www.guerrillamail.com");

					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
					Thread.sleep(7000);

				}
				Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");

				MobileUtils.isMobElementExists("id" , "xyz" , testCase,25,false);

				if(MobileUtils.isMobElementExists("XPATH", "//*[@name='Click to Edit']", testCase))
				{
					MobileUtils.clickOnElement(testCase, "XPATH", "//*[@name='Click to Edit']");
				}
				//testCase.getMobileDriver().findElement(By.xpath("//*[@name='Click to Edit']")).click();


				Keyword.ReportStep_Pass(testCase , "Click email field to set the email.");
				try {
					Thread.sleep(2000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}


				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).click();
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).clear();

				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).sendKeys("");


				testCase.getMobileDriver().findElement(By.xpath("//*[@value='sharklasers.com']")).click();
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypePickerWheel")).sendKeys("grr.la");

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Done']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Set']")).click();

				Thread.sleep(7000);

				Keyword.ReportStep_Pass(testCase , "Email id is set to "+"");


				Thread.sleep(7000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='demohomessupport@demo.com']")).click();

				Dimension dimensions = testCase.getMobileDriver().manage().window().getSize();

				TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
				touchAction.press(point(10, (int) (dimensions.getHeight() * .5)))
				.moveTo(point(0, (int) (dimensions.getHeight() * -.4))).release().perform();

				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Activate Account']")).click();
				Keyword.ReportStep_Pass(testCase , "Click on Activate Account button.");
				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
				Keyword.ReportStep_Pass(testCase , "Successfully activate account");
				Thread.sleep(2000);

			}catch(Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			}
			finally
			{
				testCase.getMobileDriver().launchApp();
			}
		}
		//flag=flag && optikUtils.VerifyScreenLocalization(testCase, "ForgotPassword");
		return flag;

	}

	private static void swipescreen(TestCases testCase) {

		Dimension dimensions = testCase.getMobileDriver().manage().window().getSize();


		Double screenHeightStart = dimensions.getHeight() * 0.5;
		int scrollStart = screenHeightStart.intValue();
		Double screenHeightEnd = dimensions.getHeight() * 0.3;
		int scrollEnd = screenHeightEnd.intValue();
		testCase.getMobileDriver().swipe(0, scrollStart, 0, scrollEnd, 2000);
		testCase.getMobileDriver().swipe(0, scrollStart, 0, scrollEnd, 2000);
	}

	public static boolean VerifyNegUserinvitesalreadyinvitedusertoreceiveemailnotifications(TestCases testCase,
			TestCaseInputs inputs) {
		boolean flag=true;
		String language = testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		Dashboard ds = new Dashboard(testCase, language);
		WLDScreen ws = new WLDScreen(testCase, language);
		TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
		OSPopUps os = new OSPopUps(testCase);
		WLDPrimaryCard wp = new WLDPrimaryCard(testCase, language);

		ws.navigatetoLeakDetectorSettingsScreen();

		if (ws.isManageAlertButtonVisible()) {
			Keyword.ReportStep_Pass(testCase, "Successfully Navigated to Leak Detector setting.");
		}

		optikUtils.VerifyScreenLocalization(testCase, "LeakDetectorSettings");

		ws.clickOnManageAlerts();
		optikUtils.VerifyScreenLocalization(testCase, "Manage_Alerts");

		if (MobileUtils.isRunningOnAndroid(testCase)) {
			if (language.contains("French")) {
				MobileUtils.scrollTo(testCase, "Courriels des contacts");
			} else if (language.contains("German")) {
				MobileUtils.scrollTo(testCase, "E-Mail-Kontakte");
			} else if (language.contains("Italian")) {
				MobileUtils.scrollTo(testCase, "Contatti e-mail");
			} else if (language.contains("Dutch")) {
				MobileUtils.scrollTo(testCase, "E-mailcontacten");
			} else if (language.contains("Spanish")) {
				MobileUtils.scrollTo(testCase, "Contactos de correo electrÃ³nico");
			} else if (language.contains("Polish")) {
				MobileUtils.scrollTo(testCase, "Kontakty e-mail");
			} else if (language.contains("Slovakian")) {
				MobileUtils.scrollTo(testCase, "Kontakty e-mail");
			} else if (language.contains("Czech")) {
				touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();
				touchAction.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();
			} else {
				MobileUtils.scrollTo(testCase, "Email Contacts");
			}
		} else {
			CustomDriver driver = testCase.getMobileDriver();
			Dimension dimension = driver.manage().window().getSize();
			touchAction.press(point(10, (int) (dimension.getHeight() * .8))).moveTo(point(0, (int) (dimension.getHeight() * -.10)))
					.release().perform();
			touchAction.press(point(10, (int) (dimension.getHeight() * .8))).moveTo(point(0, (int) (dimension.getHeight() * -.10)))
					.release().perform();
			try {
				if (inputs.getInputValue("LANGUAGE").contains("German")) {
					scrollToElementUsingExactAttributeValue(testCase, "value", "E-Mail-Kontakte");
				} else if (language.contains("Italian")) {
					scrollToElementUsingExactAttributeValue(testCase, "value", "Contatti e-mail");
				} else if (language.contains("French")) {
					scrollToElementUsingExactAttributeValue(testCase, "value", "Contacts courriel");
				} else if (language.contains("Dutch")) {
					scrollToElementUsingExactAttributeValue(testCase, "value", "E-mailcontacten");

				}

				else if (language.contains("English")) {
					scrollToElementUsingExactAttributeValue(testCase, "value", "Email Contacts");
				} else {
					touchAction.press(point(10, (int) (dimension.getHeight() * .8)))
							.moveTo(point(0, (int) (dimension.getHeight() * -.10))).release().perform();
					touchAction.press(point(10, (int) (dimension.getHeight() * .8)))
							.moveTo(point(0, (int) (dimension.getHeight() * -.10))).release().perform();
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}



		ws.clickOnEmailcontacts();

		if (!MobileUtils.isRunningOnAndroid(testCase)) {

			if (os.isOkButtonVisible(5)) {
				os.clickOnOkButton();
				Keyword.ReportStep_Pass(testCase, "Successfully Navigated to Email Notifications.");
			}
		}
		optikUtils.VerifyScreenLocalization(testCase, "EmailContactsWLD");

		if(ws.isInvitedEmailIdVisible() && ws.isAcceptedInvitationVisible())
		{
			Keyword.ReportStep_Pass(testCase, "User has already invited an email address to receive notifications for the WLD thermostat");

		}
		else
		{
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "User does not have already invited an email address to receive notifications for the WLD thermostat.");

		}

		if(ws.isEmailVisible())

		{
			ws.SetEmailTextField("shailendra.pal@balajisoftware.com");
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				ws.clickOnEmailTextField();
				testCase.getMobileDriver().tap(1 , 700 ,1100);
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else
			{
				optikUtils.VerifyScreenLocalization(testCase, "EmailPopUpVerify");
				if (os.isOkButtonVisible(5)) {
					os.clickOnOkButton();
				}
			}


		}
		else
		{
			flag=false;
		}

		if(ws.isBackButtonVisible())
		{
			ws.clickOnBackbutton();
			ws.clickOnBackbutton();
			ws.clickOnBackbutton();
			ws.clickOnBackbutton();
		}
		return flag;
	}



	public static boolean addLocationusingCameraDevice(TestCases testCase, TestCaseInputs inputs) {
		Boolean flag=true;
		AddNewDeviceScreen ad=new AddNewDeviceScreen(testCase);
		ChangeCountryScreen ccs= new ChangeCountryScreen(testCase);
		EditAddressLocation eal=new EditAddressLocation(testCase);
		CoachMarks cm = new CoachMarks(testCase);
		OSPopUps os = new OSPopUps(testCase);

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			/*
			  if(eal.isChangeCountryButtonVisible()) {
			 */
				eal.clickOnChangeCountryButton();
			//}

			if(ccs.isCountrySearchTextFieldVisible())
			{
				Keyword.ReportStep_Pass(testCase,"Successfully Navigated to select country.");
			}}else
			{
				eal.clickOnCountryButton();
				ccs.isCountrySearchTextFieldAvailable(50);
			}
		String countryname="United Kingdom";
		if(ccs.isCountrySearchTextFieldVisible())
		{
			ccs.SetCountrySearchTextField(countryname);
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}

		if(ccs.SelectCountry(countryname))
		{
			Keyword.ReportStep_Pass(testCase, "Click on "+countryname);
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on" +countryname+"country");
			flag=false;
		}

		if(ccs.isEULAAcceptAvailable(10))
		{
			ccs.ClickonEULAAcceptButton();
		}
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}

		if(cm.isDoneButtonVisible())
		{
			cm.clickOnDoneButton();
		}
		Dimension dimensions = testCase.getMobileDriver().manage().window().getSize();



		Double screenHeightStart = dimensions.getHeight() * 0.5;

		int scrollStart = screenHeightStart.intValue();

		Double screenHeightEnd = dimensions.getHeight() * 0.3;

		int scrollEnd = screenHeightEnd.intValue();
		testCase.getMobileDriver().swipe(0, scrollStart, 0, scrollEnd, 2000);



		ad.clickonCameraDevice();
		ad.clickonHomeLoc();
		//ad.clickonOKError();

		if (MobileUtils.isRunningOnAndroid(testCase))
		{
			WebElement tap =ad.getPostcodeUK();
			tap.clear();
			tap.sendKeys("ml16bs");
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			testCase.getMobileDriver().tap(1 , 700 ,1100);

		}
		/*if (MobileUtils.isRunningOnAndroid(testCase)) {

		}*/
		ccs.isCountrySearchTextFieldAvailable(20);

		ad.clickOnBackButton();
		ad.clickOnBackButton();
		ad.clickOnBackButton();

		LoginScreen.RunBackground(testCase,10);

		verifyLoginSuccessful(testCase, inputs, true);

		if(os.isIgnoreButtonVisible(3))
		{
			os.clickOnIgnoreButton();
		}
		if(cm.isDoneButtonVisible())
		{
			cm.clickOnDoneButton();
		}

		return flag;
	}

	public static boolean VerifyflycatecherSensorSettingOptions(TestCases testCase,TestCaseInputs inputs) {
		boolean flag=true;
		ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);
		ThermostatSensorSettingScreen tss = new ThermostatSensorSettingScreen(testCase,inputs);
		DeviceInformation statInfo=new DeviceInformation(testCase, inputs);
		String addPeriodname=tss.getRandomRoomName();

		if(ts.isDeviceAndSensorsVisible())

		{
			ts.ClickDeviceAndSensor();
			Keyword.ReportStep_Pass(testCase,"THERMOSTAT SETTINGS:click on  Thermostat Device and Sensors");
		}


		if(tss.isIndoorAirSensorVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Verified Successfully navigated to Indoor Air Sensor screen");
			int size= tss.getAvailableSensorSize();
			List<WebElement> sensornames= tss.getSensorNames();
			if(size!=0)
			{
				sensornames.get(0).click();
				Keyword.ReportStep_Pass(testCase, " Sensor Settings : Clicked on 1st sensor");
			}
			else
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: No Sensor is displayed");
			}
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT SETTINGS: Unable to navigate Indoor Air Sensor screen");

		}
		if(tss.isOptionButtonVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Sensor Option Button is displayed");
			if(tss.ClickOnOptionButton())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: click on Sensor option is button");
			}

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"sensor Setting: Sensor Option Button is not visible");
		}

		if(tss.isDeleteSensorOptionVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Delete Sensor option is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Delete sensor option is not displayed");
		}

		if(tss.isIdentifySensorOptionVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Identify Sensor option is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Identify sensor option is not displayed");
		}


		if(tss.isMoveToDifferentRoomOptionVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting:  Move to Different Room option visible");
		}

		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to verify  Move to Different Room option");
		}

		if(tss.isCancelOptionVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Cancel option is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Cancel option is not displayed");
		}

		/*if(tss.ClickOnIdentifySensorOption())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Successfully clicked on Identify Sensor option");

			if(tss.isIdentifySensorScreenVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Successfully navigated to Identify sensor screen");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to navigate to Identify Sensor screen");
			}

			if(tss.isSensorBlinkingDisplayed())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Bling Sensor Description: "+tss.getSensorBlinkingText());
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Blinking Sensor desription is not displayed");
			}

			if(tss.isDoneButtonVisible())
			{
				if(!tss.ClickOnDoneButton()){
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Failed to Click on Done button");

				}
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Done button is not visible");
			}


			if(tss.isSensorsSettingsVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Successfully navigated to sensor setting screen");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to navigate to  Sensor setting screen");
			}

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to click on Identify Sensor option");
		}

		if(tss.isOptionButtonVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Sensor Option Button is displayed");
			if(!tss.ClickOnOptionButton())
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to click on option button");
			}

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"sensor Setting: Sensor Option Button is not visible");
		}
		 */

		if(tss.ClickOnMoveToDifferentRoomOption())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: click on Move to Different Room option");
		}

		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to click on Move to Different Room option");
		}

		if(statInfo.getDeviceType().equals("FlyCatcher"))
		{
		if(tss.isRoomTypeScreenVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Successfully navigated to Room Type Screen");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to navigate to Room Type Screen");
		}

		if(tss.isRoomTypedDescriptionDisplayed())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Room Type Desription is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Room type description is not displayed");
		}

		if(tss.isBedroomOptionVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Bedroom option is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Bedroom option is not displayed");
		}

		if(tss.isLivingSpaceOptionVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Living Space option is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Living Space option is not displayed");
		}

		if(tss.isOtherOptionVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Living Space option is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Living Space option is not displayed");
		}



		if(tss.ClickOnOtherOption())
		{
			Keyword.ReportStep_Pass(testCase, "Room Type :click on other option");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Room Type: Doesnt Click on other option");
		}
		if(tss.isSelectRoomVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Select Room :navigate to Select Room ");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Select Room:Doesnt navigate to Select Room");
		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(tss.isAddRoomVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Select Room :Add Room visible");
				tss.ClickOnAddRoomOption();
			}
		}
		else
		{
			if(tss.isAddRoomVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Select Room :Add Room visible");
				tss.ClickOnAddRoomOption();
			}else
			{

				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Add Room is not visible");

			}

		}

		//kesxmstc
		/*if(tss.isAddRoomVisible())
			{*/

		if(tss.setAddRoomName(addPeriodname))
		{				Keyword.ReportStep_Pass(testCase, " sensor added name:" +addPeriodname);


		}else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Doesn't added sensor");


		}
		}
		else
		{
			if(tss.isSelectRoomVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Select Room screen is displayed");

			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Select Room Type is not displayed");
			}

			if(tss.isBedroomOptionVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Bedroom option is displayed");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Bedroom option is not displayed");
			}

			if(tss.isLivingRoomOptionVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Living Room option is displayed");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Living Room option is not displayed");
			}
			if(tss.isDiningRoomOptionVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Dining Room option is displayed");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Dining Room option is not displayed");
			}

			if(tss.isMasterBedroomOptionVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Master Bedroom option is displayed");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Master Bedroom option is not displayed");
			}
			if(tss.isFamilyRoomOptionVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Family Room option is displayed");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Family Room option is not displayed");
			}

			if(tss.isEntryOptionVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Entry option is displayed");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Entry option is not displayed");
			}
			if(tss.isKitchenOptionVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Kitchen option is displayed");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Kitchen option is not displayed");
			}

			if(tss.isHallwayOptionVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Hallway option is displayed");
			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Hallway option is not displayed");
			}
			if(tss.isAddRoomVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Select Room :Add Room visible");
				tss.ClickOnAddRoomOption();
			}
			if(tss.isCustomRoomNameFieldVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Select Room :Custom Room field visible");
				tss.ClickOnCustomRoomNameField();
			}
			if(tss.setCustomRoomName(addPeriodname))
			{				Keyword.ReportStep_Pass(testCase, " sensor added name:" +addPeriodname);


			}else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Doesn't added sensor");


			}

		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
		    int height = testCase.getMobileDriver().manage().window().getSize().getHeight();
		    int width = testCase.getMobileDriver().manage().window().getSize().getWidth();

		    testCase.getMobileDriver().tap(1 , width - 80 ,height - 110);

		}
		else
		{
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Return");
		}

		if(statInfo.getDeviceType().equals("FlyCatcher"))
		{
		if(tss.ispalceSensorVisible(60))
		{
			Keyword.ReportStep_Pass(testCase, "Place sensor title visible");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Place sensor title is not visible");
		}

		String palceSensoraddedNameTextVisible=tss.getSensoraddedNameText(inputs);
		if(palceSensoraddedNameTextVisible.contains(addPeriodname))
		{
			Keyword.ReportStep_Pass(testCase, "Place sensor added name verify successfully :"  +palceSensoraddedNameTextVisible);
		}else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Place sensor added name verify is not same");
		}


		if(tss.isSensorIsplacedButtonVisible())
		{

			tss.ClickOnSensorIsplacedButton();
			Keyword.ReportStep_Pass(testCase, "Place sensor :clicked on sensor is placed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Place sensor :doesn't clicked on sensor is placed");
		}
		}
		else
		{
			try
			{
			Thread.sleep(1000);
			}
			catch(Exception e)
			{

			}
		}
		String verifysensorname=tss.getVerifySensorName(inputs);
		if(verifysensorname.contains(addPeriodname))
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Added successfully Sensor setting :" +verifysensorname);
		}else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"sensor Doesn't added in Sensor setting");
		}


		if(tss.isBackButtonVisible())
		{
			tss.ClickOnBackButton();
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Back button is not displayed");
		}



		return flag;
	}



	public static boolean scrollToElementUsingAttributeSubStringValueIOS(TestCases testCase, String attribute,
			String value) throws Exception {
		try {
			JavascriptExecutor js = (JavascriptExecutor) testCase.getMobileDriver();
			HashMap<Object, Object> scrollObject = new HashMap<>();
			try {
				scrollObject.put("predicateString", attribute + " CONTAINS '" + value + "'");
				js .executeScript("window.scrollTo(0, document.body.scrollHeight)");
			} catch (Exception e) {
				scrollObject.clear();
				scrollObject.put("direction", "down");
				js.executeScript("mobile:scroll", scrollObject);
			}
			return true;

		} catch (NoSuchElementException e) {
			throw new Exception("Element with text/value containing : '" + value
					+ "' not found. Exception Type : No Such Element Exception");
		} catch (Exception e) {
			throw new Exception("Element with text/value containing : '" + value + "' not found. Exception Message: "
					+ e.getMessage());
		}
	}
	public static boolean setAirPlaneMode(TestCases testCase, boolean status) {
		boolean flag = true;
		CustomDriver driver = testCase.getMobileDriver();

		TestCaseInputs inputs = testCase.getTestCaseInputs();

		if (driver == null) {
			return false;
		}

		switch (inputs.getInputValue(TestCaseInputs.OS_NAME).toUpperCase()) {
		case Mobile.ANDROID:

//			try {
//
//				Connection settings = status ? Connection.AIRPLANE : Connection.ALL; // new
//
//				//Connection settings = status ? ConnectionState.AIRPLANE_MODE_MASK : Connection.ALL;
//
//				// NetworkConnectionSetting(status
//				// ?
//				// 1
//				// :
//				// 6);
//
//				switch (inputs.getInputValue(TestCaseInputs.EXEC_LOCATION).toUpperCase()) {
//				case "PERFECTO":
//				case "PERFECTO_PRIVATE":
//				case "PERFECTO_PUBLIC":
//					Map<String, Object> pars = new HashMap<>();
//					pars.put("airplanemode", status?"enabled":"disabled");
//					((CustomAndroidDriver) driver).executeScript("mobile:network.settings:set", pars);
//					break;
//				case "SAUCELABS":
//				case "SAUCELAB":
//					((CustomAndroidDriver) driver).setConnection(settings);
//					break;
//				default:
//					((CustomAndroidDriver) driver).setConnection(settings);
//					break;
//				}
//
//			} catch (Exception e) {
//				if (testCase.getTestCaseInputs().isRunningOn("Perfecto")) {
//					FrameworkGlobalVariables.logger4J
//					.logError("Set Airplane Mode : Ignoring error as suggested by Perfecto.");
//				} else {
//					StringBuilder stepMess = new StringBuilder(
//							"Set Airplane Mode: Error Occured during setting the location - ");
//					stepMess = stepMess.append(FrameworkUtils.getMessage(e));
//					Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
//							stepMess.toString());
//					flag = false;
//				}
//
//			}

			try {

				//Connection settings = status ? Connection.AIRPLANE : Connection.ALL; // new

				//Connection settings = status ? ConnectionState.AIRPLANE_MODE_MASK : Connection.ALL;

				// NetworkConnectionSetting(status
				// ?
				// 1
				// :
				// 6);

				switch (inputs.getInputValue(TestCaseInputs.EXEC_LOCATION).toUpperCase()) {
				case "PERFECTO":
				case "PERFECTO_PRIVATE":
				case "PERFECTO_PUBLIC":
					Map<String, Object> pars = new HashMap<>();
					pars.put("airplanemode", status?"enabled":"disabled");
					((CustomAndroidDriver) driver).executeScript("mobile:network.settings:set", pars);
					break;
				case "SAUCELABS":
				case "SAUCELAB":
					//((CustomAndroidDriver) driver).setConnection(settings);
					try
					{
					((CustomAndroidDriver) driver).toggleAirplaneMode();
					}
					catch(Exception e)
					{
					}
					break;
				default:
					//((CustomAndroidDriver) driver).setConnection(settings);
					break;
				}

			} catch (Exception e) {
				if (testCase.getTestCaseInputs().isRunningOn("Perfecto")) {
					FrameworkGlobalVariables.logger4J
					.logError("Set Airplane Mode : Ignoring error as suggested by Perfecto.");
				} else {
					StringBuilder stepMess = new StringBuilder(
							"Set Airplane Mode: Error Occured during setting the location - ");
					stepMess = stepMess.append(FrameworkUtils.getMessage(e));
					Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
							stepMess.toString());
					flag = false;
				}

			}

			break;
		case Mobile.IOS:

			/*Dimension dimension = driver.manage().window().getSize();

			int height = dimension.getHeight();

			HashMap<String, Integer> coordinates = new HashMap<String, Integer>();

			coordinates.put(Mobile.START_X, 1);
			coordinates.put(Mobile.START_Y, height);

			coordinates.put(Mobile.END_X, 1);
			coordinates.put(Mobile.END_Y, (height / 2) * -1);

			//MobileUtils.doSwipe(coordinates, testCase);

			testCase.getMobileDriver().swipe(coordinates.get(Mobile.START_X), coordinates.get(Mobile.START_Y), coordinates.get(Mobile.END_X), coordinates.get(Mobile.END_Y), 4000);
*/
				MobileUtilsLocal.swipeForAirplainMode(testCase);

			TouchAction tAction = new TouchAction(driver);

			if (testCase.getTestCaseInputs().isRunningOn("Perfecto")) {

				if (MobileUtils.isMobElementExists("XPATH", "//*[@label='Airplane Mode']", testCase, 10)) {
					MobileUtils.clickOnElement(testCase, "XPATH", "//*[@label='Airplane Mode']");
					if (MobileUtils.isMobElementExists("XPATH", "//*[@label='OK']", testCase, 10)) {
						MobileUtils.clickOnElement(testCase, "XPATH", "//*[@label='OK']");
					}
					testCase.getMobileDriver().tap(1, 20, 20,1000);

				} else {

					if (MobileUtils.isMobElementExists("XPATH", "//*[@label='Continue']", testCase, 10)) {
						MobileUtils.clickOnElement(testCase, "XPATH", "//*[@label='Continue']");
						MobileUtils.clickOnElement(testCase, "XPATH", "//*[@label='Airplane Mode']");

						//*[@label="OK"]
						//tAction.tap(20, 20).perform();
						testCase.getMobileDriver().tap(1, 20, 20,1000);
					} else {
						flag = false;
					}
				}

			} else {

				switch (testCase.getPlatform()) {
				case Mobile.IOS_MEDIUM:

					try {
						Thread.sleep(3000);
						tAction.press(point(43, 195)).release().perform();
						MobileUtilsLocal.swipeForAirplainMode(testCase);
					} catch (Exception e) {

						flag = false;
					}

					break;
				case Mobile.IOS_LARGE:
					try {
						Thread.sleep(3000);
						tAction.press(point(43, 195)).release().perform();
					} catch (Exception e) {
						flag = false;
					}
					break;
				case Mobile.IOS_Extra_LARGE:
					break;
				}

				/*coordinates.put(Mobile.START_X, 1);
				coordinates.put(Mobile.START_Y, 1);

				coordinates.put(Mobile.END_X, 1);
				coordinates.put(Mobile.END_Y, (height / 2));

				MobileUtils.doSwipe(coordinates, testCase);*/
				MobileUtilsLocal.swipeForAirplainMode(testCase);

				if (status) {
					if (MobileUtils.getMobElement(testCase, MobileObject.NAME, "Airplane mode on") == null) {
						flag = false;
					}
				} else {
					flag = true;
				}
				break;
			}
		}

		return flag;
	}

	public static boolean ChangeLocationMode(TestCases testCase, TestCaseInputs inputs, String mode) {
		Boolean flag=true;
		AppSettingScreen app = new AppSettingScreen(testCase);

		app.LocationMode(testCase, inputs);

		if(app.isModeVisible())
		{
			app.clickOnModeButton();
		}

		if(mode.equalsIgnoreCase("Power Saving"))
		{
			if(app.isPowerSavingVisible())
			{
				app.ClickOnPowerButton();
				Keyword.ReportStep_Pass(testCase, "Location Mode is in Power saving");

			}
		}
		else if(mode.equalsIgnoreCase("Accuracy"))
		{
			if(app.isAccuracyVisible())
			{
				app.ClickOnAccuracyButton();
				Keyword.ReportStep_Pass(testCase, "Location Mode is in High Accuracy");

			}
		}



		return flag;

	}




	public static boolean verifyLocationUpdatePopUp(TestCases testCase, TestCaseInputs inputs) {
		Boolean flag=true;
		Dashboard ds=new Dashboard(testCase);

		if(ds.isLocationPopupVisible(10)) {
			Keyword.ReportStep_Pass(testCase, "Location popup visible " +ds.getLocationPopDesText());
		}

		if(ds.isSettingBtnVisible(10))
		{
			ds.clickOnSettingBtn();
		}

		if(ds.isToggleBtnVisible(10))
		{
			ds.clickOnOFFBtn();
		}
		if(ds.isImproveLocationPopupVisible(10)) {
			if(ds.isAgreeBtnVisible(10))
			{
				ds.clickOnAgreeBtn();
			}
		}
		// 	if(ds.isCancelBtnVisible(10))
		// 	{
		// 		ds.clickOnCancelBtn();
		// 	}

		return flag;
	}




	public static boolean addCharacter(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		Camera c=new Camera(testCase);

		if(c.isCameraCustomNameVisible(5))
		{
			c.setCustName("ggggggggggggggggggggggggggggggggggggg");

			Keyword.ReportStep_Pass(testCase, "Cust Name is set to : ggggggggggggggggggggggggggggggggggggg");

		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(c.getCustname().length()==30)
			{
				Keyword.ReportStep_Pass(testCase, "user allowing only enter 30 character");
			}else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"user allowing enter more than 31 character");
			}
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(inputs.isRunningOn("Perfecto"))
			{
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");

			}else
			{
				testCase.getMobileDriver().tap(1 , 700 ,1100);
			}}
		else
		{
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
		}


		/*	if(c.isZipTitleVisible(4))
		{
			c.setDeviceLocName("10007");
			Keyword.ReportStep_Pass(testCase, "zip set for United State");
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(inputs.isRunningOn("Perfecto"))
				{
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");

				}else
				{
				testCase.getMobileDriver().tap(1 , 700 ,1100);
			}}
			else
			{
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
			}
		}
		 */
		if(c.isBackButtonVisible(5))
		{
			c.clickOnBACKButton();

		}

		if(c.isCameNameVisible(4))
		{
			c.clickOnCameraName();
			Keyword.ReportStep_Pass(testCase, "User slect location name from select loc screen is ggggggggggggggggggggggggggggggggggggg");

		}
		if(c.isDevicePostcodeVisible(5))
		{
			c.setDeviceLocName("ggggggggggggggggggggggggggggggggggggg");
			Keyword.ReportStep_Pass(testCase, "Cust Name is set to : ggggggggggggggggggggggggggggggggggggg");

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(c.getDeviceLocname().length()==30)
				{
					Keyword.ReportStep_Pass(testCase, "user allowing only enter 30 character");
				}else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"user allowing enter more than 31 character");
				}
			}

		}
		c.clickOnBACKButton();
		
		
		
		  
		  if(!MobileUtils.isRunningOnAndroid(testCase)) { CoachMarks cm = new
		  CoachMarks(testCase); if(cm.isDoneButtonVisible()) { cm.clickOnDoneButton();
		  } if(cm.isDoneButtonVisible()) { cm.clickOnDoneButton(); } }

		
		c.clickOnBACKButton();
		
			if(c.isYesButtonVisible())
			{
				c.clickOnYesButton();
			}
		
		
		c.clickOnBACKButton();
		if(!MobileUtils.isRunningOnAndroid(testCase)) { CoachMarks cm = new
				  CoachMarks(testCase); if(cm.isDoneButtonVisible()) { cm.clickOnDoneButton();
				  } if(cm.isDoneButtonVisible()) { cm.clickOnDoneButton(); } }
		
		return flag;
	}

	public static void ChangeCountry(TestCases testCase, TestCaseInputs inputs,String countryname) {
		boolean flag=true;
		EditAddressLocation eal=new EditAddressLocation(testCase);
		ChangeCountryScreen ccs= new ChangeCountryScreen(testCase);
		CreateAccountScreen ca=new CreateAccountScreen(testCase);
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			/* this caode in commnet due mapping not present click by points
			 * if(eal.isChangeCountryButtonVisible()) {
			 */				eal.clickOnChangeCountryButton();
			//}

			if(ccs.isCountrySearchTextFieldVisible())
			{
				Keyword.ReportStep_Pass(testCase,"Successfully Navigated to select country.");
			}}else
			{
				eal.clickOnCountryButton();
				ccs.isCountrySearchTextFieldAvailable(50);
			}
		String cname=countryname;

//		if(countryname.equalsIgnoreCase("United States"))
//		{
//			cname="United States";
//		}
		if(ccs.isCountrySearchTextFieldVisible())
		{
			ccs.SetCountrySearchTextField(cname);
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}

		if(ccs.SelectCountry(countryname))
		{
			Keyword.ReportStep_Pass(testCase, "Click on "+cname);
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on" +countryname+"country");
			flag=false;
		}
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}
		 if(ca.isAcceptButtonTextVisible(5)){
			ca.clickOnAcceptButtonText();
		}


	}

	public static boolean VerifyinvalidZipCodePopUp(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		Camera c=new Camera(testCase);

		if(c.isCameraCustomNameVisible(5))
		{
			c.setCustName("California");

			Keyword.ReportStep_Pass(testCase, "Cust Name is set to : California");

		}

		/*if(MobileUtils.isRunningOnAndroid(testCase))
	{
		if(c.getCustname().length()==30)
		{
			Keyword.ReportStep_Pass(testCase, "user allowing only enter 30 character");
		}else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"user allowing enter more than 31 character");
		}
	}*/
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(inputs.isRunningOn("Perfecto"))
			{
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");

			}else
			{
				testCase.getMobileDriver().tap(1 , 700 ,1100);
			}}
		else
		{
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
		}


		if(c.isZipTitleVisible(4))
		{
			c.setDeviceLocName("555555");
			Keyword.ReportStep_Pass(testCase, "Zip code entered is Invalid");
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(inputs.isRunningOn("Perfecto"))
				{
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");

				}else
				{
					testCase.getMobileDriver().tap(1 , 700 ,1100);
				}}
			else
			{
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
			}
		}


		if(c.isOKVisible(5))
		{
			Keyword.ReportStep_Pass(testCase, "OK Button Visible");

			if(c.isValidationErrorVisible(5))
			{
				Keyword.ReportStep_Pass(testCase, "Validation Error Title is Visible");
			}else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," Validation Error Title Not visibles");
			}
			if(c.isZipCodeInvalidVisible(5))
			{
				Keyword.ReportStep_Pass(testCase, c.getZipCodeInvalid()+"Message is Visible");
			}else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," ZipCode Invalid Message Not visibles");
			}
			if(c.isOKVisible(5))
			{
				flag= flag && c.clickOnOk();
			}

		}else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," OK Button Not visibles");
		}


		if(c.isZipTitleVisible(4))
		{
			c.setDeviceLocName("25");
			Keyword.ReportStep_Pass(testCase, "Zip code entered is Invalid two digit code");
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(inputs.isRunningOn("Perfecto"))
				{
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");

				}else
				{
					testCase.getMobileDriver().tap(1 , 700 ,1100);
				}}
			else
			{
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
			}
		}


		if(c.isOKVisible(5))
		{
			Keyword.ReportStep_Pass(testCase, "OK Button Visible");

			if(c.isValidationErrorVisible(5))
			{
				Keyword.ReportStep_Pass(testCase, "Validation Error Title is Visible");
			}else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," Validation Error Title Not visibles");
			}
			if(c.isZipCodeInvalidVisible(5))
			{
				Keyword.ReportStep_Pass(testCase, c.getZipCodeInvalid()+"Message is Visible");
			}else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," ZipCode Invalid Message Not visibles");
			}
			if(c.isOKVisible(5))
			{
				flag= flag && c.clickOnOk();
			}

		}else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," OK Button Not visibles");
		}

		if(c.isZipTitleVisible(4))
		{
			c.setDeviceLocName("25asde");
			Keyword.ReportStep_Pass(testCase, "Zip code entered is Invalid format digit code");
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(inputs.isRunningOn("Perfecto"))
				{
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");

				}else
				{
					testCase.getMobileDriver().tap(1 , 700 ,1100);
				}}
			else
			{
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
			}
		}


		if(c.isOKVisible(5))
		{
			Keyword.ReportStep_Pass(testCase, "OK Button Visible");

			if(c.isValidationErrorVisible(5))
			{
				Keyword.ReportStep_Pass(testCase, "Validation Error Title is Visible");
			}else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," Validation Error Title Not visibles");
			}
			if(c.isZipCodeInvalidVisible(5))
			{
				Keyword.ReportStep_Pass(testCase, c.getZipCodeInvalid()+"Message is Visible");
			}else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," ZipCode Invalid Message Not visibles");
			}
			if(c.isOKVisible(5))
			{
				flag= flag && c.clickOnOk();
			}

		}else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," OK Button Not visibles");
		}


		if(c.isBackButtonVisible(5))
		{
			c.clickOnBACKButton();

		}





		c.clickOnBACKButton();
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			if(c.isYesButtonVisible())
			{
				c.clickOnYesButton();
			}
		}
		c.clickOnBACKButton();
		//c.clickOnBACKButton();
		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			CoachMarks cm = new CoachMarks(testCase);
			if(cm.isDoneButtonVisible())
			{
				cm.clickOnDoneButton();
			}
			if(cm.isDoneButtonVisible())
			{
				cm.clickOnDoneButton();
			}
		}


		return flag;
	}

	public static boolean CreateAccountWithoutLogin(TestCases testCase, TestCaseInputs inputs, String language2)
	{boolean flag=true;
	CreateAccountScreen cs=new CreateAccountScreen(testCase);
	String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
	EULAScreen es=new EULAScreen(testCase,language);
	Schedule sc=new Schedule(testCase,language);
	MobileUtilsLocal l=new MobileUtilsLocal();
	flag=flag && optikUtils.setCreateAccountField(testCase,inputs);
	flag=flag && optikUtils.setCountryLocalization(testCase,inputs,language);

	if(MobileUtils.isRunningOnAndroid(testCase))
	{
		if(language.equalsIgnoreCase("English_US"))
		{
			MobileUtils.scrollToExactAndroid(testCase , "Privacy Policy && EULA");
		}

		else if(language.equalsIgnoreCase("French_CA"))
		{
			MobileUtils.scrollToExactAndroid(testCase , "Politique de confidentialit");
		}
		else if(language.equalsIgnoreCase("Spanish_US"))
		{
			MobileUtils.scrollToExactAndroid(testCase , "de privacidad");
		}


	}
	else
	{

		try {
			scrollToElementUsingAttributeSubStringValueIOS(testCase, "XPATH" , "//*[@name='End-User License Agreement ']");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	if(cs.isEluaPrivacyPolicyVisible())
	{
		cs.clickonEluaPrivacyPolicy();
		flag=flag && optikUtils.VerifyScreenLocalization(testCase, "EulaVerification");
		Keyword.ReportStep_Pass(testCase,"Create Account  : Successfully displayed the Eula screen");
	}
	else
	{
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Create Account  : Unable to displayed the Eula screen");
		flag=false;
	}


	if(MobileUtils.isRunningOnAndroid(testCase))
	{
		MobileUtils.pressBackButton(testCase, " ");
	}
	else
	{

		cs.clickOnBackButtonIOS();
	}


	if(MobileUtils.isRunningOnAndroid(testCase))
	{
		Schedule.SwipeDown(testCase);
	}
	else
	{
		try
		{
			//optikUtils.scrollToElementUsingExactAttributeValue(testCase , "label" , "Create");
			l.swipe(testCase);
		}
		catch (Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			flag=false;
		}
	}


	if(es.isMarketingLabelVisible())
	{
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Create Account  : create account page is not displayed option that user can select Marketing communications");
		flag=false;
	}
	else
	{
		Keyword.ReportStep_Pass(testCase,"Create Account  : create account page is not displayed option that user can select Marketing communications");
	}


	if(cs.isCreateButtonVisible())
	{
		cs.clickOnCreateButton();

		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
		}

	}
	OSPopUps os = new OSPopUps(testCase);
	if(!MobileUtils.isRunningOnAndroid(testCase))
	{
		if(os.isAlwaysAllowButtonVisible(3))
		{
			os.clickOnAlwaysAllowButton();
		}
	}

	if(cs.isResendButtonVisible())
	{
		Keyword.ReportStep_Pass(testCase,"Create Account  : Successfully sent User Activation mail");
	}

	//flag=flag && optikUtils.verifyUserActivationthroughguerrillLocalization(testCase,inputs,language);
	//flag=flag && verifyAddDeviceLocalization(testCase,inputs,language);



	return flag;
	}

	
	private static boolean verifyAddDeviceLocalization(TestCases testCase, TestCaseInputs inputs, String language) {boolean flag=true;
	CreateAccountScreen cs=new CreateAccountScreen(testCase);
	OSPopUps os = new OSPopUps(testCase,language);
	AddNewDeviceScreen ad=new AddNewDeviceScreen(testCase,language);
	if(MobileUtils.isRunningOnAndroid(testCase))
	{
	if(os.isAcceptButtonVisible(5))
		{
			os.clickOnAcceptButton();
		}

		if (os.isAllowButtonVisible(5))
		{
			os.clickOnAllowButton();
		}

		if(ad.isAddNewDeviceHeaderDisplayed(10))
			{
			Keyword.ReportStep_Pass_With_ScreenShot(testCase, "Add New Device Screen displayed Successful.");


			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add New Device Screen is not displayed");
				flag=false;
			}



	}
	else
	{
		if(ad.isAddNewDeviceHeaderDisplayed(10))
		{
		Keyword.ReportStep_Pass_With_ScreenShot(testCase, "Add New Device Screen displayed Successful.");


		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add New Device Screen is not displayed");
			flag=false;
		}
		if(cs.isCameraDevice())
		{
			Keyword.ReportStep_Pass(testCase, "Devices ares showing up based on the NA countries");
		}
	}
	return flag;
	}



	private static boolean setCountryLocalization(TestCases testCase, TestCaseInputs inputs, String language)
	{
		boolean flag=true;
		CreateAccountScreen cs=new CreateAccountScreen(testCase);
		ChangeCountryScreen ccs= new ChangeCountryScreen(testCase,language);
		LocationDetailsScreen Lds=new LocationDetailsScreen(testCase);
		String Country = "";


		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			String countryname=Lds.getRegCountryNameValue();

			if(language.equalsIgnoreCase("English_US"))
			{
				Country="United States";
			}
			else if(language.equalsIgnoreCase("French_CA"))
			{
				Country="Canada";
			}
			else if(language.equalsIgnoreCase("Spanish_US"))
			{
				Country="Estados Unidos";
			}
			if(Country.equalsIgnoreCase(countryname))
			{
				Keyword.ReportStep_Pass(testCase, "Already Set Country Name as: " +countryname);
			}

		}
		else
		{
			if(cs.isSelectCountryVisible())
			{
				if(language.equalsIgnoreCase("English_US"))
				{
					Country="United States";
				}
				else if(language.equalsIgnoreCase("French_CA"))
				{
					Country="Canada";
				}
				else if(language.equalsIgnoreCase("Spanish_US"))
				{
					Country="Estados Unidos";
				}
				if(!cs.getSelectCountryButtonText().equalsIgnoreCase(Country)) {
				cs.clickOnSelectCountryButton();

				Keyword.ReportStep_Pass(testCase,"Successfully App navigates to Please confirm your country page ");

				ccs.SetCountrySearchTextField(Country);
				ccs.SelectCountry(Country);
				Keyword.ReportStep_Pass(testCase,"Successfully set Country name as: " +Country);
				}else {
					Keyword.ReportStep_Pass(testCase,"Successfully already set Country name as: " +Country);
				}


			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Create Account  : Unable to App navigates to Please confirm your country page");
				flag=false;
			}


		}

		return flag;
	}

	private static boolean setCreateAccountField(TestCases testCase, TestCaseInputs inputs) {boolean flag=true;
	Random rn = new Random();
	int value = rn.nextInt();
	String email="";
	String language=inputs.getInputValue("LANGUAGE");
	LoginScreen ls=new LoginScreen(testCase);
	CreateAccountScreen cs=new CreateAccountScreen(testCase);
	if(inputs.isInputAvailable("LANGUAGE"))
	{
		ls=new LoginScreen(testCase, language);
		cs=new CreateAccountScreen(testCase, language);

	}


	if(ls.isCreateAccountVisible())
	{
		ls.navigateToCreateAccountScreen();
		Keyword.ReportStep_Pass(testCase,
				"Create Account  : Successfully App navigastes to   Privacy Statement/End-User License Agreement ");
	}
	else
	{
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
				"Create Account : Not able to App navigastes to   Privacy Statement/End-User License Agreement  ");
		flag = false;
	}
	if(cs.isFirstNameLabelVisible())
	{
		if(cs.setFirstNameValue("ABC"))
		{
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
			}

			Keyword.ReportStep_Pass(testCase,
					"Create Account  : Successfully Set First Name: ABC ");
		}
		else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Account : Not able to set First Name: ABC ");
			flag = false;
		}

	}
	if(cs.isLastNameLabelVisible())
	{
		if(cs.setLastNameValue("XYZ"))
		{
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}else {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
			}
			Keyword.ReportStep_Pass(testCase,
					"Create Account  :Successfully Set Last Name: XYZ");
		}
		else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Account : Not able to set Last Name: XYZ");
			flag = false;
		}
	}

	if(cs.isEmailLabelVisible())
	{
		email="rn"+value+"@grr.la";
		inputs.setInputValue("EmailAddress", email, false);


		if (cs.setEmailAddressValue(email)) {
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}else {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
			}
			Keyword.ReportStep_Pass(testCase,
					"Create Account  : Email Address set to -"+email);
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Account : Not able to set Email Address -"+email);
			flag = false;
		}
	}

	if(cs.isPasswordLabelVisible())
	{
		if (cs.setPasswordValue("Password1")) {
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}else {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
			}
			Keyword.ReportStep_Pass(testCase,
					"Create Account  : Password set to - Password1");
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Account : Not able to set Password - Password1");
			flag = false;
		}
	}

	if(cs.isVerifyPasswordLabelVisible())
	{
		if (cs.setVerifyPasswordValue("Password1")) {
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}else {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
			}
			Keyword.ReportStep_Pass(testCase,
					"Create Account  : Verify Password set to - Password1");
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Account : Not able to set Verify Password - Password1");
			flag = false;
		}
	}

	return flag;
	}

	public String getMobElementLocal(TestCases testCase, String XPATH)
		{

			if (MobileUtils.isRunningOnAndroid(testCase))
			{
				try {
				if(testCase.getMobileDriver().findElement(By.xpath(XPATH))!=null)
				{
					return testCase.getMobileDriver().findElement(By.xpath(XPATH)).getAttribute("text");
				}

			} catch (Exception e) {

			}
			}
			else
			{
				try {
				if(testCase.getMobileDriver().findElement(By.xpath(XPATH))!=null)
				{
					return testCase.getMobileDriver().findElement(By.xpath(XPATH)).getAttribute("value");
				}
			} catch (Exception e) {

			}
			}
			return null;

		}

	public static boolean toggleGeofenceDashboard(TestCases testCase, boolean On)
	{
		boolean flag = true ;
		try
		{
			Dashboard db= new Dashboard(testCase);
			SecondaryCardSettings sc= new SecondaryCardSettings(testCase);
			GeoFenceSettingsScreen geof= new GeoFenceSettingsScreen(testCase);
			String status="";


					status=geof.getGeofenceToggleStatus();
					if(On)
					{
						if(status.equalsIgnoreCase("true")||status.equalsIgnoreCase("ON")||status.equalsIgnoreCase("1"))
						{
							Keyword.ReportStep_Pass(testCase , "Geofence location is already turned on") ;
						}
						else
						{
							geof.clickOnGeofenceToggleButton();
							status=geof.getGeofenceToggleStatus();
							if(status.equalsIgnoreCase("true")||status.equalsIgnoreCase("ON")||status.equalsIgnoreCase("1"))
							{
								Keyword.ReportStep_Pass(testCase , "Geofence location is turned on") ;
							}
							else
							{
								Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to turn on geofence toggle") ;
								flag = false ;
							}

						}
					}
					else
					{
						if(status.equalsIgnoreCase("false")||status.equalsIgnoreCase("off")||status.equalsIgnoreCase("0"))
						{
							Keyword.ReportStep_Pass(testCase , "Geofence location is already turned Off") ;
						}
						else
						{
							geof.clickOnGeofenceToggleButton();

							if(geof.isOKButtonVisible())
							{
								geof.clickOKButton();
								status=geof.getGeofenceToggleStatus();
								if(status.equalsIgnoreCase("false")||status.equalsIgnoreCase("off")||status.equalsIgnoreCase("0"))
								{
									Keyword.ReportStep_Pass(testCase , "Geofence location is turned off") ;
								}
								else
								{
									Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to turn Off geofence toggle") ;
									flag = false ;
								}

							}
							else
							{
								Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"OK button popup not display") ;
								flag = false ;
							}
						}
					}

					if(geof.isBackButtonVisible())
					{
						geof.clickOnBackButton();
					}

		}
		catch (Exception e)
		{
			Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,e.getMessage()) ;
			flag = false ;
		}

		return flag ;
	}

	public static boolean VerifyWeatherScreenandgeofence(TestCases testCase, TestCaseInputs inputs)
	{

		boolean flag = true;
		Dashboard db = new Dashboard(testCase);
		WeatherScreen wh = new WeatherScreen(testCase);

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			try
			{if(db.isWeatherIconVisible(10))
			{
				db.clickOnWeatherIcon();
			}
				if (wh.isTodayTextVisible(5))
				{
					Keyword.ReportStep_Pass(testCase, "Weather: Weather Today forcast  is Visible : "+wh.getTodayText());
					flag=true;
				} else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Weather: Weather Today Forcast not display properly in " );
					flag = false;

				}


				if (wh.isWeatherCurrentTemperature(5))
				{
					Keyword.ReportStep_Pass(testCase,
							"Weather: Weather Current Temp visible : "+wh.getWeatherCurrentTemperature() );
					flag=true;
				} else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Weather: Weather Current Temp not display properly in ");
					flag = false;

				}



				try
				{

					if (wh.isWeatherMaxTempVisible(5))
					{
						Keyword.ReportStep_Pass(testCase, "Weather: Weather Max Temp: "+wh.getWeatherMaxTemp());
						flag=true;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Weather: Weather Max Temp not display properly in " );
						flag = false;

					}
				}
				catch (Exception e)
				{}

				try
				{
					if (wh.isWeatherMinTempVisible(5))
					{
						Keyword.ReportStep_Pass(testCase, "Weather: Weather Min Temp: " + wh.getWeatherMinTemp());
						flag=true;
					} else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Weather: Weather Min Temp not display properly in " + wh.getWeatherMinTemp());
						flag = false;

					}
				}
				catch (Exception e)
				{}

				if(wh.isBackButtonAvailable(10))
				{
					wh.ClickonBackButton();
				}

			}
			catch (Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			}


		// --------------- verifying GeofenceScreen now--------------------

		if(MobileUtilsLocal.SwipeLeftDashboard(testCase))
		{
			try
			{

				if (db.isGeofencingLabelVisible(10))
				{
					Keyword.ReportStep_Pass(testCase, "Geofence Title Visible: "+db.getGeofencingLabelText());
					flag=true;
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," Geofence Title not display properly in " );
					flag = false;

				}

				if (db.isGeofencingIconVisible(5))
				{
					Keyword.ReportStep_Pass(testCase, "Geofence icon Visible");
					flag=true;
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Geofence icon is not display properly in ");
					flag = false;
				}

				if (db.isGeofencingCurrentStatus(5))
				{
					Keyword.ReportStep_Pass(testCase,"Geofence currentStatus displayed:"+db.getCurrentStatusText());
					flag=true;
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Geofence currentStatus not displayed");
					flag = false;
				}

				if (db.isGeofencingCurrentSetting(5))
				{
					Keyword.ReportStep_Pass(testCase, "Geofencing Current Setting is displayed" );
					flag=true;
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Geofencing Current Setting is not displayed: " );
					flag = false;
				}

			}
			catch (Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			}
		}

		}
		else
		{
			try
			{
				if(db.isWeatherIconVisible(10))
				{
					db.clickOnWeatherIcon();
				}
				if(wh.isForecastTitleVisible(5))
				{
					Keyword.ReportStep_Pass(testCase, "Forcast Title is Visible Properly " );
					flag=true;
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Forcast Title is not  Visible. " );
					flag = false;
				}

				if(wh.isWeatherStatusVisible(5))
				{
					Keyword.ReportStep_Pass(testCase, "Weather Status is  Visible Properly " );
					flag=true;
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"weather Status is not  Visible. " );
					flag = false;
				}
				if(wh.isBackButtonAvailable(10))
				{
					wh.ClickonBackButton();
				}
			}
			catch(Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
			}

			//=========verifying Geofence in IOS========

			if(MobileUtilsLocal.SwipeLeftDashboard(testCase))
			{
				try
				{OSPopUps os=new OSPopUps(testCase);
					if(os.isDoneButtonVisible())
					{
						os.clickOnDoneButton();
					}
					MobileUtilsLocal.SwipeLeftDashboard(testCase);
					if (db.isGeofencingLabelVisible(10))
					{
						Keyword.ReportStep_Pass(testCase, "Geofence Title Visible dsplay poperly");
						flag=true;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," Geofence Title not display properly in " );
						flag = false;

					}

					if (db.isGeofencingCurrentStatus(5))
					{
						Keyword.ReportStep_Pass(testCase, "Geofence Current Status  Visible: ");
						flag=true;
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Geofence Current Status is not displaying.. ");
						flag = false;
					}

				}
				catch (Exception e)
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
				}
			}

		}

			return flag;

	}



	public static boolean VerifyGeofenceOption(TestCases testCase) {
		// TODO Auto-generated method stub
		boolean flag=true;
		Dashboard db = new Dashboard(testCase);
		WeatherScreen wh=new WeatherScreen(testCase);


		if(db.isGlobalDrawerButtonVisible())
		{
			db.clickOnGlobalDrawerButton();

				if(!db.isGeofenceOptionVisible())
				{
					Keyword.ReportStep_Pass(testCase,"Geofence: Geofence option not visible ");
					flag = true;
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Geofence: Geofence option visible ");
					flag = false;
				}
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"GlobalDrawer: GlobalDrawer button not visible ");
			flag = false;
		}

		return flag;
	}


	 public static boolean ChangePasswordAndVerifyRules(TestCases testCase, TestCaseInputs inputs) {boolean flag=true;
	 WebElement tap =null, tap1 =null,tap2 =null;
	 SecondaryCardSettings sc=new SecondaryCardSettings(testCase);
	                 ChangePasswordScreen cp=new ChangePasswordScreen(testCase);

	 String pwd=inputs.getInputValue("PASSWORD").toString();

	 if(sc.isChangePasswordOptionVisible(5))
	 {
	 sc.clickOnChangePasswordOption();
	 }

	 //------------------WithoutOldpwd-----------------------
	 sc.isChangePasswordOptionVisible(5);
	 tap =sc.getTextStatusoldpwd();


	 if(sc. isContinueButton1Visible(1)){
	 sc.clickOnContinueButton1();
	 }


	 if(cp.isEnterRequiredFieldErrorVisible())
	 {
	 Keyword.ReportStep_Pass(testCase , "Successfully verified Required Field Error Message  for Password field :"+cp.getEnterRequiredFieldError() ) ;
	 }
	 else
	 {
	 Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not Able to verified Error messge ");

	 }
	  tap.clear();
	 tap.sendKeys(pwd);
	 MobileUtils.hideKeyboard(testCase.getMobileDriver());
	 if(sc. isContinueButton1Visible(1)){
	 sc.clickOnContinueButton1();
	 }
	 sc.isChangePasswordOptionVisible(5);
	 tap1 =sc.getTextStatusnewpwd();
	 tap2 =sc.getTextStatusverifypwd();

	    /*  String passwordArray[] = {(inputs.getInputValue("PASSWORD").toString()),"Password@@@", "#@12345678h" , "Password()##","Password1","Password1@",
	        "password@" ,"1234567()##","12345678@","12345678h","12345678H","@#12345678"," Password1",inputs.getInputValue("PASSWORD").toString()};
	        */
	 String passwordArray[] = { "#@12345678h" , "Password(---)##","1234567()##","12345678@","12345678h","12345678H","@#12345678"};

	 int i=0;
	        
	         while(passwordArray[i].length() < 7){
	 tap2.clear();
	 tap1.sendKeys(passwordArray[i+1]);
	 MobileUtils.hideKeyboard(testCase.getMobileDriver());
	 tap2.clear();
	 tap2.sendKeys(passwordArray[i+1]);
	 MobileUtils.hideKeyboard(testCase.getMobileDriver());
	           if(sc. isContinueButton1Visible(1)){
	 sc.clickOnContinueButton1();
	 }
	 sc.isChangePasswordOptionVisible(5);
	 flag=true;
	 if(cp.isMismatchErrorErrorVisible())
	 {
	 Keyword.ReportStep_Pass(testCase , "Successfully verified Invalid Error Message  for Password field :"+cp.getMismatchErrorError()) ;
	 }
	 else
	 {
	 Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not Able to verified Error messge ");

	 }
	         }
	 if(sc. iscancelButton1Visible(1)){
	 sc.clickOncancelButton1();
	 }
	 sc.clickOnBackButton();





	 return flag;
	 }

	public static boolean CreateAccountWithInvalidCredentials(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		Random rn = new Random();
		int value = rn.nextInt();
		String email = "";
		LoginScreen ls = new LoginScreen(testCase);
		CreateAccountScreen cs = new CreateAccountScreen(testCase);
		EULAScreen es = new EULAScreen(testCase);

		if (ls.isCreateAccountVisible()) {
			ls.navigateToCreateAccountScreen();

			if (cs.isFirstNameIDLabelVisible()) {
				if (cs.setFirstNameIDValue("Automation")) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}

					Keyword.ReportStep_Pass(testCase, "Create Account  : Successfully Set First Name : Automation ");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set First Name.");
					flag = false;
				}
				if (cs.isLastNameIDLabelVisible()) {
					if (cs.setLastNameIDValue("Test")) {
						if (MobileUtils.isRunningOnAndroid(testCase)) {
							MobileUtils.hideKeyboard(testCase.getMobileDriver());
						} else {
							MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						}
						Keyword.ReportStep_Pass(testCase, "Create Account  :Successfully Set Last Name. : Test");
					} else {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Create Account : Not able to set Last Name.");
						flag = false;
					}
				}

				if (cs.isEmailIDLabelVisible()) {
					email = "rn" + value + "@grr.la";
					inputs.setInputValue("EmailAddress", email, false);
					if (cs.setEmailAddressIDValue(email)) {
						if (MobileUtils.isRunningOnAndroid(testCase)) {
							MobileUtils.hideKeyboard(testCase.getMobileDriver());
						} else {
							MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						}
						Keyword.ReportStep_Pass(testCase, "Create Account  : Email Address set to -" + email);
					} else {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Create Account : Not able to set Email Address.");
						flag = false;
					}
				}

				if (cs.isSendVerificationButtonVisible()) {
					cs.clickOnSendVerificationButton();

					if (!MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}

				}

				if (cs.isEnterCodeLabelVisible()) {
					cs.clickOnVerificationCodeField();

					if (cs.setVerificationCodeValue("12356")) {
						if (MobileUtils.isRunningOnAndroid(testCase)) {
							MobileUtils.hideKeyboard(testCase.getMobileDriver());
						} else {
							MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
						}
						Keyword.ReportStep_Pass(testCase, "Create Account  :Entered invalid verfication code : 12356");
					} else {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Create Account : Not able to set Last Name.");
						flag = false;
					}
					if (cs.isContinueButtonVisible()) {
						cs.clickOnContinueButton();

					} else {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Create Account : Continue button is not visible");
						flag = false;
					}

					if (cs.isVerificationErrorVisible()) {
						Keyword.ReportStep_Pass(testCase, "Create Account  :Invalid error " + cs.getVerificationError()
								+ " msg is displayed");
					} else {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Create Account : Invalid verification code is not displayed");
						flag = false;
					}
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Verification code field is not visible");
					flag = false;
				}

				/*
				 * if (!MobileUtils.isRunningOnAndroid(testCase)) {
				 * 
				 * if (cs.isOKButtonVisible()) { cs.clickOnOKButton(); } else {
				 * Keyword.ReportStep_Fail(testCase,
				 * FailType.FUNCTIONAL_FAILURE,
				 * "Create Account : OK button is not visible"); flag = false; }
				 * }
				 */

			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to find First Name field");
				flag = false;
			}

		}
		return flag;
	}

	public static boolean CreateAccountSessionExpired(TestCases testCase, TestCaseInputs inputs) {	boolean flag=true;
	Random rn = new Random();
	int value = rn.nextInt();
	String email="";
	LoginScreen ls=new LoginScreen(testCase);
	CreateAccountScreen cs=new CreateAccountScreen(testCase);
	EULAScreen es=new EULAScreen(testCase);
    PrimaryCard pc=new PrimaryCard(testCase);
	if(ls.isCreateAccountVisible())
	{
		ls.navigateToCreateAccountScreen();

		//wait for 25sec for page load
	//	MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
		//pc.isXYZVisible(960);

		if(cs.isFirstNameIDLabelVisible())
		{
			if(cs.setFirstNameIDValue("Automation"))
			{
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}
				else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
				}

				Keyword.ReportStep_Pass(testCase,
						"Create Account  : Successfully Set First Name : Automation ");
			}
			else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set First Name.");
				flag = false;
			}

		}
		if(cs.isLastNameIDLabelVisible())
		{
			if(cs.setLastNameIDValue("Test"))
			{
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
				}
				Keyword.ReportStep_Pass(testCase,
						"Create Account  :Successfully Set Last Name. : Test");
			}
			else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set Last Name.");
				flag = false;
			}
		}

		if(cs.isEmailIDLabelVisible())
		{
			email="rn"+value+"@grr.la";
			inputs.setInputValue("EmailAddress", email, false);
			if (cs.setEmailAddressIDValue(email)) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
				}
				Keyword.ReportStep_Pass(testCase,
						"Create Account  : Email Address set to -"+email);
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set Email Address.");
				flag = false;
			}
		}


		if(cs.isSendVerificationButtonVisible())
		{
			cs.clickOnSendVerificationButton();

			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
			}

		}

		if(cs.isEnterCodeLabelVisible())
		{
			
		}
			cs.clickOnVerificationCodeField();

			if(cs.setVerificationCodeValue("123456"))
			{
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
				}
				Keyword.ReportStep_Pass(testCase,
						"Create Account  :Entered verfication code : 123456");
			}else{

				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Verification code not set");
				flag = false;

			}

			pc.isXYZVisible(900);

			/*if(cs.isSendVerificationCodeVisible(960))
			{

					}*/
			Keyword.ReportStep_Pass(testCase,
					"Create Account  : Device kept on idle for 15 mins");

			if(cs.isContinueButtonVisible())
			{
				cs.clickOnContinueButton();

			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Continue button is not visible");
				flag = false;
			}
			if(cs.isResendCodeButtonVisible())
			{
				cs.clickOnResendCodeButton();
				
				if(cs.isVerificationErrorVisible())
				{
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Error popup "+cs.getVerificationError()+" msg is displayed");
					if(cs.isOKButtonVisible())
					{
						cs.clickOnOKButton();

					}
					/*else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Create Account : OK button is not visible");
						flag = false;
					}*/

				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Session Expired Popup is not displayed");
					flag = false;
				}
				
				/*if(cs.isSessionExpiredErrorVisible())
				{
					Keyword.ReportStep_Pass(testCase,"Create Account  : Error popup "+cs.getSessionExpiredError()+" msg is displayed");
					if(cs.isOKButtonVisible())
					{
						cs.clickOnOKButton();

					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Create Account : OK button is not visible");
						flag = false;
					}

				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Session Expired Popup is not displayed");
					flag = false;
				}*/

			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Resend Code button is not visible");
				flag = false;
			}
			


	}
	return flag;}

	public static boolean ForgotPasswordSessionExpired(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		Random rn = new Random();
		int value = rn.nextInt();
		String email = "";
		CreateAccountScreen cs = new CreateAccountScreen(testCase);
		LoginScreen ls = new LoginScreen(testCase);
        PrimaryCard pc=new PrimaryCard(testCase);
		if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
			flag = flag && ls.clickOnLoginButton();
		}
		if (MobileUtils.isRunningOnAndroid(testCase))
		{
			if (ls.isForgotPasswordIDButtonVisible())
			{
				ls.clickOnForgotPasswordIDButton();
				Keyword.ReportStep_Pass(testCase, "[optik login screen]: Forgot Password clicked");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"[optik login screen], expected text is ");
				flag = false;
			}
		} else {
			ls.clickOnForgotPasswordIDButton();
			Keyword.ReportStep_Pass(testCase, "[optik login screen]: Forgot Password clicked");
		}

		if (cs.isEmailIDLabelVisible()) {
			email = "ys11@grr.la";
			inputs.setInputValue("EmailAddress", email, false);
			if (cs.setEmailAddressIDValue(email)) {
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				} else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
				}
				Keyword.ReportStep_Pass(testCase, "Create Account  : Email Address set to -" + email);
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Not able to set Email Address.");
				flag = false;
			}
		}

		if (cs.isSendVerificationButtonVisible()) {
			cs.clickOnSendVerificationButton();

			if (!MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
			}

		}

		if(cs.isEnterCodeLabelVisible())
		{
			
		}
		cs.clickOnVerificationCodeField();
			//wait for 25sec for page load
			pc.isXYZVisible(960);
			//MobileUtils.isMobElementExists("id" , "rohal" , testCase,960,false);

			/*if(cs.isContinueButtonVisible())
			{
				cs.clickOnContinueButton();

			}*/
			if(cs.isResendCodeButtonVisible())
			{
				cs.clickOnResendCodeButton();
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Forgot Password  : Resend Code button is not visible");
				flag = false;
			}

			//wait for 5sec for page load
			MobileUtils.isMobElementExists("id" , "rohal" , testCase,5,false);

			if(cs.isSessionExpiredErrorVisible())
			{
				Keyword.ReportStep_Pass(testCase,
						"Forgot Password   : Error popup "+cs.getSessionExpiredError()+" msg is displayed");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Forgot Password  : Invalid verification code is not displayed");
				flag = false;
			}

		return flag;
	}

	public static boolean verifyGeofenceSettingScreenFromDashbord(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		try
		{
			GeoFenceSettingsScreen geof= new GeoFenceSettingsScreen(testCase);
			String status="";

			if(geof.isGeofenceThisLocationLabelVisible())
			{
				Keyword.ReportStep_Pass(testCase , "Geofence This Location label is displayed") ;
			}
			else
			{
				Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to turn on geofence toggle") ;
			}

			status=geof.getGeofenceToggleStatus();

			if(status.equalsIgnoreCase("true")||status.equalsIgnoreCase("ON")||status.equalsIgnoreCase("1"))
			{
				Keyword.ReportStep_Pass(testCase , "Geofence location is already turned on") ;
			}
			else
			{
				geof.clickOnGeofenceToggleButton();
				status=geof.getGeofenceToggleStatus();
				if(status.equalsIgnoreCase("true")||status.equalsIgnoreCase("ON")||status.equalsIgnoreCase("1"))
				{
					Keyword.ReportStep_Pass(testCase , "Geofence location is turned on") ;
				}
				else
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to turn on geofence toggle") ;
				}

			}
			if(geof.isGeofenceToggleGeofenceRadiusVisible())
			{
				Keyword.ReportStep_Pass(testCase , "Geofence Radius is displayed") ;
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE , "Geofence Radius  is not displayed") ;
			}

			status=geof.getGeofenceAlertToggleStatus();

			if(status.equalsIgnoreCase("true")||status.equalsIgnoreCase("ON")||status.equalsIgnoreCase("1"))
			{
				Keyword.ReportStep_Pass(testCase , "Geofence Alert is already turned on") ;
			}
			else
			{
				geof.clickOnGeofenceAlertToggleButton();
				status=geof.getGeofenceAlertToggleStatus();
				if(status.equalsIgnoreCase("true")||status.equalsIgnoreCase("ON")||status.equalsIgnoreCase("1"))
				{
					Keyword.ReportStep_Pass(testCase , "Geofence Alert is turned on") ;
				}
				else
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to turn on geofence toggle") ;
				}
			}

			if(geof.isGeofenceThisLocationLabelVisible())
			{
				Keyword.ReportStep_Pass(testCase , "Geofence Location Status  is verified") ;
			}
			else
			{
				Keyword.ReportStep_Fail(testCase , FailType.FUNCTIONAL_FAILURE ,"Not able to turn on geofence toggle") ;
			}

			if(geof.isHomeVisible() && geof.isAwayVisible())
			{
				Keyword.ReportStep_Pass(testCase , "Geofence Home and Away Status  is verified") ;
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase ,FailType.FUNCTIONAL_FAILURE , "Geofence Home and Away Status  is not displayed") ;
			}


			if(geof.isGeofenceDisclaimerMSGVisible())
			{
				Keyword.ReportStep_Pass(testCase , "Geofence Disclaimer msg" +geof.getGeofenceDisclaimerMSG()+"is displayed") ;
			}

		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return flag;
	}

	public static boolean ForgotPasswordWithValidCredentials(TestCases testCase, TestCaseInputs inputs) {boolean flag = true;
	Random rn = new Random();
	int value = rn.nextInt();
	String email = "";
	String email1 = "";
	CreateAccountScreen cs = new CreateAccountScreen(testCase);
	ForgotPasswordScreen fs=new ForgotPasswordScreen(testCase);
	LoginScreen ls = new LoginScreen(testCase);
	if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
		flag = flag && ls.clickOnLoginButton();
	}
	if (MobileUtils.isRunningOnAndroid(testCase))
	{
		if (ls.isForgotPasswordIDButtonVisible())
		{
			ls.clickOnForgotPasswordIDButton();
			Keyword.ReportStep_Pass(testCase, "[optik login screen]: Forgot Password clicked");
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"[optik login screen], expected text is ");
			flag = false;
		}
	} else {
		ls.clickOnForgotPasswordIDButton();
		Keyword.ReportStep_Pass(testCase, "[optik login screen]: Forgot Password clicked");
	}

	if (cs.isEmailIDLabelVisible()) {
		email = "ys11@grr.la";
		inputs.setInputValue("EmailAddress", email, false);
		if (cs.setEmailAddressIDValue(email)) {
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			} else {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
			}
			Keyword.ReportStep_Pass(testCase, "Create Account  : Email Address set to -" + email);
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Forgot Password : Not able to set Email Address.");
			flag = false;
		}
	}
	if (cs.isSendVerificationCodeVisible(1)) {
		cs.clickOnSendVerificationCode();

		if (!MobileUtils.isRunningOnAndroid(testCase)) {
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
		}

	}
	String verificationCode = fetchActivateAccountVerificationCode(testCase,email);	
		cs.clickOnVerificationCodeField();
if(cs.setVerificationCodeValue(verificationCode)) //Verification code
		{
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}else {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
			}
			Keyword.ReportStep_Pass(testCase,
					"Create Account  :Entered invalid verfication code : 12356");
		}
		else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Account : Not able to set Last Name.");
			flag = false;
		}
		if(cs.isContinueButtonVisible())
		{
			cs.clickOnContinueButton();

		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Account : Continue button is not visible");
			flag = false;
		}

	return flag;

}

	public static void changeToggleOffFromLocation(TestCases testCase, TestCaseInputs inputs) {
		boolean flag;
		if (MobileUtils.isRunningOnAndroid(testCase)) {


			 MobileElement elem = ((AndroidDriver<MobileElement>) testCase.getMobileDriver())
					.findElement(By.id("com.android.settings:id/switch_widget"));
			if (elem != null) {

					if (elem.getText().equalsIgnoreCase("Off")) {
						elem.click();
						Keyword.ReportStep_Pass(testCase, "Location toggle is on");

					} else {
						Keyword.ReportStep_Pass(testCase, "Location services is already on");
					}

			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Failed to locate Location services switch");
			}
			 MobileUtils.pressBackButton(testCase);


		} else {

			/*if (MobileUtils.isMobElementExists("XPATH", "//*[contains(@name,'Settings') or contains(@value,'Settings')]",testCase, 7)) {
				MobileUtils.clickOnElement(testCase, "XPATH","//*[contains(@name,'Settings') or contains(@value,'Settings')]");
			}*/

			if (MobileUtils.isMobElementExists("name", "Settings", testCase, 5)) {
				MobileUtils.clickOnElement(testCase, "name", "Settings");
			}


			boolean success = false;
			if (!MobileUtils.launchSettingsAppOnIOS(testCase)) {
				flag = false;
			} else {
				Dimension dimension = testCase.getMobileDriver().manage().window().getSize();
				TouchAction action = new TouchAction(testCase.getMobileDriver());
				for (int i = 0; i < 5; ++i) {
					if (success) {
						break;
					}
					try {
						action.press(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * .5)))
						.moveTo(point((int) (dimension.getWidth() * .5), (int) (dimension.getHeight() * -.2))).release().perform();

						scrollToElementUsingAttributeSubStringValueIOS(testCase, "label", "Privacy");

					}catch (Exception e) {
					}

					FluentWait<CustomDriver> fWait = new FluentWait<CustomDriver>(
							testCase.getMobileDriver());
					fWait.pollingEvery(Duration.ofSeconds(5));
					fWait.withTimeout(Duration.ofSeconds(5));

					try {
						WebElement elem = fWait.until(
								ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@label='Privacy']")));
						if (elem != null) {
							elem.click();
							success = true;
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Scroll to Privacy : Privacy option not found");
						}
					} catch (TimeoutException e) {
						// Retry again
					}
				}
		}

			if (MobileUtils.isMobElementExists("name", "Location Services", testCase, 5)) {
				MobileUtils.clickOnElement(testCase, "name", "Location Services");
			}

//		Dashboard.toggle(testCase);
			try{
				if (MobileUtils.isMobElementExists("xpath", "//XCUIElementTypeSwitch", testCase, 5)) {
					MobileUtils.clickOnElement(testCase, "xpath", "//XCUIElementTypeSwitch");
				}


				List<WebElement> locServ = MobileUtils.getMobElements(testCase, "xpath",
						"//*[@name='Location Services']");
				WebElement toggleSwitch = null;
				try {
					toggleSwitch=locServ.get(0);
				} catch (Exception e) {
					// TODO: handle exception
				}


				if (toggleSwitch != null) {
					toggleSwitch=testCase.getMobileDriver().findElement(By.xpath("//*[@name='Location Services']"));
						if (toggleSwitch.getAttribute("value").equalsIgnoreCase("0") || toggleSwitch.getAttribute("value").equalsIgnoreCase("Off"))
						{
							//toggleSwitch.click();
							Keyword.ReportStep_Pass(testCase, "Turned on Location Services");
						}
						else
						{
							Keyword.ReportStep_Pass(testCase, "Location Services is already turned on");
						}


					if (MobileUtils.isMobElementExists("name", "breadcrumb", testCase, 5)) {
						MobileUtils.clickOnElement(testCase, "name", "breadcrumb");

					}
					if (MobileUtils.isMobElementExists("name", "Always", testCase, 5)) {
						if (!MobileUtils.clickOnElement(testCase, "name", "Always")) {
							flag = false;
						}
					}


				}else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed to locate the Location Services switch");
				}


			}
			catch(Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			}



		/*List<WebElement> locServ = MobileUtils.getMobElements(testCase, "xpath",
								"//*[@name='Location Services']");
						WebElement toggleSwitch = null;
						toggleSwitch=locServ.get(0);

						if (toggleSwitch != null) {

								if (toggleSwitch.getAttribute("value").equalsIgnoreCase("0") || toggleSwitch.getAttribute("value").equalsIgnoreCase("Off")) {
									toggleSwitch.click();
									Keyword.ReportStep_Pass(testCase, "Turned on Location Services");
								} else {
									Keyword.ReportStep_Pass(testCase, "Location Services is already turned on");								}


							if (MobileUtils.isMobElementExists("name", "demo", testCase, 5)) {
								if (!MobileUtils.clickOnElement(testCase, "name", "demo")) {
									flag = false;
								}
							}
							if (MobileUtils.isMobElementExists("name", "Always", testCase, 5)) {
								if (!MobileUtils.clickOnElement(testCase, "name", "Always")) {
									flag = false;
								}
							}


						}else {
							flag=false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Failed to locate the Location Services switch");
						}*/


						MobileUtils.closeSettingsAppOnIOS(testCase);
/*						CustomDriver driver = testCase.getMobileDriver();

						HashMap<String, String> app = new HashMap<>();
						app.put("name", "demo");

						try {
							driver.executeScript("mobile:application:open", app);
						} catch (Exception e) {
							FrameworkGlobalVariables.logger4J.logWarn("App is already open, continue with script");
						}*/
						LoginScreen ls = new LoginScreen(testCase);
						ls.isLoginButtonVisible(20);
						OSPopUps os = new OSPopUps(testCase);
						if(os.isAlwaysAllowButtonVisible(5))
						{
							os.clickOnAlwaysAllowButton();
						}
				}


			}




	public static Boolean isEmailAlertReceived(TestCases testCase,TestCaseInputs inputs,String email,String AlertType) {
		String subject = "";
		switch(AlertType.toUpperCase()) {
		case "HIGH TEMPERATURE":
			subject = "High Temperature detected at "+inputs.getInputValue("LOCATION1_NAME");
			break;
		case "LOW TEMPERATURE":
			subject = "Low Temperature detected at "+inputs.getInputValue("LOCATION1_NAME");
			break;
		case "HIGH HUMIDITY":
			subject = "High Humidity detected at "+inputs.getInputValue("LOCATION1_NAME");
			break;
		case "LOW HUMIDITY":
			subject = "Low Humidity detected at "+inputs.getInputValue("LOCATION1_NAME");
			break;
		}
		
		Boolean isEmailAlertFound = GrrMailUtils.isMailFoundWithSubject(testCase, subject, email , "customer-service@resideo.com");
		
		return isEmailAlertFound;
}
	
	public static boolean CreateAndActivateAccountWithIDDAASEnable(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;

		Random rn = new Random();
		int value = rn.nextInt();
		String email = "";
		String language = testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		LoginScreen ls;
		CreateAccountScreen cs;
		AddNewDeviceScreen ad;
		;
		EULAScreen es;
		if (inputs.isInputAvailable("LANGUAGE")) {
			ls = new LoginScreen(testCase, language);
			cs = new CreateAccountScreen(testCase, language);
			es = new EULAScreen(testCase, language);
			ad = new AddNewDeviceScreen(testCase);

		} else {

			ls = new LoginScreen(testCase);
			cs = new CreateAccountScreen(testCase);
			es = new EULAScreen(testCase);
			ad = new AddNewDeviceScreen(testCase);
		}

		if (ls.isCreateAccountVisible()) {
			ls.navigateToCreateAccountScreen();

			try {
				Thread.sleep(5000);
			} catch (Exception e) {

			}

			// Not working locally
			if (cs.isFirstNameIDLabelVisible()) {
				flag = optikUtils.VerifyScreenLocalization(testCase, "CreateAccountAndroidIDAAS");
				if (cs.setFirstNameIDValue("Automation")) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}

					Keyword.ReportStep_Pass(testCase, "Create Account  : Successfully Set First Name : Automation ");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set First Name.");
					flag = false;
				}

			}
			if (cs.isLastNameIDLabelVisible()) {
				if (cs.setLastNameIDValue("Test")) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase, "Create Account  :Successfully Set Last Name. : Test");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Last Name.");
					flag = false;
				}
			}

			if (cs.isEmailIDLabelVisible()) {
				email = "rn" + value + "@grr.la";
				inputs.setInputValue("EmailAddress", email, false);
				if (cs.setEmailAddressIDValue(email)) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase, "Create Account  : Email Address set to -" + email);
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Email Address.");
					flag = false;
				}
			}

			if (cs.isSendVerificationButtonVisible()) {
				cs.clickOnSendVerificationButton();

				if (!MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
				}

			}
			flag = optikUtils.VerifyScreenLocalization(testCase, "ResendActivationEmailIDAAS");
			String verificationCode = fetchActivateAccountVerificationCode(testCase, email);
			if (!verificationCode.isEmpty()) {
				if (cs.isEnterCodeLabelVisible()) {

				}
				cs.clickOnVerificationCodeField();
				cs.setVerificationCodeValue(verificationCode);

				// Click on Contiue
				// System.out.println("Continue Button: "+cs.isDoneKeyVisible(5));
				if (!MobileUtils.isRunningOnAndroid(testCase)) {

					cs.clickOnDoneKey();
				}

				cs.clickOnContinueButton();

				// Set Password
				flag = optikUtils.VerifyScreenLocalization(testCase, "CreateAccountAndroid2IDDAS");
				if (cs.isPassLabelIDASS()) {
					if (cs.setPassLabelIDASS("Password1")) {

						if (MobileUtils.isRunningOnAndroid(testCase)) {
							MobileUtils.hideKeyboard(testCase.getMobileDriver());
						} else {
							MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
						}
						Keyword.ReportStep_Pass(testCase, "Create Account  : Password set to - Password1");
					} else {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Create Account : Not able to set Password.");
						flag = false;
					}
				}

				if (cs.isConformPassLabelIDASS()) {
					if (cs.setConformPassLabelIDASS("Password1")) {
						if (MobileUtils.isRunningOnAndroid(testCase)) {
							MobileUtils.hideKeyboard(testCase.getMobileDriver());
						} else {
							cs.clickOnDoneKey();
						}
						Keyword.ReportStep_Pass(testCase, "Create Account  : Verify Password set to - Password1");
					} else {
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Create Account : Not able to set Verify Password.");
						flag = false;
					}
				}

				if (MobileUtils.isRunningOnAndroid(testCase)) {
					// MobileUtils.scrollToExactAndroid(testCase ,
					// "Privacy Policy && EULA");
					Schedule.SwipeDown(testCase);
				} else {
					TouchAction action = new TouchAction(testCase.getMobileDriver());
					action.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000)))
							.moveTo(point(250, 250)).release().perform();

				}

				/*
				 * if(cs.isEluaPrivacyPolicyEnableIDDSVisible()) {
				 * Keyword.ReportStep_Pass(testCase,
				 * "Create Account  : Successfully displayed the Eula screen");
				 * } else { Keyword.ReportStep_Fail(testCase,
				 * FailType.FUNCTIONAL_FAILURE,
				 * "Create Account  : Unable to displayed the Eula screen");
				 * flag=false; }
				 */

				if (MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}

				if (MobileUtils.isRunningOnAndroid(testCase)) {
					Schedule.SwipeDown(testCase);
				} else {
					TouchAction action = new TouchAction(testCase.getMobileDriver());
					action.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000)))
							.moveTo(point(250, 250)).release().perform();
				}

				if (cs.isCreateButtonIDAASVisible()) {
					cs.clickOnCreateButtonIDAAS();
				}

				OSPopUps os = new OSPopUps(testCase);
				if (MobileUtils.isRunningOnAndroid(testCase)) {
					if (os.isAcceptButtonVisible(5)) {
						os.clickOnAcceptButton();
					}
				}
				if (os.isIgnoreButtonVisible(5)) {
					os.clickOnIgnoreButton();
				}
				if (os.isAllowButtonVisible()) {
					os.clickOnAllowButton();
				}

				if (ad.isAddNewDeviceHeaderDisplayed(5)) {
					Keyword.ReportStep_Pass(testCase, "Add New Device Screen displayed Successful.");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Add New Device Screen is not displayed");
					flag = false;
				}
			}

		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Account : Enter Code field is not Visible");
			flag = false;
		}
		return flag;
	}


	public static boolean CreateAccountSessionExpiredWithIDDAASEnable(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		Random rn = new Random();
		int value = rn.nextInt();
		String email = "";
		LoginScreen ls = new LoginScreen(testCase);
		CreateAccountScreen cs = new CreateAccountScreen(testCase);
		EULAScreen es = new EULAScreen(testCase);
		PrimaryCard pc = new PrimaryCard(testCase);
		if (ls.isCreateAccountVisible()) {
			ls.navigateToCreateAccountScreen();

			if (cs.isFirstNameIDLabelVisible()) {
				if (cs.setFirstNameIDValue("Automation")) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}

					Keyword.ReportStep_Pass(testCase, "Create Account  : Successfully Set First Name : Automation ");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set First Name.");
					flag = false;
				}

			}
			if (cs.isLastNameIDLabelVisible()) {
				if (cs.setLastNameIDValue("Test")) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase, "Create Account  :Successfully Set Last Name. : Test");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Last Name.");
					flag = false;
				}
			}

			if (cs.isEmailIDLabelVisible()) {
				email = "rn" + value + "@grr.la";
				inputs.setInputValue("EmailAddress", email, false);
				if (cs.setEmailAddressIDValue(email)) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase, "Create Account  : Email Address set to -" + email);
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Email Address.");
					flag = false;
				}
			}

			if (cs.isSendVerificationButtonVisible()) {
				cs.clickOnSendVerificationButton();

				if (!MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
				}

			}

			String verificationCode = fetchActivateAccountVerificationCode(testCase, email);

			if (!verificationCode.isEmpty()) {
				if (cs.isEnterCodeLabelVisible()) {

				}
				cs.clickOnVerificationCodeField();
				pc.isXYZVisible(960);
				cs.setVerificationCodeValue(verificationCode);

				if (!MobileUtils.isRunningOnAndroid(testCase)) {

					cs.clickOnDoneKey();
				}

				cs.clickOnContinueButton();

				Keyword.ReportStep_Pass(testCase, "Create Account  : Device kept on idle for 15 mins");

				if (cs.isSessionExpiredErrorVisible()) {
					Keyword.ReportStep_Pass(testCase, "Create Account  : Error popup " + cs.getSessionExpiredError()
							+ " msg is displayed");

				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Session Expired Popup is not displayed");
					flag = false;
				}

				if (cs.isResendCodeButtonVisible()) {
					cs.clickOnResendCodeButton();

				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Resend Code button is not visible");
					flag = false;
				}

				verificationCode = fetchActivateAccountVerificationCode(testCase, email);

				cs.clickOnVerificationCodeField();

				cs.setVerificationCodeValue(verificationCode);

			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Verification code not received");
				flag = false;
			}

		}
		return flag;
	}

	public static boolean CreateAccount_Rebranding(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		Random rn = new Random();
		int value = rn.nextInt();
		String email = "";
		String email_nogrr = "";
		LoginScreen ls = new LoginScreen(testCase);
		CreateAccountScreen cs = new CreateAccountScreen(testCase);
		EULAScreen es = new EULAScreen(testCase);
		AddNewDeviceScreen ad = new AddNewDeviceScreen(testCase);
		if (ls.isCreateAccountVisible()) {
			ls.navigateToCreateAccountScreen();

			if (cs.isSelectSelectSearchVisible()) {
				if (cs.isSelectCountryVisible()) {
					cs.clickOnSelectCountryButton();
					Keyword.ReportStep_Pass(testCase, "Successfully Clicked on Search Country ");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Not able to click on Search Country");
				}
			}

			if (cs.isFirstNameLabelVisible()) {
				if (cs.setFirstNameValue("ABC")) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}

					Keyword.ReportStep_Pass(testCase, "Create Account  : Successfully Set First Name. ");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set First Name.");
					flag = false;
				}

			}
			if (cs.isLastNameLabelVisible()) {
				if (cs.setLastNameValue("XYZ")) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase, "Create Account  :Successfully Set Last Name.");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Last Name.");
					flag = false;
				}
			}

			if (cs.isEmailLabelVisible()) {
				email = "rn" + value + "@grr.la";
				email_nogrr = "rn" + value;
				inputs.setInputValue("EmailAddress", email, false);
				if (cs.setEmailAddressValue(email)) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase, "Create Account  : Email Address set to -" + email);
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Email Address.");
					flag = false;
				}
			}

			if (cs.isPasswordLabelVisible()) {
				if (cs.setPasswordValue("Password1")) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase, "Create Account  : Password set to - Password1");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Password.");
					flag = false;
				}
			}

			if (cs.isVerifyPasswordLabelVisible()) {
				if (cs.setVerifyPasswordValue("Password1")) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
					}
					Keyword.ReportStep_Pass(testCase, "Create Account  : Verify Password set to - Password1");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Verify Password.");
					flag = false;
				}
			}

			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.scrollToExactAndroid(testCase, "Privacy Policy && EULA");
			} else {
				TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
				CustomDriver driver = testCase.getMobileDriver();
				Dimension dimension = driver.manage().window().getSize();
				touchAction.press(point(10, (int) (dimension.getHeight() * .5)))
						.moveTo(point(0, (int) (dimension.getHeight() * -.4))).release().perform();
				touchAction.press(point(10, (int) (dimension.getHeight() * .5)))
						.moveTo(point(0, (int) (dimension.getHeight() * -.4))).release().perform();
			}

			if (cs.isEluaPrivacyPolicyVisible()) {
				cs.clickonEluaPrivacyPolicy();
			}

			if (es.isEulaAndPrivacyDesc(10)) {
				Keyword.ReportStep_Pass(testCase, "Create Account  : Successfully displayed the Eula screen");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account  : Unable to displayed the Eula screen");
				flag = false;
			}

			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.pressBackButton(testCase, " ");
			} else {
				Schedule sc = new Schedule(testCase);
				sc.clickOnBackButton();
			}

			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				Schedule.SwipeDown(testCase);
			} else {
				TouchAction action = new TouchAction(testCase.getMobileDriver());
				action.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000)))
						.moveTo(point(250, 250)).release().perform();
			}

			if (cs.isCreateButtonVisible()) {
				cs.clickOnCreateButton();

				if (!MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
				}

			}
			OSPopUps os = new OSPopUps(testCase);
			if (!MobileUtils.isRunningOnAndroid(testCase)) {
				if (os.isAlwaysAllowButtonVisible(3)) {
					os.clickOnAlwaysAllowButton();
				}
			}

			if (cs.isResendButtonVisible()) {
				Keyword.ReportStep_Pass(testCase, "Create Account  : Successfully sent User Activation mail");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account  : Unable to sent activate mail");
				flag = false;
			}

			VerifyGuarillaEmail_Rebranding(testCase, inputs, email); // -------------Guerillamail
																		// verification

			if (MobileUtils.isRunningOnAndroid(testCase)) {
				os.AcceptpopUp();
				if (os.isAcceptButtonVisible(5)) {
					os.clickOnAcceptButton();
				}
			}

			if (!MobileUtils.isRunningOnAndroid(testCase)) {

				if (os.isIgnoreButtonVisible(3)) {
					os.clickOnIgnoreButton();
				}

				if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
					flag = flag && ls.clickOnLoginButton();
				}

				ls.setEmailAddressValue(email);
				if (ls.setPasswordValue("Password1")) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						ls.clickOnoptikLogo();
					}
					Keyword.ReportStep_Pass(testCase,
							"Login To optik : Password set to - " + inputs.getInputValue("PASSWORD"));
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Login To optik : Not able to set Password.");
					flag = false;
				}
				if (ls.isLoginButtonVisible()) {
					flag = flag && ls.clickOnLoginButton();
				} else {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
				}
			}

			if (MobileUtils.isRunningOnAndroid(testCase)) {
				if (os.isAcceptButtonVisible(5)) {
					os.clickOnAcceptButton();
				}
			}
			if (os.isIgnoreButtonVisible(3)) {
				os.clickOnIgnoreButton();
			}
			if (os.isAllowButtonVisible()) {
				os.clickOnAllowButton();
			}

			if (ad.isAddNewDeviceHeaderDisplayed(2)) {
				Keyword.ReportStep_Pass(testCase, "Add New Device Screen displayed Successful.");
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Add New Device Screen is not displayed");
				flag = false;
			}
			if (cs.isCameraDevice()) {
				Keyword.ReportStep_Pass(testCase, "Devices ares showing up based on the NA countries");
			}

			/*
			 * if(cs.isCameraDevice()) { cs.ClickOnCameraDevice(); } else {
			 * Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
			 * "Create Account  : Camera device not displayed"); flag=false; }
			 * 
			 * if(cs.isNextVisible()) { cs.ClickOnNext(); } else {
			 * Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
			 * "Create Account  : Next button not disaplyed"); flag=false; }
			 * 
			 * if(cs.isHomeLocVisible()) { cs.ClickOnHomeLoc(); } else {
			 * Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
			 * "Create Account  : Home location not disaplyed"); flag=false; }
			 * 
			 * if(cs.iszipcodeText()) { cs.setZipcode("10007"); }
			 */
			/*
			 * Robot robot; try { robot = new Robot();
			 * robot.keyPress(KeyEvent.VK_ENTER);
			 * robot.keyRelease(KeyEvent.VK_ENTER); } catch (AWTException e) {
			 * e.printStackTrace(); }
			 */

		}
		return flag;
	}

	public static boolean CreateAccountChangeEmail(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		Random rn = new Random();
		int value = rn.nextInt();
		String email = "";
		LoginScreen ls = new LoginScreen(testCase);
		CreateAccountScreen cs = new CreateAccountScreen(testCase);
		EULAScreen es = new EULAScreen(testCase);

		if (ls.isCreateAccountVisible()) {
			ls.navigateToCreateAccountScreen();

			if (cs.isFirstNameIDLabelVisible()) {
				if (cs.setFirstNameIDValue("Automation")) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}

					Keyword.ReportStep_Pass(testCase, "Create Account  : Successfully Set First Name : Automation ");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set First Name.");
					flag = false;
				}

			}
			if (cs.isLastNameIDLabelVisible()) {
				if (cs.setLastNameIDValue("Test")) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase, "Create Account  :Successfully Set Last Name. : Test");
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Last Name.");
					flag = false;
				}
			}

			if (cs.isEmailIDLabelVisible()) {
				email = "rn" + value + "@grr.la";
				inputs.setInputValue("EmailAddress", email, false);
				if (cs.setEmailAddressIDValue(email)) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					} else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase, "Create Account  : Email Address set to -" + email);
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Email Address.");
					flag = false;
				}
			}

			if (cs.isSendVerificationButtonVisible()) {
				cs.clickOnSendVerificationButton();

				if (!MobileUtils.isRunningOnAndroid(testCase)) {
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
				}
			}

			VerifyGuarillaEmail(testCase, inputs, email);

			if (cs.isEnterCodeLabelVisible()) {

			}
			cs.clickOnVerificationCodeField();

			if (cs.isSendVerificationCodeVisible(960)) {

			}
			Keyword.ReportStep_Pass(testCase, "Create Account  : Device kept on idle for 15 mins");

			if (cs.isSessionExpiredErrorVisible()) {
				Keyword.ReportStep_Pass(testCase, "Create Account  : Error popup " + cs.getSessionExpiredError()
						+ " msg is displayed");
				if (cs.isOKButtonVisible()) {
					cs.clickOnOKButton();

				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : OK button is not visible");
					flag = false;
				}

			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Session Expired Popup is not displayed");
				flag = false;
			}

			if (cs.isResendCodeButtonVisible()) {
				cs.clickOnResendCodeButton();

			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Create Account : Resend Code button is not visible");
				flag = false;
			}

			VerifyGuarillaEmail(testCase, inputs, email);

			cs.clickOnVerificationCodeField();

			cs.setVerificationCodeValue("");

		}
		return flag;
	}

	public static String readMapping(TestCases testCase, String fileName, String screenName,String ObjectName)throws IOException
	{

		boolean flag = true ;

		String key = "", value = "" ,androidText = "";
		FileInputStream file = null ;
		try
		{
			file = new FileInputStream(new File(fileName + ".xls")) ;

			// Get the workbook instance for XLS file
			HSSFWorkbook workbook = new HSSFWorkbook(file) ;

			// Get first sheet from the workbook
			HSSFSheet sheet = workbook.getSheet(screenName) ;

			Iterator<Row> rowIterator = sheet.iterator() ;
			while (rowIterator.hasNext())
			{
				flag = true ;
				Row row = rowIterator.next() ;
				// For each row, iterate through each columns
				Iterator<Cell> cellIterator = row.cellIterator() ;
				while (cellIterator.hasNext())
				{

					Cell cell = cellIterator.next() ; //ObjectName
					value = cell.getStringCellValue() ;

					if(value.equalsIgnoreCase(ObjectName))
					{
						Cell cell1 = cellIterator.next() ; //ObjectName
						androidText = cell1.getStringCellValue() ;
						return androidText;
					}
				}

			}

		}
		catch (Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}
		return null;
	}

	public static boolean isLocalizationtextvisible(TestCases testCase,String ObjectName)
	{
		boolean flag=false;
		String lang=testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		String eleList = null;

		try {
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					eleList=optikUtils.readMapping(testCase,lang, "Mapping_Android",ObjectName);
					if(MobileUtils.isMobElementExists("xpath", "//*[contains(@text,'"+eleList+"')]", testCase))
					{
						flag=true;
					}
					else
					{
						flag=false;
					}
				}
				else
				{
					eleList=optikUtils.readMapping(testCase,lang, "Mapping_IOS",ObjectName);
					if(MobileUtils.isMobElementExists("xpath", "//*[contains(@name,'"+eleList+"')]", testCase))
					{
						flag=true;
					}
					else if(MobileUtils.isMobElementExists("xpath", "//*[contains(@value,'"+eleList+"')]", testCase))
					{
						flag=true;
					}
					else
					{
						flag=false;
					}
				}


			}
		 catch (IOException e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}



		return flag;
	}

	public static boolean isClickOnLocalizationtext(TestCases testCase,String ObjectName)
	{
		boolean flag=false;
		String lang=testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		String eleList = null;

		try {
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					eleList=optikUtils.readMapping(testCase,lang, "Mapping_Android",ObjectName);
					if(MobileUtils.clickOnElement(testCase,"xpath", "//*[contains(@text,'"+eleList+"')]",false,false))
					{
						flag=true;
					}
					else
					{
						flag=false;
					}
				}
				else
				{
					eleList=optikUtils.readMapping(testCase,lang, "Mapping_IOS",ObjectName);
					if(MobileUtils.clickOnElement(testCase,"xpath", "//*[contains(@text,'"+eleList+"')]",false,false))
					{
						flag=true;
					}
					else if(MobileUtils.clickOnElement(testCase,"xpath", "//*[contains(@text,'"+eleList+"')]",false,false))
					{
						flag=true;
					}
					else
					{
						flag=false;
					}
				}


			}
		 catch (IOException e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Error occurred : " + e.getMessage());
		}



		return flag;
	}

	public static boolean ScrollToLocalization(TestCases testCase,String ObjectName)
	{


	try {
		String lang=testCase.getTestCaseInputs().getInputValue("LANGUAGE");
		String text=optikUtils.readMapping(testCase,lang, "Mapping_Android",ObjectName);
		MobileUtils.scrollToExactAndroid(testCase, "Desconectar");
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}

	return true;
	}
	public static boolean VerifyPasscodeToggle(TestCases testCase,String language,TestCaseInputs inputs) {
		   // TODO Auto-generated method stub
				boolean flag = true,verify=false ;
				MyAccountScreen de=new MyAccountScreen(testCase,language);
               try
				{
					if(de.isUsePasscodeToggleVisible(5))
					{
						Keyword.ReportStep_Pass(testCase, "Toggle Button visible");

						 if(de.getUsePasscodeToggleStatus().equals("true")||de.getUsePasscodeToggleStatus().equals("1")||de.getUsePasscodeToggleStatus().equals("ON")||de.getUsePasscodeToggleStatus().equals(true))
						{
							Keyword.ReportStep_Pass(testCase, "got status ON toggle button");
						}
						else
							if(de.getUsePasscodeToggleStatus().equals("false")||de.getUsePasscodeToggleStatus().equals("0")||de.getUsePasscodeToggleStatus().equals("OFF")||de.getUsePasscodeToggleStatus().equals(false))
							{
								Keyword.ReportStep_Pass(testCase, "got status OFF toggle button");
							}
							else
						{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Toggle Button is not verified");
						}
					 }
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Toggle Button is not visible");
					}

					}

				catch(Exception e)
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
				}

				return flag;
		}



public static boolean launchAndLoginToApplicationUpgrade(TestCases testCase, TestCaseInputs inputs,
		boolean... closeCoachMarks) {
	boolean flag = true;
	flag = MobileUtils.launchApplication(inputs, testCase, true);
	if(inputs.isInputAvailable("LANGUAGE"))
	{
		flag = flag && optikUtils.closeAppLaunchPopupsLocal(testCase);
	}else
	{
		flag = flag && optikUtils.closeAppLaunchPopups(testCase);
	}


	flag = flag && optikUtils.setAppEnvironment(testCase, inputs);

	flag = flag && optikUtils.loginTooptikApp(testCase, inputs);

	OSPopUps os=null;
	Dashboard d=null;
	if(testCase.getTestCaseInputs().isInputAvailable("LANGUAGE"))
	{
		os = new OSPopUps(testCase,testCase.getTestCaseInputs().getInputValue("LANGUAGE"));
		d = new Dashboard(testCase,testCase.getTestCaseInputs().getInputValue("LANGUAGE"));
	}
	else
	{
		os = new OSPopUps(testCase);
		d = new Dashboard(testCase);
	}if(os.isAllowButtonVisible())
	{
		os.clickOnAllowButton();
	}


	if(os.isDoneButtonVisible())
	{
		os.clickOnDoneButton();
	}

	CoachMarkUtils.closeCoachMarks(testCase);

	if(MobileUtils.isRunningOnAndroid(testCase))
	{
	if(os.isShowButtonVisible())
	{
		os.clickOnShowButton();
	}

	if(os.isUpdateButtonVisible())
	{
		os.clickOnUpdateButton();
	}

	if(os.isAllowButtonVisible())
	{
		os.clickOnAllowButton();
	}

	if(os.isShowButtonVisible(30))
	{
		os.clickOnShowButton();
	}

	if(os.isInstallButtonVisible())
	{
		os.clickOnInstallButton();
	}

	if(os.isShowButtonVisible(60))
	{
		os.clickOnShowButton();
	}

	if(os.isOpenButtonVisible())
	{
		os.clickOnOpenButton();
	}
	}

	if(!(d.isAddNewDeviceHeaderDisplayed(10) || d.isGlobalDrawerButtonVisible(5)))
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
				"Login To optik : Unable to navigate to homepage. Could not find notification icon on homepage");
	}
	else
	{
		Keyword.ReportStep_Pass(testCase, "Upgrade App : Dashboard Screen is launched successfully");
	}
	return flag;
}


public static boolean setToHome(TestCases testCase) {

	SecuritySolutionCardScreen ssc = new SecuritySolutionCardScreen(testCase);
	Dashboard db = new Dashboard(testCase);
	boolean flag = true;
	if(ssc.isHomeIconVisible(3))
	{
	   ssc.ClickOnHomeIcon();
	   Keyword.ReportStep_Pass(testCase, " Successfully clicked on Home Icon ");
	   flag = true;
    }else
    {
    	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not able to select das location");
		flag = false;
    }

	if(db.isSecurityLocVisible(3))
	{
		db.clickOnSecurityLoc();
		Keyword.ReportStep_Pass(testCase, " Successfully selected das location ");
		if(ssc.isSolutionCardStatusTextVisible())
		{
			if(ssc.getSolutionCardStatusText().equalsIgnoreCase("Home")){
				Keyword.ReportStep_Pass(testCase," Solution card status is : Home");
				flag = true;
			}else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," Home not set ");
				flag = false;
			}

			ssc.ClickOnSolnCardbackbtn();
		}else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," status not displayed on solution card ");
			flag = false;
		}

	}else
	{
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not able to select das location");
		flag = false;
	}

	return flag;
}

 public static boolean setToAway(TestCases testCase) {

		SecuritySolutionCardScreen ssc = new SecuritySolutionCardScreen(testCase);
		Dashboard db = new Dashboard(testCase);
		boolean flag = true;
		if(ssc.isAwayIconVisible(3))
		{
		   ssc.ClickOnAwayIcon();
		   Keyword.ReportStep_Pass(testCase, " Successfully clicked on Away Icon ");
		   flag = true;
	    }else
	    {
	    	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not able to select das location");
			flag = false;
	    }

		if(db.isSecurityLocVisible(3))
		{
			db.clickOnSecurityLoc();
			Keyword.ReportStep_Pass(testCase, " Successfully selected das location ");
			if(ssc.isSolutionCardStatusTextVisible())
			{
				if(ssc.getSolutionCardStatusText().equalsIgnoreCase("Away")){
					Keyword.ReportStep_Pass(testCase," Solution card status is : Away");
					flag = true;
				}else{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," Away not set ");
					flag = false;
				}
				ssc.ClickOnSolnCardbackbtn();
			}else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," status not displayed on solution card ");
				flag = false;
			}

		}else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not able to select das location");
			flag = false;
		}

		return flag;
}

public static boolean setToNight(TestCases testCase) {

	SecuritySolutionCardScreen ssc = new SecuritySolutionCardScreen(testCase);
	Dashboard db = new Dashboard(testCase);
	boolean flag = true;
	if(ssc.isNightIconVisible(3))
	{
	   ssc.ClickOnNightIcon();
	   Keyword.ReportStep_Pass(testCase, " Successfully clicked on Night Icon ");
	   flag = true;
    }else
    {
    	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not able to select das location");
		flag = false;
    }

	if(db.isSecurityLocVisible(3))
	{
		db.clickOnSecurityLoc();
		Keyword.ReportStep_Pass(testCase, " Successfully selected das location ");
		if(ssc.isSolutionCardStatusTextVisible())
		{
			if(ssc.getSolutionCardStatusText().equalsIgnoreCase("Night")){
				Keyword.ReportStep_Pass(testCase," Solution card status is : Night");
				flag = true;
			}else{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," Night not set ");
				flag = false;
			}
			ssc.ClickOnSolnCardbackbtn();
		}else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," status not displayed on solution card ");
			flag = false;
		}

	}else
	{
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not able to select das location");
		flag = false;
	}

	return flag;
}

public static boolean setToOff(TestCases testCase) {

	SecuritySolutionCardScreen ssc = new SecuritySolutionCardScreen(testCase);
	Dashboard db = new Dashboard(testCase);
	boolean flag = true;

	if(db.isSecurityLocVisible(3))
	{
		db.clickOnSecurityLoc();
		Keyword.ReportStep_Pass(testCase, " Successfully selected das location ");
		if(ssc.isSolutionCardStatusTextVisible())
		{
			if(ssc.isOffIconVisible(10))
			{
			   ssc.ClickOnOffIcon();
			   Keyword.ReportStep_Pass(testCase, " Successfully clicked on off Icon ");
			   if(ssc.isOKButtonInSetToOffPopupVisible(3))
			   {
			   ssc.clickOnOKButtonInSetToOffPopup();
			   }

			   if(ssc.getSolutionCardStatusText().equalsIgnoreCase("off")){
					Keyword.ReportStep_Pass(testCase," Solution card status is : off");
					flag = true;
				}else{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," off not set ");
					flag = false;
				}
		    }else
		    {
		    	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not able to select das location");
				flag = false;
		    }

		}else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," status not displayed on solution card ");
			flag = false;
		}

	}else
	{
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not able to select das location");
		flag = false;
	}
	return flag;
}

public static boolean VerifyPriorityOptionSelectedFromReviewVacation(TestCases testCase, TestCaseInputs inputs,String deviceToClick) {


	boolean flag=true;
	try {

		PrimaryCard pc= new PrimaryCard(testCase);
		PriorityScreen ps= new PriorityScreen(testCase);
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		String statetype=statInfo.getDeviceType();
		if(statInfo.getJasperDeviceType().contains("NA")||statetype.contains("Blackbeard")||statetype.contains("HoneyBadger"))
		{

			if (pc.clickonPrioritySelectedText())
			{
				switch (deviceToClick.toUpperCase()) {
				case "SELECTED ROOMS":

					if(ps.VerifyPriorityOptionSelected("SELECTED ROOMS"))
					{
						Keyword.ReportStep_Pass(testCase,"Verify Priority selected to 'SELECTED ROOMS' option");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Verify Priority selected to 'SELECTED ROOMS' option");
						flag=false;
					}
					break;
				case "ACTIVE ROOMS":
					if(ps.VerifyPriorityOptionSelected("ACTIVE ROOMS"))
					{
						Keyword.ReportStep_Pass(testCase,"Verify Priority selected to 'ACTIVE ROOMS' option");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Verify Priority selected to 'ACTIVE ROOMS' option");
						flag=false;
					}
					break;

				default:
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Inputs not handled");
					break;
				}
			}
		}
		else
		{

		}

	} catch (Exception e) {
		flag = false;
		Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
				"Error occurred : " + e.getMessage());
	}
	return flag;

}
public static boolean VerifyFanOptionSelectedFromReviewVacation(TestCases testCase, TestCaseInputs inputs,String deviceToClick) {

	boolean flag=true;
	try {
		PrimaryCard pc= new PrimaryCard(testCase);
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		VacationSettingScreen s=new VacationSettingScreen(testCase);
		String statetype=statInfo.getDeviceType();
		String status=s.getVacationSettingsToggleStatus();
		if(status.contains("OFF")||status.contains("0")||status.contains("false"))
				{

					s.clickOnVacationSettingToggle();
				}
		if(statInfo.getJasperDeviceType().contains("NA")||statetype.contains("Blackbeard")||statetype.contains("HoneyBadger"))
		{

			if (s.clickOnFanMode())
			{
				switch (deviceToClick.toUpperCase()) {
				case "ON":

					if(pc.VerifyFanModeOptionSelected("ON"))
					{
						Keyword.ReportStep_Pass(testCase,"Verify Fan mode selected to ON option");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Verify Fan mode selected to ON option");
						flag=false;
					}
					break;
				case "AUTO":
					if(pc.VerifyFanModeOptionSelected("AUTO"))
					{
						Keyword.ReportStep_Pass(testCase,"Verify Fan mode selected to AUTO option");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Verify Fan mode selected to AUTO option");
						flag=false;
					}
					break;
				case "CIRCULATE":
					if(pc.VerifyFanModeOptionSelected("CIRCULATE"))
					{
						Keyword.ReportStep_Pass(testCase,"Verify Fan mode selected to CIRCULATE option");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Verify Fan mode selected to CIRCULATE option");
						flag=false;
					}
					break;


				case "MEDIUM":
					if(pc.VerifyFanModeOptionSelected("MEDIUM"))
					{
						Keyword.ReportStep_Pass(testCase,"Verify Fan mode selected to MEDIUM option");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Verify Fan mode selected to MEDIUM option");
						flag=false;
					}
					break;

				case "LOW":
					if(pc.VerifyFanModeOptionSelected("LOW"))
					{
						Keyword.ReportStep_Pass(testCase,"Verify Fan mode selected to LOW option");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Verify Fan mode selected to LOW option");
						flag=false;
					}

					break;

				case "HIGH":
					if(pc.VerifyFanModeOptionSelected("HIGH"))
					{
						Keyword.ReportStep_Pass(testCase,"Verify Fan mode selected to High option");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to Verify Fan mode selected to High option");
						flag=false;
					}
					break;

				default:
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Inputs not handled");
					break;
				}
			}
		}
		else
		{

		}

	} catch (Exception e) {
		flag = false;
		Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,
				"Error occurred : " + e.getMessage());
	}
	return flag;

}



public static boolean VerifyExpiredResetPasswordThroughGuerrilla(TestCases testCase, TestCaseInputs inputs) {
	boolean flag=true;
	String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
	OSPopUps os = new OSPopUps(testCase,language);
	PrimaryCard pc=new PrimaryCard(testCase);
	try
	{

		if(language.equals("") || language.equals(null) )
		{
			language="English_US";
		}
	}
	catch(Exception e)
	{

	}

	LoginScreen ls = new LoginScreen(testCase,language);
	if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
		flag = flag && ls.clickOnLoginButton();
	}
	if(MobileUtils.isRunningOnAndroid(testCase))
	{
		MobileUtils.hideKeyboard(testCase.getMobileDriver());
	}
	else
	{

	}
	if(ls.isForgotPasswordButtonVisible())
	{
		ls.clickOnForgotPasswordButton();
	}

	ls.setForgotPasswordEmailAddressValue(inputs.getInputValue("USERID").toString());

	if(MobileUtils.isRunningOnAndroid(testCase))
	{
		MobileUtils.hideKeyboard(testCase.getMobileDriver());
	}
	else
	{

	}
	ls.clickonResetButton();

	pc.isXYZVisible(40);


	if(os.isDontAllowButtonVisible())
	{
		os.clickOnDontAllowButton();
	}

pc.isXYZVisible(20);


	flag=flag && VerifyGuarillaResetPasswordExpiredEmail(testCase, inputs, false);

	ls.clickOnForgotResendButton(inputs);
	flag=flag && VerifyResetPasswordThroughGuerrilla(testCase, inputs);


	return flag;

}



public static boolean EditAccountNegativeWithEmptyField(TestCases testCase, TestCaseInputs inputs) {
	boolean flag =true;
	String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");

	if(language.equals("") || language.equals(null) ){
		language="English_US";
	}
	MyAccountScreen mas=new MyAccountScreen(testCase,language);
	SecondaryCardSettings scs=new SecondaryCardSettings(testCase,language);


	if(mas.isNameLabelVisible())
	{
		Keyword.ReportStep_Pass(testCase, "Edit Account: Name label displayed");
		mas.clickOnNameLabel();
		Keyword.ReportStep_Pass(testCase, "Edit Account: click on Name label");

			}
	String firstName, lastName;
	firstName= mas.getFirstNameFieldValue();
	lastName= mas.getLastNameFieldValue();

	if(mas.isFirstNameFieldLabelVisible(10))
	{
		Keyword.ReportStep_Pass(testCase, "Edit Account: First Name label visible");
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			 mas.setFirstNameFieldValue("");
			Keyword.ReportStep_Pass(testCase, "Edit Account: Delete First Name label Field");
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}
		else
		{
			mas.ClearFirstNameFieldValue();
			Keyword.ReportStep_Pass(testCase, "Edit Account: Successfully Set First Name label Empty");
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
			mas.clickOnLastNameFieldLabelButton();
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");

		}

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			if(mas.isSaveEnabled())
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Save button should visible on empty first name : ", false);
			}
			else{
				Keyword.ReportStep_Pass(testCase, "Save Button invisible on empty first name ...passed");
			}
		}
		else
		{
			if(mas.isSaveButtonEnabled_IOS())
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Save button should visible on empty first name : ", false);
			}
			else{
				Keyword.ReportStep_Pass(testCase, "Save Button invisible on empty first name ...passed");
			}
		}
			 mas.setFirstNameFieldValue("FirstNameField");
			 Keyword.ReportStep_Pass(testCase, "Edit Account: Successfully Set First Name");
			  if(MobileUtils.isRunningOnAndroid(testCase))
	      		{
				  mas.clearTextField("LastNameField"); 
	      		}
			  else{
				  mas.ClearLastNameFieldValue();
			  }
			 Keyword.ReportStep_Pass(testCase, "Edit Account: Delete Last Name label Field");
              if(MobileUtils.isRunningOnAndroid(testCase))
      		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
      		}
              else
              {
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
              }
              if(MobileUtils.isRunningOnAndroid(testCase))
      		{
      			if(mas.isSaveEnabled())
      			{
      				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Save button should visible on empty first name : ", false);
      			}
      			else{
      				Keyword.ReportStep_Pass(testCase, "Save Button invisible on empty first name ...passed");
      			}
      		}
      		else
      		{
      			if(mas.isSaveButtonEnabled_IOS())
      			{
      				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Save button should visible on empty first name : ", false);
      			}
      			else{
      				Keyword.ReportStep_Pass(testCase, "Save Button invisible on empty first name ...passed");
      			}
      		}


			String firstname=mas.getRandomRoomName();
			String Lastname=mas.getRandomRoomName();
		 mas.setFirstNameFieldValue(firstname);
		 Keyword.ReportStep_Pass(testCase, "Edit Account: Successfully Set First Name");
		 mas.setLastNameFieldValue(Lastname);
		 Keyword.ReportStep_Pass(testCase, "Edit Account: Successfully Set Last Name");
		    if(MobileUtils.isRunningOnAndroid(testCase))
      		{
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
      		}
              else
              {
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
              }
		if(mas.isSaveButtonVisible())
		{
			mas.clickOnSaveButton();
		}
}
	return flag;

}


private static String getVerificationCode(TestCases testCase, TestCaseInputs inputs) {
	List<MobileElement> sa = testCase.getMobileDriver().findElements(By.xpath("//*[@index='5' and @class='android.view.View']"));
	for(MobileElement temp : sa)
	{

		if((temp.getText().length()==6))
		{
			return temp.getText();
		}
	}
	return null;
}


public static boolean CreateAccountWrongNewPasswordWithIDDAASEnable(TestCases testCase, TestCaseInputs inputs) {
	boolean flag=true;
Random rn = new Random();
int value = rn.nextInt();
String email="";
LoginScreen ls=new LoginScreen(testCase);
CreateAccountScreen cs=new CreateAccountScreen(testCase);
EULAScreen es=new EULAScreen(testCase);
AddNewDeviceScreen ad=new AddNewDeviceScreen(testCase);
if(ls.isCreateAccountVisible())
{
	ls.navigateToCreateAccountScreen();


	if(cs.isFirstNameIDLabelVisible())
	{
		if(cs.setFirstNameIDValue("Automation"))
		{
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			else {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
			}

			Keyword.ReportStep_Pass(testCase,
					"Create Account  : Successfully Set First Name : Automation ");
		}
		else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Account : Not able to set First Name.");
			flag = false;
		}

	}
	if(cs.isLastNameIDLabelVisible())
	{
		if(cs.setLastNameIDValue("Test"))
		{
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}else {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
			}
			Keyword.ReportStep_Pass(testCase,
					"Create Account  :Successfully Set Last Name. : Test");
		}
		else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Account : Not able to set Last Name.");
			flag = false;
		}
	}

	if(cs.isEmailIDLabelVisible())
	{
		email="rn"+value+"@grr.la";
		inputs.setInputValue("EmailAddress", email, false);
		if (cs.setEmailAddressIDValue(email)) {
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}else {
				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
			}
			Keyword.ReportStep_Pass(testCase,
					"Create Account  : Email Address set to -"+email);
		} else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Create Account : Not able to set Email Address.");
			flag = false;
		}
	}


	if(cs.isSendVerificationButtonVisible())
	{
		cs.clickOnSendVerificationButton();

		if(!MobileUtils.isRunningOnAndroid(testCase))
		{
			MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
		}

	}

	CreateAccountGuerrila(testCase, inputs, email);

		cs.clickOnVerificationCodeField();

		cs.setVerificationCodeValue(inputs.getInputValue("VERIFICATIONCODE"));
		if(cs.isSendVerificationCodeVisible(960))
				{
			cs.clickOnSendVerificationButton();
				}
		Keyword.ReportStep_Pass(testCase,
				"successfully click Send verification");
		
	if(cs.isContinueButtonVisible())
	{
		cs.clickOnContinueButton();
	}
	if(cs.isPassLabelIDASS())
	{
		cs.setPassLabelIDASS("Password@");
	}
	if(cs.isConformPassLabelIDASS())
	{
		cs.setConformPassLabelIDASS("Password1234");
	}


if(cs.isCnfWrongPassErrvisible())
{
	Keyword.ReportStep_Pass(testCase,
			"successfully verify wrong pass"+cs.getCnfWrongPassErr());
	}
else
{

	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
			"Create Account : Wrong password Error not found");
	}


if(cs.isContinueButtonVisible())
{
	cs.clickOnContinueButton();
}
if(cs.isPassLabelIDASS())
{
	cs.setPassLabelIDASS("Password1");
}
if(cs.isConformPassLabelIDASS())
{
	cs.setConformPassLabelIDASS("Password1");
}
if(ad.isAddNewDeviceHeaderDisplayed(2)){
	
	{
		Keyword.ReportStep_Pass(testCase, "Add New Device Screen displayed Successful.");
	}
		if(cs.isCameraDevice())
	{
		Keyword.ReportStep_Pass(testCase, "Devices ares showing up based on the NA countries");
	}
}


}
return flag;
}


public static boolean VerifyNegExpiredResetPasswordThroughGuerrilla(TestCases testCase, TestCaseInputs inputs) {
	boolean flag=true;
	String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
	LoginScreen ls = new LoginScreen(testCase);
	ForgotPasswordScreen fp = new ForgotPasswordScreen(testCase);
	if (ls.isLoginButtonVisible() && !ls.isEmailAddressTextFieldVisible()) {
		flag = flag && ls.clickOnLoginButton();
	}
	if(fp.isEmailVisible())
				{
		Keyword.ReportStep_Pass(testCase,"Forgot password :Successfully Verified the user notices the empty Email Field displayed");
				}
	     else
	   {
		flag=false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Forgot password: Not able to find Email Field", false);
	   }


		if(fp.isPasswordFieldVisible())
				{

					Keyword.ReportStep_Pass(testCase,"Forgot password :Successfully Verified the user notices the empty Password Field displayed");
				}
		  else
		   {
			flag=false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Forgot password: Not able to find Password Field", false);
		   }


    	if(fp.isCancelVisible())
				{
					Keyword.ReportStep_Pass(testCase,"Forgot password :Successfully Verified the user notices the Cancel Button displayed");
				}
				else
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Forgot password: Not able to find Cancel Button", false);
				}
    	if (MobileUtils.isRunningOnAndroid(testCase)) {
			MobileUtils.hideKeyboard(testCase.getMobileDriver());
		}
           else
			{

				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
				if(ls.isoptikLogoVisible())
				{
				ls.clickOnoptikLogo();
				}
			}
		if(fp.isForgotpwdVisible())
				{
			Keyword.ReportStep_Pass(testCase,"Forgot password:Successfully Verified the user notices the Forgot Password displayed");
				fp.clickOnForgotpwdButton();

					if(fp.isEmailVisible())
					{
					}

	                 if (ls.setEmailAddressValue(GlobalVariables.valid_EmailID_space))
						{
							if (MobileUtils.isRunningOnAndroid(testCase)) {
								MobileUtils.hideKeyboard(testCase.getMobileDriver());
							}
				               else
								{

									MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
									if(ls.isoptikLogoVisible())
									{
									ls.clickOnoptikLogo();
									}
								}


							Keyword.ReportStep_Pass(testCase,
									"Forgot password : Email Address set to - " + GlobalVariables.valid_EmailID_space);

								 Keyword.ReportStep_Pass(testCase,
											"Forgot password : Successfully Verified the Reset button should be greyed out" );



						}
						else {
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Forgot password : Not able to set Email Address.");
							flag = false;
						}
				}

		      if (ls.setEmailAddressValue(inputs.getInputValue("USERID").toString())) {
			  if (MobileUtils.isRunningOnAndroid(testCase)) {
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
		  	Keyword.ReportStep_Pass(testCase,
					" Email Address set to - " + inputs.getInputValue("USERID"));
		    } else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Not able to set Email Address.");
			flag = false;
		}

		      if(fp.clickOnResetbuttonButton())
				{
					Keyword.ReportStep_Pass(testCase,"Forgot password :Successfully Click on  Reset Button");
				}
				else
				{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Forgot password: Not able to find Cancel Button", false);
				}

		      if(fp.isresetPasseordMsg())
		      {
		    	  Keyword.ReportStep_Pass(testCase,
							"Forgot password :  Msg display is"+fp.getresetPasseordMsg());
		      }

		      flag=flag && VerifyGuarillaResetPasswordExpiredEmail(testCase, inputs, false);

		  	ls.clickOnForgotResendButton(inputs);
		  flag=flag && openBrowserResetPassword(testCase, inputs, false);



	return flag;

}


public static boolean VerifyZwaveconfiguratonOption(TestCases testCase, TestCaseInputs inputs ){
	boolean flag=true;
	 ZwaveScreen zw=new ZwaveScreen(testCase);
     if(zw.isNamingFieldDisplayed()){
		 Keyword.ReportStep_Pass(testCase,"Name field is displaying ");
		 flag=true;

	 }
	 else{
		 Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Name field is not shown");
		 flag=false;
	 }
	 if(zw.verifyPresenceOfSwitchStatus()){
		 Keyword.ReportStep_Pass(testCase,"Status Toggle field is displaying ");
		 Keyword.ReportStep_Pass(testCase,"Status:"+zw.getSwitchStatus());
		 flag=true;
	 }
	 else{
		 Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Status field is not shown");
		 flag=false;
	 }
	String  sa=zw.getModelandFirmwareDetailsDisplayed();
	 if(sa!=null){
		 Keyword.ReportStep_Pass(testCase,"model firmware is  displaying; "+sa);
		 flag=true;
	 }
	 else{
		 Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"model firmware is not   displaying");
		 flag=false;
	 }

	 return flag;
			}


public static void verifyCameraSettingScreenOption(TestCases testCase) {
	boolean flag=true;
	CameraSettings cs =new CameraSettings(testCase);
	CameraMode cm=new CameraMode(testCase);

	if(cs.isCameraModeButtonVisible(5))
	{
		Keyword.ReportStep_Pass(testCase , "Successfully navigate Camera Mode on camera setting screen") ;
		cs.clickOnCameraModeButton();
	}
	else
	{
		Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION , "Not able to navigate Camera Mode on camera setting screen'") ;
		flag = false ;
	}

	if(cs.isCameraGeofencevisible())
	{
		Keyword.ReportStep_Pass(testCase , "Successfully click on Camera Geofence on camera mode screen") ;
		cs.clickOnCameraGeofence();
	}
	else
	{
		Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION , "Not able to click Camera Geofence on camera mode screen'") ;
		flag = false ;
	}

	if(cs.isOkbutton())
	{
		Keyword.ReportStep_Pass(testCase , "Successfully click on Ok popup") ;
		cs.clickOnOKbutton();
	}


	cm.clickOnBackButton();

	if(cs.isNightVisionButtonVisible(5))
	{
		Keyword.ReportStep_Pass(testCase , "Successfully Navigate Night Vision on camera setting screen") ;
		cs.clickOnNightVisionButton();
	}
	else
	{
		Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION , "Not able to click Night Vision on camera setting screen'") ;
		flag = false ;
	}

	if(cs.isAutoNightVisionVisible())
	{
		Keyword.ReportStep_Pass(testCase , "Successfully verified auto night vision option") ;
	}
	else
	{
		Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION , "Not able to verified auto night vision option'") ;
		flag = false ;
	}

	if(cs.isONNightVisionVisible())
	{
		Keyword.ReportStep_Pass(testCase , "Successfully verified ON night vision option") ;
	}
	else
	{
		Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION , "Not able to verified ON night vision option'") ;
		flag = false ;
	}
	if(cs.isOFFNightVisionVisible())
	{
		Keyword.ReportStep_Pass(testCase , "Successfully verified OFF night vision option") ;
	}
	else
	{
		Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION , "Not able to verified OFF night vision option'") ;
		flag = false ;
	}

	if(cs.isAutoNightvisionclickable())
	{
		Keyword.ReportStep_Pass(testCase , "Successfully verified auto night vision option is clickable") ;
	}
	else
	{
		Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION , "Not able to verified auto night vision option is clickable'") ;
		flag = false ;
	}
	cm.clickOnBackButton();
	if(cs.isVideoQualityButtonVisible(5))
	{
		Keyword.ReportStep_Pass(testCase , "Successfully Navigate Video Quality on camera setting screen") ;
		cs.clickOnVideoQualityButton();

	}
	else
	{
		Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION , "Not able to navigate  Video Quality on camera setting screen'") ;
		flag = false ;
	}
	if(cs.isAutoVideoQualityVisible())
	{

		Keyword.ReportStep_Pass(testCase , "Successfully verified auto Video Quality option") ;
	}
	else
	{
		Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION , "Not able to verified auto Video Quality option'") ;
		flag = false ;
	}
	if(cs.isHighVideoQualityVisible())
	{
		Keyword.ReportStep_Pass(testCase , "Successfully verified High Video Quality option") ;
	}
	else
	{
		Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION , "Not able to verified High Video Quality option'") ;
		flag = false ;
	}


	if(cs.isLOWVideoQualityVisible())
	{
		Keyword.ReportStep_Pass(testCase , "Successfully verified Low Video Quality option") ;
	}
	else
	{
		Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION , "Not able to verified Low Video Quality option'") ;
		flag = false ;
	}


	if(cs.isAutovideoqualityclickable())
	{
		Keyword.ReportStep_Pass(testCase , "Successfully verified auto video quality option is clickable") ;
	}
	else
	{
		Keyword.ReportStep_Fail(testCase , FailType.FRAMEWORK_CONFIGURATION , "Not able to verified auto video quality option is clickable'") ;
		flag = false ;
	}

	cm.clickOnBackButton();
	if(!MobileUtils.isRunningOnAndroid(testCase))
	{

		MobileUtilsLocal ls=new MobileUtilsLocal();
		ls.swipe(testCase);
		ls.swipe(testCase);
	}else
	{
		TouchAction action = new TouchAction(testCase.getMobileDriver());

		action.press(point(350, 900)).waitAction(waitOptions(MobileUtils.getDuration(2000))).moveTo(point(250, 250)).release().perform();

	}
	String status = "";
	String status1 = "";
	status=cs.getCameraLED();
	Keyword.ReportStep_Pass(testCase , "Successfully verified Camera LED Status:"+status) ;
	if(status.equalsIgnoreCase("OFF")|| status.equalsIgnoreCase("0"))
	{
		cs.clickOnLEDCameraToggleButton();

		Keyword.ReportStep_Pass(testCase , "Successfully click on camera LED toggle ON option") ;

		if(cs.isOkbutton())
		{
			Keyword.ReportStep_Pass(testCase , "Successfully click on Ok popup") ;
			cs.clickOnOKbutton();
		}

	}
	else if(status.equalsIgnoreCase("ON")|| status.equalsIgnoreCase("1"))
	{
		cs.clickOnLEDCameraToggleButton();
		Keyword.ReportStep_Pass(testCase , "Successfully click on camera LED toggle OFF option") ;

		if(cs.isOkbutton())
		{
			Keyword.ReportStep_Pass(testCase , "Successfully click on Ok popup") ;
			cs.clickOnOKbutton();
		}

	}
	status1=cs.getCameramicrophone();

	if(status1.equalsIgnoreCase("OFF") || status1.equalsIgnoreCase("0"))
	{

		cs.clickOnCameraMicrophoneToggleButton();
		Keyword.ReportStep_Pass(testCase , "Successfully click on camera Microphone Toggle  ON option") ;

		if(cs.isOkbutton())
		{
			Keyword.ReportStep_Pass(testCase , "Successfully click on Ok popup") ;
			cs.clickOnOKbutton();
		}

	}
	else if(status1.equalsIgnoreCase("ON") || status1.equalsIgnoreCase("1"))
			{

				cs.clickOnCameraMicrophoneToggleButton();
				Keyword.ReportStep_Pass(testCase , "Successfully click on camera Microphone Toggle  ON option") ;

				if(cs.isOkbutton())
				{
					Keyword.ReportStep_Pass(testCase , "Successfully click on Ok popup") ;
					cs.clickOnOKbutton();
				}

			}

}

public static boolean VerifyVentilationOption(TestCases testCase, TestCaseInputs inputs) {
	boolean flag = true;
	PrimaryCard pc = new PrimaryCard(testCase);
	if (pc.isMoreTextVisible(5)) {
		pc.clickonMoreText();
	}

		if (pc.isVentilationOptionVisible(5)) {

			Keyword.ReportStep_Pass(testCase, "Primary Card: Ventilation option is visible");
			if (pc.clickonVentilationOption()) {
				Keyword.ReportStep_Pass(testCase, "Primary Card: click on ventilation option");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Primary Card: Failed to click on ventilation option");
			}
			 if(pc.isStopTimerVisible()){
		       	 pc.clickOnStopTimer();
		         }
			if(pc.isVentilationHeaderVisible(5))

			{
				Keyword.ReportStep_Pass(testCase, "Ventilation: successfully navigated to Ventilation screen");

				pc.clickOnVentilationAutoMode();
			   if(pc.isVentilationAutoModeMsgVisible())
			   {
				   Keyword.ReportStep_Pass(testCase,"Ventilation : Auto mode is selected");
				   if(pc.isRunVentilationNowVisible())
				   {
					   Keyword.ReportStep_Pass(testCase, "Ventilation: Run ventilation now button is visible");
				   }

				   if(pc.clickOnVentilationOnMode())
				   {
					   Keyword.ReportStep_Pass(testCase, "Ventilation: On  mode is selected");
				   }
				   if(pc.ClickOnSaveButton())
				   {
					   Keyword.ReportStep_Pass(testCase, "Ventilation: Click on save button");
				   }
			   }
			   else if(pc.isVentilationOffModeMsgVisible())
			   {
				   Keyword.ReportStep_Pass(testCase,"Ventilation : Off mode is selected");
				   if(pc.isRunVentilationNowVisible())
				   {
					   Keyword.ReportStep_Pass(testCase, "Ventilation: Run ventilation now button is visible");
				   }
			   }
			   else if(pc.isVentilationOnModeMsgVisible())
			   {
				   Keyword.ReportStep_Pass(testCase,"Ventilation : On mode is selected");
				   if(!pc.isRunVentilationNowVisible())
				   {
					   Keyword.ReportStep_Pass(testCase, "Ventilation: Run ventilation now button is visible");
				   }
			   }

			   if (pc.isMoreTextVisible(5)) {
					pc.clickonMoreText();
			   }
					if (pc.isVentilationOptionVisible(5)) {

						Keyword.ReportStep_Pass(testCase, "Primary Card: Ventilation option is visible");
						if (pc.clickonVentilationOption()) {
							Keyword.ReportStep_Pass(testCase, "Primary Card: click on ventilation option");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Primary Card: Failed to click on ventilation option");
						}
					}

					if(pc.isVentilationOnModeMsgVisible())
					   {
						   Keyword.ReportStep_Pass(testCase,"Ventilation : On mode is selected");
						   if(!pc.isRunVentilationNowVisible())
						   {
							   Keyword.ReportStep_Pass(testCase, "Ventilation: Run ventilation now button is not visible");
						   }

						   if(pc.clickOnVentilationOffMode())
						   {
							   Keyword.ReportStep_Pass(testCase, "Ventilation: Off  mode is selected");
						   }
						   if(pc.isRunVentilationNowVisible())
						   {
							   Keyword.ReportStep_Pass(testCase, "Ventilation: Run ventilation now button is visible");
						   }
						   if(pc.ClickOnSaveButton())
						   {
							   Keyword.ReportStep_Pass(testCase, "Ventilation: Click on save button");
						   }
					   }



					if (pc.isMoreTextVisible(5)) {
						pc.clickonMoreText();
				   }
						if (pc.isVentilationOptionVisible(5)) {

							Keyword.ReportStep_Pass(testCase, "Primary Card: Ventilation option is visible");
							if (pc.clickonVentilationOption()) {
								Keyword.ReportStep_Pass(testCase, "Primary Card: click on ventilation option");
							} else {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
										"Primary Card: Failed to click on ventilation option");
							}
						}

						if(pc.isVentilationOffModeMsgVisible())
						   {
							   Keyword.ReportStep_Pass(testCase,"Ventilation : Off mode is selected");
							   if(!pc.isRunVentilationNowVisible())
							   {
								   Keyword.ReportStep_Pass(testCase, "Ventilation: Run ventilation now button is not visible");
							   }

							   if(pc.ClickOnSaveButton())
							   {
								   Keyword.ReportStep_Pass(testCase, "Ventilation: Click on save button");
							   }
						   }

			}
			else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Ventilation: Failed to navigate to ventilation screen");
			}

		}
		else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Primary Card: Ventilation option is not visible");
		}



	return flag;

}

public static boolean VerifyEnableDisableDeHumidification(TestCases testCase, TestCaseInputs inputs) {
	boolean flag = true;
	PrimaryCard pc = new PrimaryCard(testCase);

	if (pc.isMoreTextVisible(5)) {
		pc.clickonMoreText();

		if (pc.isScheduleVisible()) {
			Keyword.ReportStep_Pass(testCase, "Primary Card: Schedule icon is visible");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Primary Card: Schedule icon is not visible");
		}
		if (pc.isVentilationOptionVisible(5)) {

			Keyword.ReportStep_Pass(testCase, "Primary Card: Ventilation option is visible");
		}
		else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Primary Card: Ventilation option is not visible");
		}

		if (pc.isHumidifyOptionVisible(5)) {
			Keyword.ReportStep_Pass(testCase, "Primary Card: Dehumidify option is visible");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Primary Card: Dehumidify option is not visible");
		}
		if (pc.isDehumidifyOptionVisible(5)) {
			Keyword.ReportStep_Pass(testCase, "Primary Card: DeHumidify option is visible");
			if (pc.clickonDehumidifyOption()) {
				Keyword.ReportStep_Pass(testCase, "Primary Card: click on Dehumidify option");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Primary Card: doesnt click on Dehumidify option");
			}

			if(pc.isDeHunidificationDisableTaptoUnableVisible())
			{
				pc.clickOnOptionButton();
				if(pc.clickOnEnableDeHunidification())
				{

					Keyword.ReportStep_Pass(testCase, "option page:click on Enable Dehumidification");

				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"option page:Doesnt click on Enable Dehumidify");
				}

			}
			if (pc.isBackButtonAvailable()) {
				Keyword.ReportStep_Pass(testCase, "Dehumidify page: back button is visible");
			} else if(pc.isCrossButtonVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Humidification page: back button is visible");	
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Dehumidify page: back button is not visible");
			}

			if (pc.isOptionButtonvisible()) {

				Keyword.ReportStep_Pass(testCase, "Dehumidify page:Option button is visible");
				pc.clickOnOptionButton();
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Dehumidify page: option button is not visible");
			}


			if (pc.isCancelButtonVisible()) {

				Keyword.ReportStep_Pass(testCase, "option page:cancel button is visible");

			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"option page:cancel button is not visible");
			}

			if (pc.isDisableDeHunidificationvisible()) {
				pc.clickOnDisableDeHumidification();
				Keyword.ReportStep_Pass(testCase, "option page:Disable Dehumidify is visible");

			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"option page:disable Dehumidify is not visible");
			}
			if (pc.isDeHunidificationDisableTaptoUnableVisible()) {
				Keyword.ReportStep_Pass(testCase, "option page: Dehumidify Disable Tap to Unable  massage is display");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "option page:Dehumidify Disable Tap to Unable  massage is display not display");
			}

		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Primary Card: Dehumidify option is not visible");
		}


		if (MobileUtils.isRunningOnAndroid(testCase)) {
			testCase.getMobileDriver().navigate().back();
		} else {
			/*TouchAction ds = new TouchAction(testCase.getMobileDriver());
		ds.press(604, 1142)).release().perform();*/
			pc.ClickOnBackButton();

		}




		if (pc.isMoreTextVisible(5))
		{
			pc.clickonMoreText();
			pc.clickonDehumidifyOption();
			if (pc.isDeHunidificationDisableTaptoUnableVisible()) {
				Keyword.ReportStep_Pass(testCase, "Verify Dehumidification disable is display");
			} else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to Verify dehumidification is disable");
			}
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				testCase.getMobileDriver().navigate().back();
			} else {
				/*TouchAction ds = new TouchAction(testCase.getMobileDriver());
		ds.press(point(604, 1142)).release().perform();*/
				pc.ClickOnBackButton();

			}

		}

	} else {
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Primary Card: More option is not visible");

	}
	return flag;
}

public static boolean VerifySensorDisableDeleteButton(TestCases testCase) {
	SensorStatusScreen ss=new SensorStatusScreen(testCase);
	boolean flag=true;
		if(ss.getStatusOfDeleteStatusToggle().equalsIgnoreCase("OFF")||ss.getStatusOfDeleteStatusToggle().equalsIgnoreCase("0")||ss.getStatusOfDeleteStatusToggle().equalsIgnoreCase("false"))
		{
			Keyword.ReportStep_Pass(testCase,"Delete Option is disabled,You can Perform This Action only inHome or Off Mode");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Delete Option is enable");
		}
		return flag;

	}

public static boolean VerifyVoiceCmdOption(TestCases testCase){
	boolean flag=true;
	SecuritySolutionCardScreen sc=new SecuritySolutionCardScreen(testCase);
	if(sc.isOksecurityVoicecmdVisible())
	{
		 Keyword.ReportStep_Pass(testCase,"Ok security Voice Command is visible");
		 flag=true;
	}
	else
	{
		 Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Ok security Voice Command is not visible");
		 flag=false;
	}

	String  sa=sc.getOksecurityVoicecmdDesc();
	 if(sa!=null){
		 Keyword.ReportStep_Pass(testCase,"OK Security voice Command Description is  displaying; "+sa);
		 flag=true;
	 }
	 else{
		 Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"OK Security voice Command Description is not   displaying");
		 flag=false;
	 }

		if(sc.isTriggerPhraseHeaderVisible())
		{
			 Keyword.ReportStep_Pass(testCase,"Trigger Phrase Command is visible");
			 flag=true;
		}
		else
		{
			 Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Trigger Phrase Command is not visible");
			 flag=false;
		}

		String  sa1=sc.getTriggerPhraseDes();
		 if(sa1!=null){
			 Keyword.ReportStep_Pass(testCase,"Trigger Phrase Command Description is  displaying; "+sa1);
			 flag=true;
		 }
		 else{
			 Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Trigger Phrase Command Description is not   displaying");
			 flag=false;
		 }

		 if(sc.isSecurityCmdHeaderVisible())
			{
				 Keyword.ReportStep_Pass(testCase,"Security Command is visible");
				 flag=true;
			}
			else
			{
				 Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Security Command is not visible");
				 flag=false;
			}
		 String  sa2=sc.getSecurityCmdDesc();
		 if(sa2!=null){
			 Keyword.ReportStep_Pass(testCase,"Security Command Description is  displaying; "+sa2);
			 flag=true;
		 }
		 else{
			 Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Security Command Description is not   displaying");
			 flag=false;
		 }
		 MobileUtils.swipe(testCase, 500, 1000, 50, 560);

		 if(sc.isCameracmdHeaderVisible())
			{
				 Keyword.ReportStep_Pass(testCase,"Camera Command is visible");
				 flag=true;
			}
			else
			{
				 Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Camera Command is not visible");
				 flag=false;
			}

		 String  sa3=sc.getCameracmdDesc();
		 if(sa3!=null){
			 Keyword.ReportStep_Pass(testCase,"Camera Command Description is  displaying; "+sa2);
			 flag=true;
		 }
		 else{
			 Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Camera Command Description is not   displaying");
			 flag=false;
		 }


	 return flag;
			}

public static boolean VerifysetwindowprotectionOptions(TestCases testCase, TestCaseInputs inputs)
{
	PrimaryCard pc = new PrimaryCard(testCase);
	boolean flag = true;
    if (pc.isMoreTextVisible(5)) {
		pc.clickonMoreText();
		}

	if (pc.isHumidifyOptionVisible(5)) {
		Keyword.ReportStep_Pass(testCase, "Primary Card: Humidify option is visible");
		if (pc.clickonHumidifyOption()) {
			Keyword.ReportStep_Pass(testCase, "Primary Card: click on humidify option");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Primary Card: doesnt click on humidify option");
		}

	if(pc.isHunidificationDisableTaptoUnableVisible())
	{
		pc.clickOnOptionButton();
		if(pc.clickOnEnableHunidification())
		{

			Keyword.ReportStep_Pass(testCase, "option page:click on Enable humidification");

		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"option page:Doesnt click on Enable humidification");
		}

	}

	if (pc.isOptionButtonvisible()) {

		Keyword.ReportStep_Pass(testCase, "Humidification page:Option button is visible");
		pc.clickOnOptionButton();
	} else {
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
				"Humidification page: option button is not visible");
	}

	if (pc.isSetWindowProtectionvisible()) {
		pc.clickOnSetWindowProtection();
	}
	if(move(testCase, inputs,"1","10","1","1"))
	{
		Keyword.ReportStep_Pass(testCase, "Scroll bar with the default min value of"+pc.getProgresBarStatus());

	}
	else
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default min value of 1");
	}


	if(move(testCase, inputs,"1","10","1","10"))
	{
		Keyword.ReportStep_Pass(testCase, "Scroll bar with the default Max value of"+pc.getProgresBarStatus());

	}
	else
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default min value of 10");
	}

	if(move(testCase, inputs,"1","10","1","5"))
	{
		Keyword.ReportStep_Pass(testCase, "Scroll bar with the change value of"+pc.getProgresBarStatus());

	}
	else
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default min value of 10");
	}
	if(pc.isSaveVisible())
	{
		pc.clickOnSave();
		}

	if(pc.isWindowProtectionLimitvisible())
	{
		Keyword.ReportStep_Pass(testCase, "Window protection limit display in Humidity page id"+pc.getWindowProtectionLimitValue());
	}
	else
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Window protection limit");
	}
	} else {
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
				"option page:set window protection is not visible");
	}
	return flag;

}



public static boolean setHumidity(TestCases testCase, TestCaseInputs inputs)
{
	PrimaryCard pc = new PrimaryCard(testCase);
	boolean flag = true;
	if (pc.isMoreTextVisible(5)) {
		pc.clickonMoreText();
		}

	if (pc.isHumidifyOptionVisible(5)) {
		Keyword.ReportStep_Pass(testCase, "Primary Card: Humidify option is visible");
		if (pc.clickonHumidifyOption()) {
			Keyword.ReportStep_Pass(testCase, "Primary Card: click on humidify option");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Primary Card: doesnt click on humidify option");
		}
	}

	if(pc.isHunidificationDisableTaptoUnableVisible())
	{
		pc.clickOnOptionButton();
		if(pc.clickOnEnableHunidification())
		{

			Keyword.ReportStep_Pass(testCase, "option page:click on Enable humidification");

		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"option page:Doesnt click on Enable humidification");
		}

	}
	if (!MobileUtils.isRunningOnAndroid(testCase)) {
	if(move(testCase, inputs,"1","10","1","10"))
	{
		Keyword.ReportStep_Pass(testCase, "Scroll bar with the default min value of 10%");

	}
	else
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default min value of 10%");
	}
	if(move(testCase, inputs,"1","10","1","60"))
	{
		Keyword.ReportStep_Pass(testCase, "Scroll bar with the default Max value of 60%");

	}
	else
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default max value of 60%");
	}

    if(move(testCase, inputs,"1","10","1","35"))
{
	Keyword.ReportStep_Pass(testCase, "Scroll bar with the Appropriate value of 35%");

}
else
{
	flag = false;
	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default Appropriate value of 25%");
}
	}
	else
	{
		if(Changeslidervalue(testCase, 10))
		{
			Keyword.ReportStep_Pass(testCase, "Scroll bar with the default min value of 10%");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default min value of 10%");
		}
		if(Changeslidervalue(testCase, 60))
		{
			Keyword.ReportStep_Pass(testCase, "Scroll bar with the default Max value of 60%");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default max value of 60%");
		}

	if(Changeslidervalue(testCase, 35))
	{
		Keyword.ReportStep_Pass(testCase, "Scroll bar with the Appropriate value of 35%");

	}
	else
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default Appropriate value of 25%");
	}
	}
if(pc.isSaveVisible())
{
	pc.clickOnSave();
	}
if(pc.isHumidityStatusPrimaryCardVisible()){
	Keyword.ReportStep_Pass(testCase, "Humidity display in primary Card"+pc.getHumidityStatusPrimaryCard());
}
return flag;
}

public static boolean setDehumidity(TestCases testCase, TestCaseInputs inputs)
{
	PrimaryCard pc = new PrimaryCard(testCase);
	boolean flag = true;
	DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
	String statetype=statInfo.getDeviceType();
	if (pc.isMoreTextVisible(5)) {
		pc.clickonMoreText();
		}

	if (pc.isDehumidifyOptionVisible(5)) {
		Keyword.ReportStep_Pass(testCase, "Primary Card: DeHumidify option is visible");
		if (pc.clickonDehumidifyOption()) {
			Keyword.ReportStep_Pass(testCase, "Primary Card: click on Dehumidify option");
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Primary Card: doesnt click on humidify option");
		}
	}

	if(pc.isDeHunidificationDisableTaptoUnableVisible())
	{
		pc.clickOnOptionButton();
		if(pc.clickOnEnableDeHunidification())
		{

			Keyword.ReportStep_Pass(testCase, "option page:click on Enable humidification");

		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"option page:Doesnt click on Enable humidification");
		}

	}
	if (!MobileUtils.isRunningOnAndroid(testCase)) {
		if(statetype.contains("HoneyBadger")){
			if(move(testCase, inputs,"1","10","1","40"))
			{
				Keyword.ReportStep_Pass(testCase, "Scroll bar with the default min value of 40%");

			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default min value of 40%");
			}
		}else{
	if(move(testCase, inputs,"1","10","1","25"))
	{
		Keyword.ReportStep_Pass(testCase, "Scroll bar with the default min value of 25%");

	}
	else
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default min value of 25%");
	}}
	if(move(testCase, inputs,"1","10","1","80"))
	{
		Keyword.ReportStep_Pass(testCase, "Scroll bar with the default Max value of 80%");

	}
	else
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default max value of 80%");
	}
	if(statetype.contains("HoneyBadger")){
	    if(move(testCase, inputs,"1","10","1","55"))
	    {
	    	Keyword.ReportStep_Pass(testCase, "Scroll bar with the Appropriate value of 55%");

	    }
	    else
	    {
	    	flag = false;
	    	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default Appropriate value of 55%");
	    }
	}else{
    if(move(testCase, inputs,"1","10","1","35"))
{
	Keyword.ReportStep_Pass(testCase, "Scroll bar with the Appropriate value of 35%");

}
else
{
	flag = false;
	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default Appropriate value of 25%");
}}
	}
	else
	{
		if(statetype.contains("HoneyBadger")){
			if(Changeslidervalue(testCase, 40))
			{
				Keyword.ReportStep_Pass(testCase, "Scroll bar with the default min value of 40%");

			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default min value of 40%");
			}
		}else{
			if(Changeslidervalue(testCase, 25))
			{
				Keyword.ReportStep_Pass(testCase, "Scroll bar with the default min value of 25%");

			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default min value of 25%");
			}
		}
		
		if(Changeslidervalue(testCase, 80))
		{
			Keyword.ReportStep_Pass(testCase, "Scroll bar with the default Max value of 80%");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default max value of 60%");
		}
		if(statetype.contains("HoneyBadger")){
			if(Changeslidervalue(testCase, 55))
			{
				Keyword.ReportStep_Pass(testCase, "Scroll bar with the Appropriate value of 55%");

			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default Appropriate value of 55%");
			}
		}else
		{
	if(Changeslidervalue(testCase, 35))
	{
		Keyword.ReportStep_Pass(testCase, "Scroll bar with the Appropriate value of 35%");

	}
	else
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not Able to verified Scroll bar with the default Appropriate value of 35%");
	}}
	}
if(pc.isSaveVisible())
{
	pc.clickOnSave();
	}
if(pc.isHumidityStatusPrimaryCardVisible()){
	Keyword.ReportStep_Pass(testCase, "Humidity display in primary Card"+pc.getHumidityStatusPrimaryCard());
}
return flag;
}

public static boolean Changeslidervalue(TestCases testCase, int targetvalue)
{
	boolean flag = true;
	PrimaryCard pc = new PrimaryCard(testCase);
	int changevalue = 0;
	int needToClick=0;
	String value = pc.getProgresBarStatus();
	int currentvalue = Integer.parseInt(value.split("%")[0]);
	if (targetvalue == currentvalue) {
		Keyword.ReportStep_Pass(testCase, "Already current value is" + currentvalue);
	} else {
		changevalue = currentvalue - targetvalue;

		if (changevalue > 0) {
			needToClick = changevalue / 5;
			while (needToClick != 0 && needToClick > 0) {
				pc.clickOnMinSickbar();
				needToClick--;
			}
		} else {
			needToClick = changevalue / -5;
			while (needToClick != 0 && needToClick > 0) {
				pc.clickOnMixSickbar();
				needToClick--;
			}
		}

		currentvalue = Integer.parseInt(pc.getProgresBarStatus().split("%")[0]);
		if (targetvalue == currentvalue) {
			Keyword.ReportStep_Pass(testCase, "Successfully change current value is" + currentvalue);
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Unable to change current Slider value" + currentvalue);
		}
	}
	return flag;
}



public static boolean VerifyVentilationTimerScreen(TestCases testCase){
    boolean flag=true;
     PrimaryCard pc=new PrimaryCard(testCase);
     String spinnerMinValue=null,spinnerMaxValue=null;
     String defaultValue;

     if(pc.isMoreTextVisible(5)){
   	  Keyword.ReportStep_Pass(testCase,"More text visible");
   	  pc.clickonMoreText();
     }
     else
     {
   	  flag=false;
   	  Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"");
     }

     if(pc.isVentilationOptionVisible(3)){
   	  Keyword.ReportStep_Pass(testCase,"Ventilation Option Visible");

   	  if(pc.clickonVentilationOption()){

   	  }

   	  if(pc.isStopTimerVisible()){
   		  Keyword.ReportStep_Pass(testCase,"Stop Timer Option Visible");
       	 pc.clickOnStopTimer();
         }
     }
   	  else
         {
   		  flag=false;
       	  Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"");
         }

     if(pc.clickOnVentilationAutoMode()){

   	  Keyword.ReportStep_Pass(testCase,"Ventilation auto mode clicked");
   	  if(pc.isRunVentilationNowVisible()){
       	  Keyword.ReportStep_Pass(testCase,"Run ventilation visible");
       	  /*pc.clickOnRunVentilationNow();*/
         }
     }
     else
     {
		  flag=false;

     }


     if(pc.clickOnRunVentilationNow()){
   	  Keyword.ReportStep_Pass(testCase,"Run ventilation no clicked");

   	  if(pc.isVentilationStartBtnVisible())
   		  Keyword.ReportStep_Pass(testCase,"Start Button  is visible");

   	 defaultValue=pc.getVentilationSpinnerText();

   	 if(defaultValue.equalsIgnoreCase("20 MINUTES"))
   		 Keyword.ReportStep_Pass(testCase,"timer value set  to default value as 20 minutes");
   	  //---start button clicking required
   	 if(pc.clickOnVentilationStartBtn()){
   		 Keyword.ReportStep_Pass(testCase,"Start button clicked ");
   	 }

   	  if(pc.isEditTimerVisible()){
       	  Keyword.ReportStep_Pass(testCase,"Edit timer visible");
       	  pc.clickOnEditTimer();

       	  if(pc.isVentilationSpinnerVisible()){
       		  Keyword.ReportStep_Pass(testCase,"Spinner visible");
       		  spinnerMinValue=pc.getVentilationSpinnerText();

       		  WebElement ele=pc.getVentilationSpinnerText1();

     			CustomDriver driver = testCase.getMobileDriver();
     			TouchAction action = new TouchAction(driver);


     				try {
     					action.longPress(longPressOptions().withElement(element(ele)).withDuration(Duration.ofMillis(10000))).release().perform();

     				} catch (Exception e) {
     					// TODO: handle exception
     				}



       		  spinnerMaxValue= pc.getVentilationSpinnerText();
       		 if(spinnerMinValue.equalsIgnoreCase("20 MINUTES")&& spinnerMaxValue.equalsIgnoreCase("180 MINUTES"))
       			 Keyword.ReportStep_Pass(testCase,"MAX AND MIN TIMER VALUES MATCH");
       		 else
       			 Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"MAX AND MIN TIMER VALUES DOESNOT MATCH MATCH");
       	  }
       	  else
             {
       		  flag=false;
           	  Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"spinner not found");
             }

         }
   	  if(pc.isCancelButtonVisible())
   		  pc.clickOnCancel();

     }



     if(pc.isCrossButtonVisible()){
   	  if(pc.ClickOnCrossButton())
   	  Keyword.ReportStep_Pass(testCase,"Cross button clicked successfully");
     }


     if(pc.isMoreTextVisible(5)){
   	  pc.clickonMoreText();
   	  if(pc.isVentilationOptionVisible(3)){
       	  Keyword.ReportStep_Pass(testCase,"ventilation option visible");

       	  if(pc.clickonVentilationOption()){

       	  }
   	  }

   	  if(pc.ventilationTimerValueVisible(4))
   		  Keyword.ReportStep_Pass(testCase,"ventilation timer value is visible : "+pc.getVentilationTimerValue()+" Seconds");

     }

     if(pc.isCrossButtonVisible()){
     	  if(pc.ClickOnCrossButton())
     	  Keyword.ReportStep_Pass(testCase,"Cross button clicked successfully");
       }


     return flag;
}
public static boolean setslidervalue(TestCases testCase, TestCaseInputs inputs, String mini, String maxi, String grad,String targetedvalue)
{
	try {
	PrimaryCard pc = new PrimaryCard(testCase);
	String currentValue=null;
	if(pc.getProgresBarStatus().contains("."))
	{
	 currentValue = pc.getProgresBarStatus().replace(".", "");
	}
	else
	{
		currentValue = pc.getProgresBarStatus().replace("%", "");
		}
	WebElement element=pc.getSliderbar();
	if (!currentValue.contains("##ELEMENT_NOT_FOUND##")) {

		if (!currentValue.equals(targetedvalue)) {

			int max = Integer.parseInt(maxi);
			int min = Integer.parseInt(mini);
			int gradient = Integer.parseInt(grad);
			int expectedValue = Integer.parseInt(targetedvalue);
			int currentValueInteger = Integer.parseInt(currentValue);


			if (element != null) {

				Dimension dimension = element.getSize();

				Point point = element.getLocation();

				int width = dimension.getWidth();
				int height = dimension.getHeight() / 2;

				int numberOfBlocks = (max - min) / gradient;

				int eachBlockLength = Math.round(width / numberOfBlocks);

				int currentCircleXPoint = point.getX()+ ((currentValueInteger - min) / gradient) * eachBlockLength;

				int currentCircleYPoint = point.getY() + height;

				TouchAction tAction = new TouchAction(testCase.getMobileDriver());

				if (currentValueInteger < expectedValue) {
					try {
						tAction.press(point(currentCircleXPoint, currentCircleYPoint)).moveTo(point((Math.round(eachBlockLength + 10 + currentCircleXPoint)),currentCircleYPoint)).release().perform();

					} catch (Exception e) {

					}
				} else {
					try {
						tAction.press(point(currentCircleXPoint, (currentCircleYPoint))).moveTo(point((Math.round((currentCircleXPoint-eachBlockLength))), 0)).release().perform();
						//tAction.press(point(currentCircleXPoint, currentCircleYPoint)).moveTo(point((Math.round(eachBlockLength + 10 + currentCircleXPoint)),currentCircleYPoint)).release().perform();
						//tAction.press(point(currentCircleXPoint, currentCircleYPoint)).moveTo(point((Math.round(eachBlockLength + currentCircleXPoint)), currentCircleYPoint)).release().perform();
					} catch (Exception e) {

					}

				}

				/*
				 * currentValue = pc.getProgresBarStatus().replace(".",
				 * "");
				 *
				 * if (currentValue.equals(targetedvalue)) { break; }
				 * else { currentCircleXPoint = point.getX() +
				 * ((currentValueInteger - min) / gradient) *
				 * eachBlockLength; }
				 */
				/*
				 * currentValue = pc.getProgresBarStatus().replace(".",
				 * "");
				 *
				 * currentValueInteger = Integer.parseInt(currentValue);
				 *
				 * if (currentValue.equals(targetedvalue)) { return
				 * true; } else { if (expectedValue == min ||
				 * expectedValue == max) { difference = 2; } else { if
				 * (expectedValue == min + gradient || expectedValue ==
				 * max - gradient) { difference = 1; } }
				 *
				 * if (currentValueInteger < expectedValue) { direction
				 * = 1.2; } else { direction = -1.2; }
				 *
				 * currentCircleXPoint = point.getX() +
				 * ((currentValueInteger - min) / gradient) *
				 * eachBlockLength;
				 *
				 * for (int counter = 0; counter < difference;
				 * counter++) {
				 *
				 * try{ tAction.press(point(currentCircleXPoint,
				 * (currentCircleYPoint))).moveTo(point((int)
				 * (Math.round(eachBlockLength * direction)),
				 * 0)).release().perform(); }catch(Exception e){
				 * //break; }
				 *
				 *
				 * currentValue = pc.getProgresBarStatus().replace(".",
				 * "");
				 *
				 * if (currentValue.equals(targetedvalue)) { break; }
				 * else { currentCircleXPoint = (int)
				 * Math.round(currentCircleXPoint + eachBlockLength *
				 * direction); } }
				 *
				 * }
				 */

			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Change Slider Value : Slider element is not available.");
				return false;
			}

		} else {
			return true;
		}

	} else {
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
				"Change Slider Value : Not able to read the Current value of the slider.");
		return false;
	}
	return true;
} catch (Exception e) {


	return false;
}

}

public static boolean move(TestCases testCase, TestCaseInputs inputs, String mini, String maxi, String grad,String targetedvalue)
{
PrimaryCard pc = new PrimaryCard(testCase);
String currentValue=null;
if(pc.getProgresBarStatus().contains("."))
{
 currentValue = pc.getProgresBarStatus().replace(".", "");
}
else
{
	currentValue = pc.getProgresBarStatus().replace("%", "");
	}
int gradient = Integer.parseInt(grad);
int expectedValue = Integer.parseInt(targetedvalue);
int currentValueInteger = Integer.parseInt(currentValue);
int difference = 0;
if (currentValueInteger < expectedValue) {
difference = (expectedValue - currentValueInteger) / gradient;
} else {
difference = (currentValueInteger - expectedValue) / gradient;
}
for (int counter = 0; counter < difference; counter++) {

try{

setslidervalue(testCase , inputs , mini , maxi , grad , targetedvalue);
}catch(Exception e){

}
}

return true;
}


public static JSONArray getLoginApi(TestCases testCase, TestCaseInputs inputs) throws Exception {
	  JSONArray tempelate = new JSONArray();
		try (CHILUtil chUtil = new CHILUtil(inputs)) {
			if (chUtil.getConnection()) {
			 Keyword.ReportStep_Pass(testCase,"Successfully Login throught Api"+inputs.getInputValue("USERID")+"with Password"+inputs.getInputValue("PASSWORD"));
             }
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Login Failed throught Api"+inputs.getInputValue("USERID")+" with Password "+inputs.getInputValue("PASSWORD"));
			}

		} catch (Exception e) {
			throw new Exception("Error occurred - " + e.getMessage());
		}
		return tempelate;
	}


public static boolean getInvalidInputLoginApiMessages(TestCases testCase, TestCaseInputs inputs) throws Exception {

	boolean flag=true;
	String message ="",USERID="",PASSWORD="";
	
	try {
		USERID=inputs.getInputValue("USERID");
	} catch (Exception e) {
		USERID=null;
	}
	try {
		PASSWORD=inputs.getInputValue("PASSWORD");
	} catch (Exception e) {
		PASSWORD=null;
	}
	  
	  try (CHILUtil chUtil = new CHILUtil(inputs)) {
		  
			if (chUtil.getInvalidInputLoginApiMessages().contains("One or more fields did not validate correctly")) {
			 Keyword.ReportStep_Pass(testCase,"Invalid inputs Login throught Api username:- '"+USERID+"' with Password '"+PASSWORD+"'.");
			 
			 Keyword.ReportStep_Pass(testCase,"Invalid inputs Login throught Api Error Messages '"+chUtil.getInvalidInputLoginApiMessages()+"'.");
			 
			 if (chUtil.getInvalidUsernameInputLoginApiMessages().contains("Email Or Password Incorrect")) {
				 
				 Keyword.ReportStep_Pass(testCase,"Invalid inputs Login throught Api Error Messages '"+chUtil.getInvalidUsernameInputLoginApiMessages()+"'.");
	           }
			 if (chUtil.getInvalidPasswordInputLoginApiMessages().contains("One or more fields did not validate correctly")) {
				 
				 Keyword.ReportStep_Pass(testCase,"Invalid inputs Login throught Api Error Messages '"+chUtil.getInvalidPasswordInputLoginApiMessages()+"'.");
	           }
           }else if (chUtil.getInvalidUsernameInputLoginApiMessages().contains("Email Or Password Incorrect")) {
  			 Keyword.ReportStep_Pass(testCase,"Invalid inputs Login throught Api username:- '"+USERID+"' with Password '"+PASSWORD+"'.");
			 
  			 Keyword.ReportStep_Pass(testCase,"Invalid inputs Login throught Api Error Messages '"+chUtil.getInvalidInputLoginApiMessages()+"'.");
  			 
  			 if (chUtil.getInvalidUsernameInputLoginApiMessages().contains("Email Or Password Incorrect")) {
  				 
  				 Keyword.ReportStep_Pass(testCase,"Invalid inputs Login throught Api Error Messages '"+chUtil.getInvalidUsernameInputLoginApiMessages()+"'.");
  	           }
  			 if (chUtil.getInvalidPasswordInputLoginApiMessages().contains("One or more fields did not validate correctly")) {
  				 
  				 Keyword.ReportStep_Pass(testCase,"Invalid inputs Login throught Api Error Messages '"+chUtil.getInvalidPasswordInputLoginApiMessages()+"'.");
  	           }
             }else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
								"Login Failed throught Api "+USERID+" with Password "+PASSWORD);
					}
					
		} catch (Exception e) {
			throw new Exception("Error occurred - " + e.getMessage());
		}
		return flag;
	}




public static boolean VerifyTCCStatDisable(TestCases testCase, TestCaseInputs inputs) {
boolean flag=true;
 Dashboard ds = new Dashboard(testCase);
 AddNewDeviceScreen ad=new AddNewDeviceScreen(testCase);
	if (ds.isAddDeviceIconVisible(15)) {
		Keyword.ReportStep_Pass(testCase,"Successfully verify Add Device Option");
		flag = flag && ds.clickOnAddNewDeviceIcon();
		Keyword.ReportStep_Pass(testCase,"Successfully click on Add Device Option");
	}

	if(!ad.isImportTccVisible())
	{
		Keyword.ReportStep_Pass(testCase,"TCC Stat not display in Emea Account");
	}else if(ad.isImportTccVisible()) {
		EditAddressLocation eal=new EditAddressLocation(testCase);
		ChangeCountryScreen ccs= new ChangeCountryScreen(testCase);

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			 if(eal.isChangeCountryButtonVisible())
				{
					eal.clickOnChangeCountryButton();

				      if(ccs.isCountrySearchTextFieldVisible())
						{
							ccs.SetCountrySearchTextField("United Kingdom");
						}

						if(MobileUtils.isRunningOnAndroid(testCase))
						{
							MobileUtils.hideKeyboard(testCase.getMobileDriver());
						}
						if(ccs.SelectCountry("United Kingdom"))
						{
							Keyword.ReportStep_Pass(testCase, "Click on "+"United Kingdom");
						}
				}

			}
		Keyword.ReportStep_Pass(testCase,"TCC Stat not display in Emea Account");
	}
	else
	{
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"TCC Stat display in Emea Stat");
	}
	return flag;
}

public static boolean VerifyTCCStatEnable(TestCases testCase, TestCaseInputs inputs, String language) {boolean flag=true;
Dashboard ds = new Dashboard(testCase,language);
AddNewDeviceScreen ad=new AddNewDeviceScreen(testCase,language);
EditAddressLocation eal=new EditAddressLocation(testCase,language);
ChangeCountryScreen ccs= new ChangeCountryScreen(testCase,language);
OSPopUps os =new OSPopUps(testCase);
String countryname=" ";
if(language.equalsIgnoreCase("French_CA"))
	{
		countryname="Canada";
	}else {
		countryname="United States";
	}
MobileUtils.swipe(testCase, 500, 1000, 50, 560);
Schedule.SwipeDown(testCase);
		if (ds.isAddDeviceIconVisible(5)) {
		Keyword.ReportStep_Pass(testCase,"Successfully verify Add Device Option");
		flag = flag && ds.clickOnAddNewDeviceIcon();
		Keyword.ReportStep_Pass(testCase,"Successfully click on Add Device Option");
	}
		if(os.isAllowButtonVisible())
	{
		os.clickOnAllowButton();
	}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
	  	  
			eal.clickOnChangeCountryButton();
		}
	  	 else {
		 			eal.clickOnCountryButton();
		 			ccs.isCountrySearchTextFieldAvailable(10);
		 		}
				      if(ccs.isCountrySearchTextFieldVisible())
						{
							ccs.SetCountrySearchTextField(countryname);
						}

						if(MobileUtils.isRunningOnAndroid(testCase))
						{
							MobileUtils.hideKeyboard(testCase.getMobileDriver());
						}
						if(ccs.SelectCountry(countryname))
						{
							Keyword.ReportStep_Pass(testCase, "Click on "+countryname);
						}
						Schedule.SwipeDown(testCase);
					if(ad.isImportTccVisible())
					{
						Keyword.ReportStep_Pass(testCase,"TCC Stat is display");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"TCC Stat is not display");
						flag=false;
					}
	return flag;
}
	


public static boolean TccCreateNewLocation(TestCases testCase, TestCaseInputs inputs) {
boolean flag=true;
TccLoginScreen tcc=new TccLoginScreen(testCase);
LocationDetailsScreen lds=new LocationDetailsScreen(testCase);
ThermostatSensorSettingScreen tss = new ThermostatSensorSettingScreen(testCase,inputs);
if(MobileUtils.isRunningOnAndroid(testCase))
{
optikUtils.swipe(testCase , "Create New Location");
}
if(lds.isTccCreateLocation(5))
{
	lds.ClickTccCreatelocation();
}
if(lds.isTccCreateLocTextFeld())
{
	lds.ClickTccCreateLocTextFeld();
	String randLoc=tss.getRandomRoomName();
	lds.setTccCreateLocTextFeld(randLoc);
	lds.getTccCreateZipTextFeld().sendKeys("10007");

}
if(MobileUtils.isRunningOnAndroid(testCase))
{
	MobileUtils.hideKeyboard(testCase.getMobileDriver());
}

return flag;



}

public static boolean VerifyclickTCCAndGetstarted(TestCases testCase, TestCaseInputs inputs,String language) {
boolean flag=true;
AddNewDeviceScreen ads=new AddNewDeviceScreen(testCase,language);
Camera c=new Camera(testCase,language);
if (ads.isImportTccVisible()) {
		if (ads.clickOnTccDevice()) {
			Keyword.ReportStep_Pass(testCase, "Successfully click on TCC option on add device screen");

		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Failed to tap on TCC option on add device screen");
		}
	} else {
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"TCC option on add device screen is not visible");
	}

if (ads.isGetStartedButton()) {
	if (ads.clickOnGetStarted()) {
		Keyword.ReportStep_Pass(testCase, "Tap On getting started Button : Successfully tapped on getting started Button");
		c.ClickOnHomebtn();
	} else {
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Tap On getting started Button : Failed to tap on getting started Button");
	}

} else {
	flag = false;
	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Getting started button is not visible");
}
return flag;
}
	public static boolean CreatePasscodeForT6D6(TestCases testCase, TestCaseInputs inputs) {
	boolean flag=true;

	PrimaryCard pc=new PrimaryCard(testCase);
	String sa="";
	D6T6 dt=new D6T6(testCase);
	if(dt.isEnterPasscodetTextFieldVisible())
	{
		Keyword.ReportStep_Pass(testCase, "Successfully Verify Enter Passcode TextField");
		dt.getEnterPasscodetTextField().sendKeys(inputs.getInputValue("LAST_4DIGIT_APPVERSION").toString());
		Keyword.ReportStep_Pass(testCase, "Successfully Set Passcode On T6 Integretion ");
	}
	else
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Passcode field is not display");
	}
	if(MobileUtils.isRunningOnAndroid(testCase))
	{

			testCase.getMobileDriver().tap(1 , 700 ,1100);

	}
	else
	{
		if(pc.isReturnVisible())
		{
			pc.clickOnReturn();
		}
	}
	return flag;
	}
	public static boolean SelectIntegreatedDevice(TestCases testCase, TestCaseInputs inputs) {
	boolean flag=true;
	String sa="";
	D6T6 dt=new D6T6(testCase);
	if(dt.isSelectIntegratedDeviceVisible())
	{
		Keyword.ReportStep_Pass(testCase, "Successfully Verify  Device On Mini split integration");
		if(!dt.VerifySelectIntegratedDeviceRadioSelected())
		{
			dt.clickOnSelectIntegratedDeviceRadioButton();
		}else
		{

		}
		sa=dt.getSelectIntegratedDeviceTextValue();
		if(!sa.equals(""))
		{
			Keyword.ReportStep_Pass(testCase, "Successfully Display  Device On Mini split integration"+sa);
		}

		}
	return flag;
	}

	public static boolean VerifyIntegreatedDevice(TestCases testCase, TestCaseInputs inputs) {
	boolean flag=true;
	String sa="";
	D6T6 dt=new D6T6(testCase);
    PrimaryCard pc=new PrimaryCard(testCase);
	if(dt.isDisplayIntegratedDevice())
	{
		Keyword.ReportStep_Pass(testCase, "Successfully Verify Integrated Device");
		sa=dt.getDisplayIntegratedDeviceValue();
		Keyword.ReportStep_Pass(testCase, "Successfully Display  Device On Mini split integration"+sa);

	}
	else
	{if(dt.isEnterPasscodetTextFieldVisible())
		{
		dt.getEnterPasscodetTextField().sendKeys(inputs.getInputValue("LAST_4DIGIT_APPVERSION").toString());
		if(MobileUtils.isRunningOnAndroid(testCase))
		{testCase.getMobileDriver().tap(1 , 700 ,1100);
         }
		else
		{if(pc.isReturnVisible())
		{
			pc.clickOnReturn();
		}
		}
		if(dt.isSelectIntegratedDeviceVisible())
		{if(!dt.VerifySelectIntegratedDeviceRadioSelected())
			{
				dt.clickOnSelectIntegratedDeviceRadioButton();
			}}
		dt.clickOnDoneButton();
		dt.clickOnIntegratedHeatingSymButton();
		if(dt.isDisplayIntegratedDevice())
		{
			Keyword.ReportStep_Pass(testCase, "Successfully Verify Integrated Device");
			sa=dt.getDisplayIntegratedDeviceValue();
			Keyword.ReportStep_Pass(testCase, "Successfully Display  Device On Mini split integration"+sa);
}
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Not able to Display  Device On Mini split integration");
		}}

	return flag;
	}

	public static boolean CreateWrongPasscodeForD6(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		String WRONG_PASSCODE=inputs.getInputValue("WRONG_PASSCODE");
		String sa="";
		D6T6 dt=new D6T6(testCase);
		PrimaryCard pc=new PrimaryCard(testCase);
		if(dt.isEnterPasscodetTextFieldVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Successfully Verify Enter Passcode TextField");
			dt.getEnterPasscodetTextField().sendKeys(WRONG_PASSCODE);
			Keyword.ReportStep_Pass(testCase, "Successfully Set WrongbPasscode On T6 Integretion ");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Passcode field is not display");
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
				testCase.getMobileDriver().tap(1 , 700 ,1100);

		}
		else
		{
			if(pc.isReturnVisible())
			{
				pc.clickOnReturn();
			}
		}
		return flag;
		}

	public static boolean VerifySystemModeOptionForD6(TestCases testCase, TestCaseInputs inputs) {
	    boolean flag=true;

				//DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
				//String statetype=statInfo.getDeviceType();
				PrimaryCard pm=new PrimaryCard(testCase);
				SystemMode sm=new SystemMode(testCase);
				if(pm.isSystemModeVisible())
				{
					flag=flag && pm.clickOnSystemMode();


					if(sm.isEmergencyHeatOptionVisible())
					{
						Keyword.ReportStep_Pass(testCase, "System :Emergency Heat mode visible");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System : Emergency Heat mode is not visible", false);
						flag=false;
					}

					if(sm.isHeatOptionVisible())
					{
						Keyword.ReportStep_Pass(testCase, "System :Heat mode visible");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System Info: heat mode is not visible", false);
						flag=false;
					}

					if(sm.isCoolOptionVisible())
					{
						Keyword.ReportStep_Pass(testCase, "System mode :cool mode visible");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System : cool mode is not visible", false);
						flag=false;
					}

					if(sm.isOffOptionVisible())
					{
						Keyword.ReportStep_Pass(testCase, "System mode:off mode visible");
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System mode: off mode is not visible", false);
						flag=false;
					}

				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System mode option is not visible");
					flag=false;
				}

				if(pm.isCrossButtonVisible())
								{
									pm.ClickOnCrossButton();
								}

			return flag;
	}

	public static boolean verifySystemModeSelected(TestCases testCase, TestCaseInputs inputs, String expectedMode) {
		boolean flag = true;
		PrimaryCard pc= new PrimaryCard(testCase);
		if(pc.clickOnSystemMode())
		{
			if (expectedMode.equalsIgnoreCase("COOL")) {
				if(pc.VerifyCoolModeSelected())
				{
					Keyword.ReportStep_Pass(testCase, "System mode:Cool mode is change successfully");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System mode:Cool mode is not  change successfully ", false);
					flag = false;
				}
			}
			else if (expectedMode.equalsIgnoreCase("HEAT")) {
				if(pc.VerifyHeatModeSelected())
				{
					Keyword.ReportStep_Pass(testCase, "System mode:HEAT mode is change successfully");
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System mode:HEAT mode is not  change successfully ", false);
					flag = false;
				}

			}
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "System mode button is not visible");
			flag = false;
		}


		return flag;

	}

	public static boolean TurnOnOffVactionInStatFromvactionSetting(TestCases testCase, TestCaseInputs inputs, String expectedMode) {
		boolean flag = true;
		VacationSettingScreen  vs=new VacationSettingScreen(testCase);
		String status= vs.getVacationSettingsToggleStatus();
	if(expectedMode=="ON")
	{
		if(status.contains("ON")||status.contains("1")||status.contains("true"))
		{
			Keyword.ReportStep_Pass(testCase, "Review Vacation: Already  Stat1  Toggle ON from Vacation Setting Screen");
			}
		else
		{
			vs.clickOnVacationSettingToggle();
			Keyword.ReportStep_Pass(testCase, "Review Vacation: Successfully click on Toggle ON from Vacation Setting Screen");


		}
	}
	else if(expectedMode=="OFF")
	{
		if(status.contains("OFF")||status.contains("0")||status.contains("false"))
		{
			Keyword.ReportStep_Pass(testCase, "Review Vacation: Already  Stat1  Toggle OFF from Vacation Setting Screen");
				}
		else
		{
			vs.clickOnVacationSettingToggle();
			Keyword.ReportStep_Pass(testCase, "Review Vacation: Successfully click on Toggle OFF from Vacation Setting Screen");

		}

	}
    else
		{
    Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Vacation Status is not visible");
			flag = false;
		}


		vs.clickOnVacationBackButton();

		return flag;

		}


	public static boolean ChangeTempVerfyPopupClckOKAndverfyTemp(TestCases testCase) {
		boolean flag = true;
		PrimaryCard pc=new PrimaryCard(testCase);
		Double ChangeTemp,currentTemp;
		D6T6 dt=new D6T6(testCase);

		 currentTemp=pc.getCurrentSetPointInDialer();
		 Keyword.ReportStep_Pass(testCase,"Current temperature on primary card after clicking on Increment button:" +currentTemp);
         flag = flag && pc.ClickOnTempIncrementButton();
		 Keyword.ReportStep_Pass(testCase,"click on increment button");
			 if (dt.isPopUpVisible()){
					String sa=dt.getPopUpText();
					Keyword.ReportStep_Pass(testCase,
							"Successfully displayed with"+sa);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Not Display expected screen ");
				}
			 if(dt.isOkButtonVisible())
			 {
				 dt.clickOnOkButton();
			 }else
			 {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"OK Button is NOT Display");
			 }
			 ChangeTemp=pc.getCurrentSetPointInDialer();
			Keyword.ReportStep_Pass(testCase,"After change temperature on primary card after clicking on Increment button:" + ChangeTemp);

			return flag;

	}
	public static boolean ChangeTempVerfyPopupClckCancelAndVerfyTemp(TestCases testCase) {
		boolean flag = true;
		PrimaryCard pc=new PrimaryCard(testCase);
		Double ChangeTemp,currentTemp;
		D6T6 dt=new D6T6(testCase);

		 currentTemp=pc.getCurrentSetPointInDialer();
		 Keyword.ReportStep_Pass(testCase,"Current temperature on primary card after clicking on Increment button:" +currentTemp);
         flag = flag && pc.ClickOnTempIncrementButton();
		 Keyword.ReportStep_Pass(testCase,"click on increment button");
			 if (dt.isPopUpVisible()){
					String sa=dt.getPopUpText();
					Keyword.ReportStep_Pass(testCase,
							"Successfully displayed with"+sa);
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Not Display expected screen ");
				}
			 if(dt.isCancelButtonVisible())
			 {
				 dt.clickOnCancelButton();
			 }else
			 {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Cancel Button is NOT Display");
			 }

		    ChangeTemp=pc.getCurrentSetPointInDialer();
			Keyword.ReportStep_Pass(testCase,"After change temperature on primary card after clicking on Increment button:" + ChangeTemp);

			/*if(currentTemp==ChangeTemp){
				Keyword.ReportStep_Pass(testCase,"Succssefully displayed with same set point");
			}
			else
			 {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Succssefully NOT displayed with same set point");
			 }*/

		return flag;

	}
	public static boolean VerifyEditAddressStateList(TestCases testCase,TestCaseInputs inputs)
	{boolean flag=true;
   LocationDetailsScreen lds = new LocationDetailsScreen(testCase);
		EditAddressLocation eal=new EditAddressLocation(testCase);
		ChangeCountryScreen ccs= new ChangeCountryScreen(testCase);
		SecondaryCardSettings sc = new SecondaryCardSettings(testCase);
		Dashboard db = new Dashboard(testCase);
		HashMap<String, String> loc=lds.getCountryNamefromChapi();
		inputs.setInputValue("addressName" , loc.get("addressName"));
		navigatetoGlobalDrwaerOption(testCase , SecondaryCardSettings.LOCATIONADDRESS);
           if(lds.isEditexistingaddressVisible(10))
			{
				lds.navigateToEditAddressScreen();
			}


			if(eal.isChangeCountryButtonVisible())
			{
				eal.clickOnChangeCountryButton();
			}

			if(ccs.isCountrySearchTextFieldVisible()){
				ccs.SetCountrySearchTextField("United States");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}

			if(ccs.SelectCountry("United States"))
			{
				Keyword.ReportStep_Pass(testCase, "Click on 'United States'country");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on 'United States 'country");
				flag=false;
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}

			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
			eal.setZipCodeAdressFieldValue("10007");
			eal.setStateAddressFieldValue("a");
			}
			else {
      eal.setZipCodeAdressFieldValue("10007");
		eal.setStateAddressFieldValue("a");
			}
			String s=eal.getStateAddressFieldValue();
			Keyword.ReportStep_Pass(testCase, "Country name dsplay:"+s);
			if(eal.isArazonaStateVisible()){
				Keyword.ReportStep_Pass(testCase, "Click on United States Arozona country List visible");
					eal.clickOnArazonaStateField();
					Keyword.ReportStep_Pass(testCase, "United States Arozona country List visible");

			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to display United States country List Name");
				flag=false;
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}
			if(eal.isSaveButtonVisible())
			{
				eal.clickOnSaveButton();
			}
			sc.clickOnBackButton();
			if(eal.islocatonVisible())
			{
				try {


				if(!eal.getlocatonValue().contains("United States"))
				{
					Keyword.ReportStep_Pass(testCase,"State is "+eal.getStateAddressFieldValue()+"Display n Location Detalis");
				}

				}catch(Exception e){
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "State address not available", false);
				}
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "location is Not visible", false);

			}

		    if(lds.isEditexistingaddressVisible(10))
					{
						lds.navigateToEditAddressScreen();
					}



			if(eal.isChangeCountryButtonVisible())
			{
				eal.clickOnChangeCountryButton();
			}

			if(ccs.isCountrySearchTextFieldVisible()){
				ccs.SetCountrySearchTextField("Canada");
			}
			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
			}

			if(ccs.SelectCountry("Canada"))
			{
				Keyword.ReportStep_Pass(testCase, "Click on 'Canada'country");
			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on 'Canada' country");
				flag=false;
			}


			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				eal.setZipCodeAdressFieldValue("Y1A1A3");
				eal.setStateAddressFieldValue("a");
			}else{
				eal.setZipCodeAdressFieldValue("Y1A1A3");
				eal.setStateAddressFieldValue("a");

			}
			if(eal.isArazonaStateVisible()){
				Keyword.ReportStep_Pass(testCase, "Click on United States Arozona country List visible");
				eal.clickOnArazonaStateField();
					Keyword.ReportStep_Pass(testCase, "United States Arozona country List visible");

			}
			else
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to display United States country List Name");
				flag=false;
			}
			if(eal.isSaveButtonVisible())
			{
				eal.clickOnSaveButton();
			}
			sc.clickOnBackButton();

			if(eal.islocatonVisible())
			{
				try {


				if(!eal.getlocatonValue().contains("canada"))
				{
					Keyword.ReportStep_Pass(testCase,"State is "+eal.getStateAddressFieldValue()+"Display n Location Detalis");
				}

				}catch(Exception e){
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "State address not available", false);
				}
			}
			else
			{
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "location is Not visible", false);

			}
			sc.clickOnBackButton();
			sc.clickOnBackButton();

		return flag;



	}

	public static boolean VerifyflycatcherMoveSensorSameRoom(TestCases testCase,TestCaseInputs inputs) {
		boolean flag=true;
		ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);
		ThermostatSensorSettingScreen tss = new ThermostatSensorSettingScreen(testCase,inputs);
		DeviceInformation statInfo=new DeviceInformation(testCase, inputs);
		if(ts.isDeviceAndSensorsVisible())

		{
			ts.ClickDeviceAndSensor();
			Keyword.ReportStep_Pass(testCase,"THERMOSTAT SETTINGS:click on  Thermostat Device and Sensors");
		}


		if(tss.isIndoorAirSensorVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Verified Successfully navigated to Indoor Air Sensor screen");
			int size= tss.getAvailableSensorSize();
			List<WebElement> sensornames= tss.getSensorNames();
			if(size!=0)
			{
				sensornames.get(0).click();
				Keyword.ReportStep_Pass(testCase, " Sensor Settings : Clicked on 1st sensor");
			}
			else
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: No Sensor is displayed");
			}
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT SETTINGS: Unable to navigate Indoor Air Sensor screen");

		}
		if(tss.isOptionButtonVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Sensor Option Button is displayed");
			if(tss.ClickOnOptionButton())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: click on Sensor option is button");
			}

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"sensor Setting: Sensor Option Button is not visible");
		}


		if(tss.isMoveToDifferentRoomOptionVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting:  Move to Different Room option visible");
		}

		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to verify  Move to Different Room option");
		}



		if(tss.ClickOnMoveToDifferentRoomOption())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: click on Move to Different Room option");
		}

		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to click on Move to Different Room option");
		}

		if(statInfo.getDeviceType().equals("FlyCatcher"))
		{

		if(tss.isRoomTypeScreenVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Successfully navigated to Room Type Screen");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Fail to navigate to Room Type Screen");
		}

		if(tss.isRoomTypedDescriptionDisplayed())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Room Type Desription is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Room type description is not displayed");
		}

		if(tss.isBedroomOptionVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Bedroom option is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Bedroom option is not displayed");
		}

		if(tss.isLivingSpaceOptionVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Living Space option is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Living Space option is not displayed");
		}

		if(tss.isOtherOptionVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Living Space option is displayed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Living Space option is not displayed");
		}



		if(tss.ClickOnLivingSpaceOption())
		{
			Keyword.ReportStep_Pass(testCase, "Room Type :click on Living Space option");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Room Type: Doesnt Click on other option");
		}
		if(tss.isSelectRoomVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Select Room :navigate to Select Room ");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Select Room:Doesnt navigate to Select Room");
		}


			if(tss.isLivingRoomOptionVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Select Room :Add Room visible");
				tss.ClickOnLivingRoomOption();
				if(tss.ismultipleSensorInRoomMessageVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Use Multiple Sensor pop-up is displayed");
					if(tss.ismultipleSensorInRoomMessageDescriptionVisible())
					{
						Keyword.ReportStep_Pass(testCase, "Use Multiple Sensor pop-up description is displayed - " );
						if(tss.isNoButton() && tss.isYesButton())
						{
							Keyword.ReportStep_Pass(testCase, "Yes and No button is displayed");
							tss.ClickOnNobutton();
							if(tss.isSelectRoomVisible())
							{
								Keyword.ReportStep_Pass(testCase, "Select Room :navigate to Select Room ");
							}
							tss.ClickOnLivingRoomOption();
							tss.ClickOnYesbutton();



						}
						else
						{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Yes/No button not displayed");

						}
					}
					else
					{
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," Use multiple sensor pop-up description is not displayed");

					}

				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," Use multiple sensor pop-up is not displayed");

				}
			}
			else
			{

				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Add Room is not visible");

			}



		if(tss.ispalceSensorVisible(120))
		{
			Keyword.ReportStep_Pass(testCase, "Place sensor title visible");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Place sensor title is not visible");
		}

		String palceSensoraddedNameTextVisible=tss.getSensoraddedNameText(inputs);
		if(palceSensoraddedNameTextVisible.contains("Living Room"))
		{
			Keyword.ReportStep_Pass(testCase, "Place sensor added name verify successfully :"  +palceSensoraddedNameTextVisible);
		}else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Place sensor added name verify is not same");
		}


		if(tss.isSensorIsplacedButtonVisible())
		{

			tss.ClickOnSensorIsplacedButton();
			Keyword.ReportStep_Pass(testCase, "Place sensor :clicked on sensor is placed");
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Place sensor :doesn't clicked on sensor is placed");
		}
		}

			else
					{
						if(tss.isSelectRoomVisible())
						{
							Keyword.ReportStep_Pass(testCase, "Sensor Select Room screen is displayed");

						}
						else
						{
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Select Room Type is not displayed");
						}

						if(tss.isBedroomOptionVisible())
						{
							Keyword.ReportStep_Pass(testCase, "Sensor Setting: Bedroom option is displayed");
						}
						else
						{
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Bedroom option is not displayed");
						}

						if(tss.isLivingRoomOptionVisible())
						{
							Keyword.ReportStep_Pass(testCase, "Sensor Setting: Living Room option is displayed");
						}
						else
						{
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Living Room option is not displayed");
						}
						if(tss.isDiningRoomOptionVisible())
						{
							Keyword.ReportStep_Pass(testCase, "Sensor Setting: Dining Room option is displayed");
						}
						else
						{
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Dining Room option is not displayed");
						}

						if(tss.isMasterBedroomOptionVisible())
						{
							Keyword.ReportStep_Pass(testCase, "Sensor Setting: Master Bedroom option is displayed");
						}
						else
						{
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Master Bedroom option is not displayed");
						}
						if(tss.isFamilyRoomOptionVisible())
						{
							Keyword.ReportStep_Pass(testCase, "Sensor Setting: Family Room option is displayed");
						}
						else
						{
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Family Room option is not displayed");
						}

						if(tss.isEntryOptionVisible())
						{
							Keyword.ReportStep_Pass(testCase, "Sensor Setting: Entry option is displayed");
						}
						else
						{
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Entry option is not displayed");
						}
						if(tss.isKitchenOptionVisible())
						{
							Keyword.ReportStep_Pass(testCase, "Sensor Setting: Kitchen option is displayed");
						}
						else
						{
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Kitchen option is not displayed");
						}

						if(tss.isHallwayOptionVisible())
						{
							Keyword.ReportStep_Pass(testCase, "Sensor Setting: Hallway option is displayed");
						}
						else
						{
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Hallway option is not displayed");
						}
						if(tss.isAddRoomVisible())
						{
							Keyword.ReportStep_Pass(testCase, "Select Room :Add Room visible");

						}
						tss.ClickOnLivingRoomOption();
						if(tss.isCustomRoomNameFieldVisible())
						{
							Keyword.ReportStep_Pass(testCase, "Select Room :Custom Room field visible");

						}


			if(MobileUtils.isRunningOnAndroid(testCase))
					{
					    int height = testCase.getMobileDriver().manage().window().getSize().getHeight();
					    int width = testCase.getMobileDriver().manage().window().getSize().getWidth();

					    testCase.getMobileDriver().tap(1 , width - 80 ,height - 110);

					}
					else
					{
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Return");
					}
			if(tss.isUseMultipleSensorMessageVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Use multiple sensor screen is displayed");

			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Use multiple sensor screen is not displayed");

			}
			tss.ClickOnUseMultipleSensorOption();

		}
		try
		{
			Thread.sleep(1000);
		}
		catch(Exception e)
		{

		}
		String verifysensorname=tss.getVerifySensorName(inputs);
		if(verifysensorname.equalsIgnoreCase("Living Room Indoor Air Sensor 01"))
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Added successfully Sensor setting :" +verifysensorname);
		}else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"sensor Doesn't added in Sensor setting");
		}


		if(tss.isBackButtonVisible())
		{
			tss.ClickOnBackButton();
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Back button is not displayed");
		}



		return flag;
	}

	public static boolean VerifySensorMotionSettingOption(TestCases testCase,TestCaseInputs inputs)
	{

		boolean flag=true;
		ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);
		ThermostatSensorSettingScreen tss = new ThermostatSensorSettingScreen(testCase,inputs);

		if(tss.isIndoorAirSensorVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Verified Successfully navigated to Indoor Air Sensor screen");
			int size= tss.getAvailableSensorSize();
			List<WebElement> sensornames= tss.getSensorNames();
			if(size!=0)
			{
				sensornames.get(0).click();
				Keyword.ReportStep_Pass(testCase, " Sensor Settings : Clicked on 1st sensor");
			}
			else
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: No Sensor is displayed");
			}
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT SETTINGS: Unable to navigate Indoor Air Sensor screen");

		}

		if(tss.isMotionSensitivityLabelVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting:  Motion Sensitivity is displayed");
		}
		else
		{
			flag= flag && tss.scrollToUseMotionDetection();
			if(tss.isMotionSensitivityLabelVisible())
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Motion Sensitivity is displayed");
			}
			else
			{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Motion Sensitivity is not displayed");
			}
		}
		String state = tss.getMotionSensitivityState(inputs);
		if(state.equalsIgnoreCase("Medium"))
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting:  Motion Sensitivity default state is medium");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Motion Sensitivity default state is not medium");

		}
		tss.ClickOnMotionSensitivityOption();

		if(tss.isMotionSensitivityLabelVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting:  Motion Sensitivity settings screen is displayed");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Motion Sensitivity settings screen is not displayed");

		}
		if(tss.isHighVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting:  Motion Sensitivity option High is displayed");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Motion Sensitivity option High is not displayed");

		}
		if(tss.isMediumVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting:  Motion Sensitivity option Medium is displayed");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Motion Sensitivity option Medium is not displayed");

		}
		if(tss.isLowVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting:  Motion Sensitivity option Low is displayed");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Motion Sensitivity option Low is not displayed");

		}
		tss.ClickOnHigh();
		tss.ClickOnMotionSensitivitySaveOption();
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
		tss.ClickOnBackButton();
		}
		state = tss.getMotionSensitivityState(inputs);
		if(state.equalsIgnoreCase("High"))
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting:  Motion Sensitivity state is High");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Motion Sensitivity state is not High");

		}
		tss.ClickOnMotionSensitivityOption();
		tss.ClickOnLow();
			tss.ClickOnMotionSensitivitySaveOption();

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
			tss.ClickOnBackButton();
			}
		state = tss.getMotionSensitivityState(inputs);
		if(state.equalsIgnoreCase("Low"))
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting:  Motion Sensitivity state is Low");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Motion Sensitivity state is not Low");

		}
		tss.ClickOnMotionSensitivityOption();
		tss.ClickOnMedium();
			tss.ClickOnMotionSensitivitySaveOption();

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
			tss.ClickOnBackButton();
			}
		state = tss.getMotionSensitivityState(inputs);
		if(state.equalsIgnoreCase("Medium"))
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting:  Motion Sensitivity state is Medium");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Motion Sensitivity state is not Medium");

		}
		if(tss.isBackButtonVisible())
		{
			tss.ClickOnBackButton();
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Back button is not displayed");
		}

		return flag;
	}

	public static boolean VerifyCancelAddSensor(TestCases testCase,TestCaseInputs inputs, int waitTime)
	{

		boolean flag=true;
		ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);
		ThermostatSensorSettingScreen tss = new ThermostatSensorSettingScreen(testCase,inputs);

		if(tss.isAddSensorVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Add sensor is present");
			tss.ClickOnAddSensor();

			if(tss.isGetStartedVisible()) {
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: Get Started is present");
				tss.ClickOnGetStarted();


				try
				{
				 Thread.sleep(5000);
				}
				catch(Exception e)
				{

				}

				if(tss.isNextVisible()) {
					Keyword.ReportStep_Pass(testCase, "Sensor Setting: Next is present");
					tss.ClickOnNext();


				if(tss.isConnectVisible())
				{
					Keyword.ReportStep_Pass(testCase, "Add Sensor: Connect screen is displayed");
					if(tss.isCancelOptionVisible())
					{
						Keyword.ReportStep_Pass(testCase, "Add Sensor: Cancel button is displayed on Connect screen");

						if(waitTime > 0) {
							try
							{
							 Thread.sleep(waitTime);
							}
							catch(Exception e)
							{

							}

						}
						tss.ClickOnCancelOption();
						if(tss.isCancelSetupVisible())
						{
							Keyword.ReportStep_Pass(testCase, "Add Sensor: Cancel setup pop-up is displayed");
							tss.ClickOnYesbutton();
							if(tss.isIndoorAirSensorVisible())
							{
								Keyword.ReportStep_Pass(testCase, "Add Sensor: Add sensor cancelled");
							}
							else
							{
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Add Sensor: Cancel setup popup is not displayed");


							}
						}
						else
						{
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Add Sensor: Cancel setup popup is not displayed");

						}

					}
					else
					{
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Add Sensor: Cancel button is not displayed on Connect screen");

					}
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Add Sensor: Connect Screen is not displayed");
				}
				}else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Add Sensor: Next is not displayed");
				}

			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting:Get Started is not present");
			}
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting:Add sensor is not present");
		}

		return flag;
	}

	public static boolean VerifySensorOptionsforOfflineSensor(TestCases testCase,TestCaseInputs inputs)
	{
		boolean flag=true;
		ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);
		ThermostatSensorSettingScreen tss = new ThermostatSensorSettingScreen(testCase,inputs);

		if(tss.isIndoorAirSensorVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Verified Successfully navigated to Indoor Air Sensor screen");
			int size= tss.getAvailableSensorSize();
			List<WebElement> sensornames= tss.getSensorNames();
			if(size!=0)
			{
				sensornames.get(0).click();
				Keyword.ReportStep_Pass(testCase, " Sensor Settings : Clicked on 1st sensor");
			}
			else
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: No Sensor is displayed");
			}
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT SETTINGS: Unable to navigate Indoor Air Sensor screen");

		}
		if(tss.isOptionButtonVisible())
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor options button is visible for offline sensor");

		}
		else
		{
			Keyword.ReportStep_Pass(testCase,"Sensor options button is not visible for offline sensor");

		}

		String sensorTemp = tss.getSensorTemperature();
		if(sensorTemp.equalsIgnoreCase("--"))
		{
			Keyword.ReportStep_Pass(testCase,"For offline sensor temp value is --");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"offline sensor temp value displayed is = " + sensorTemp);

		}
		String sensorHumd = tss.getSensorHumidity();
		if(sensorHumd.equalsIgnoreCase("--"))
		{
			Keyword.ReportStep_Pass(testCase,"For offline sensor Humidity value is --");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"offline sensor humidity value displayed is = " + sensorTemp);

		}

		if(tss.isDeviceBatteryLevelVisible())
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"offline sensor battery level is displayed");

		}
		else
		{
			Keyword.ReportStep_Pass(testCase,"For offline sensor battery level is not displayed");

		}

		if(tss.isDeviceSignalStrengthOfflineVisible())
		{
			Keyword.ReportStep_Pass(testCase,"For offline sensor signal strength is offline");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"offline sensor signal strength is not offline");

		}
		if(tss.isUseMotionDetectionLabelVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Use Motion Detection  is displayed");
			if(tss.isMotionDetectiondisabled())
			{
				Keyword.ReportStep_Pass(testCase,"For offline sensor user is not able to toggle motion detection ");

			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"For offline sensor user is able to toggle motion detection");
			}
		}
		else
		{
			flag= flag && tss.scrollToUseMotionDetection();
		if(tss.isMotionDetectiondisabled())
		{
			Keyword.ReportStep_Pass(testCase,"For offline sensor user is not able to toggle motion detection ");

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"For offline sensor user is able to toggle motion detection");
		}
		}
		if(tss.ClickOnMotionSensitivityOption())
		{
			if(tss.isMotionSensitivitySaveButtonVisible())
			{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"For offline sensor user is able to click on motion sensitivity");

			}
			else
			{
			Keyword.ReportStep_Pass(testCase,"For offline sensor user is not able to go to motion sensitivity settings screen");
			}
		}
		return flag;
	}

	public static boolean VerifySensorOptionsforDelete(TestCases testCase,TestCaseInputs inputs)
	{
		boolean flag=true;
		ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);
		ThermostatSensorSettingScreen tss = new ThermostatSensorSettingScreen(testCase,inputs);

		if(tss.isIndoorAirSensorVisible())
		{
			Keyword.ReportStep_Pass(testCase, "Verified Successfully navigated to Indoor Air Sensor screen");
			int size= tss.getAvailableSensorSize();
			List<WebElement> sensornames= tss.getSensorNames();
			if(size!=0)
			{
				sensornames.get(0).click();
				Keyword.ReportStep_Pass(testCase, " Sensor Settings : Clicked on 1st sensor");
			}
			else
			{
				Keyword.ReportStep_Pass(testCase, "Sensor Setting: No Sensor is displayed");
			}
		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT SETTINGS: Unable to navigate Indoor Air Sensor screen");

		}
		if(tss.isOptionButtonVisible())
		{
			Keyword.ReportStep_Pass(testCase,"Sensor options button is present");
			tss.ClickOnOptionButton();
			if(tss.isDeleteSensorOptionVisible())
			{
				Keyword.ReportStep_Pass(testCase,"Sensor options - Delete sensor is present");
				tss.ClickOnDeleteSensorOption();
				if(tss.isDeleteSensorOptionVisible())
				{
					Keyword.ReportStep_Pass(testCase,"Delete Sensor screen is displayed");
					if(tss.isDeleteSensorTitleVisible())
					{
						Keyword.ReportStep_Pass(testCase,"Delete Sensor screen - titile is displayed");
						String gettitle = tss.getDeleteSensorTitle();
						if(gettitle.contentEquals("To delete a sensor, hold down the sensor's Connect button for 10 seconds ") || gettitle.contentEquals("To delete a sensor, hold down the sensor's Connect button for 10 seconds."))
						{

							Keyword.ReportStep_Pass(testCase,"Delete Sensor screen - title displayed is -" + gettitle );

						}
						else
						{
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Delete sensor screen title displayed is not correct - " + gettitle );

						}

					}
					else
					{
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Delete sensor screen title is not displayed");

					}
					if(MobileUtils.isRunningOnAndroid(testCase))
					{
					if(tss.isDeleteSensorImageVisible())
					{
						Keyword.ReportStep_Pass(testCase,"Delete Sensor screen - Image is displayed");

					}
					else
					{
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Delete sensor screen Image is not displayed");


					}
					}
					if(tss.isDeleteSensorDescVisible())
					{
						Keyword.ReportStep_Pass(testCase,"Delete Sensor screen - Desc is displayed");
						String getDesc = tss.getDeleteSensorDesc();
						if(getDesc.contentEquals("The sensor's light will turn Red and then blink Green") || getDesc.contentEquals("The sensor will turn solid red for 6 seconds to confirm its been deleted."))
						{
							Keyword.ReportStep_Pass(testCase,"Delete Sensor screen - Desc displayed is -" + getDesc );

						}
						else
						{
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Delete sensor screen desc displayed is not correct -" + getDesc);

						}

					}
					else
					{
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Delete sensor screen Desc is not displayed");


					}
					if(tss.isBackButtonVisible())
					{
						tss.ClickOnBackButton();
					}
				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Delete sensor screen is not displayed");

				}
			}
			else
			{

				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor options - Delete sensor is not present");

			}

		}
		else
		{
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor options button is not present");

		}

		return flag;
	}
	public static boolean clickOnCurrentPeriodAndChangePriority(TestCases testCase, TestCaseInputs inputs, String currentPeriod, String priority) {
		boolean flag=true;
		Schedule sc=new Schedule(testCase);

		WebElement period = null;
		String schedulePeriodToSelect="";
		PrimaryCard pc = new PrimaryCard(testCase);
		if (pc.isScheduleIconVisible()) {
			flag = flag && pc.clickOnScheduleIcon();
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Schedule button not found on Primary Card");
		}
		if (MobileUtils.isRunningOnAndroid(testCase)) {
			schedulePeriodToSelect = currentPeriod + "_Everyday";
			 period = testCase.getMobileDriver().findElement(By.xpath("//*[@content-desc='" + schedulePeriodToSelect + "']"));
		} else {
			schedulePeriodToSelect = "Everyday_" + currentPeriod+"_title";
			period = testCase.getMobileDriver().findElement(By.xpath("//*[@name='" + schedulePeriodToSelect + "']"));
		}



		if(period!=null)
		{
			period.click();
			Keyword.ReportStep_Pass(testCase, "Succesfully clicked on "+currentPeriod+" period");

		}

		flag = flag && JasperSchedulingUtils.setPriority(testCase, inputs, priority);

		sc.clickOnSaveButton();

		sc.clickOnBackButton();

		return flag;
	}
	public static boolean verifyCurrentSchedulePriorityStatus(TestCases testCase, TestCaseInputs inputs, String currentPeriod, String priority) {
		boolean flag=true;
		Schedule sc=new Schedule(testCase);
		WebElement period = null;
		String schedulePeriodToSelect="";
		PrimaryCard pc = new PrimaryCard(testCase);
		if (pc.isScheduleIconVisible()) {
			flag = flag && pc.clickOnScheduleIcon();
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Schedule button not found on Primary Card");
		}
		if (MobileUtils.isRunningOnAndroid(testCase)) {
			schedulePeriodToSelect = currentPeriod + "_Everyday";
			period = testCase.getMobileDriver().findElement(By.xpath("//*[@content-desc='" + schedulePeriodToSelect + "']"));
		} else {
			schedulePeriodToSelect = "Everyday_" + currentPeriod+"_title";
			period = testCase.getMobileDriver().findElement(By.xpath("//*[@name='" + schedulePeriodToSelect + "']"));
		}



		if(period!=null)
		{
			period.click();
			Keyword.ReportStep_Pass(testCase, "Succesfully clicked on "+currentPeriod+" period");
		}
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
		if(sc.getPrioritySet().equalsIgnoreCase(priority))
		{
		Keyword.ReportStep_Pass(testCase,"Current Priority  "+sc.getPrioritySet()+" on schedule ");
		}
		else
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Priority Status not visible");
		}
		}
		else
		{
			if(priority.equalsIgnoreCase("Selected Rooms"))
			{
				if(MobileUtils.isMobElementExists("XPATH", "//*[contains(@value,'Selected Rooms')]", testCase))
				{
					Keyword.ReportStep_Pass(testCase,"Current Priority Selected Room on schedule ");

				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Priority Status not visible");

				}
			}
			else if(priority.equalsIgnoreCase("Active Rooms"))
			{
				if(MobileUtils.isMobElementExists("XPATH", "//*[contains(@value,'Active Rooms')]", testCase))
				{
					Keyword.ReportStep_Pass(testCase,"Current Priority Active Rooms on schedule ");

				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Priority Status not visible");

				}
			}

		}
		sc.clickOnBackButton();
		sc.clickOnBackButton();
	return flag;
	}

	public static boolean AboveAndBelowIndoorTemperatureValues(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;

		WebElement element = null;
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		ManageAlertsScreen mas= new ManageAlertsScreen(testCase);

		if (mas.isIndoorTempToggleVisible(10)) {
			if (!mas.turnOnIndoorTempToggle()) {
				flag = false;
			} else {
				Random r = new Random();
				try
				{ String units=null;
				try
				{
					units=statInfo.getThermostatUnits();
				}
				catch(Exception e)
				{
					units=mas.getThermounits(testCase);
				}
				if (units.contains(GlobalVariables.FAHRENHEIT) ||units.contains("F")) {
					int belowValue = 0, aboveValue = 0, belowValueApp = 0, aboveValueApp = 0;
					do {
						belowValue = r.nextInt((89 - 50) + 1) + 50;
						aboveValue = r.nextInt((90 - 51) + 1) + 51;
					} while (belowValue >= aboveValue);

					if (MobileUtils.isRunningOnAndroid(testCase)) {
						mas.ClickAlertTemp();
						if (mas.isHumidityAlertAboveBelowVisible(10)) {
							belowValueApp = Integer.parseInt(mas.getTemperatureAlertBelow().split(String.valueOf(InputVariables.degree))[0]);
							aboveValueApp = Integer.parseInt(mas.getTemperatureAlertAbove().split(String.valueOf(InputVariables.degree))[0]);
							if (belowValueApp >= aboveValueApp) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below value in app is shown: " + belowValueApp+ " and Above value in app is shown: " + aboveValueApp);
							} else {
								Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: "+ belowValueApp + " and Above value is shown: " + aboveValueApp);
							}
							mas.ClickHumidityAlertBelow();
							try {
								if(!SelectTempAelrtsValue(testCase ,belowValue, String.valueOf(belowValue)+"\u00B0"+"F"))
								{
									flag = false;
								}
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error message: " + e.getMessage());
							}
							mas.ClickHumidityAlertAbove();
							try {
								if(!SelectTempAelrtsValue(testCase , aboveValue,String.valueOf(aboveValue)+"\u00B0"+"F"))
								{
									flag = false;
								}
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error message: " + e.getMessage());
							}

							if (mas.isHumidityAlertAboveBelowVisible(10)) {
								belowValueApp = Integer.parseInt(mas.getTemperatureAlertBelow().split(String.valueOf(InputVariables.degree))[0]);
								aboveValueApp = Integer.parseInt(mas.getTemperatureAlertAbove().split(String.valueOf(InputVariables.degree))[0]);
								Keyword.ReportStep_Pass(testCase, "[AfterChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
						}
					} else {

						mas.ClickAlertTemp();

						if (mas.isHumidityAlertAboveBelowVisible(10)) {
							belowValueApp = Integer.parseInt(mas.getIndoorBelowTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0", " ").trim());
							aboveValueApp = Integer.parseInt(mas.getIndoorAboveTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0", " ").trim());
						}
						if (belowValueApp >= aboveValueApp) {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below value in app is shown: " + belowValueApp+ " and Above value in app is shown: " + aboveValueApp);
						} else {
							Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
						}
						//mas.ClickTempAlertBelow();
						int i = 0;
						Point point = mas.getTemperatureChangePicker1().getLocation();
						Dimension dim = mas.getTemperatureChangePicker1().getSize();
						if (belowValueApp > belowValue) {

							while (!(Integer.parseInt(mas.getTempBelowValue().split("/")[0].replaceAll("\u00B0", " ").trim()) == belowValue)&& i < 50) {
								TouchAction tAction = new TouchAction(testCase.getMobileDriver());
								tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();
								i++;
							}
						} else {
							while (!(Integer.parseInt(mas.getTempBelowValue().split("/")[0].replaceAll("\u00B0", " ").trim()) == belowValue)&& i < 50) {
								TouchAction tAction = new TouchAction(testCase.getMobileDriver());
								tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();
								i++;
							}
						}
						int j = 0;
						 point = mas.getTemperatureChangePicker2().getLocation();
					     dim = mas.getTemperatureChangePicker2().getSize();
						if (aboveValueApp > aboveValue) {
							while (!(Integer.parseInt(mas.getTempAboveValue().split("/")[1].replaceAll("\u00B0", " ").trim()) == aboveValue)&& j < 50) {

								TouchAction tAction = new TouchAction(testCase.getMobileDriver());
								tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();
								j++;
							}
						} else {
							while (!(Integer.parseInt(mas.getTempAboveValue().split("/")[1].replaceAll("\u00B0", " ").trim()) == aboveValue)&& j < 50) {
								TouchAction tAction = new TouchAction(testCase.getMobileDriver());
								tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();
								j++;
							}
						}
						/*
						 * try { flag = flag &&
						 * MobileUtils.setValueInPicker(testCase, fieldObjects,
						 * "IndoorBelowTemperatureiOS",
						 * String.valueOf(belowValue) + "\u00B0"); flag = flag &&
						 * MobileUtils.setValueInPicker(testCase, fieldObjects,
						 * "IndoorAboveTemperatureiOS",
						 * String.valueOf(aboveValue) + "\u00B0");
						 *
						 * } catch (Exception e) { flag = false;
						 * Keyword.ReportStep_Fail(testCase,
						 * FailType.FUNCTIONAL_FAILURE, "Error message: " +
						 * e.getMessage()); }
						 */
					//as.ClickTempAlertBelow();
						if (mas.isHumidityAlertAboveBelowVisible(10)) {
							belowValueApp = Integer.parseInt(mas.getIndoorBelowTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0", " ").trim());
							aboveValueApp = Integer.parseInt(mas.getIndoorAboveTemperatureiOS(testCase).split(",")[0].replaceAll("\u00B0", " ").trim());
							Keyword.ReportStep_Pass(testCase, "[AfterChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
						}
						//mas.ClickTempAlertBelow();
					}
					if ((belowValueApp >= 50 && belowValueApp <= 89) && (aboveValueApp <= 90 && aboveValueApp >= 51)) {
						Keyword.ReportStep_Pass(testCase,
								"Below value is set within the range 50 and 89 AND Above value is set within the range 51 and 90");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not set within the range: Below(50->89) and Above(51->90)");
					}
				} else {
					double belowValue = 0, aboveValue = 0, belowValueApp = 0, aboveValueApp = 0;
					do {
						belowValue = (r.nextInt((365 - 40) + 1) + 40) / 10.0;
						belowValue = Math.round(belowValue * 2) / 2.0;
						aboveValue = (r.nextInt((370 - 45) + 1) + 45) / 10.0;
						aboveValue = Math.round(aboveValue * 2) / 2.0;
					} while (belowValue >= aboveValue);
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						mas.ClickAlertTemp();
						if (mas.isHumidityAlertAboveBelowVisible(10)) {
							belowValueApp = Double.parseDouble(mas.getTemperatureAlertBelow().split(String.valueOf(InputVariables.degree))[0]);
							aboveValueApp = Double.parseDouble(mas.getTemperatureAlertAbove().split(String.valueOf(InputVariables.degree))[0]);
							if (belowValueApp >= aboveValueApp) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below value in app is shown: " + belowValueApp													+ " and Above value in app is shown: " + aboveValueApp);
							} else {
								Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: "+ belowValueApp + " and Above value is shown: " + aboveValueApp);
							}
							mas.ClickTempAlertBelow();
							try {
								element = testCase.getMobileDriver().scrollTo(String.valueOf(belowValue)+"\u00B0"+"C");
								if (element == null) {
									mas.isElementVisible(String.valueOf(belowValue)+"\u00B0"+"C", 30);
									element=mas.getElementPresentOnPointer(belowValue);
								}

								if (element != null) {
									element.click();
								}
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error message: " + e.getMessage());
							}
							mas.ClickTempAlertAbove();
							try {

								element = testCase.getMobileDriver().scrollTo(String.valueOf(aboveValue)+"\u00B0"+"C");
								if (element == null) {
									mas.isElementVisible(String.valueOf(aboveValue)+"\u00B0"+"C", 30);
									element=mas.getElementPresentOnPointer(aboveValue);
								}

								if (element != null) {
									element.click();
								}
							} catch (Exception e) {
								flag = false;
								Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Error message: " + e.getMessage());
							}

							if (mas.isHumidityAlertAboveBelowVisible(10)) {
								belowValueApp = Double.parseDouble(mas.getTemperatureAlertBelow().split(String.valueOf(InputVariables.degree))[0]);
								aboveValueApp = Double.parseDouble(mas.getTemperatureAlertAbove().split(String.valueOf(InputVariables.degree))[0]);
								Keyword.ReportStep_Pass(testCase, "[AfterChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
							}
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
						}
					} else {

						if (mas.isHumidityAlertAboveBelowVisible(10)) {
							belowValueApp = Double.parseDouble(mas.getTempBelowValue().split("/")[0].replaceAll("\u00B0", " ").trim());
							aboveValueApp = Double.parseDouble(mas.getTempAboveValue().split("/")[1].replaceAll("\u00B0", " ").trim());
						}
						if (belowValueApp >= aboveValueApp) {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below value in app is shown: " + belowValueApp+ " and Above value in app is shown: " + aboveValueApp);
						} else {
							Keyword.ReportStep_Pass(testCase, "[BeforeChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
						}
						int i = 0;
						mas.ClickTempAlertBelow();
						Point point = mas.getTemperatureChangePicker1().getLocation();
						Dimension dim = mas.getTemperatureChangePicker1().getSize();
						if (belowValueApp > belowValue) {
							while (!(Double.parseDouble(mas.getTempBelowValue().split("/")[0].replaceAll("\u00B0", " ").trim()) == belowValue)&& i < 50) {

								TouchAction tAction = new TouchAction(testCase.getMobileDriver());
								tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();
								i++;
							}
						} else {
							while (!(Double.parseDouble(mas.getTempBelowValue().split(",")[0].replaceAll("\u00B0", "")) == belowValue)&& i < 50) {
								TouchAction tAction = new TouchAction(testCase.getMobileDriver());
								tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();
								i++;
							}
						}
						int j = 0;
						point = mas.getTemperatureChangePicker1().getLocation();
						dim = mas.getTemperatureChangePicker1().getSize();if (aboveValueApp > aboveValue) {
							while (!(Double.parseDouble(mas.getTempAboveValue().split("/")[1].replaceAll("\u00B0", " ").trim()) == aboveValue)&& j < 50) {
								TouchAction tAction = new TouchAction(testCase.getMobileDriver());
								tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 - 20))).release().perform();

								j++;
							}
						} else {
							while (!(Double.parseDouble(mas.getTempAboveValue().split("/")[1].replaceAll("\u00B0", " ").trim()) == aboveValue)&& j < 50) {
								TouchAction tAction = new TouchAction(testCase.getMobileDriver());
								tAction.tap(tapOptions().withPosition(point(point.getX() + dim.getWidth() / 2, point.getY() + dim.getHeight() / 2 + 20))).release().perform();
								j++;
							}
						}
						/*
						 * try { flag = flag &&
						 * MobileUtils.setValueInPicker(testCase, fieldObjects,
						 * "IndoorBelowTemperatureiOS",
						 * String.valueOf(belowValue) + "\u00B0"); flag = flag &&
						 * MobileUtils.setValueInPicker(testCase, fieldObjects,
						 * "IndoorAboveTemperatureiOS",
						 * String.valueOf(aboveValue) + "\u00B0");
						 *
						 * } catch (Exception e) { flag = false;
						 * Keyword.ReportStep_Fail(testCase,
						 * FailType.FUNCTIONAL_FAILURE, "Error message: " +
						 * e.getMessage()); }
						 */
					//	mas.ClickTempAlertBelow();
						if (mas.isHumidityAlertAboveBelowVisible(10)) {
							belowValueApp = Double.parseDouble(mas.getTempBelowValue().split("/")[0].replaceAll("\u00B0", " ").trim());
							aboveValueApp = Double.parseDouble(mas.getTempAboveValue().split("/")[1].replaceAll("\u00B0", " ").trim());
							Keyword.ReportStep_Pass(testCase, "[AfterChange] Below value is shown: " + belowValueApp+ " and Above value is shown: " + aboveValueApp);
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not shown");
						}
					}
					if ((belowValueApp >= 4.0 && belowValueApp <= 36.5)&& (aboveValueApp <= 37.0 && aboveValueApp >= 4.5)) {
						Keyword.ReportStep_Pass(testCase,"Below value is set within the range 4.0 and 36.5 AND Above value is set within the range 4.5 and 37.0");
					} else {
						flag = false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Below and Above values are not set within the range: Below(4.0->36.5) and Above(4.5->37.0)");
					}
				}
				}
				catch (NumberFormatException e)
				{
					e.printStackTrace();
				}
				catch (Exception e)
				{
					e.printStackTrace();
				}
			}
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "High/Low Temperature option not shown");
		}

		return flag;
	}

	public static boolean setupAndVerifyManageAlertsScreenForHumidity(TestCases testCase, TestCaseInputs inputs) {
		boolean flag=true;
		ManageAlertsScreen mas= new ManageAlertsScreen(testCase);
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		int  belowValueApp = 0, aboveValueApp = 0;
		WLDScreen ws=new WLDScreen(testCase);
		if(ws.isManageAlertButtonVisible())
		{
			ws.clickOnManageAlerts();
		}

		if( (mas.getIndoorHumdToggleStatus()).equalsIgnoreCase("OFF")
				|| (mas.getIndoorHumdToggleStatus()).equalsIgnoreCase("0")
				|| (mas.getIndoorHumdToggleStatus()).equalsIgnoreCase("false") )
		{
			Keyword.ReportStep_Pass(testCase, "Manage Alerts Screen: Indoor Humidity Alert Toggle is Off");

			flag= flag && mas.turnOnIndoorHumdToggle();
			if(statInfo.getDeviceType().contains("Storm") || statInfo.getDeviceType().contains("Flycatcher"))
			{
				mas.ClickAlertTemp();
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					belowValueApp = Integer.parseInt(mas.getHumidityAlertBelow().split("%")[0]);
					aboveValueApp = Integer.parseInt(mas.getHumidityAlertAbove().split("%")[0]);
				if((mas.getTemperatureAlertRangeValue(inputs).equalsIgnoreCase(5+"\u0025"+" /"+95+"\u0025")) )
				{
					Keyword.ReportStep_Pass(testCase, "Manage Alerts : Humidity Alert Range is displayed as "+5+"\u0025"+"/"+95+"\u0025");
				}
				else
				{
					flag= false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Manage Alerts : Humidity Alert Range is not displayed as "+belowValueApp+"\u0025"+"/"+aboveValueApp+"\u0025", false);
				}
				}
				else
				{
					if( (mas.getTemperatureAlertRangeValue(inputs).equalsIgnoreCase(5+"\u0025"+" /"+95+"\u0025")) )
					{
						Keyword.ReportStep_Pass(testCase, "Manage Alerts : Humidity Alert Range is displayed as "+5+"\u0025"+"/"+95+"\u0025");
					}
					else
					{
						flag= false;
						Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Manage Alerts : Humidity Alert Range is not displayed as "+belowValueApp+"\u0025"+"/"+aboveValueApp+"\u0025", false);
					}
				}

				FilterReminderScreen fr=new FilterReminderScreen(testCase);
				if(fr.isBackButtonVisible())
				{
					fr.clickOnBackButton();
					fr.clickOnBackButton();
					fr.clickOnBackButton();
				}

			}
		}
		else
		{
			Keyword.ReportStep_Pass(testCase, "Manage Alerts Screen: Indoor Temperature Alert Toggle is ON");
		}

		return flag;

	}

public static Boolean verifyEmailAlert(TestCases testCase, TestCaseInputs inputs, String AlertType, String Email, Boolean AlertStatus)
{
	Boolean flag = true;
	if(AlertStatus)
	{
		try
		{
		  Thread.sleep(10000);
		}
		catch(Exception e)
		{
			
		}
		
		if(isEmailAlertReceived(testCase, inputs, Email, AlertType))
		{
			Keyword.ReportStep_Pass(testCase , "Subject is displayed for " + AlertType);
		}else {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Subject displayed is not correct"+ AlertType );
			flag=false;
		}

	}
	else
	{
		try
		{
		  Thread.sleep(10000);
		}
		catch(Exception e)
		{
			
		}

		if(isEmailAlertReceived(testCase, inputs, Email, AlertType))
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Alert Email is displayed");
		}
		else
		{
			Keyword.ReportStep_Pass(testCase , "Alert email not displayed");
		}
		
		}
		return flag;
}

public static Boolean verifyToggleOnOff(String element,TestCases testCase,TestCaseInputs inputs, String onoff ) {
	Boolean flag = true;
	ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);

		ts.getToggleOnOff(element);
		if(onoff.equalsIgnoreCase("enabled"))
		{

			if(ts.getToggleOnOffValue(element).equalsIgnoreCase("1") || ts.getToggleOnOffValue(element).equalsIgnoreCase("ON")){
				Keyword.ReportStep_Pass(testCase, element + " is enabled");
			}
			else {
				flag=false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, element +" Toggle is not enabled");

			}

        }
		else if(onoff.equalsIgnoreCase("disabled"))
		{
				if(ts.getToggleOnOffValue(element).equalsIgnoreCase("0") || ts.getToggleOnOffValue(element).equalsIgnoreCase("OFF")){
					Keyword.ReportStep_Pass(testCase, element + " is disabled");
				}
				else {
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, element +" Toggle is not disabled");

				}

		}
	return flag;
}

public static boolean verifyPopupisDisplayed(TestCases testCase,
		TestCaseInputs inputs, String popup) {
	boolean flag=true;
	WLDLeakDetectorSettings wld=new WLDLeakDetectorSettings(testCase);
	if(!MobileUtils.isRunningOnAndroid(testCase)){
		if(wld.isAlertRangeUpdatedTitleAvailable()){

			Keyword.ReportStep_Pass(testCase,"Pop up Title :-"+wld.getAlertRangeUpdatedTitle());

		}else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," pop up titles not present");
			flag=false;

		}

		if(wld.isAlertRangeUpdatedDescriptionAvailable()){

			Keyword.ReportStep_Pass(testCase,"Pop up Description :-"+wld.getAlertRangeUpdatedDescription());

		}else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," pop up description not present");
			flag=false;

		}

		if(wld.isOKButtonAvailable()){

			Keyword.ReportStep_Pass(testCase,"Pop up ok button present");
			flag=flag && wld.ClickOnOKButton();

		}else{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE," pop up OK button not present");
			flag=false;

		}
	}else{
		Keyword.ReportStep_Pass(testCase,"For Android: Toast msg cannot be veriied through automation");
	}
	return flag;
}

public static boolean RenameThermostat(TestCases testCase, TestCaseInputs inputs) {
boolean flag=true;

ThermostatConfigurationScreen tc = new ThermostatConfigurationScreen(testCase,inputs);
SecondaryCardSettings sc=new SecondaryCardSettings(testCase);
ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);
ThermostatSensorSettingScreen tss = new ThermostatSensorSettingScreen(testCase,inputs);
DeviceInformation statInfo=new DeviceInformation(testCase, inputs);
String addPeriodname=tss.getRandomRoomName();

if(tc.isDeleteThermostatOptionVisible())
{
//String EmptyString = "NewTestRoom";

inputs.setInputValue(GlobalVariables.Current_StatName,inputs.getInputValue("LOCATION1_DEVICE1_NAME"));

if(MobileUtils.isRunningOnAndroid(testCase))
{
tc.ClickOnThermoStatNameEdit();
//tc.setThermoStatNameEdit(EmptyString);
}
else
{
tc.isThermostatVisible(inputs,"");
tc.ClickOnThermoStatButton(inputs,"");
WebElement tap =tc.getThermoStatButton(inputs,"");
}


if(tss.isSelectRoomVisible())
{
	Keyword.ReportStep_Pass(testCase, "Sensor Select Room screen is displayed");

}
else
{
	flag = false;
	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Select Room Type is not displayed");
}

if(tss.isBedroomOptionVisible())
{
	Keyword.ReportStep_Pass(testCase, "Sensor Setting: Bedroom option is displayed");
}
else
{
	flag = false;
	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Bedroom option is not displayed");
}

if(tss.isLivingRoomOptionVisible())
{
	Keyword.ReportStep_Pass(testCase, "Sensor Setting: Living Room option is displayed");
}
else
{
	flag = false;
	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Living Room option is not displayed");
}
if(tss.isDiningRoomOptionVisible())
{
	Keyword.ReportStep_Pass(testCase, "Sensor Setting: Dining Room option is displayed");
}
else
{
	flag = false;
	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Dining Room option is not displayed");
}


if(tss.isFamilyRoomOptionVisible())
{
	Keyword.ReportStep_Pass(testCase, "Sensor Setting: Family Room option is displayed");
}
else
{
	flag = false;
	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Family Room option is not displayed");
}

if(tss.isEntryOptionVisible())
{
	Keyword.ReportStep_Pass(testCase, "Sensor Setting: Entry option is displayed");
}
else
{
	flag = false;
	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Entry option is not displayed");
}
if(tss.isKitchenOptionVisible())
{
	Keyword.ReportStep_Pass(testCase, "Sensor Setting: Kitchen option is displayed");
}
else
{
	flag = false;
	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Kitchen option is not displayed");
}

if(tss.isHallwayOptionVisible())
{
	Keyword.ReportStep_Pass(testCase, "Sensor Setting: Hallway option is displayed");
}
else
{
	flag = false;
	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Hallway option is not displayed");
}
if(tss.isAddRoomVisible())
{
	Keyword.ReportStep_Pass(testCase, "Select Room :Add Room visible");
	tss.ClickOnAddRoomOption();
}
else
{
	testCase.getMobileDriver().scrollToExact("+ Add Room");
	tss.scrollToEnd(testCase, inputs);
	if(tss.isAddRoomVisible())
	{
		Keyword.ReportStep_Pass(testCase, "Select Room :Add Room visible");
		tss.ClickOnAddRoomOption();
	}

}

if(tss.isCustomRoomNameFieldVisible())
{
	Keyword.ReportStep_Pass(testCase, "Select Room :Custom Room field visible");
	tss.ClickOnCustomRoomNameField();
}
if(tss.setCustomRoomName(addPeriodname))
{				Keyword.ReportStep_Pass(testCase, " stat name changed:" +addPeriodname);


}
else
{
	flag = false;
	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Unable to change stat name");


}
if(MobileUtils.isRunningOnAndroid(testCase))
{
    int height = testCase.getMobileDriver().manage().window().getSize().getHeight();
    int width = testCase.getMobileDriver().manage().window().getSize().getWidth();

    testCase.getMobileDriver().tap(1 , width - 80 ,height - 110);

}
else
{
	MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Return");
	MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "next");
	if(sc.isBackButtonVisible())
	{
	sc.clickOnBackButton();
	}else
	{
	flag = false;
	Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Back button is not visible");
	}
	navigateToThermostatConfiguration(testCase);

}


String statname;
if(!MobileUtils.isRunningOnAndroid(testCase))
{
statname=tc.getThermoStatButton(inputs,addPeriodname).getAttribute("value");
}
else
{
statname=tc.getThermoStatName().getAttribute("text");
}
if(statname.equalsIgnoreCase(addPeriodname))
{
	inputs.setInputValue("LOCATION1_NEWDEVICE1_NAME", addPeriodname );

Keyword.ReportStep_Pass(testCase, "Verified Successfully Thermostat Settings: Device name is changed to " + addPeriodname);
}
else
{
flag = false;
Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Thermostat Settings: Device name is not changed " + statname );
}

}
return flag;


}

public static boolean Setcountry(TestCases testCase,TestCaseInputs inputs)
{
	boolean flag=true;
	String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
	LoginScreen ls;
	CreateAccountScreen cas;
	ChangeCountryScreen ccs;

	if(inputs.isInputAvailable("LANGUAGE"))
	{
		ls=new LoginScreen(testCase,language);
		cas=new CreateAccountScreen(testCase,language);
		ccs= new ChangeCountryScreen(testCase,language);

	}else{

		ls=new LoginScreen(testCase);
		cas=new CreateAccountScreen(testCase);
		ccs= new ChangeCountryScreen(testCase);
	}
	EditAddressLocation eal=new EditAddressLocation(testCase);

	if(MobileUtils.isRunningOnAndroid(testCase))
	{
		if(eal.isChangeCountryButtonVisible())
		{
			eal.clickOnChangeCountryButton();
		}

		if(ccs.isCountrySearchTextFieldVisible())
		{
			Keyword.ReportStep_Pass(testCase,"Successfully Navigated to select country.");
		}}else
		{
			eal.clickOnCountryButton();
			ccs.isCountrySearchTextFieldAvailable(10);
		}

	String countryname="";

	if(language.equalsIgnoreCase("English_US"))
	{
		countryname="United States";
	}
	else if(language.equalsIgnoreCase("English_UK"))
	{
		countryname="United Kingdom";
	}

	else if(language.equalsIgnoreCase("English_IR"))
	{
		countryname="Ireland";
	}
	else if(language.equalsIgnoreCase("French_CA"))
	{
		countryname="Canada";
	}
	else if(language.equalsIgnoreCase("French"))
	{
		countryname="France";
	}
	else if(language.equalsIgnoreCase("French_BE"))
	{
		countryname="Belgique";
	}
	else if(language.equalsIgnoreCase("French_SUI"))
	{
		countryname="Suisse";
	}
	else if(language.equalsIgnoreCase("Dutch"))
	{
		countryname="Nederland";
	}
	else if(language.equalsIgnoreCase("Dutch_BE"))
	{
		countryname="Belgi";
	}
	else if(language.equalsIgnoreCase("German"))
	{
		countryname="Deutschland";
	}
	else if( language.equalsIgnoreCase("German_AUS") )
	{
		countryname="sterreich";
	}
	else if( language.equalsIgnoreCase("German_SUI"))
	{
		countryname="Schweiz";
	}
	else if(language.equalsIgnoreCase("Italian") )
	{
		countryname="Italia";
	}
	else if(language.equalsIgnoreCase("Italian_SUI"))
	{
		countryname="Svizzera";
	}
	else if(language.equalsIgnoreCase("PortuguesePL"))
	{
		countryname="Portugal";
	}
	else if(language.equalsIgnoreCase("PortugueseBR"))
	{
		countryname="Brasil";
	}
	else if(language.equalsIgnoreCase("Spanish"))
	{
		countryname="Espa";
	}
	else if(language.equalsIgnoreCase("Spanish_US"))
	{
		countryname="Esta";
	}
	else if(language.equalsIgnoreCase("Spanish_Mexico"))
	{
		countryname="xico";
	}
	else if(language.equalsIgnoreCase("Spanish_Costarica"))
	{
		countryname="Costa Rica";
	}
	else if(language.equalsIgnoreCase("Spanish_Colombia"))
	{
		countryname="Colombia";
	}
	else if(language.equalsIgnoreCase("Spanish_Panama"))
	{
		countryname="Panam";
	}
	else if(language.equalsIgnoreCase("Spanish_Peru"))
	{
		countryname="Per";
	}
	else if(language.equalsIgnoreCase("Spanish_Chile"))
	{
		countryname="Chile";
	}
	else if(language.equalsIgnoreCase("Spanish_Argentina"))
	{
		countryname="Argentina";
	}
	else if(language.equalsIgnoreCase("Polish"))
	{
		countryname="Polska";
	}
	else if(language.equalsIgnoreCase("Slovakian"))
	{
		countryname="Slovensko";
	}
	else if(language.equalsIgnoreCase("Hungarian"))
	{
		countryname="Magyarorsz";
	}
	else if(language.equalsIgnoreCase("Czech"))
	{
		countryname="esk";
	}
	else if(language.equalsIgnoreCase("Slovenian"))
	{
			countryname="Slovenia";
	}
	else if(language.equalsIgnoreCase("Romanian"))
	{
		countryname="Rom";
	}
	else if(language.equalsIgnoreCase("Estonia"))
	{

			countryname="Estonia";

	}
	else if(language.equalsIgnoreCase("LITHUANIA"))
	{
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			countryname="Lithuania";
		}else
		{
			countryname="Lithuania";
		}

	}
	else if(language.equalsIgnoreCase("Latvia"))
	{
		countryname="Latvia";

	}
	else if(language.equalsIgnoreCase("Bulgarian"))
	{
		try {
			countryname=optikUtils.readMapping(testCase,"Bulgarian", "Mapping_Android","CountryName");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	else if(language.equalsIgnoreCase("Croatian"))
	{
		countryname="Croatia";
	}
	else if(language.equalsIgnoreCase("French_Morocco"))
	{
		countryname="Maroc";
	}
	else if(language.equalsIgnoreCase("Arabic_Morocco"))
	{
		countryname="Moroc";
	}
	else if(language.equalsIgnoreCase("Kenya"))
	{
		countryname="Kenya";
	}
	else if(language.equalsIgnoreCase("Malaysia"))
	{
		countryname="Malaysia";
	}
	else if(language.equalsIgnoreCase("Singapore"))
	{
		countryname="Singapore";
	}
	else if(language.equalsIgnoreCase("English_NewZealand"))
	{
		countryname="New Zealand";
	}
	else if(language.equalsIgnoreCase("SOUTHAFRICA"))
	{
		countryname="South Africa";
	}
	else if(language.equalsIgnoreCase("Turkey"))
	{
		countryname="Turkey";
	}
	else if(language.equalsIgnoreCase("Arabic_UAE"))
	{
		countryname="United Arab Emirates";
	}
	else if(language.equalsIgnoreCase("Ukraine"))
	{
		countryname="Ukraine";
	}
	else if(language.equalsIgnoreCase("Spanish_PuertoRico"))
	{
		countryname="Puerto Rico";
	}
	else if(language.equalsIgnoreCase("Finnish"))
	{
		countryname="Finland";
	}
	else if(language.equalsIgnoreCase("Korean"))
	{
		countryname="Korea";
	}
	else if(language.equalsIgnoreCase("Arabic_SaudiArabia"))
	{
		countryname="Saudi Arabia";
	}
	else if(language.equalsIgnoreCase("Arabic_Tunisia"))
	{
		countryname="Tunisia";
	}
	else if(language.equalsIgnoreCase("Arabic_Egypt"))
	{
		countryname="Egypt";
	}
	else if(language.equalsIgnoreCase("NorwegianNynorsk")||language.equalsIgnoreCase("NorwegianBokmal"))
	{
		countryname="Norway";
	}
	else if(language.equalsIgnoreCase("English_VI"))
	{
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
		countryname="U.S. Virgin Islands";
		}
		else
		{
			countryname="Virgin Islands, U.S.";
		}
	}
	else if(language.equalsIgnoreCase("English_VG"))
	{
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
		countryname="British Virgin";
		}
		else
		{
			countryname="Virgin Islands, British";
		}
	}
	else if(language.equalsIgnoreCase("Greece"))
	{

		try {
			countryname=optikUtils.readMapping(testCase,"Greece", "Mapping_Android","CountryName");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	else if(language.equalsIgnoreCase("Chinese"))
	{
		countryname="China";
	}
	else if(language.equalsIgnoreCase("Japanese"))
	{
		countryname="Japan";
	}
	else if(language.equalsIgnoreCase("Sweden"))
	{
		countryname="Sweden";
	}
	else if(language.equalsIgnoreCase("Spanish_PuertoRico"))
	{
		countryname="Puerto Rico";
	}
	else{
		countryname="United States";
	}
		if(ccs.isCountrySearchTextFieldVisible())
	{
		ccs.SetCountrySearchTextField(countryname);
	}
	if(MobileUtils.isRunningOnAndroid(testCase))
	{
		MobileUtils.hideKeyboard(testCase.getMobileDriver());
	}

	if(ccs.SelectCountry(countryname))
	{
		Keyword.ReportStep_Pass(testCase, "Click on "+countryname);
	}
	else
	{
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to click on" +countryname+"country");
		flag=false;
	}
	if(MobileUtils.isRunningOnAndroid(testCase))
	{
		MobileUtils.hideKeyboard(testCase.getMobileDriver());
	}
	else
	{

	}
	if(language.contains("Romanian")){
		if(ccs.SelectCountry(countryname))
		{
			Keyword.ReportStep_Pass(testCase, "Click on "+countryname);
		}
	}


	return false;

}

public static String Verifycountry(TestCases testCase,TestCaseInputs inputs)
{
	boolean flag=true;
	String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
	String countryname="";

	if(language.equalsIgnoreCase("English_US"))
	{
		countryname="United States";
	}
	else if(language.equalsIgnoreCase("English_UK"))
	{
		countryname="United Kingdom";
	}

	else if(language.equalsIgnoreCase("English_IR"))
	{
		countryname="Ireland";
	}
	else if(language.equalsIgnoreCase("French_CA"))
	{
		countryname="Canada";
	}
	else if(language.equalsIgnoreCase("French"))
	{
		countryname="France";
	}
	else if(language.equalsIgnoreCase("French_BE"))
	{
		countryname="Belgique";
	}
	else if(language.equalsIgnoreCase("French_SUI"))
	{
		countryname="Suisse";
	}
	else if(language.equalsIgnoreCase("Dutch"))
	{
		countryname="Nederland";
	}
	else if(language.equalsIgnoreCase("Dutch_BE"))
	{
		countryname="Belgi";
	}
	else if(language.equalsIgnoreCase("Dutch_SUI"))
	{
		countryname="Zwitserland";
	}
	else if(language.equalsIgnoreCase("German"))
	{
		countryname="Deutschland";
	}
	else if( language.equalsIgnoreCase("German_AUS") )
	{
		countryname="sterreich";
	}
	else if( language.equalsIgnoreCase("German_SUI"))
	{
		countryname="Schweiz";
	}
	else if(language.equalsIgnoreCase("Italian") )
	{
		countryname="Italia";
	}
	else if(language.equalsIgnoreCase("Italian_SUI"))
	{
		countryname="Svizzera";
	}
	else if(language.equalsIgnoreCase("PortuguesePL"))
	{
		countryname="Portugal";
	}
	else if(language.equalsIgnoreCase("PortugueseBR"))
	{
		countryname="Brasil";
	}
	else if(language.equalsIgnoreCase("Spanish"))
	{
		countryname="Espa";
	}
	else if(language.equalsIgnoreCase("Spanish_Mexico"))
	{
		countryname="xico";
	}
	else if(language.equalsIgnoreCase("Spanish_Costarica"))
	{
		countryname="Costa Rica";
	}
	else if(language.equalsIgnoreCase("Spanish_Colombia"))
	{
		countryname="Colombia";
	}
	else if(language.equalsIgnoreCase("Spanish_Panama"))
	{
		countryname="Panam";
	}
	else if(language.equalsIgnoreCase("Spanish_Peru"))
	{
		countryname="Per";
	}
	else if(language.equalsIgnoreCase("Spanish_Chile"))
	{
		countryname="Chile";
	}
	else if(language.equalsIgnoreCase("Spanish_Argentina"))
	{
		countryname="Argentina";
	}
	else if(language.equalsIgnoreCase("Polish"))
	{
		countryname="Polska";
	}
	else if(language.equalsIgnoreCase("Slovakian"))
	{
		countryname="Slovensko";
	}
	else if(language.equalsIgnoreCase("Hungarian"))
	{
		countryname="Magyarorsz";
	}
	else if(language.equalsIgnoreCase("Czech"))
	{
		countryname="esk";
	}
	else if(language.equalsIgnoreCase("Slovenian"))
	{
			countryname="Slovenia";
	}
	else if(language.equalsIgnoreCase("Romanian"))
	{
		countryname="Rom";
	}
	else if(language.equalsIgnoreCase("Estonia"))
	{

			countryname="Estonia";

	}
	else if(language.equalsIgnoreCase("LITHUANIA"))
	{
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			countryname="Lithuania";
		}else
		{
			countryname="Lithuania";
		}

	}
	else if(language.equalsIgnoreCase("Latvia"))
	{
		countryname="Latvia";

	}
	else if(language.equalsIgnoreCase("Bulgarian"))
	{
		try {
			countryname=optikUtils.readMapping(testCase,"Bulgarian", "Mapping_Android","CountryName");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	else if(language.equalsIgnoreCase("Croatian"))
	{
		countryname="Croatia";
	}
	else if(language.equalsIgnoreCase("French_Morocco"))
	{
		countryname="Maroc";
	}
	else if(language.equalsIgnoreCase("Arabic_Morocco"))
	{
		countryname="Moroc";
	}
	else if(language.equalsIgnoreCase("Kenya"))
	{
		countryname="Kenya";
	}
	else if(language.equalsIgnoreCase("Malaysia"))
	{
		countryname="Malaysia";
	}
	else if(language.equalsIgnoreCase("Singapore"))
	{
		countryname="Singapore";
	}
	else if(language.equalsIgnoreCase("English_NewZealand"))
	{
		countryname="New Zealand";
	}
	else if(language.equalsIgnoreCase("SOUTHAFRICA"))
	{
		countryname="South Africa";
	}
	else if(language.equalsIgnoreCase("Turkey"))
	{
		countryname="Turkey";
	}
	else if(language.equalsIgnoreCase("Arabic_UAE"))
	{
		countryname="United Arab Emirates";
	}
	else if(language.equalsIgnoreCase("Ukraine"))
	{
		countryname="Ukraine";
	}
	else if(language.equalsIgnoreCase("Spanish_PuertoRico"))
	{
		countryname="Puerto Rico";
	}
	else if(language.equalsIgnoreCase("Finnish"))
	{
		countryname="Finland";
	}
	else if(language.equalsIgnoreCase("Korean"))
	{
		countryname="Korea";
	}
	else if(language.equalsIgnoreCase("Arabic_SaudiArabia"))
	{
		countryname="Saudi Arabia";
	}
	else if(language.equalsIgnoreCase("Arabic_Tunisia"))
	{
		countryname="Tunisia";
	}
	else if(language.equalsIgnoreCase("Arabic_Egypt"))
	{
		countryname="Egypt";
	}
	else if(language.equalsIgnoreCase("NorwegianNynorsk")||language.equalsIgnoreCase("NorwegianBokmal"))
	{
		countryname="Norway";
	}
	else if(language.equalsIgnoreCase("English_VI"))
	{
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
		countryname="U.S. Virgin Islands";
		}
		else
		{
			countryname="Virgin Islands, U.S.";
		}
	}
	else if(language.equalsIgnoreCase("English_VG"))
	{
		if(MobileUtils.isRunningOnAndroid(testCase))
		{
		countryname="British Virgin";
		}
		else
		{
			countryname="Virgin Islands, British";
		}
	}
	else if(language.equalsIgnoreCase("Greece"))
	{

		try {
			countryname=optikUtils.readMapping(testCase,"Greece", "Mapping_Android","CountryName");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	else if(language.equalsIgnoreCase("Chinese"))
	{
		countryname="China";
	}
	else if(language.equalsIgnoreCase("Japanese"))
	{
		countryname="Japan";
	}
	else if(language.equalsIgnoreCase("Sweden"))
	{
		countryname="Sweden";
	}
	else if(language.equalsIgnoreCase("Spanish_PuertoRico"))
	{
		countryname="Puerto Rico";
	}
	else if(language.equalsIgnoreCase("Denmark"))
	{
		countryname="Denmark";
	}
	else{
		countryname="United States";
	}

	return countryname;

}


public static boolean checkElementForOffline(String element,TestCases testCase) {
	boolean flag=true;
	ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);
	if (ts.isElementdisabled(element)) {
		Keyword.ReportStep_Pass(testCase, element + " is grayed out on secondary card screen");
	} else if (ts.getToggleOnOffdisabled(element)) {
		Keyword.ReportStep_Pass(testCase, element + " is grayed out on secondary card screen");
	}else {
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
				element + " does not exists on secondary card screen");
	}
	return flag;
}


public static boolean VerifySensorModelAndFirmware(TestCases testCase, TestCaseInputs inputs) {

	boolean flag=true;
	ThermostatSensorSettingScreen tss = new ThermostatSensorSettingScreen(testCase,inputs);



	if(tss.isIndoorAirSensorVisible())
	{
		Keyword.ReportStep_Pass(testCase, "Verified Successfully navigated to Indoor Air Sensor screen");
	}
	else
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT SETTINGS: Unable to navigate Indoor Air Sensor screen");

	}

	if(MobileUtils.isRunningOnAndroid(testCase))
	{
		int size= tss.getAvailableSensorSize();

		List<WebElement> sensornames= tss.getSensorNames();
		List<WebElement> sensortemp=tss.getAllSensorTemperature();
		List<WebElement> sensorhumidity=tss.getAllSensorHumidity();


		for(int i=0;i<size;i++)
		{
			if(sensornames.get(i)!=null)
			{
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Name : "+sensornames.get(i).getText()+" is displayed");
				}
				else
				{
					Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor : "+sensornames.get(i).getAttribute("value")+" is displayed");
				}

				if(sensortemp.get(i)!=null)
				{

					if(MobileUtils.isRunningOnAndroid(testCase))
					{
						Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Temperature : "+sensortemp.get(i).getText()+" is displayed");
					}
					else
					{
						Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Temperature : "+sensortemp.get(i).getAttribute("value")+" is displayed");
					}

				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Indoor Air Sensor: Unable to get sensor temperature");
				}

				if(sensorhumidity.get(i)!=null)
				{

					if(MobileUtils.isRunningOnAndroid(testCase))
					{
						Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Humidity : "+sensorhumidity.get(i).getText()+" is displayed");
					}
					else
					{
						Keyword.ReportStep_Pass(testCase, " Indoor Air Sensor Humidity : "+sensorhumidity.get(i).getAttribute("value")+" is displayed");
					}

				}
				else
				{
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Indoor Air Sensor: Unable to get sensor humidity");
				}

			}

		}

		if(size!=0)
		{
			sensornames.get(0).click();
			Keyword.ReportStep_Pass(testCase, " Sensor Settings : Clicked on 1st sensor");
		}
		else
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: No Sensor is displayed");
		}


	}

	else
	{

		for(int i=0;i<5;i++)
		{
			if(tss.getIOSSensorsName(i).equalsIgnoreCase("empty"))
			{
				Keyword.ReportStep_Pass(testCase, " Sensor Settings :"+i+" is displayed");

				break;
			}
			else
			{
				Keyword.ReportStep_Pass(testCase, " Sensor Settings Temperature and Humidity: "+tss.getIOSSensorsTempHumidity(i)+" is displayed");
				Keyword.ReportStep_Pass(testCase, " Sensor Settings :"+tss.getIOSSensorsName(i)+" Sensor added");
			}



		}

		if(tss.ClickOnSensor(0))
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Clicked on 1st Sensor");
		}
		else
		{
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: No Sensor is displayed");
		}


	}


	if(tss.isSensorsSettingsVisible())
	{
		Keyword.ReportStep_Pass(testCase, "Sensor Setting: Verified Successfully navigated to Sensor Setting screen");
	}
	else
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Failed to navigate to sensor settings page");
	}

	if(tss.isSensorsHeaderVisible())
	{
		Keyword.ReportStep_Pass(testCase, "Sensor Setting: Sensor name"+tss.getSensorsHeaderName());
	}
	else
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Sensor name is not displayed");
	}

LocationInformation locInfo = new LocationInformation(testCase, inputs);


DeviceInformation statInfo = new DeviceInformation(testCase, inputs);

	if(tss.isDeviceModelLabelVisible())
	{
		try {
			if(tss.getDeviceModelInfo().equals(statInfo.getDeviceModel(testCase,inputs, statInfo.getDeviceID(), statInfo.getDeviceMacID(),String.valueOf(locInfo.getLocationID())))) {
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Model number"+tss.getDeviceModelInfo()+" is displayed correctly conform from firmware side");
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: "+tss.getDeviceModelInfo()+"Device Model Info is not displayed correctly from chapi "+statInfo.getDeviceModel(testCase,inputs, statInfo.getDeviceID(), statInfo.getDeviceMacID(),String.valueOf(locInfo.getLocationID())));
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	else
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Device Model Info is  not displayed");
	}

	if(tss.isDeviceFirmwarVersionVisible())
	{
		try {
			if(tss.getDeviceFirmwarVersionInfo().equals(statInfo.getDeviceFirmwareVersion(testCase,inputs, statInfo.getDeviceID(), statInfo.getDeviceMacID(),String.valueOf(locInfo.getLocationID())))) {
			Keyword.ReportStep_Pass(testCase, "Sensor Setting: Firmware version "+tss.getDeviceFirmwarVersionInfo()+" is displayed correctly conform from firmware side");
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: "+tss.getDeviceFirmwarVersionInfo()+" Device Firmware version Info is not displayed correctly from chapi "+statInfo.getDeviceFirmwareVersion(testCase,inputs, statInfo.getDeviceID(), statInfo.getDeviceMacID(),String.valueOf(locInfo.getLocationID())));
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	else
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor Setting: Device Firmware version is not displayed");
	}



	return flag;


}

public static boolean VerifySensorAlphabeticalOrder(TestCases testCase,TestCaseInputs inputs)
{
	boolean flag=true;
	ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);
	ThermostatSensorSettingScreen tss = new ThermostatSensorSettingScreen(testCase,inputs);
	ArrayList<String> obtainedList = new ArrayList<>();
	if(tss.isIndoorAirSensorVisible())
	{
		Keyword.ReportStep_Pass(testCase, "Verified Successfully navigated to Indoor Air Sensor screen");
		int size= tss.getAvailableSensorSize();
		List<WebElement> sensornames= tss.getSensorNames();
		for(WebElement we:sensornames){
			   obtainedList.add(we.getText());
			}
			ArrayList<String> sortedList = new ArrayList<>();
			for(String s:obtainedList){
			sortedList.add(s);
			}
			Collections.sort(sortedList);

			if(sortedList.equals(obtainedList))
			{
				Keyword.ReportStep_Pass(testCase, "Sensors are in alphabetical order");

			}
			else
			{
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Sensor are not in alphabetical order");


			}
	}
	else
	{
		flag = false;
		Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"THERMOSTAT SETTINGS: Unable to navigate Indoor Air Sensor screen");

	}


	return flag;
}

public static boolean ThermostatConfigurationPageSetting(TestCases testCase,TestCaseInputs inputs) {
	boolean flag=true;
	int index=0;
	ThermostatConfigurationScreen tc=new ThermostatConfigurationScreen(testCase, inputs);

		while(index<5) {
			try {
				if((!MobileUtils.isRunningOnAndroid(testCase)) && (index==1 || index==0)) {
				}
				else if((!MobileUtils.isRunningOnAndroid(testCase)) && (index==2)) {
					Keyword.ReportStep_Pass(testCase, "THERMOSTAT CONFIGURATION :"+ tc.getThermostatConfigurationText(index) + " displayed lable and setting value is :"+ tc.getThermostatConfigurationStatus(index-1) );
				}else if((!MobileUtils.isRunningOnAndroid(testCase)) && (index==4)) {
					Keyword.ReportStep_Pass(testCase, "THERMOSTAT CONFIGURATION :"+ tc.getThermostatConfigurationText(index) + " displayed lable ");
				}else if((MobileUtils.isRunningOnAndroid(testCase)) && (index==0 || index==1)) {
				}else {
			Keyword.ReportStep_Pass(testCase, "THERMOSTAT CONFIGURATION :"+ tc.getThermostatConfigurationText(index) + " displayed lable and setting value is :"+ tc.getThermostatConfigurationStatus(index) );
				}
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"does not exists on Thermostat Configuration Page Setting displayed lable and setting value");
			}

			index++;
		}


	return flag;
}

public static boolean VerifySystemModeOptionAndInfoDashboard(TestCases testCase, TestCaseInputs inputs) {

	boolean flag=true;

		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		String statetype=statInfo.getDeviceType();
		Dashboard db=new Dashboard(testCase);
		SystemMode sm=new SystemMode(testCase);
		String mode = statInfo.getThermoStatMode();
		String dbmode = db.getCurrentModeText();
		String dbtemp = db.getCurrentTemp();
		
		if(mode.equalsIgnoreCase("Heat"))
		{
			if(dbmode.contains("Heating") || dbmode.contains("HEATING"))
			  {
			    Keyword.ReportStep_Pass(testCase, "Heat mode is displayed on dashboard");
			  }
			 else
			  {
				  flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Heat mode is not displayed on dashboard");


			  }

		}
		else if(mode.equalsIgnoreCase("Cool"))
		{
			if(dbmode.contains("Cooling") || dbmode.contains("COOLING"))
			  {
			    Keyword.ReportStep_Pass(testCase, "Cool mode is displayed on dashboard");
			  }
			 else
			  {
				  flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Cool mode is not displayed on dashboard");


			  }

		}
		else if(mode.equalsIgnoreCase("Off"))
		{

		  if(dbmode.contains("OFF") || dbmode.contains("Off"))
		  {
		    Keyword.ReportStep_Pass(testCase, "OFF mode is displayed on dashboard");

		  if(dbtemp.equalsIgnoreCase("--"))
		  {
				Keyword.ReportStep_Pass(testCase, "The setpoint displayed for OFF mode is --" );

		  }
		  else
		  {
			  flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Set point displayed for OFF mode is not --");


		  }
		  }
		  else
		  {
			  flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"OFF mode is not displayed on dashboard");


		  }
		}
	return flag;

	}

public static boolean VerifySystemModeOptionAndInfoDashboardEquipmentStatus(TestCases testCase, TestCaseInputs inputs) {

	boolean flag=true;

		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		String statetype=statInfo.getDeviceType();
		Dashboard db=new Dashboard(testCase);
		SystemMode sm=new SystemMode(testCase);
		String mode = statInfo.getThermoStatMode();
		String dbmode = db.getCurrentModeText();
		String dbtemp = db.getCurrentTemp();
		PrimaryCard pc=new PrimaryCard(testCase);
		double targetTemp=00.00;
		
		if(mode.equalsIgnoreCase("Heat"))
		{
			
			if(!dbmode.contains("Heating") || !dbmode.contains("HEATING"))
			  {
			
			if(Integer.parseInt(dbmode.substring(0, 2)) >=  Integer.parseInt(dbtemp)) {
				
				
				
				targetTemp=Integer.parseInt(dbmode.substring(0, 2))+3;
				
			}
			
			//navigateToPrimaryCard(testCase);
			
			setTargettempOnDashboard(testCase, inputs, targetTemp);
			
		
			
			  }
			
			pc.isXYZVisible(120);
			
			dbmode = db.getCurrentModeText();
			
			if(dbmode.contains("Heating") || dbmode.contains("HEATING"))
			  {
			    Keyword.ReportStep_Pass(testCase, "Heat mode is displayed on dashboard");
			  }
			 else
			  {
				  flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Heat mode is not displayed on dashboard");


			  }

		}
		else if(mode.equalsIgnoreCase("Cool"))
		{
			
			if(!dbmode.contains("Cooling") || !dbmode.contains("COOLING"))
			  {
			
			    if(Integer.parseInt(dbmode.substring(0, 2)) <=  Integer.parseInt(dbtemp)) {
				
				
				
				targetTemp=Integer.parseInt(dbmode.substring(0, 2))-3;
				
			}
			
			setTargettempOnDashboard(testCase, inputs, targetTemp);
			
			  }
			pc.isXYZVisible(120);
			dbmode = db.getCurrentModeText();
			
			if(dbmode.contains("Cooling") || dbmode.contains("COOLING"))
			  {
			    Keyword.ReportStep_Pass(testCase, "Cool mode is displayed on dashboard");
			  }
			 else
			  {
				  flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Cool mode is not displayed on dashboard");


			  }

		}
		else if(mode.equalsIgnoreCase("Off"))
		{

		  if(dbmode.contains("OFF") || dbmode.contains("Off"))
		  {
		    Keyword.ReportStep_Pass(testCase, "OFF mode is displayed on dashboard");

		  if(dbtemp.equalsIgnoreCase("--"))
		  {
				Keyword.ReportStep_Pass(testCase, "The setpoint displayed for OFF mode is --" );

		  }
		  else
		  {
			  flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Set point displayed for OFF mode is not --");


		  }
		  }
		  else
		  {
			  flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"OFF mode is not displayed on dashboard");


		  }
		}
	return flag;

	}	
	
	
	public static boolean apiResponcesOfTextFieldEditAddress(TestCases testCase,TestCaseInputs inputs,String textField,String Character) {
		boolean flag = true;
		
		
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		LocationInformation locInfo = new LocationInformation(testCase, inputs);
		CHILUtil chUtil = null;
		try {
			chUtil = new CHILUtil(inputs);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		long locationID = 0;
		try {
			locationID = locInfo.getLocationID();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String response="";
		LocationDetailsScreen lds = new LocationDetailsScreen(testCase);
		HashMap<String, String> loc=lds.getCountryNamefromChapi();
		HashMap<String, String> locDetails= new HashMap<String, String>();
		
		
		
		try {
			if (chUtil.getConnection()) {
				String responces= "";
				responces= chUtil.getEditAddressTextFieldErrorUsingAPI(locationID);
				if (responces.equalsIgnoreCase("200")) {
					Keyword.ReportStep_Pass(testCase,
							"Edit Address Using Api : Successfully set text field of "+textField+" value using CHIL "+Character);
				} else if (responces.contains("not validate")) {
					Keyword.ReportStep_Pass(testCase,
							"Edit Address Using Api : set not able to set text field of "+textField+" value using CHIL "+Character+" \n \t Error Messages :- "+responces);
				}else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Edit Address Using Api : set not able to set text field of "+textField+" value using CHIL "+Character);
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		return flag;
	}
	
	public static boolean apiSetDefaultOfTextFieldEditAddress(TestCases testCase,TestCaseInputs inputs) {
		boolean flag = true;
		
		
		DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
		LocationInformation locInfo = new LocationInformation(testCase, inputs);
		CHILUtil chUtil = null;
		try {
			chUtil = new CHILUtil(inputs);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		long locationID = 0;
		try {
			locationID = locInfo.getLocationID();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String response="";
		LocationDetailsScreen lds = new LocationDetailsScreen(testCase);
		HashMap<String, String> loc=lds.getCountryNamefromChapi();
		HashMap<String, String> locDetails= new HashMap<String, String>();
		
		
		
		try {
			if (chUtil.getConnection()) {
				String responces= "";
				responces= chUtil.getEditAddressTextFieldErrorUsingAPI(locationID);
				if (responces.equalsIgnoreCase("200")) {
					Keyword.ReportStep_Pass(testCase,
							"Edit Address Using Api : Successfully set default text field value using CHIL ");
				} else {
					flag = false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Edit Address Using Api : set not able to set default text field value using CHIL ");
				}
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		return flag;
	}
	
	
	
	
	public static boolean setAndVerifyAdaptiveCoveryUsingAPI(TestCases testCase, TestCaseInputs inputs, String AdaptiveRecoveryToggle,boolean AdaptiveRecovery) {
		boolean flag = true;
		try {
			LocationInformation locInfo = new LocationInformation(testCase, inputs);
			DeviceInformation statInfo = new DeviceInformation(testCase, inputs);
			long locationID = 0;
			try {
				locationID = locInfo.getLocationID();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			String deviceID = null;
			try {
				deviceID = statInfo.getDeviceID();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			CHILUtil ch = null;
			try {
				ch = new CHILUtil(inputs);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			if(ch.getConnection()) {

			

				if(ch.getAdaptiveRecoveryInfoUsingAPI(testCase))
				{
					Keyword.ReportStep_Pass(testCase, "Adaptive Recovery is "+AdaptiveRecoveryToggle);
					
					if(ch.setAdaptiveRecoveryUsingAPI(locationID, deviceID, AdaptiveRecovery)==200) {
					
						Keyword.ReportStep_Pass(testCase, " adaptive Recovery Toggle is "+AdaptiveRecoveryToggle+" using api");
					
					}else {
						flag=false;
					}
				}
				else{
					flag=false;
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "adaptive Recovery not support.", false);
				}
				
			
			
				
			}else {
				flag = false;
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
						"Fail to establish connection via chill : ");
			}
			
		}catch(Exception e) {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Set To And From Date : Error occurred : " + e.getMessage());
		}
		return flag;
	}


	
	public static boolean HomeKitandSiriOnThermostatSettings(TestCaseInputs inputs,TestCases testCase) {
		boolean flag=true;
		ThermostatSettingsScreen ts=new ThermostatSettingsScreen(testCase);
		if (ts.isHomeKitAndSiriSetupButtonVisible()) {
			Keyword.ReportStep_Pass(testCase, ts.getHomeKitAndSiriLabel(inputs) + " is exists on Thermostat Settings screen");
			
			flag= flag && ts.ClickOnHomeKitAndSiriButton();
			if(ts.isAddingDeviceToHomeKitFailedTitleVisible()) {
				Keyword.ReportStep_Pass(testCase,"Navigated to Adding Device To Home Kit and siri further interaction with manual devices or stat ");
				Keyword.ReportStep_Pass(testCase, ts.getAddingDeviceToHomeKitFailedTitle(inputs) + " pop up screen is displayed");
				Keyword.ReportStep_Pass(testCase, ts.getAddingDeviceToHomeKitFailedMsg(inputs) + " pop up  screen is displayed");
				if (ts.isOkbuttonButtonVisible())
				flag= flag && ts.ClickOnOkbuttonButton();
				
				Keyword.ReportStep_Pass(testCase,"Nevigated back on Thermostat Settings screen");
			}
			
			
		} else {
			flag = false;
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					ts.getHomeKitAndSiriLabel(inputs) + " does not exists on Thermostat Settings screen");
		}
		return flag;
	}
	
	public static boolean LaunchoptikApplicationIDDASOFF(TestCases testCase, TestCaseInputs inputs)
	{
		boolean flag = true;
		flag = MobileUtils.launchApplication(inputs, testCase, true);
		if (!MobileUtils.isRunningOnAndroid(testCase)) {

			if (inputs.isInputAvailable("LANGUAGE")) {
				flag = flag && optikUtils.closeAppLaunchPopupsLocal(testCase);
				flag = flag && optikUtils.setAppEnvironmentForLocalizationIDDASOFF(testCase, inputs);

			} else {
				flag = flag && optikUtils.closeAppLaunchPopups(testCase);
				flag = flag && optikUtils.setAppEnvironmentIDDASOFF(testCase, inputs);

			}
		}

		else {
			if (inputs.isInputAvailable("LANGUAGE")) {
				flag = flag && optikUtils.closeAppLaunchPopupsLocal(testCase);
				flag = flag && optikUtils.setAppEnvironmentIDDASOFF(testCase, inputs);
			} else {
				flag = flag && optikUtils.closeAppLaunchPopups(testCase);
				flag = flag && optikUtils.setAppEnvironmentIDDASOFF(testCase, inputs);

			}
		}
		return flag;
	}
	public static boolean setAppEnvironmentForLocalizationIDDASOFF(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		try {
			String environmentToSelect = inputs.getInputValue(TestCaseInputs.APP_ENVIRONMENT);
			String ExecutionLocation = inputs.getInputValue(TestCaseInputs.EXEC_LOCATION);
			LoginScreen ls = new LoginScreen(testCase);
			SecretMenu sm = new SecretMenu(testCase);

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(environmentToSelect.equalsIgnoreCase("Production") && !(ExecutionLocation.equalsIgnoreCase("Local")))
				{
					Keyword.ReportStep_Pass(testCase, "[Set App Environment ] : Default environment is production");
					return true;
				}
				else
				{
					flag = flag && ls.longPressOnSecretMenuImage();
				}
			}
			else
			{
				flag = flag && ls.longPressOnSecretMenuImage();
				if(!sm.turnonsetAccessibilityToggleBuutonForLocal(inputs))
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to turn on setassibility");
					flag=false;
				}



				if(environmentToSelect.equalsIgnoreCase("Production") && !(ExecutionLocation.equalsIgnoreCase("Local")))
				{
					Keyword.ReportStep_Pass(testCase, "[Set App Environment ] : Default environment is production");
					//flag = flag && sm.clickOnDoneButton();
					if(sm.isOKavailable(inputs)){
						flag = flag && sm.clickOK(inputs);
					}
					flag = flag && ls.isoptikLogoVisible();
					return flag;
				}

			}


			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
				MobileUtils.minimizeApp(testCase , 5);
			}
			if (sm.isWebServerURLVisible()) {
				flag = flag && sm.clickOnWebServerURL();
				// Keeping this explicit wait because sometimes the environment selection fails
				// on ANDROID
				TimeUnit.SECONDS.sleep(1);
				// Thread.sleep(1000);
			}

			environmentToSelect = environmentToSelect.replaceAll("\\s", "");
			if (environmentToSelect.equalsIgnoreCase("ChilDas(QA)")) {
				flag = flag && sm.clickOnCHILDASQAOption();
			} else if (environmentToSelect.equalsIgnoreCase("Production")) {
				flag = flag && sm.clickOnProductionOption();
			} else if (environmentToSelect.equalsIgnoreCase("CHILStage(Azure)") || environmentToSelect.equalsIgnoreCase("Stage")) {
				flag = flag && sm.clickOnCHILStageAzureOption();
			} else if (environmentToSelect.equalsIgnoreCase("CHILInt(Azure)")) {
				flag = flag && sm.clickOnCHILIntAzureOption();
			} else if (environmentToSelect.equalsIgnoreCase("ChilDev(Dev2)")) {
				flag = flag && sm.clickOnCHILDevDev2Option();
			} else if (environmentToSelect.equalsIgnoreCase("LoadTesting")) {
				flag = flag && sm.clickOnCHILLoadTestingOption();
			} else if (environmentToSelect.equalsIgnoreCase("ChilDas(Test)")) {
				flag = flag && sm.clickOnCHILDASTestOption();
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invalid Environment");
				return false;
			}
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				if(!inputs.isInputAvailable("LANGUAGE"))
				{
					flag = flag && sm.turnonEnableFlycatcherToggleButton();
				}

				sm.turnoffTitanR1IDAASOption();
                sm.turnoffTitanR2IDAASOption();
				flag = flag && MobileUtils.pressBackButton(testCase);

			}else {
				if(sm.isOKavailable(inputs)){
					flag = flag && sm.clickOK(inputs);
				}

				if(!MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.minimizeApp(testCase , 5);
				}
			}
			flag = flag && ls.isoptikLogoVisible();
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Set App Environment :  Error occurred - " + e.getMessage());
			flag = false;
		}

		return flag;
	}
	public static boolean setAppEnvironmentIDDASOFF(TestCases testCase, TestCaseInputs inputs) {
		boolean flag = true;
		try {
			String environmentToSelect = inputs.getInputValue(TestCaseInputs.APP_ENVIRONMENT);
			String ExecutionLocation = inputs.getInputValue(TestCaseInputs.EXEC_LOCATION);
			LoginScreen ls = new LoginScreen(testCase);
			SecretMenu sm = new SecretMenu(testCase);

			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(environmentToSelect.equalsIgnoreCase("Production") && !(ExecutionLocation.equalsIgnoreCase("Local")))
				{
					flag = flag && ls.longPressOnSecretMenuImage();
					Keyword.ReportStep_Pass(testCase, "[Set App Environment ] : Default environment is production");
				}
				else
				{
					flag = flag && ls.longPressOnSecretMenuImage();
				}
			}
			else
			{
				flag = flag && ls.longPressOnSecretMenuImage();
				if(!sm.turnonsetAccessibilityToggleButton())
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Not able to turn on setassibility");
					flag=false;
				}


				if(environmentToSelect.equalsIgnoreCase("Production") && !(ExecutionLocation.equalsIgnoreCase("Local")))
				{
					Keyword.ReportStep_Pass(testCase, "[Set App Environment ] : Default environment is production");
					flag = flag && sm.clickOnDoneButton();
					flag = flag && ls.isoptikLogoVisible();
					return flag;
				}

			}

			if (sm.isWebServerURLVisible()) {
				flag = flag && sm.clickOnWebServerURL();
				// Keeping this explicit wait because sometimes the environment selection fails
				// on ANDROID
				TimeUnit.SECONDS.sleep(1);
				// Thread.sleep(1000);
			}
			else if(sm.isWebURLVisible())
			{
				flag = flag && sm.clickOnWebURL();


			}

			environmentToSelect = environmentToSelect.replaceAll("\\s", "");
			if (environmentToSelect.equalsIgnoreCase("CHILStage(Azure)") ||environmentToSelect.equalsIgnoreCase("Stage") ) {
				flag = flag && sm.clickOnCHILStageAzureOption();
			} else if (environmentToSelect.equalsIgnoreCase("ChilDas(QA)") || environmentToSelect.equalsIgnoreCase("QA")) {
				flag = flag && sm.clickOnCHILDASQAOption();
			} else if (environmentToSelect.equalsIgnoreCase("Production")) {
				flag = flag && sm.clickOnProductionOption();
			} else if (environmentToSelect.equalsIgnoreCase("CHILInt(Azure)") || environmentToSelect.equalsIgnoreCase("INT")) {
				flag = flag && sm.clickOnCHILIntAzureOption();
			} else if (environmentToSelect.equalsIgnoreCase("ChilDev(Dev2)")) {
				flag = flag && sm.clickOnCHILDevDev2Option();
			} else if (environmentToSelect.equalsIgnoreCase("LoadTesting")) {
				flag = flag && sm.clickOnCHILLoadTestingOption();
			} else if (environmentToSelect.equalsIgnoreCase("ChilDas(Test)")) {
				flag = flag && sm.clickOnCHILDASTestOption();
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invalid Environment");
				return false;
			}
			if (!environmentToSelect.equalsIgnoreCase("LoadTesting")) {
			if(!MobileUtils.isRunningOnAndroid(testCase))
			{
			if (sm.isWebServerURLVisible()) {
				flag = flag && sm.clickOnWebServerURL();
				// Keeping this explicit wait because sometimes the environment selection fails
				// on ANDROID
				TimeUnit.SECONDS.sleep(1);
				// Thread.sleep(1000);
			}else if(sm.isWebURLVisible())
			{
				flag = flag && sm.clickOnWebURL();


			}

			}

			if (sm.isWebServerURLVisibleForStrom()) {
				flag = flag && sm.clickOnWebServerURLForStrom();
				// Keeping this explicit wait because sometimes the environment selection fails
				// on ANDROID
				TimeUnit.SECONDS.sleep(1);
				// Thread.sleep(1000);
			}
			else if(sm.isWebURLVisible())
			{
				flag = flag && sm.clickOnWebURL();
			}

			environmentToSelect = environmentToSelect.replaceAll("\\s", "");
			if (environmentToSelect.equalsIgnoreCase("CHILStage(Azure)") ||environmentToSelect.equalsIgnoreCase("Stage") ) {
				//flag = flag && sm.clickOnCHILDASQAOption();
				flag = flag && sm.clickOnCHILStageAzureOption();
			} else if (environmentToSelect.equalsIgnoreCase("ChilDas(QA)") || environmentToSelect.equalsIgnoreCase("QA")) {
				flag = flag && sm.clickOnCHILDASQAOption();
			} else if (environmentToSelect.equalsIgnoreCase("Production")) {
				flag = flag && sm.clickOnProductionOption();
			} else if (environmentToSelect.equalsIgnoreCase("CHILInt(Azure)") || environmentToSelect.equalsIgnoreCase("INT")) {
				//flag = flag && sm.clickOnCHILIntAzureOption();
				flag = flag && sm.clickOnCHILDASQAOption();

			} else if (environmentToSelect.equalsIgnoreCase("ChilDev(Dev2)")) {
				flag = flag && sm.clickOnCHILDevDev2Option();
			} else if (environmentToSelect.equalsIgnoreCase("LoadTesting")) {
				flag = flag && sm.clickOnCHILLoadTestingOption();
			} else if (environmentToSelect.equalsIgnoreCase("ChilDas(Test)")) {
				flag = flag && sm.clickOnCHILDASTestOption();
			} else {
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Invalid Environment");
				return false;
			}
			}
			if (MobileUtils.isRunningOnAndroid(testCase)) {
				if(!inputs.isInputAvailable("LANGUAGE"))
				{
					flag = flag && sm.turnonEnableFlycatcherToggleButton();
				}
                 sm.turnoffTitanR1IDAASOption();
				 sm.turnoffTitanR2IDAASOption();

				flag = flag && MobileUtils.pressBackButton(testCase);

			} else {

				flag = flag && sm.clickOnDoneButton();
			}
			flag = flag && ls.isoptikLogoVisible();
		} catch (Exception e) {
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
					"Set App Environment :  Error occurred - " + e.getMessage());
			flag = false;
		}

		return flag;
	}


	//---------------------------openBrowser and All Gourilla method----------------------------------------------------------------------

	public static  Boolean activateGrrCreateAccount(TestCases testCase,String email) {
		Boolean flag = true;
				String html  = GrrMailUtils.getMailContent(testCase, "", email,"customer-service@resideo.com", 0);
				int indexStart = html.indexOf("https://passwordreset.chil.connectedoptik.com/UserActivation/");
				String newHTML = html.substring(indexStart);
				int indexEnd  = newHTML.indexOf("\"");

				String activationLink = newHTML.substring(0, indexEnd);

				try {
					URL obj = new URL(activationLink);
					HttpURLConnection con = (HttpURLConnection) obj.openConnection();
					con.setRequestMethod("GET");

					if(con.getResponseCode() != HttpURLConnection.HTTP_OK) {
						flag = false;
					}
				} catch (Exception e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
					flag = false;
				}


				return flag;
	}

	public static String fetchActivateAccountVerificationCode(TestCases testCase,String email) {
		String html  = GrrMailUtils.getMailContent(testCase, "", email,"customer-service@resideo.com", 0);
		  int startIndex = html.indexOf("<br><br><h1 style=\"text-align:center;\">");
		    String extractedHTML = html.substring(startIndex);
			int newStartIndex = extractedHTML.indexOf("\">");
			String newStartHTML = extractedHTML.substring(newStartIndex);
			int endIndex = newStartHTML.indexOf("</h1>");

		String verificationCode = newStartHTML.substring(2,endIndex);

		return verificationCode.trim();
	}

    public static boolean openBrowserOnMobile(TestCases testCase, TestCaseInputs inputs,boolean verifyInvalid) {

	boolean flag=true;

	if(MobileUtils.isRunningOnAndroid(testCase))
	{
		try
		{
			Activity activity = new Activity("com.android.chrome","com.google.android.apps.chrome.Main");
			((AndroidDriver<MobileElement>) testCase.getMobileDriver()).startActivity(activity);

			Keyword.ReportStep_Pass(testCase , "Chrome browser is open.");

			if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Search or type web address']" , testCase,10,false))
			{
				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).sendKeys("https://www.google.com");

				List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
				for(MobileElement temp : saq)
				{
					if(temp.getText().equals("https://www.google.com"))
					{
						temp.click();
						break;
					}
				}
			}
			else if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='data:,']" , testCase,10,false))
			{
				testCase.getMobileDriver().findElement(By.xpath("//*[@text='data:,']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='data:,']")).sendKeys("https://www.google.com");

				List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
				for(MobileElement temp : saq)
				{
					if(temp.getText().equals("https://www.google.com"))
					{
						temp.click();
						break;
					}
				}
			}
			else if(MobileUtils.isMobElementExists("id" , "com.android.chrome:id/url_bar" , testCase,10,false))
			{
				testCase.getMobileDriver().findElement(By.id("com.android.chrome:id/url_bar")).click();

				testCase.getMobileDriver().findElement(By.id("com.android.chrome:id/url_bar")).sendKeys("https://www.google.com");

				List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
				for(MobileElement temp : saq)
				{
					if(temp.getText().equals("https://www.google.com"))
					{
						temp.click();
						break;
					}
				}
			}
			Keyword.ReportStep_Pass(testCase , "Open google mail web page.");

			MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);





		}
		catch(Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
		}
		finally
		{
			//testCase.getMobileDriver().launchApp();
		}

	}
	else
	{

		try{

			CustomDriver driver = testCase.getMobileDriver();

			HashMap<String, String> settings = new HashMap<>();
			settings.put("name", "Safari");
			try {
				driver.executeScript("mobile:application:open", settings);
			} catch (Exception e) {
				FrameworkGlobalVariables.logger4J.logWarn("Launch Setting App: App is already open.");
			}

			Keyword.ReportStep_Pass(testCase , "Safari browser is open.");


			if(MobileUtils.isMobElementExists("XPATH" , "//*[@name='URL']" , testCase,10,false))
			{
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).sendKeys("https://www.google.com");

				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");

			}
			Keyword.ReportStep_Pass(testCase , "Open google mail web page.");

			MobileUtils.isMobElementExists("id" , "xyz" , testCase,25,false);


		}catch(Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
		}
		finally
		{
			//testCase.getMobileDriver().launchApp();
		}

	}
	return flag;
}

    public static boolean openPlayStoreOnMobile(TestCases testCase, TestCaseInputs inputs,String appName) {

	boolean flag=true;

	if(MobileUtils.isRunningOnAndroid(testCase))
	{
		try
		{
			Activity activity = new Activity("com.android.vending","com.google.android.finsky.activities.MainActivity");
			((AndroidDriver<MobileElement>) testCase.getMobileDriver()).startActivity(activity);

			Keyword.ReportStep_Pass(testCase , "Play Store is open.");

			if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Search for apps & games']" , testCase,10,false))
			{
				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search for apps & games']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search for apps & games']")).sendKeys(appName);

				List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
				for(MobileElement temp : saq)
				{
					if(temp.getText().equalsIgnoreCase(appName))
					{
						temp.click();
						break;
					}
				}
			}
			
			boolean f=false;
			List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//android.support.v7.widget.RecyclerView[@index='0']/android.widget.LinearLayout[@index='0']/android.widget.LinearLayout[@index='0']/android.widget.FrameLayout[@index='0']/android.widget.LinearLayout[@index='1']/android.widget.FrameLayout[@index='0']/android.widget.TextView[@index='0']"));
			for(MobileElement temp : saq)
			{
				if(temp.getText().equalsIgnoreCase(appName))
				{
					temp.click();
					f=true;
					break;
				}
			}
			if(!f)
			{
				List<MobileElement> saq1 = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View']"));
				for(MobileElement temp : saq1)
				{
					try
					{
						if(temp.getText().toUpperCase().contains(appName.toUpperCase())||temp.getAttribute("name").toUpperCase().contains(appName.toUpperCase()))
						{
							temp.click();
							break;
						}
					}
					catch(Exception e)
					{
						
					}
					
				}
			}
			
			
			if(MobileUtils.isMobElementExists("XPATH","//*[@text='Update']", testCase,5))
			{
				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Update']")).click();
				
				Keyword.ReportStep_Pass(testCase , "Successfully Click on Updated and Update in progress");

				MobileUtils.isMobElementExists("id" , "rohal" , testCase,90,false);

				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Open']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Open']")).click();

				}
			}


		}
		catch(Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			flag=false;
		}
		finally
		{
			//testCase.getMobileDriver().launchApp();
		}

	}
	else
	{

		try{

			CustomDriver driver = testCase.getMobileDriver();

			HashMap<String, String> settings = new HashMap<>();
			settings.put("name", "Safari");
			try {
				driver.executeScript("mobile:application:open", settings);
			} catch (Exception e) {
				FrameworkGlobalVariables.logger4J.logWarn("Launch Setting App: App is already open.");
			}

			Keyword.ReportStep_Pass(testCase , "Safari browser is open.");


			if(MobileUtils.isMobElementExists("XPATH" , "//*[@name='URL']" , testCase,10,false))
			{
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).sendKeys("https://www.google.com");

				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");

			}
			Keyword.ReportStep_Pass(testCase , "Open google mail web page.");

			MobileUtils.isMobElementExists("id" , "xyz" , testCase,25,false);


		}catch(Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
		}
		finally
		{
			//testCase.getMobileDriver().launchApp();
		}

	}
	return flag;
}

	public static boolean openBrowserResetPassword(TestCases testCase, TestCaseInputs inputs,boolean verifyInvalid) {


		boolean flag=true;

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			try
			{
				Activity activity = new Activity("com.android.chrome","com.google.android.apps.chrome.Main");
				((AndroidDriver<MobileElement>) testCase.getMobileDriver()).startActivity(activity);

				Keyword.ReportStep_Pass(testCase , "Chrome browser is open.");

				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Search or type web address']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).click();

					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).sendKeys("https://www.guerrillamail.com");

					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
				else if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='data:,']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='data:,']")).click();

					testCase.getMobileDriver().findElement(By.xpath("//*[@text='data:,']")).sendKeys("https://www.guerrillamail.com");

					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
				else if(MobileUtils.isMobElementExists("id" , "com.android.chrome:id/url_bar" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.id("com.android.chrome:id/url_bar")).click();

					testCase.getMobileDriver().findElement(By.id("com.android.chrome:id/url_bar")).sendKeys("https://www.guerrillamail.com");

					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
				Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");

				MobileUtils.isMobElementExists("id" , "rohal" , testCase,20,false);
				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Click to Edit']")).click();
				Keyword.ReportStep_Pass(testCase , "Click email field to set the email.");
				Thread.sleep(2000);
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					//MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}

				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).click();
				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).clear();

				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).sendKeys(inputs.getInputValue("USERID").toString().split("@")[0]);


				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.Spinner']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='grr.la']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Set']")).click();

				Keyword.ReportStep_Pass(testCase , "Email id is set to "+inputs.getInputValue("USERID").toString());

					/*
					 * Dimension dimensions =
					 * testCase.getMobileDriver().manage().window().getSize();
					 * testCase.getMobileDriver().swipe( (int) (dimensions.getWidth() * .5), (int)
					 * (dimensions.getHeight() * .5), (int) (dimensions.getWidth() * .5), (int)
					 * (dimensions.getHeight() * .3));
					 */
				List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));
				int i=0;
				while (saq==null&&i<5)
				{
					Thread.sleep(10000);
					saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));
				}

				saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));

				if(verifyInvalid)
				{
					List<MobileElement> saq1 = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='2']"));
					i=saq.size();

					while(i>0)
					{

						if(saq.get(i-1).getText().contains("@demohome"))
						{
							if(saq1.get(i-1).getText().contains("demo Connected Home - Reset Password"))
							{
								saq.get(i-1).click();
								break;
							}
							else
							{
								Keyword.ReportStep_Pass(testCase , "Link already visited or another mail is came i.e "+saq1.get(i-1).getText());
							}
						}
						i--;
					}
				}
				else
				{
					LoginScreen l=new LoginScreen(testCase);
					//l.SwipeToResetPassword(testCase);
				while(i<saq.size())
				{

					if(saq.get(i).getText().contains("@reside"))
					{
						Keyword.ReportStep_Pass(testCase , "Mail receive and open the mail.");
						saq.get(i).click();
						break;
					}
					i++;
				}
				l.SwipeToResetPassword(testCase);

					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Reset Password']")).click();
					Keyword.ReportStep_Pass(testCase , "Click on reset password button.");
					MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
	              testCase.getMobileDriver().findElement(By.id("TxtPassword")).click();
					testCase.getMobileDriver().findElement(By.id("TxtPassword")).sendKeys(inputs.getInputValue("NEWPASSWORD"));
					Keyword.ReportStep_Pass(testCase , "Set new password i.e."+inputs.getInputValue("NEWPASSWORD"));
					testCase.getMobileDriver().findElement(By.id("TexPasswordAgain")).click();
					testCase.getMobileDriver().findElement(By.id("TexPasswordAgain")).sendKeys(inputs.getInputValue("NEWPASSWORD"));
					Keyword.ReportStep_Pass(testCase , "Confirm new password i.e."+inputs.getInputValue("NEWPASSWORD"));

					if(MobileUtils.isRunningOnAndroid(testCase))
					{
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}

					testCase.getMobileDriver().findElement(By.id("CngPwdBtn")).click();
					Keyword.ReportStep_Pass(testCase , "Click on change button and successfully change the password.");

				}
			}
			catch(Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			}
			finally
			{
				LoginScreen l=new LoginScreen(testCase);
				l.RunBackground(testCase, 0);
			}

		}
		else
		{

			try{

				CustomDriver driver = testCase.getMobileDriver();

				HashMap<String, String> settings = new HashMap<>();
				settings.put("name", "Safari");
				try {
					driver.executeScript("mobile:application:open", settings);
				} catch (Exception e) {
					FrameworkGlobalVariables.logger4J.logWarn("Launch Setting App: App is already open.");
				}

				Keyword.ReportStep_Pass(testCase , "Safari browser is open.");


				if(MobileUtils.isMobElementExists("XPATH" , "//*[@name='URL']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).click();

					testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).sendKeys("https://www.guerrillamail.com");

					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");

				}
				Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");

				MobileUtils.isMobElementExists("id" , "xyz" , testCase,25,false);

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Click to Edit']")).click();
				Keyword.ReportStep_Pass(testCase , "Click email field to set the email.");
				try {
					Thread.sleep(2000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}


				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).click();
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).clear();

				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).sendKeys(inputs.getInputValue("USERID").toString());


				testCase.getMobileDriver().findElement(By.xpath("//*[@value='sharklasers.com']")).click();
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypePickerWheel")).sendKeys("grr.la");

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Done']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Set']")).click();

				Keyword.ReportStep_Pass(testCase , "Email id is set to "+inputs.getInputValue("USERID").toString());
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='demohomessupport@demo.com']")).click();

				Dimension dimensions = testCase.getMobileDriver().manage().window().getSize();

				TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
				touchAction.press(point(10, (int) (dimensions.getHeight() * .5)))
				.moveTo(point(0, (int) (dimensions.getHeight() * -.4))).release().perform();

				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Reset Password']")).click();
				Keyword.ReportStep_Pass(testCase , "Click on reset password button.");
				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='New Password']")).click();
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='New Password']")).sendKeys(inputs.getInputValue("NEWPASSWORD"));
				MobileUtils.hideKeyboardIOS(driver, "return");
				Keyword.ReportStep_Pass(testCase , "Set new password i.e."+inputs.getInputValue("NEWPASSWORD"));
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Re-enter Password']")).click();
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Re-enter Password']")).sendKeys(inputs.getInputValue("NEWPASSWORD"));
				Keyword.ReportStep_Pass(testCase , "Confirm new password i.e."+inputs.getInputValue("NEWPASSWORD"));
				MobileUtils.hideKeyboardIOS(driver, "return");
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Change Password']")).click();
				Keyword.ReportStep_Pass(testCase , "Click on change button and successfully change the password.");

				Thread.sleep(2000);

			}catch(Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			}
			finally
			{
				testCase.getMobileDriver().launchApp();
			}

		}
		return flag;
	}

	public static boolean openBrowserCameraMembership(TestCases testCase, TestCaseInputs inputs,boolean verifyInvalid,boolean rebranding) {


		boolean flag=true;

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			try
			{
				Activity activity = new Activity("com.android.chrome","com.google.android.apps.chrome.Main");
				((AndroidDriver<MobileElement>) testCase.getMobileDriver()).startActivity(activity);

				Keyword.ReportStep_Pass(testCase , "Chrome browser is open.");

				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Search or type web address']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).click();

					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).sendKeys("https://www.guerrillamail.com");

					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
				else if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='data:,']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='data:,']")).click();

					testCase.getMobileDriver().findElement(By.xpath("//*[@text='data:,']")).sendKeys("https://www.guerrillamail.com");

					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
				else if(MobileUtils.isMobElementExists("id" , "com.android.chrome:id/url_bar" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.id("com.android.chrome:id/url_bar")).click();

					testCase.getMobileDriver().findElement(By.id("com.android.chrome:id/url_bar")).sendKeys("https://www.guerrillamail.com");

					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
				Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");

				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Click to Edit']")).click();
				Keyword.ReportStep_Pass(testCase , "Click email field to set the email.");
				Thread.sleep(2000);
				if(MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
				}

				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).clear();

				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).sendKeys(inputs.getInputValue("USERID").toString());


				/*testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.Spinner']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='grr.la']")).click();*/

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Set']")).click();

				Keyword.ReportStep_Pass(testCase , "Email id is set to "+inputs.getInputValue("USERID").toString());

				  Dimension dimensions =
						  testCase.getMobileDriver().manage().window().getSize();
						  testCase.getMobileDriver().swipe( (int) (dimensions.getWidth() * .5), (int)
						  (dimensions.getHeight() * .5), (int) (dimensions.getWidth() * .5), (int)
						  (dimensions.getHeight() * .3));
				List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));
				int i=0;
				while (saq==null&&i<5)
				{
					Thread.sleep(10000);
					saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));
				}

				saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));

				if(verifyInvalid)
				{
					List<MobileElement> saq1 = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='2']"));
					i=saq.size();

					while(i>0)
					{

						if(saq.get(i-1).getText().contains("@demohome"))
						{
							if(saq1.get(i-1).getText().contains("demo Connected Home - Reset Password"))
							{
								saq.get(i-1).click();
								break;
							}
							else
							{
								Keyword.ReportStep_Pass(testCase , "Link already visited or another mail is came i.e "+saq1.get(i-1).getText());
							}
						}
						i--;
					}
				}
				else
				{

				while(i<saq.size())
				{

					if(saq.get(i).getText().contains("demohome.com"))
					{
						Keyword.ReportStep_Pass(testCase , "Mail receive and open the mail.");
						saq.get(i).click();
						break;
					}
					i++;
				}

				Thread.sleep(2000);


				}
			}
			catch(Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			}
			finally
			{
				LoginScreen l=new LoginScreen(testCase);
				l.RunBackground(testCase, 0);
			}

		}
		else
		{}
		return flag;
	}


	public static void VerifyGuarillaEmail_Rebranding(TestCases testCase, TestCaseInputs inputs,String emailstring) {
		String email = emailstring;
		boolean flag =true;

		if(MobileUtils.isRunningOnAndroid(testCase))
		{
			try
			{
				Activity activity = new Activity("com.android.chrome","com.google.android.apps.chrome.Main");
				((AndroidDriver<MobileElement>) testCase.getMobileDriver()).startActivity(activity);

				Keyword.ReportStep_Pass(testCase , "Chrome browser is open.");

				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Search or type web address']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).click();

					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).sendKeys("https://www.guerrillamail.com");

					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}



				Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");
					MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
				Thread.sleep(5000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Click to Edit']")).click();
				Thread.sleep(2000);
				try {
					testCase.getMobileDriver().findElement(By.id("inbox-id")).clear();
				} catch (Exception e) {
				}
				try {
					testCase.getMobileDriver().findElement(By.id("inbox-id")).sendKeys();

				} catch (Exception e) {
				}
				try {
					testCase.getMobileDriver().findElement(By.id("inbox-id")).clear();

				} catch (Exception e) {
				}
				try {
					testCase.getMobileDriver().findElement(By.id("inbox-id")).sendKeys(email);

				} catch (Exception e) {
				}
				Thread.sleep(5000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.Spinner']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='grr.la']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Set']")).click();

				List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));
				int i=0;
				while (saq==null&&i<5)
				{
					Thread.sleep(1000);
					saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View']"));
				}

				if(testCase.getMobileDriver().getPageSource().contains(optikUtils.ReadRebranding(testCase , inputs).get("NewText"))){
					Keyword.ReportStep_Pass(testCase , "Expected text is displayed i.e '"+optikUtils.ReadRebranding(testCase , inputs).get("NewText")+" MARKETING COMMUNICATIONS SIGN-UP'\n or 'Subscribe to "+optikUtils.ReadRebranding(testCase , inputs).get("NewText")+" Marketing Communications'");
				}else{
					 Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Rebranding of the Home App from 'demo' to '"+optikUtils.ReadRebranding(testCase , inputs).get("NewText")+"' is not done successfully.");
					 flag=false;
				}

				i=0;
				while(i<=saq.size())
				{

					if(saq.get(i).getText().contains("@demohome"))
					{
						saq.get(i).click();
						break;
					}
					i++;
				}

				CreateAccountScreen.SwipeToActivateAccount(testCase);
				Thread.sleep(2000);
				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);

				if(testCase.getMobileDriver().getPageSource().contains(optikUtils.ReadRebranding(testCase , inputs).get("NewText"))){
					Keyword.ReportStep_Pass(testCase , "Expected text is displayed i.e '"+optikUtils.ReadRebranding(testCase , inputs).get("NewText")+" MARKETING COMMUNICATIONS SIGN-UP'\n or 'Subscribe to "+optikUtils.ReadRebranding(testCase , inputs).get("NewText")+" Marketing Communications'");
				}else{
					 Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,"Rebranding of the Home App from 'demo' to '"+optikUtils.ReadRebranding(testCase , inputs).get("NewText")+"' is not done successfully.");
					 flag=false;
				}

				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Activate Account 'or @text='ACTIVATE ACCOUNT ']" , testCase,25,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Activate Account 'or @text='ACTIVATE ACCOUNT ']")).click();
					Keyword.ReportStep_Pass(testCase , "Click on Activate Account button.");
				}
				//Get Verification Code from browser and store
			}
			catch(Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			}
			finally
			{
				//testCase.getMobileDriver().launchApp();
				MobileUtils.minimizeApp(testCase, 10);
			}
		}
		else
		{
			try{

				CustomDriver driver = testCase.getMobileDriver();

				HashMap<String, String> settings = new HashMap<>();
				settings.put("name", "Safari");
				try {
					driver.executeScript("mobile:application:open", settings);
				} catch (Exception e) {
					FrameworkGlobalVariables.logger4J.logWarn("Launch Setting App: App is already open.");
				}

				Keyword.ReportStep_Pass(testCase , "Safari browser is open.");

				if(MobileUtils.isMobElementExists("XPATH" , "//*[@name='URL']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).click();

					testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).sendKeys("https://www.guerrillamail.com");

					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
					Thread.sleep(7000);

				}
				Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");

				MobileUtils.isMobElementExists("id" , "xyz" , testCase,25,false);

				if(MobileUtils.isMobElementExists("XPATH", "//*[@name='Click to Edit']", testCase))
				{
					MobileUtils.clickOnElement(testCase, "XPATH", "//*[@name='Click to Edit']");
				}
				//testCase.getMobileDriver().findElement(By.xpath("//*[@name='Click to Edit']")).click();
				Keyword.ReportStep_Pass(testCase , "Click email field to set the email.");
				try {
					Thread.sleep(2000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}


				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).click();
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).clear();

				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).sendKeys(email);


				testCase.getMobileDriver().findElement(By.xpath("//*[@value='sharklasers.com']")).click();
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypePickerWheel")).sendKeys("grr.la");

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Done']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Set']")).click();

				Thread.sleep(7000);

				Keyword.ReportStep_Pass(testCase , "Email id is set to "+email);


				Thread.sleep(7000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='demohomessupport@demo.com']")).click();

				Dimension dimensions = testCase.getMobileDriver().manage().window().getSize();

				TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
				touchAction.press(point(10, (int) (dimensions.getHeight() * .5)))
				.moveTo(point(0, (int) (dimensions.getHeight() * -.4))).release().perform();

				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Activate Account']")).click();
				Keyword.ReportStep_Pass(testCase , "Click on Activate Account button.");
				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
				Keyword.ReportStep_Pass(testCase , "Successfully activate account");
				Thread.sleep(2000);


				//Get Verification Code from browser and storr

			}catch(Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			}
			finally
			{
				//testCase.getMobileDriver().launchApp();
				MobileUtils.minimizeApp(testCase, 10);
			}
		}





	}

	
	private static boolean verifyUserActivationthroughguerrillLocalization(TestCases testCase, TestCaseInputs inputs,
			String language)
	{boolean flag=true;
	String email=inputs.getInputValue("EmailAddress");
	CreateAccountScreen cas= new CreateAccountScreen(testCase);

	if(MobileUtils.isRunningOnAndroid(testCase))
	{
		try
		{
			Activity activity = new Activity("com.android.chrome","com.google.android.apps.chrome.Main");
			((AndroidDriver<MobileElement>) testCase.getMobileDriver()).startActivity(activity);

			Keyword.ReportStep_Pass(testCase , "Chrome browser is open.");

			if(language.equalsIgnoreCase("English_US"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Search or type web address']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).click();

					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).sendKeys("https://www.guerrillamail.com");
				}
			}
			else if(language.equalsIgnoreCase("French_CA"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Recherchez ou saisissez une adresse Web']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Recherchez ou saisissez une adresse Web']")).click();

					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Recherchez ou saisissez une adresse Web']")).sendKeys("https://www.guerrillamail.com");
				}
			}
			else if(language.equalsIgnoreCase("Spanish_US"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Busca o escribe la')]" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Busca o escribe la')]")).click();
					MobileUtils.isMobElementExists("id" , "rohal" , testCase,10,false);
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Busca o escribe la')]")).sendKeys("https://www.guerrillamail.com");
				}
			}

			List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
			for(MobileElement temp : saq)
			{
				if(temp.getText().equals("https://www.guerrillamail.com"))
				{
					temp.click();
					break;
				}
			}
			Thread.sleep(2000);
			Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");
	         MobileUtilsLocal.swipeup(testCase);

			MobileUtils.isMobElementExists("id" , "rohal" , testCase,20,false);
			//  testCase.getMobileDriver().findElement(By.xpath("//*[@text='Click to Edit']")).click();
			 // MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
			  try {
			  testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).clear();
			  }
			  catch (Exception e) { }
			  try {
				  MobileUtils.isMobElementExists("id" , "rohal" , testCase,10,false);
				  testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).sendKeys();

			  } catch (Exception e) { }
			  try {
			  testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).clear();
			  MobileUtils.isMobElementExists("id" , "rohal" , testCase,10,false);

			  } catch (Exception e) { } try {
			  testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).sendKeys(email);

			  } catch (Exception e) { }
			  try {
				Thread.sleep(5000);
			} catch (InterruptedException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

			  try {
				  if(MobileUtils.isMobElementExists("XPATH", "//*[@text='Set']",testCase))
				  {
					  testCase.getMobileDriver().findElement(By.xpath("//*[@text='Set']")).click();
					  }
				  } catch (Exception e) { }

			  /*
			  testCase.getMobileDriver().findElement(By.xpath(
			  "//*[@class='android.widget.Spinner']")).click();

			  testCase.getMobileDriver().findElement(By.xpath(
			  "//*[@class='android.widget.Spinner']")).click();

			  try
			  {
			  testCase.getMobileDriver().findElement(By.xpath("//*[@text='grr.la']")).click
			  ();
			  }
			  catch (Exception e) {

			  }


			  try { if(MobileUtils.isMobElementExists("XPATH", "//*[@text='Set']",
			  testCase)) {
			  testCase.getMobileDriver().findElement(By.xpath("//*[@text='Set']")).click();
			  } } catch (Exception e) {

			  }
			  */

			  Dimension dimensions =
			  testCase.getMobileDriver().manage().window().getSize();
			  testCase.getMobileDriver().swipe( (int) (dimensions.getWidth() * .5), (int)
			  (dimensions.getHeight() * .5), (int) (dimensions.getWidth() * .5), (int)
			  (dimensions.getHeight() * .4));

			  List<MobileElement> saq1 = testCase.getMobileDriver().findElements(By.
			  xpath("//*[@class='android.view.View' and @index='1']")); int i=0; while
			  (saq1==null&&i<5) { try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} saq1 =
			  testCase.getMobileDriver().findElements(By.xpath(
			  "//*[@class='android.view.View']")); } i=0; while(i<=saq1.size()) {
			  if(saq1.get(i).getText().contains("@demohome") || saq1.get(i).getText().contains("@reside")) { saq1.get(i).click();
			  break; } i++; }






			if(MobileUtils.isRunningOnAndroid(testCase))
			{
				if(language.equalsIgnoreCase("English_US"))
				{
					CreateAccountScreen.SwipeToActivateAccount(testCase);
					Thread.sleep(2000);
					MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);

					if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Activate Account 'or @text='ACTIVATE ACCOUNT ']" , testCase,25,false))
					{
				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Activate Account 'or @text='ACTIVATE ACCOUNT ']")).click();
				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);

				Keyword.ReportStep_Pass(testCase , "Click on Activate Account button.");
					}
					else
					{

						String verificationCode =getVerificationCode(testCase, inputs);

						inputs.setInputValue(GlobalVariables.VERIFICATIONCODE, verificationCode, false);


					}

				}
				if(inputs.getInputValue("LANGUAGE").contains("French"))
				{
					CreateAccountScreen.SwipeToActivateAccount(testCase);

				try {
				List<WebElement> timeList = MobileUtils.getMobElements(testCase,"XPATH", "//*[contains(@text,'Activer Le Compte') and @clickable='true']" );
				if (timeList != null)
				{
				timeList.get(0).click();
				}
				else
				{
				testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Activer Le Compte')")).click();
				}

				} catch (Exception e) {
				}

				}
			}
		}
		catch(Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
		}
		finally
		{

			LoginScreen.RunBackground(testCase, 0);
		}
	}
	else
	{
		try{

			CustomDriver driver = testCase.getMobileDriver();

			HashMap<String, String> settings = new HashMap<>();
			settings.put("name", "Safari");
			try {
				driver.executeScript("mobile:application:open", settings);
			} catch (Exception e) {
				FrameworkGlobalVariables.logger4J.logWarn("Launch Setting App: App is already open.");
			}

			Keyword.ReportStep_Pass(testCase , "Safari browser is open.");

			if(MobileUtils.isMobElementExists("XPATH" , "//*[@name='URL']" , testCase,10,false))
			{
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).sendKeys("https://www.guerrillamail.com");

				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
				Thread.sleep(7000);

			}
			Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");

			MobileUtils.isMobElementExists("id" , "xyz" , testCase,25,false);

			if(MobileUtils.isMobElementExists("XPATH", "//*[@name='Click to Edit']", testCase))
			{
				MobileUtils.clickOnElement(testCase, "XPATH", "//*[@name='Click to Edit']");
			}
			//testCase.getMobileDriver().findElement(By.xpath("//*[@name='Click to Edit']")).click();


			Keyword.ReportStep_Pass(testCase , "Click email field to set the email.");
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}


			Thread.sleep(2000);
			testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).click();
			testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).clear();

			testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).sendKeys(email);


			testCase.getMobileDriver().findElement(By.xpath("//*[@value='sharklasers.com']")).click();
			testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypePickerWheel")).sendKeys("grr.la");

			testCase.getMobileDriver().findElement(By.xpath("//*[@name='Done']")).click();

			testCase.getMobileDriver().findElement(By.xpath("//*[@name='Set']")).click();

			Thread.sleep(7000);

			Keyword.ReportStep_Pass(testCase , "Email id is set to "+email);


			Thread.sleep(7000);
			testCase.getMobileDriver().findElement(By.xpath("//*[@name='demohomessupport@demo.com']")).click();

			Dimension dimensions = testCase.getMobileDriver().manage().window().getSize();

			TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
			touchAction.press(point(10, (int) (dimensions.getHeight() * .5)))
			.moveTo(point(0, (int) (dimensions.getHeight() * -.4))).release().perform();
			MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
			Thread.sleep(2000);
			testCase.getMobileDriver().findElement(By.xpath("//*[@name='Activate Account']")).click();
			Keyword.ReportStep_Pass(testCase , "Click on Activate Account button.");
			MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
			Keyword.ReportStep_Pass(testCase , "Successfully activate account");
			Thread.sleep(2000);

		}catch(Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
		}
		finally
		{
			testCase.getMobileDriver().launchApp();
		}
	}
	return flag;
	}

	
public static boolean  VerifyGuarillaResetPasswordExpiredEmail(TestCases testCase, TestCaseInputs inputs,boolean verifyInvalid) {
	boolean flag=true;
	String email =testCase.getTestCaseInputs().getInputValue("USERID");
	String language =testCase.getTestCaseInputs().getInputValue("LANGUAGE");
	try
	{
		if(language.equals("") || language.equals(null) )
		{
			language="English_US";
		}
	}
	catch(Exception e){ }



	if(MobileUtils.isRunningOnAndroid(testCase))
		{
		try{

			Activity activity = new Activity("com.android.chrome","com.google.android.apps.chrome.Main");
			((AndroidDriver<MobileElement>) testCase.getMobileDriver()).startActivity(activity);

			Keyword.ReportStep_Pass(testCase , "Chrome browser is open.");

			if(language.equalsIgnoreCase("English_US")||language.equalsIgnoreCase("English_IR")||language.equalsIgnoreCase("English_UK"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Search or type web address']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).click();
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).sendKeys("https://www.guerrillamail.com");
					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
			}
			else if(language.equalsIgnoreCase("French_CA")||language.equalsIgnoreCase("French_SUI")||language.equalsIgnoreCase("French_BE"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Recherchez ou saisissez une adresse Web']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Recherchez ou saisissez une adresse Web']")).click();
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Recherchez ou saisissez une adresse Web']")).sendKeys("https://www.guerrillamail.com");
					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
			}

			else if(language.equalsIgnoreCase("Slovakian"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Zadajte dopyt alebo')]" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Zadajte dopyt alebo')]")).click();
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Zadajte dopyt alebo')]")).sendKeys("https://www.guerrillamail.com");
					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
			}
			else if(language.equalsIgnoreCase("Dutch_BE")||language.equalsIgnoreCase("Dutch_SUI"))
			{
			   	if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Zoek of typ een webadres']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Zoek of typ een webadres']")).click();
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Zoek of typ een webadres']")).sendKeys("https://www.guerrillamail.com");
					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
			 }
			else if(language.equalsIgnoreCase("Polish"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Wyszukaj lub wpisz adres internetowy')]" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Wyszukaj lub wpisz adres internetowy')]")).click();
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Wyszukaj lub wpisz adres internetowy')]")).sendKeys("https://www.guerrillamail.com");
					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
			}
			else if(language.equalsIgnoreCase("Hungarian"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Keressen')]" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Keressen')]")).click();
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Keressen')]")).sendKeys("https://www.guerrillamail.com");
					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
			}
			else if(language.equalsIgnoreCase("Czech"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Zadejte dotaz nebo webovou adresu']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Zadejte dotaz nebo webovou adresu']")).click();
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Zadejte dotaz nebo webovou adresu']")).sendKeys("https://www.guerrillamail.com");
					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
			}
			else if(language.equalsIgnoreCase("German")||language.equalsIgnoreCase("German_AUS")||language.equalsIgnoreCase("German_SUI"))
			{
				if(MobileUtils.isMobElementExists("XPATH" ,"//*[contains(@text,'Suchbegriff')]", testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Suchbegriff')]")).click();
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Suchbegriff')]")).sendKeys("https://www.guerrillamail.com");
					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
			}
			else if(language.equalsIgnoreCase("Italian")||language.equalsIgnoreCase("Italian_SUI"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Cerca o digita un indirizzo web']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Cerca o digita un indirizzo web']")).click();
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Cerca o digita un indirizzo web']")).sendKeys("https://www.guerrillamail.com");
					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}
			}
			else if(language.equalsIgnoreCase("PortugueseBR")||language.equalsIgnoreCase("PortuguesePL"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Pesquisar ou digitar')]" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Pesquisar ou digitar')]")).click();
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Pesquisar ou digitar')]")).sendKeys("https://www.guerrillamail.com");
					List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
					for(MobileElement temp : saq)
					{
						if(temp.getText().equals("https://www.guerrillamail.com"))
						{
							temp.click();
							break;
						}
					}
				}

   	      	   else if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Pesquisar ou escrever')]" , testCase,10,false))
   	      	   {
   	      		   testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Pesquisar ou escrever')]")).click();
   	      		   testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Pesquisar ou escrever')]")).sendKeys("https://www.guerrillamail.com");
   	      		   List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
   	      		   for(MobileElement temp : saq)
   	      		   {
   	      			   if(temp.getText().equals("https://www.guerrillamail.com"))
   	      			   {
   	      				   temp.click();
   	      				   break;
   	      			   }
   	      		   }
   	      	   }
	        }
	        else if(language.equalsIgnoreCase("Spanish")||language.equalsIgnoreCase("Spanish_US")||language.equalsIgnoreCase("Spanish_Chile")||language.equalsIgnoreCase("Spanish_Colombia")||language.equalsIgnoreCase("Spanish_Peru")||language.equalsIgnoreCase("Spanish_Panama")||language.equalsIgnoreCase("Spanish_Costarica")||language.equalsIgnoreCase("Spanish_Argentina")||language.equalsIgnoreCase("Spanish_Mexico"))
	        {
	        	if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Busca o escribe una')]" , testCase,10,false))
	        	{
	        		testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Busca o escribe una')]")).click();
	        		testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Busca o escribe una')]")).sendKeys("https://www.guerrillamail.com");
	        		List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
	        		for(MobileElement temp : saq)
	        		{
	        			if(temp.getText().equals("https://www.guerrillamail.com"))
	        			{
	        				temp.click();
	        				break;
	        			}
	        		}
	        	}
	         }

			Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");
			MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
			Thread.sleep(5000);
			testCase.getMobileDriver().findElement(By.xpath("//*[@text='Click to Edit']")).click();
			Thread.sleep(5000);
			testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).click();
			Thread.sleep(5000);
			testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).clear();
			Thread.sleep(5000);
			testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).click();
			Thread.sleep(5000);
			testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.EditText']")).sendKeys(email);

			Thread.sleep(5000);
			/*testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.Spinner']")).click();

			testCase.getMobileDriver().findElement(By.xpath("//*[@text='grr.la']")).click();*/

			testCase.getMobileDriver().findElement(By.xpath("//*[@text='Set']")).click();

			List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));

			Dimension dimensions =
					  testCase.getMobileDriver().manage().window().getSize();
					  testCase.getMobileDriver().swipe( (int) (dimensions.getWidth() * .5), (int)
					  (dimensions.getHeight() * .5), (int) (dimensions.getWidth() * .5), (int)
					  (dimensions.getHeight() * .4));


			int i=0;
			while (saq==null&&i<5)
			{
				Thread.sleep(1000);
				saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View']"));
			}
			i=0;
			while(i<=saq.size())
			{

				if(saq.get(i).getText().contains("@demohome"))
				{
					saq.get(i).click();
					break;
				}
				i++;
			}

			//swipe(testCase,"EMAIL");
			swipescreen(testCase);

			Thread.sleep(2000);

			//Wait for the 30 Minutes
			MobileUtils.isMobElementExists("id" , "rohal" , testCase,180,false);

			// Click on the reset Password Link
			if(language.equalsIgnoreCase("English_US")||language.equalsIgnoreCase("English_IR")||language.equalsIgnoreCase("English_UK"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Reset Password' or @text='RESET PASSWORD']" , testCase,25,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Reset Password' or @text='RESET PASSWORD ']")).click();
					Keyword.ReportStep_Pass(testCase , "Click on Reset Password button.");
				}
				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);

				// Verify Expired Link Message
				if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'This Reset Password Link has Expired')]" , testCase,25,false))
				{

					Keyword.ReportStep_Pass(testCase , "Expired Link Message Verfied Successfully.");
				}

			}
			else if(language.equalsIgnoreCase("French_CA")||language.equalsIgnoreCase("French_SUI")||language.equalsIgnoreCase("French_BE"))
				{

				try {
				List<WebElement> timeList = MobileUtils.getMobElements(testCase,"XPATH", "//*[contains(@text,'initialiser') and @clickable='true']" );
				if (timeList != null)
				{
				timeList.get(0).click();
					}
				else
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'initialiser')")).click();
				}
				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);

				// Verify Expired Link Message
				if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'This Reset Password Link has Expired')]" , testCase,25,false))
				{

					Keyword.ReportStep_Pass(testCase , "Expired Link Message Verfied Successfully.");
				}

				} catch (Exception e) {
				}


				//return false;
				}
			else if(language.equalsIgnoreCase("Dutch_BE")||language.equalsIgnoreCase("Dutch_SUI"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Wachtwoord Resetten']" , testCase,25,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Wachtwoord Resetten']")).click();
					Keyword.ReportStep_Pass(testCase , "Click on Reset Password button.");
				}
				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);

				// Verify Expired Link Message
				if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'This Reset Password Link has Expired')]" , testCase,25,false))
				{

					Keyword.ReportStep_Pass(testCase , "Expired Link Message Verfied Successfully.");
				}
			}
			else if(language.contains("Portuguese"))
			{
			List<WebElement> timeList;
			try
			{
				if(language.equalsIgnoreCase("PortugueseBR"))
				{
					timeList = MobileUtils.getMobElements(testCase,"XPATH", "//*[contains(@text='Redefinir senha') and @clickable='true']" );
				}
				else
				{
		        timeList = MobileUtils.getMobElements(testCase,"XPATH", "//*[contains(@text,'Repor Palavra') and @clickable='true']" );
				}
				if (timeList != null)
				{
					timeList.get(0).click();
				}
				else
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Repor Palavra')")).click();
				}

				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);

				// Verify Expired Link Message
				if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'This Reset Password Link has Expired')]" , testCase,25,false))
				{

					Keyword.ReportStep_Pass(testCase , "Expired Link Message Verfied Successfully.");
				}

			} catch (Exception e) { }
			}
			else if(language.equalsIgnoreCase("Spanish")||language.equalsIgnoreCase("Spanish_US")||language.equalsIgnoreCase("Spanish_Chile")||language.equalsIgnoreCase("Spanish_Colombia")||language.equalsIgnoreCase("Spanish_Peru")||language.equalsIgnoreCase("Spanish_Panama")||language.equalsIgnoreCase("Spanish_Costarica")||language.equalsIgnoreCase("Spanish_Argentina")||language.equalsIgnoreCase("Spanish_Mexico"))
			{
				if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'Restablecer Contrase')and @clickable='true']" , testCase,25,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[contains(@text,'Restablecer Contrase')and @clickable='true']")).click();
					Keyword.ReportStep_Pass(testCase , "Click on Reset Password button.");
				}
				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);


				// Verify Expired Link Message
				if(MobileUtils.isMobElementExists("XPATH" , "//*[contains(@text,'This Reset Password Link has Expired')]" , testCase,25,false))
				{

					Keyword.ReportStep_Pass(testCase , "Expired Link Message Verfied Successfully.");
				}
			}
		}
		catch(Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
		}
		finally
		{
			LoginScreen l=new LoginScreen(testCase);
			l.RunBackground(testCase, 0);
		}
	}
		else
		{
			try
			{
				CustomDriver driver = testCase.getMobileDriver();
				HashMap<String, String> settings = new HashMap<>();
				settings.put("name", "Safari");
				try {
					driver.executeScript("mobile:application:open", settings);
				} catch (Exception e) {
					FrameworkGlobalVariables.logger4J.logWarn("Launch Setting App: App is already open.");
				}

				Keyword.ReportStep_Pass(testCase , "Safari browser is open.");


				if(MobileUtils.isMobElementExists("XPATH" , "//*[@name='URL']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).click();

					testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).sendKeys("https://www.guerrillamail.com");

					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");

				}
				Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");

				MobileUtils.isMobElementExists("id" , "xyz" , testCase,25,false);

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Click to Edit']")).click();
				Keyword.ReportStep_Pass(testCase , "Click email field to set the email.");
				try {
					Thread.sleep(2000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}


				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).click();
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).clear();

				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).sendKeys(inputs.getInputValue("USERID").toString());


				testCase.getMobileDriver().findElement(By.xpath("//*[@value='sharklasers.com']")).click();
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypePickerWheel")).sendKeys("grr.la");

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Done']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Set']")).click();

				Keyword.ReportStep_Pass(testCase , "Email id is set to "+inputs.getInputValue("USERID").toString());
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='demohomessupport@demo.com']")).click();

				Dimension dimensions = testCase.getMobileDriver().manage().window().getSize();

				TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
				touchAction.press(point(10, (int) (dimensions.getHeight() * .5)))
				.moveTo(point(0, (int) (dimensions.getHeight() * -.4))).release().perform();

				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Reset Password']")).click();
				Keyword.ReportStep_Pass(testCase , "Click on reset password button.");
				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='New Password']")).click();
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='New Password']")).sendKeys(inputs.getInputValue("NEWPASSWORD"));
				MobileUtils.hideKeyboardIOS(driver, "return");
				Keyword.ReportStep_Pass(testCase , "Set new password i.e."+inputs.getInputValue("NEWPASSWORD"));
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Re-enter Password']")).click();
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Re-enter Password']")).sendKeys(inputs.getInputValue("NEWPASSWORD"));
				Keyword.ReportStep_Pass(testCase , "Confirm new password i.e."+inputs.getInputValue("NEWPASSWORD"));
				MobileUtils.hideKeyboardIOS(driver, "return");
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Change Password']")).click();
				Keyword.ReportStep_Pass(testCase , "Click on change button and successfully change the password.");

				Thread.sleep(2000);

			}catch(Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			}
			finally
			{
				testCase.getMobileDriver().launchApp();
			}

		}
		return flag;
}


public static void VerifyGuarillaEmail(TestCases testCase, TestCaseInputs inputs,String emailstring) {
	String email = emailstring;

	if(MobileUtils.isRunningOnAndroid(testCase))
	{
		try
		{
			Activity activity = new Activity("com.android.chrome","com.google.android.apps.chrome.Main");
			((AndroidDriver<MobileElement>) testCase.getMobileDriver()).startActivity(activity);

			Keyword.ReportStep_Pass(testCase , "Chrome browser is open.");

			if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Search or type web address']" , testCase,10,false))
			{
				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Search or type web address']")).sendKeys("https://www.guerrillamail.com");

				List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.widget.TextView']"));
				for(MobileElement temp : saq)
				{
					if(temp.getText().equals("https://www.guerrillamail.com"))
					{
						temp.click();
						break;
					}
				}
			}



			Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");
				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
			Thread.sleep(5000);
			testCase.getMobileDriver().findElement(By.xpath("//*[@text='Click to Edit']")).click();
			Thread.sleep(2000);
			try {
				testCase.getMobileDriver().findElement(By.id("inbox-id")).clear();
			} catch (Exception e) {
			}
			try {
				testCase.getMobileDriver().findElement(By.id("inbox-id")).sendKeys();

			} catch (Exception e) {
			}
			try {
				testCase.getMobileDriver().findElement(By.id("inbox-id")).clear();

			} catch (Exception e) {
			}
			try {
				testCase.getMobileDriver().findElement(By.id("inbox-id")).sendKeys(email);

			} catch (Exception e) {
			}
			Thread.sleep(5000);
			testCase.getMobileDriver().findElement(By.xpath("//*[@class='android.widget.Spinner']")).click();

			testCase.getMobileDriver().findElement(By.xpath("//*[@text='grr.la']")).click();

			testCase.getMobileDriver().findElement(By.xpath("//*[@text='Set']")).click();

			List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View' and @index='1']"));
			int i=0;
			while (saq==null&&i<5)
			{
				Thread.sleep(1000);
				saq = testCase.getMobileDriver().findElements(By.xpath("//*[@class='android.view.View']"));
			}
			i=0;
			while(i<=saq.size())
			{
				if(saq.get(i).getText().contains("@demohome"))
				{
					saq.get(i).click();
					break;
				}
				i++;
			}

			CreateAccountScreen.SwipeToActivateAccount(testCase);
			Thread.sleep(2000);
			MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);

			if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Activate Account 'or @text='ACTIVATE ACCOUNT ']" , testCase,25,false))
			{
				testCase.getMobileDriver().findElement(By.xpath("//*[@text='Activate Account 'or @text='ACTIVATE ACCOUNT ']")).click();
				Keyword.ReportStep_Pass(testCase , "Click on Activate Account button.");
			}
			//Get Verification Code from browser and store
		}
		catch(Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
		}
		finally
		{
			//testCase.getMobileDriver().launchApp();
			MobileUtils.minimizeApp(testCase, 10);
		}
	}
	else
	{
		try{

			CustomDriver driver = testCase.getMobileDriver();

			HashMap<String, String> settings = new HashMap<>();
			settings.put("name", "Safari");
			try {
				driver.executeScript("mobile:application:open", settings);
			} catch (Exception e) {
				FrameworkGlobalVariables.logger4J.logWarn("Launch Setting App: App is already open.");
			}

			Keyword.ReportStep_Pass(testCase , "Safari browser is open.");

			if(MobileUtils.isMobElementExists("XPATH" , "//*[@name='URL']" , testCase,10,false))
			{
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).sendKeys("https://www.guerrillamail.com");

				MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
				Thread.sleep(7000);

			}
			Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");

			MobileUtils.isMobElementExists("id" , "xyz" , testCase,25,false);

			if(MobileUtils.isMobElementExists("XPATH", "//*[@name='Click to Edit']", testCase))
			{
				MobileUtils.clickOnElement(testCase, "XPATH", "//*[@name='Click to Edit']");
			}
			//testCase.getMobileDriver().findElement(By.xpath("//*[@name='Click to Edit']")).click();
			Keyword.ReportStep_Pass(testCase , "Click email field to set the email.");
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}


			Thread.sleep(2000);
			testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).click();
			testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).clear();

			testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).sendKeys(email);


			testCase.getMobileDriver().findElement(By.xpath("//*[@value='sharklasers.com']")).click();
			testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypePickerWheel")).sendKeys("grr.la");

			testCase.getMobileDriver().findElement(By.xpath("//*[@name='Done']")).click();

			testCase.getMobileDriver().findElement(By.xpath("//*[@name='Set']")).click();

			Thread.sleep(7000);

			Keyword.ReportStep_Pass(testCase , "Email id is set to "+email);


			Thread.sleep(7000);
			testCase.getMobileDriver().findElement(By.xpath("//*[@name='demohomessupport@demo.com']")).click();

			Dimension dimensions = testCase.getMobileDriver().manage().window().getSize();

			TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
			touchAction.press(point(10, (int) (dimensions.getHeight() * .5)))
			.moveTo(point(0, (int) (dimensions.getHeight() * -.4))).release().perform();

			Thread.sleep(2000);
			testCase.getMobileDriver().findElement(By.xpath("//*[@name='Activate Account']")).click();
			Keyword.ReportStep_Pass(testCase , "Click on Activate Account button.");
			MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
			Keyword.ReportStep_Pass(testCase , "Successfully activate account");
			Thread.sleep(2000);


			//Get Verification Code from browser and storr

		}catch(Exception e)
		{
			Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
		}
		finally
		{
			//testCase.getMobileDriver().launchApp();
			MobileUtils.minimizeApp(testCase, 10);
		}
	}





}

	public static void CreateAccountGuerrila(TestCases testCase, TestCaseInputs inputs,String email) {
		if(MobileUtils.isRunningOnAndroid(testCase))
		{

			try
			{

		  Activity activity = new
		  Activity("com.android.chrome","com.google.android.apps.chrome.Main");
		  ((AndroidDriver<MobileElement>)
		  testCase.getMobileDriver()).startActivity(activity);

		  Keyword.ReportStep_Pass(testCase , "Chrome browser is open.");

		  if(MobileUtils.isMobElementExists("XPATH" ,
		  "//*[@text='Search or type web address']" , testCase,10,false)) {
		  testCase.getMobileDriver().findElement(By.
		  xpath("//*[@text='Search or type web address']")).click();

		  testCase.getMobileDriver().findElement(By.
		  xpath("//*[@text='Search or type web address']")).sendKeys(
		  "https://www.guerrillamail.com");

		  List<MobileElement> saq = testCase.getMobileDriver().findElements(By.xpath(
		  "//*[@class='android.widget.TextView']")); for(MobileElement temp : saq) {
		  if(temp.getText().equals("https://www.guerrillamail.com")) { temp.click();
		  break; } } }



		  Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");
		  MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
		  Thread.sleep(5000);
		  testCase.getMobileDriver().findElement(By.xpath("//*[@text='Click to Edit']")
		  ).click(); Thread.sleep(2000); try {
		  testCase.getMobileDriver().findElement(By.xpath(
		  "//*[@class='android.widget.EditText']")).clear(); } catch (Exception e) { }
		  try { testCase.getMobileDriver().findElement(By.xpath(
		  "//*[@class='android.widget.EditText']")).sendKeys();

		  } catch (Exception e) { } try {
		  testCase.getMobileDriver().findElement(By.xpath(
		  "//*[@class='android.widget.EditText']")).clear();

		  } catch (Exception e) { } try {
		  testCase.getMobileDriver().findElement(By.xpath(
		  "//*[@class='android.widget.EditText']")).sendKeys(email);

		  } catch (Exception e) { } Thread.sleep(5000);

		  try { if(MobileUtils.isMobElementExists("XPATH", "//*[@text='Set']",
				  testCase)) {
				  testCase.getMobileDriver().findElement(By.xpath("//*[@text='Set']")).click();
				  } } catch (Exception e) {

				  }

 Dimension dimensions =
		  testCase.getMobileDriver().manage().window().getSize();
		  testCase.getMobileDriver().swipe( (int) (dimensions.getWidth() * .5), (int)
		  (dimensions.getHeight() * .5), (int) (dimensions.getWidth() * .5), (int)
		  (dimensions.getHeight() * .4));

		  List<MobileElement> saq = testCase.getMobileDriver().findElements(By.
		  xpath("//*[@class='android.view.View' and @index='1']")); int i=0; while
		  (saq==null&&i<5) { Thread.sleep(1000); saq =
		  testCase.getMobileDriver().findElements(By.xpath(
		  "//*[@class='android.view.View']")); } i=0; while(i<=saq.size()) {
		  if(saq.get(i).getText().contains("@demohome")) { saq.get(i).click();
		  break; } i++; }

				CreateAccountScreen.SwipeToActivateAccount(testCase);
				Thread.sleep(2000);
				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);

				if(MobileUtils.isMobElementExists("XPATH" , "//*[@text='Activate Account 'or @text='ACTIVATE ACCOUNT ']" , testCase,25,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@text='Activate Account 'or @text='ACTIVATE ACCOUNT ']")).click();
					Keyword.ReportStep_Pass(testCase , "Click on Activate Account button.");
				}
				else
				{

	          String verificationCode =getVerificationCode(testCase, inputs);

	          inputs.setInputValue(GlobalVariables.VERIFICATIONCODE, verificationCode, false);


				}
			}

			catch(Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			}
			finally
			{

				LoginScreen l=new LoginScreen(testCase);
				l.RunBackground(testCase, 0);
			}
		}
		else
		{
			try{

				CustomDriver driver = testCase.getMobileDriver();

				HashMap<String, String> settings = new HashMap<>();
				settings.put("name", "Safari");
				try {
					driver.executeScript("mobile:application:open", settings);
				} catch (Exception e) {
					FrameworkGlobalVariables.logger4J.logWarn("Launch Setting App: App is already open.");
				}

				Keyword.ReportStep_Pass(testCase , "Safari browser is open.");

				if(MobileUtils.isMobElementExists("XPATH" , "//*[@name='URL']" , testCase,10,false))
				{
					testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).click();

					testCase.getMobileDriver().findElement(By.xpath("//*[@name='URL']")).sendKeys("https://www.guerrillamail.com");

					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Go");
					Thread.sleep(7000);

				}
				Keyword.ReportStep_Pass(testCase , "Open guerrilla mail web page.");

				MobileUtils.isMobElementExists("id" , "xyz" , testCase,25,false);

				if(MobileUtils.isMobElementExists("XPATH", "//*[@name='Click to Edit']", testCase))
				{
					MobileUtils.clickOnElement(testCase, "XPATH", "//*[@name='Click to Edit']");
				}
				//testCase.getMobileDriver().findElement(By.xpath("//*[@name='Click to Edit']")).click();
				Keyword.ReportStep_Pass(testCase , "Click email field to set the email.");
				try {
					Thread.sleep(2000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}


				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).click();
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).clear();

				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypeTextField")).sendKeys(email);


				testCase.getMobileDriver().findElement(By.xpath("//*[@value='sharklasers.com']")).click();
				testCase.getMobileDriver().findElement(By.xpath("//XCUIElementTypePickerWheel")).sendKeys("grr.la");

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Done']")).click();

				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Set']")).click();

				Thread.sleep(7000);

				Keyword.ReportStep_Pass(testCase , "Email id is set to "+email);


				Thread.sleep(7000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='demohomessupport@demo.com']")).click();

				Dimension dimensions = testCase.getMobileDriver().manage().window().getSize();

				TouchAction touchAction = new TouchAction(testCase.getMobileDriver());
				touchAction.press(point(10, (int) (dimensions.getHeight() * .5)))
				.moveTo(point(0, (int) (dimensions.getHeight() * -.4))).release().perform();

				Thread.sleep(2000);
				testCase.getMobileDriver().findElement(By.xpath("//*[@name='Activate Account']")).click();
				Keyword.ReportStep_Pass(testCase , "Click on Activate Account button.");
				MobileUtils.isMobElementExists("id" , "rohal" , testCase,25,false);
				Keyword.ReportStep_Pass(testCase , "Successfully activate account");
				Thread.sleep(2000);

			}catch(Exception e)
			{
				Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, e.getMessage());
			}
			finally
			{
				testCase.getMobileDriver().launchApp();
			}
		}


	}


	 public static boolean VerifyChangePasswordLocalNewFlow(TestCases testCase, String language, TestCaseInputs inputs) {


			boolean flag=true;
			WebElement tap =null, tap1 =null,tap2 =null;
			SecondaryCardSettings sc=new SecondaryCardSettings(testCase,language);

			String DiffNewpwd = "Password12";
			String DiffVerifyNewpwd = "Password1";
			String pwd=inputs.getInputValue("PASSWORD").toString();

			if(sc.isChangePasswordOptionVisible(5))
			{
				sc.clickOnChangePasswordOption();
			}
			
			//------------------WithoutOldpwd-----------------------
			sc.isChangePasswordOptionVisible(5);
				 tap =sc.getTextStatusoldpwd();
				
				 
				 if(sc. isContinueButton1Visible(1)){
					sc.clickOnContinueButton1(); 
				 }
				
					
				 flag=flag && optikUtils.VerifyScreenLocalization(testCase, "WithoutOldpwd");

				//------------------VerifySameOldNewPwd-----------------------
					tap.clear();
					tap.sendKeys(pwd);
					MobileUtils.hideKeyboard(testCase.getMobileDriver());
					if(sc. isContinueButton1Visible(1)){
						sc.clickOnContinueButton1(); 
					 }sc.isChangePasswordOptionVisible(5);
					 tap1 =sc.getTextStatusnewpwd();
					 tap2 =sc.getTextStatusverifypwd();

					
				tap1.clear();
				tap1.sendKeys(pwd);
				MobileUtils.hideKeyboard(testCase.getMobileDriver());

				tap2.clear();
				tap2.sendKeys(pwd);
				MobileUtils.hideKeyboard(testCase.getMobileDriver());

				 if(sc. isContinueButton1Visible(1)){
						sc.clickOnContinueButton1(); 
					 }
				sc.isChangePasswordOptionVisible(5);
				flag=true;
				flag=flag && optikUtils.VerifyScreenLocalization(testCase, "VerifySameOldNewPwd");
				
			//------------------withoutNewPwd-----------------------
			       	 
				tap2.clear();
				tap2.sendKeys(pwd);
				MobileUtils.hideKeyboard(testCase.getMobileDriver());
				tap1.clear();
				MobileUtils.hideKeyboard(testCase.getMobileDriver());

				tap1.clear();
				MobileUtils.hideKeyboard(testCase.getMobileDriver());

				if(sc. isContinueButton1Visible(1)){
					sc.clickOnContinueButton1(); 
				 }
				sc.isChangePasswordOptionVisible(5);
				flag=true;
				flag=flag && optikUtils.VerifyScreenLocalization(testCase, "withoutNewPwd");
				
			 //------------------withoutNewPwd-----------------------
				tap1.clear();
				tap1.sendKeys(DiffNewpwd);
				MobileUtils.hideKeyboard(testCase.getMobileDriver());

				tap2.clear();
				tap2.sendKeys(DiffVerifyNewpwd);
				MobileUtils.hideKeyboard(testCase.getMobileDriver());

				if(sc. isContinueButton1Visible(1)){
					sc.clickOnContinueButton1(); 
				 }
				sc.isChangePasswordOptionVisible(5);
				flag=true;
				flag=flag && optikUtils.VerifyScreenLocalization(testCase, "DiffNewAndVerify");

				if(sc. iscancelButton1Visible(1)){
					sc.clickOncancelButton1();
				}
				sc.clickOnBackButton();
			


			

			return flag;
		}
	 public static boolean VerifyCreateAccountForNegativeScenariosNewFlow(TestCases testCase, TestCaseInputs inputs) {
			
			boolean flag=true;
			Random rn = new Random();
			int value = rn.nextInt();
			String email="";
			LoginScreen ls=new LoginScreen(testCase);
			EditAddressLocation eal=new EditAddressLocation(testCase);
			CreateAccountScreen cs=new CreateAccountScreen(testCase);
			ChangeCountryScreen ccs= new ChangeCountryScreen(testCase);
			MobileUtilsLocal l=new MobileUtilsLocal();
			WebElement tap =null;
			tap =cs.getLastNameID();
			if(ls.isCreateAccountVisible()){
				ls.navigateToCreateAccountScreen();
            //---------------First Name Empty Error Msg-------------  
				if(cs.setLastNameIDValue("xyz"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  :Successfully Set Last Name. : Test");
				}
				else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Last Name.");
					flag = false;
				}
				if(cs.isEmailIDLabelVisible())
				{
				email="rn"+value+"@grr.la";
				inputs.setInputValue("EmailAddress", email, false);
				if (cs.setEmailAddressIDValue(email)) {
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
					}
					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Email Address set to -"+email);
				} else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set Email Address.");
					flag = false;
				}
				}

				if(cs.isSendVerificationButtonVisible())
				{
				cs.clickOnSendVerificationButton();

				if(!MobileUtils.isRunningOnAndroid(testCase))
				{
					MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
				}
				}
				if(cs.isFirstNameErrorFieldVisible())
				{
					Keyword.ReportStep_Pass(testCase,
							"Verified Successfully the first name error i.e. "+cs.getFirstNameErrorFieldPopup());
				}
				else
				{
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify first name error.");
					flag = false;
				}
        //---------------Last Name Empty Error Msg-------------  
				tap.clear();
          if(cs.setFirstNameIDValue("ABC"))
				{
					if (MobileUtils.isRunningOnAndroid(testCase)) {
						MobileUtils.hideKeyboard(testCase.getMobileDriver());
					}
					else {
						MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");						
					}

					Keyword.ReportStep_Pass(testCase,
							"Create Account  : Successfully Set First Name : Automation ");
				}
				else {
					Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
							"Create Account : Not able to set First Name.");
					flag = false;
				}	
          
						if(cs.isEmailIDLabelVisible())
						{
						email="rn"+value+"@grr.la";
						inputs.setInputValue("EmailAddress", email, false);
						if (cs.setEmailAddressIDValue(email)) {
							if (MobileUtils.isRunningOnAndroid(testCase)) {
								MobileUtils.hideKeyboard(testCase.getMobileDriver());
							}else {
								MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Next");
							}
							Keyword.ReportStep_Pass(testCase,
									"Create Account  : Email Address set to -"+email);
						} else {
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Create Account : Not able to set Email Address.");
							flag = false;
						}
						}


						if(cs.isSendVerificationButtonVisible())
						{
						cs.clickOnSendVerificationButton();

						if(!MobileUtils.isRunningOnAndroid(testCase))
						{
							MobileUtils.hideKeyboardIOS(testCase.getMobileDriver(), "Done");
						}

						}

						if(cs.isLastNameErrorFieldVisible())
						{
							Keyword.ReportStep_Pass(testCase,
									"Verified Successfully the Last name error i.e. "+cs.getLastNameErrorFieldPopup());
						}
						else
						{
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE, "Unable to verify Last name error.");
							flag = false;
						}
		}
			return flag;}
	 
	 
	 public static boolean createPasscodeAndVerify(TestCases testCase, TestCaseInputs inputs,String exampleData) {
		 boolean flag=true;

			flag = flag && optikUtils.CreatePasscodeAfterLoginPopUp(testCase , inputs);
			if(exampleData.equalsIgnoreCase("create"))
			{
				flag = flag && optikUtils.VerifyPasscodeScreen(testCase , inputs,true, false);
				if(inputs.isInputAvailable("LANGUAGE")&& !MobileUtils.isRunningOnAndroid(testCase))
				{
					flag = flag && optikUtils.verifyLoginSuccessfulLocal(testCase, inputs);
				}else {
					flag = flag && optikUtils.verifyLoginSuccessful(testCase, inputs);
				}
			
				Dashboard d=new Dashboard(testCase);
				try {
					if(!(d.isAddNewDeviceHeaderDisplayed(3) || d.isGlobalDrawerButtonVisible(3)|| d.areDevicesVisibleOnDashboard()))
					{
						MobileUtils.pressBackButton(testCase);
						CoachMarkUtils.closeCoachMarks(testCase);
						if(!(d.isAddNewDeviceHeaderDisplayed(3) || d.isGlobalDrawerButtonVisible(3)|| d.areDevicesVisibleOnDashboard()))
						{
							testCase.getMobileDriver().launchApp();
							optikUtils.VerifyPasscodeScreen(testCase , inputs,true, false);
							CoachMarkUtils.closeCoachMarks(testCase);
							
						}
					}
				}catch(Exception e)
				{
					
				}
			
			}
			else
			{
				flag = flag && optikUtils.VerifyPasscodeScreen(testCase , inputs,false, false);
				flag = flag && optikUtils.verifyLoginSuccessful(testCase, inputs);
			}
			
		return flag;
		 
	 }
	 
	 
	 public static boolean setPasscode(TestCases testCase, TestCaseInputs inputs,String exampleData) {
		 boolean flag=true;
		 try {
				inputs.setInputValue(GlobalVariables.SHOWKEYBOARD, "ON", false);
				
				if (exampleData.equalsIgnoreCase("enable")) {
					CHILUtil chUtil = new CHILUtil(inputs);
					if (chUtil.getConnection()) {
						int result = chUtil.TurnoffOnPasscode(inputs,true);
						if (result == 200) {
							Keyword.ReportStep_Pass(testCase,
									"Activate passcode Using CHIL : Successfully enabled passcode using CHIL");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Activate Passcode UsingCHIL : Failed to enabled passcode using CHIL");
						}
					}
				} else if (exampleData.equalsIgnoreCase("disable")) {
					CHILUtil chUtil = new CHILUtil(inputs);
					if (chUtil.getConnection()) {
						int result = chUtil.TurnoffOnPasscode(inputs,false);
						if (result == 200) {
							Keyword.ReportStep_Pass(testCase,
									"Activate passcode Using CHIL : Successfully disabled passcode using CHIL");
						} else {
							flag = false;
							Keyword.ReportStep_Fail(testCase, FailType.FUNCTIONAL_FAILURE,
									"Activate Passcode UsingCHIL : Failed to disable passcode using CHIL");
						}
					}
				}
				
			} catch (Exception e) {
				flag = false;
				Keyword.ReportStep_Fail_WithOut_ScreenShot(testCase, FailType.FUNCTIONAL_FAILURE,"Error occurred : " + e.getMessage());
			}
		 
		 return flag;
		 
	 }
	 
	 
	 
	 

}
